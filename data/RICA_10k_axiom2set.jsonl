{"original": ["Material(A, paper) and Material(B, metal), so More(crumple(A), crumple(B))", ["A is made out of paper and B is made out of metal, so A is more likely to crumple than B"]], "negated": ["Material(A, paper) and Material(B, metal), so not Less(crumple(A), crumple(B))", ["A is made out of paper and B is made out of metal, so A is not less likely to crumple than B"]], "asymmetric_premise": ["Material(B, paper) and Material(A, metal), so Less(crumple(A), crumple(B))", ["B is made of paper, A is made of metal, so A is less likely to crumple than B"]], "asymmetric_conclusion": ["Material(A, paper) and Material(B, metal), so Less(crumple(B), crumple(A))", ["A is made of paper, B is made of metal, so B is less likely to crumple than A"]], "negated_asymmetric_premise": ["Material(B, paper) and Material(A, metal), so not More(crumple(A), crumple(B))", ["B is made out of paper and A is made out of metal, so A is not more likely to crumple than B"]], "negated_asymmetric_conclusion": ["Material(A, paper) and Material(B, metal), so not More(crumple(B), crumple(A))", ["A is made out of paper and B is made out of metal, so B is not more likely to crumple than A"]]}
{"original": ["Material(A, glass) and Material(B, ferment milk), so Less(good for drink(A), good for drink(B))", ["A is made of glass, B is made of milk, so A is less good for drink than B"]], "negated": ["Material(A, glass) and Material(B, ferment milk), so not More(good for drink(A), good for drink(B))", ["A is made of glass, B is made of milk, so A is not more good for drink than B"]], "asymmetric_premise": ["Material(B, glass) and Material(A, ferment milk), so More(good for drink(A), good for drink(B))", ["B is made of glass, A is made of milk, so A is more good for drink than B"]], "asymmetric_conclusion": ["Material(A, glass) and Material(B, ferment milk), so More(good for drink(B), good for drink(A))", ["A is made of glass, B is made of milk, so B is more good for drink than A"]], "negated_asymmetric_premise": ["Material(B, glass) and Material(A, ferment milk), so not Less(good for drink(A), good for drink(B))", ["B is made of glass, A is made of milk, so A is not less good for drink than B"]], "negated_asymmetric_conclusion": ["Material(A, glass) and Material(B, ferment milk), so not Less(good for drink(B), good for drink(A))", ["A is made of glass, B is made of milk, so B is not less good for drink than A"]]}
{"original": ["Material(A, paper) and Material(B, plastic), so More(fragile(A), fragile(B))", ["A is made out of paper and B is made out of plastic, so A is more fragile than B"]], "negated": ["Material(A, paper) and Material(B, plastic), so not Less(fragile(A), fragile(B))", ["A is made out of paper and B is made out of plastic, so A is not less fragile than B"]], "asymmetric_premise": ["Material(B, paper) and Material(A, plastic), so Less(fragile(A), fragile(B))", ["B is made out of paper and A is made out of plastic, so A is less fragile than B"]], "asymmetric_conclusion": ["Material(A, paper) and Material(B, plastic), so Less(fragile(B), fragile(A))", ["A is made out of paper and B is made out of plastic, so B is less fragile than A"]], "negated_asymmetric_premise": ["Material(B, paper) and Material(A, plastic), so not More(fragile(A), fragile(B))", ["B is made out of paper and A is made out of plastic, so A is not more fragile than B"]], "negated_asymmetric_conclusion": ["Material(A, paper) and Material(B, plastic), so not More(fragile(B), fragile(A))", ["A is made out of paper and B is made out of plastic, so B is not more fragile than A"]]}
{"original": ["Material(A, paper) and Material(B, gold), so More(fragile(A), fragile(B))", ["A is made of paper, B is made of gold, so A is more fragile than B"]], "negated": ["Material(A, paper) and Material(B, gold), so not Less(fragile(A), fragile(B))", ["A is made of paper, B is made of gold, so A is not less fragile than B"]], "asymmetric_premise": ["Material(B, paper) and Material(A, gold), so Less(fragile(A), fragile(B))", ["B is made of paper, A is made of gold, so A is less fragile than B"]], "asymmetric_conclusion": ["Material(A, paper) and Material(B, gold), so Less(fragile(B), fragile(A))", ["A is made of paper, B is made of gold, so B is less fragile than A"]], "negated_asymmetric_premise": ["Material(B, paper) and Material(A, gold), so not More(fragile(A), fragile(B))", ["B is made of paper, A is made of gold, so A is not more fragile than B"]], "negated_asymmetric_conclusion": ["Material(A, paper) and Material(B, gold), so not More(fragile(B), fragile(A))", ["A is made of paper, B is made of gold, so B is not more fragile than A"]]}
{"original": ["Grade(A, twelfth) and Grade(B, sixth), so More(Old(A), Old(B))", ["A is in the twelfth grade, B is in the sixth grade, so A is more old than B"]], "negated": ["Grade(A, twelfth) and Grade(B, sixth), so not Less(Old(A), Old(B))", ["A is in the twelfth grade, B is in the sixth grade, so A is not less old than B"]], "asymmetric_premise": ["Grade(B, twelfth) and Grade(A, sixth), so Less(Old(A), Old(B))", ["B is in the twelfth grade, A is in the sixth grade, so A is less old than B"]], "asymmetric_conclusion": ["Grade(A, twelfth) and Grade(B, sixth), so Less(Old(B), Old(A))", ["A is in the twelfth grade, B is in the sixth grade, so B is less old than A"]], "negated_asymmetric_premise": ["Grade(B, twelfth) and Grade(A, sixth), so not More(Old(A), Old(B))", ["B is in the twelfth grade, A is in the sixth grade, so A is not more old than B"]], "negated_asymmetric_conclusion": ["Grade(A, twelfth) and Grade(B, sixth), so not More(Old(B), Old(A))", ["A is in the twelfth grade, B is in the sixth grade, so B is not more old than A"]]}
{"original": ["Grade(A, eleventh) and Grade(B, seventh), so More(Old(A), Old(B))", ["A is in the eleventh grade, B is in the seventh grade, so A is more old than B"]], "negated": ["Grade(A, eleventh) and Grade(B, seventh), so not Less(Old(A), Old(B))", ["A is in the eleventh grade, B is in the seventh grade, so A is not less old than B"]], "asymmetric_premise": ["Grade(B, eleventh) and Grade(A, seventh), so Less(Old(A), Old(B))", ["B is in the eleventh grade, A is in the seventh grade, so A is less old than B"]], "asymmetric_conclusion": ["Grade(A, eleventh) and Grade(B, seventh), so Less(Old(B), Old(A))", ["A is in the eleventh grade, B is in the seventh grade, so B is less old than A"]], "negated_asymmetric_premise": ["Grade(B, eleventh) and Grade(A, seventh), so not More(Old(A), Old(B))", ["B is in the eleventh grade, A is in the seventh grade, so A is not more old than B"]], "negated_asymmetric_conclusion": ["Grade(A, eleventh) and Grade(B, seventh), so not More(Old(B), Old(A))", ["A is in the eleventh grade, B is in the seventh grade, so B is not more old than A"]]}
{"original": ["Grade(A, third) and Grade(B, second), so More(Old(A), Old(B))", ["A is in the third grade, B is in the second grade, so A is more old than B"]], "negated": ["Grade(A, third) and Grade(B, second), so not Less(Old(A), Old(B))", ["A is in the third grade, B is in the second grade, so A is not less old than B"]], "asymmetric_premise": ["Grade(B, third) and Grade(A, second), so Less(Old(A), Old(B))", ["B is in the third grade, A is in the second grade, so A is less old than B"]], "asymmetric_conclusion": ["Grade(A, third) and Grade(B, second), so Less(Old(B), Old(A))", ["A is in the third grade, B is in the second grade, so B is less old than A"]], "negated_asymmetric_premise": ["Grade(B, third) and Grade(A, second), so not More(Old(A), Old(B))", ["B is in the third grade, A is in the second grade, so A is not more old than B"]], "negated_asymmetric_conclusion": ["Grade(A, third) and Grade(B, second), so not More(Old(B), Old(A))", ["A is in the third grade, B is in the second grade, so B is not more old than A"]]}
{"original": ["Location(A, northern australia) and Location(B,  oslo, norway), so More(living in hot condition(A), living in hot condition(B))", ["A is living in northern australia, B is living in oslo, norway, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, northern australia) and Location(B,  oslo, norway), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in northern australia, B is living in oslo, so A is not less likely to be living in a hot condition than B"]], "asymmetric_premise": ["Location(B, northern australia) and Location(A,  oslo, norway), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in northern australia, A is living in oslo, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, northern australia) and Location(B,  oslo, norway), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in northern australia, B is living in oslo, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, northern australia) and Location(A,  oslo, norway), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in northern australia, A is living in oslo, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, northern australia) and Location(B,  oslo, norway), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in northern australia, B is living in oslo, so B is not likely living in a hotter condition than A."]]}
{"original": ["Location(A,dome c, antarctica) and Location(B,  colombia), so More(living in cold condition(A), living in cold condition(B))", ["A is living in dome c, so A is likely living in a colder condition than B, so A is likely living in a colder condition than B"]], "negated": ["Location(A,dome c, antarctica) and Location(B,  colombia), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the dome c, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B,dome c, antarctica) and Location(A,  colombia), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the dome c, so A is likely living in a less cold condition than B"]], "asymmetric_conclusion": ["Location(A,dome c, antarctica) and Location(B,  colombia), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the dome c, so B is likely living in the colombia, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B,dome c, antarctica) and Location(A,  colombia), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the dome c, so A is not living in a colder condition than B"]], "negated_asymmetric_conclusion": ["Location(A,dome c, antarctica) and Location(B,  colombia), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the dome c, antarctica, B is living in the colombia, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, northern siberia, russia) and Location(B,  northern australia), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the northern siberia, B is living in the northern australia, so A is likely living in a colder condition than B."]], "negated": ["Location(A, northern siberia, russia) and Location(B,  northern australia), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the northern siberia, B is living in the northern australia, so A is not living in a less cold condition than B."]], "asymmetric_premise": ["Location(B, northern siberia, russia) and Location(A,  northern australia), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the northern siberia, A is living in the northern australia, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, northern siberia, russia) and Location(B,  northern australia), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the northern siberia, B is living in the northern australia, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, northern siberia, russia) and Location(A,  northern australia), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the northern siberia, A is living in the northern australia, so A is not likely living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, northern siberia, russia) and Location(B,  northern australia), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the northern siberia, B is living in the northern australia, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, colombia) and Location(B,  greenland), so More(living in hot condition(A), living in hot condition(B))", ["A is living in colombia, B is living in greenland, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, colombia) and Location(B,  greenland), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in colombia, B is living in the greenland, so A is not living in a less hot condition than B"]], "asymmetric_premise": ["Location(B, colombia) and Location(A,  greenland), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in colombia, A is living in greenland, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, colombia) and Location(B,  greenland), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in colombia, B is living in greenland, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, colombia) and Location(A,  greenland), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in colombia, A is living in greenland, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, colombia) and Location(B,  greenland), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in colombia, B is living in greenland, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A, angola) and Location(B,  helsinki, finland), so More(living in hot condition(A), living in hot condition(B))", ["A is living in angola, B is living in helsinki, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, angola) and Location(B,  helsinki, finland), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in angola, B is living in helsinki, so A is not living in a less hot condition than B"]], "asymmetric_premise": ["Location(B, angola) and Location(A,  helsinki, finland), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in angola, A is living in helsinki, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, angola) and Location(B,  helsinki, finland), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in angola, B is living in helsinki, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, angola) and Location(A,  helsinki, finland), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in angola, A is living in helsinki, so A is not living in a hotter condition than B"]], "negated_asymmetric_conclusion": ["Location(A, angola) and Location(B,  helsinki, finland), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in angola, B is living in helsinki, so B is not living in a hotter condition than A"]]}
{"original": ["Location(A, major parts of nordic countries in eu) and Location(B,  mauritania), so More(living in cold condition(A), living in cold condition(B))", ["A is living in major parts of the nordic countries in eu, B is living in mauritania, so A is likely living in a colder condition than B"]], "negated": ["Location(A, major parts of nordic countries in eu) and Location(B,  mauritania), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the Nordic countries, B is living in mauritania, so A is not less likely to be living in a cold condition than B"]], "asymmetric_premise": ["Location(B, major parts of nordic countries in eu) and Location(A,  mauritania), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the major parts of the nordic countries, A is living in mauritania, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, major parts of nordic countries in eu) and Location(B,  mauritania), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in major parts of the nordic countries in eu, B is living in mauritania, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, major parts of nordic countries in eu) and Location(A,  mauritania), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in major parts of the nordic countries in eu, A is living in mauritania, so A is not living in a colder condition than B"]], "negated_asymmetric_conclusion": ["Location(A, major parts of nordic countries in eu) and Location(B,  mauritania), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the Nordic countries, B is living in mauritania, so B is not likely living in a colder condition than A."]]}
{"original": ["Location(A, zambia) and Location(B,  southern alaska united states), so More(living in hot condition(A), living in hot condition(B))", ["A is living in Zambia, B is living in the southern alaska united states, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, zambia) and Location(B,  southern alaska united states), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in zambia, B is living in the southern alaska united states, so A is not living in a less hot condition than B"]], "asymmetric_premise": ["Location(B, zambia) and Location(A,  southern alaska united states), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in Zambia, A is living in the southern alaska united states, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, zambia) and Location(B,  southern alaska united states), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in Zambia, B is living in the southern alaska united states, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, zambia) and Location(A,  southern alaska united states), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in Zambia, A is living in the southern alaska united states, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, zambia) and Location(B,  southern alaska united states), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in zambia, B is living in the southern alaska united states, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A, south pole) and Location(B,  peru), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the south pole, B is living in the peru, so A is likely living in a colder condition than B."]], "negated": ["Location(A, south pole) and Location(B,  peru), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the south pole, B is living in the peru, so A is not living in a less cold condition than B."]], "asymmetric_premise": ["Location(B, south pole) and Location(A,  peru), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the south pole, A is living in the peru, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, south pole) and Location(B,  peru), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the south pole, B is living in the peru, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, south pole) and Location(A,  peru), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the south pole, A is living in the peru, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, south pole) and Location(B,  peru), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the south pole, B is living in the peru, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, guatemala) and Location(B,  helsinki, finland), so More(living in hot condition(A), living in hot condition(B))", ["A is living in guatemala, B is living in helsinki, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, guatemala) and Location(B,  helsinki, finland), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in guatemala, B is living in helsinki, so A is not living in a less hot condition than B"]], "asymmetric_premise": ["Location(B, guatemala) and Location(A,  helsinki, finland), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in guatemala, A is living in helsinki, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, guatemala) and Location(B,  helsinki, finland), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in guatemala, B is living in helsinki, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, guatemala) and Location(A,  helsinki, finland), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in guatemala, A is living in helsinki, so A is not living in a hotter condition than B"]], "negated_asymmetric_conclusion": ["Location(A, guatemala) and Location(B,  helsinki, finland), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in guatemala, B is living in helsinki, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A,north pole) and Location(B,  thailand), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the north pole, B is living in thailand, so A is likely living in a colder condition than B."]], "negated": ["Location(A,north pole) and Location(B,  thailand), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the north pole, B is living in thailand, so A is not living in a less cold condition than B."]], "asymmetric_premise": ["Location(B,north pole) and Location(A,  thailand), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the north pole, A is living in the thailand, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A,north pole) and Location(B,  thailand), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the north pole, B is living in thailand, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B,north pole) and Location(A,  thailand), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the north pole, A is living in the thailand, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A,north pole) and Location(B,  thailand), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the north pole, B is living in thailand, so B is not likely living in a colder condition than A."]]}
{"original": ["Location(A, uganda) and Location(B,  southern alaska united states), so More(living in hot condition(A), living in hot condition(B))", ["A is living in uganda, B is living in the southern alaska united states, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, uganda) and Location(B,  southern alaska united states), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in uganda, B is living in the southern alaska united states, so A is not living in a less hot condition than B."]], "asymmetric_premise": ["Location(B, uganda) and Location(A,  southern alaska united states), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in uganda, A is living in the southern alaska united states, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, uganda) and Location(B,  southern alaska united states), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in uganda, B is living in the southern alaska united states, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, uganda) and Location(A,  southern alaska united states), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in Uganda, A is living in the southern alaska united states, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, uganda) and Location(B,  southern alaska united states), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in uganda, B is living in the southern alaska united states, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A, madagascar) and Location(B,  helsinki, finland), so More(living in hot condition(A), living in hot condition(B))", ["A is living in madagascar, B is living in helsinki, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, madagascar) and Location(B,  helsinki, finland), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in madagascar, B is living in helsinki, so A is not living in a less hot condition than B"]], "asymmetric_premise": ["Location(B, madagascar) and Location(A,  helsinki, finland), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in madagascar, A is living in helsinki, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, madagascar) and Location(B,  helsinki, finland), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in madagascar, B is living in helsinki, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, madagascar) and Location(A,  helsinki, finland), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in madagascar, A is living in helsinki, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, madagascar) and Location(B,  helsinki, finland), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in madagascar, B is living in helsinki, so B is not likely living in a hotter condition than A."]]}
{"original": ["Location(A, southern alaska united states) and Location(B,  uganda), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the southern alaska united states, B is living in the uganda, so A is likely living in a colder condition than B."]], "negated": ["Location(A, southern alaska united states) and Location(B,  uganda), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the southern alaska united states, B is living in the uganda, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B, southern alaska united states) and Location(A,  uganda), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the southern alaska united states, A is living in uganda, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, southern alaska united states) and Location(B,  uganda), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the southern alaska united states, B is living in uganda, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, southern alaska united states) and Location(A,  uganda), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the southern alaska united states, A is living in uganda, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, southern alaska united states) and Location(B,  uganda), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the southern alaska united states, B is living in uganda, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, helsinki, finland) and Location(B,  kenya), so More(living in cold condition(A), living in cold condition(B))", ["A is living in helsinki, finland, so A is likely living in a colder condition than B"]], "negated": ["Location(A, helsinki, finland) and Location(B,  kenya), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in helsinki, finland, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B, helsinki, finland) and Location(A,  kenya), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in helsinki, finland, so A is likely living in a less cold condition than B"]], "asymmetric_conclusion": ["Location(A, helsinki, finland) and Location(B,  kenya), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in helsinki, fin Finland, B is living in kenya, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, helsinki, finland) and Location(A,  kenya), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in helsinki, finland, so A is not living in a colder condition than B"]], "negated_asymmetric_conclusion": ["Location(A, helsinki, finland) and Location(B,  kenya), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in helsinki, finland, so B is not living in a colder condition than A"]]}
{"original": ["Location(A, greenland) and Location(B,  zambia), so More(living in cold condition(A), living in cold condition(B))", ["A is living in greenland, B is living in zambia, so A is likely living in a colder condition than B."]], "negated": ["Location(A, greenland) and Location(B,  zambia), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in greenland, B is living in zambia, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B, greenland) and Location(A,  zambia), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in greenland, A is living in zambia, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, greenland) and Location(B,  zambia), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in greenland, B is living in zambia, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, greenland) and Location(A,  zambia), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in greenland, A is living in zambia, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, greenland) and Location(B,  zambia), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in greenland, B is living in zambia, so B is not likely living in a colder condition than A."]]}
{"original": ["Location(A, myanmar (burma)) and Location(B,  major parts of nordic countries in eu), so More(living in hot condition(A), living in hot condition(B))", ["A is living in myanmar, B is living in B, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, myanmar (burma)) and Location(B,  major parts of nordic countries in eu), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in myanmar, B is living in B, so A is not living in a less hot condition than B"]], "asymmetric_premise": ["Location(B, myanmar (burma)) and Location(A,  major parts of nordic countries in eu), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in myanmar, A is living in the major parts of nordic countries in eu, so A is likely living in a less hot condition than B"]], "asymmetric_conclusion": ["Location(A, myanmar (burma)) and Location(B,  major parts of nordic countries in eu), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in myanmar, B is living in B, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, myanmar (burma)) and Location(A,  major parts of nordic countries in eu), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in myanmar, A is living in Burma, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, myanmar (burma)) and Location(B,  major parts of nordic countries in eu), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in myanmar, B is living in B, so B is not likely living in a hotter condition than A."]]}
{"original": ["Location(A, stockholm, sweden) and Location(B,  northern australia), so More(living in cold condition(A), living in cold condition(B))", ["A is living inStockholm, Sweden, B is living in northern australia, so A is likely living in a colder condition than B."]], "negated": ["Location(A, stockholm, sweden) and Location(B,  northern australia), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in Sweden, B is living in northern australia, so A is not less likely to be living in a cold condition than B"]], "asymmetric_premise": ["Location(B, stockholm, sweden) and Location(A,  northern australia), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in Stockholm, A is living in northern australia, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, stockholm, sweden) and Location(B,  northern australia), so Less(living in cold condition(B), living in cold condition(A))", ["A is living inStockholm, Sweden, B is living in northern australia, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, stockholm, sweden) and Location(A,  northern australia), so not More(living in cold condition(A), living in cold condition(B))", ["B is living inStockholm, Sweden, A is living in northern australia, so A is not living in a colder condition than B"]], "negated_asymmetric_conclusion": ["Location(A, stockholm, sweden) and Location(B,  northern australia), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in Sweden, B is living in northern australia, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, southern alaska united states) and Location(B,  thailand), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the southern alaska united states, B is living in thailand, so A is likely living in a colder condition than B."]], "negated": ["Location(A, southern alaska united states) and Location(B,  thailand), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the southern alaska united states, B is living in thailand, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B, southern alaska united states) and Location(A,  thailand), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in southern alaska, A is living in thailand, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, southern alaska united states) and Location(B,  thailand), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the southern alaska united states, B is living in thailand, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, southern alaska united states) and Location(A,  thailand), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in southern alaska, A is living in thailand, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, southern alaska united states) and Location(B,  thailand), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the southern alaska united states, B is living in thailand, so B is not living in a colder condition than A"]]}
{"original": ["Location(A,dome c, antarctica) and Location(B,  the red sea), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the antarctica, B is living in the red sea, so A is likely living in a colder condition than B."]], "negated": ["Location(A,dome c, antarctica) and Location(B,  the red sea), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the antarctica, B is living in the red sea, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B,dome c, antarctica) and Location(A,  the red sea), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the dome, A is living in the red sea, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A,dome c, antarctica) and Location(B,  the red sea), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the antarctica, B is living in the red sea, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B,dome c, antarctica) and Location(A,  the red sea), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the antarctica, A is living in the red sea, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A,dome c, antarctica) and Location(B,  the red sea), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the antarctica, B is living in the red sea, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, major parts of nordic countries in eu) and Location(B,  malaysia), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the Nordic countries, B is living in malaysia, so A is likely living in a colder condition than B."]], "negated": ["Location(A, major parts of nordic countries in eu) and Location(B,  malaysia), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the Nordic countries, B is living in malaysia, so A is not less likely to be living in a cold condition than B"]], "asymmetric_premise": ["Location(B, major parts of nordic countries in eu) and Location(A,  malaysia), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in major parts of the nordic countries in eu, A is living in malaysia, so A is likely living in a less cold condition than B"]], "asymmetric_conclusion": ["Location(A, major parts of nordic countries in eu) and Location(B,  malaysia), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the major parts of the nordic countries, B is living in malaysia, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, major parts of nordic countries in eu) and Location(A,  malaysia), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the Nordic countries, A is living in malaysia, so A is not likely living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, major parts of nordic countries in eu) and Location(B,  malaysia), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the Nordic countries, B is living in malaysia, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, southern mexico) and Location(B,  south pole), so More(living in hot condition(A), living in hot condition(B))", ["A is living in southern mexico, B is living in the south pole, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, southern mexico) and Location(B,  south pole), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in southern mexico, B is living in the south pole, so A is not living in a less hot condition than B."]], "asymmetric_premise": ["Location(B, southern mexico) and Location(A,  south pole), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in southern mexico, A is living in the south pole, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, southern mexico) and Location(B,  south pole), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in southern mexico, B is living in the south pole, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, southern mexico) and Location(A,  south pole), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in southern mexico, A is living in the south pole, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, southern mexico) and Location(B,  south pole), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in southern mexico, B is living in the south pole, so B is not likely living in a hotter condition than A."]]}
{"original": ["Location(A, guatemala) and Location(B, dome c, antarctica), so More(living in hot condition(A), living in hot condition(B))", ["A is living in guatemala, B is living in the dome c, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, guatemala) and Location(B, dome c, antarctica), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in guatemala, B is living in antarctica, so A is not living in a less hot condition than B."]], "asymmetric_premise": ["Location(B, guatemala) and Location(A, dome c, antarctica), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in guatemala, A is living in the dome, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, guatemala) and Location(B, dome c, antarctica), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in guatemala, B is living in the dome, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, guatemala) and Location(A, dome c, antarctica), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in guatemala, A is living in the dome c, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, guatemala) and Location(B, dome c, antarctica), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in guatemala, B is living in the dome c, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A, northern australia) and Location(B,  northern canada), so More(living in hot condition(A), living in hot condition(B))", ["A is living in the northern australia, B is living in the northern canada, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, northern australia) and Location(B,  northern canada), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in the northern australia, B is living in the northern canada, so A is not living in a less hot condition than B."]], "asymmetric_premise": ["Location(B, northern australia) and Location(A,  northern canada), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in the northern australia, A is living in the northern canada, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, northern australia) and Location(B,  northern canada), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in the northern australia, B is living in the northern canada, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, northern australia) and Location(A,  northern canada), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in the northern australia, A is living in the northern canada, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, northern australia) and Location(B,  northern canada), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in the northern australia, B is living in the northern canada, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A, arctic ocean) and Location(B,  honduras), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the arctic ocean, B is living in the honduras, so A is likely living in a colder condition than B."]], "negated": ["Location(A, arctic ocean) and Location(B,  honduras), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the arctic ocean, B is living in the honduras, so A is not living in a less cold condition than B."]], "asymmetric_premise": ["Location(B, arctic ocean) and Location(A,  honduras), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the arctic ocean, A is living in the honduras, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, arctic ocean) and Location(B,  honduras), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the arctic ocean, B is living in the honduras, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, arctic ocean) and Location(A,  honduras), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the arctic ocean, A is living in the honduras, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, arctic ocean) and Location(B,  honduras), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the arctic ocean, B is living in the honduras, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, major parts of nordic countries in eu) and Location(B,  somalia), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the north, B is living in the somalia, so A is likely living in a colder condition than B."]], "negated": ["Location(A, major parts of nordic countries in eu) and Location(B,  somalia), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the north, B is living in the somalia, so A is not living in a less cold condition than B."]], "asymmetric_premise": ["Location(B, major parts of nordic countries in eu) and Location(A,  somalia), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the north, A is living in the somalia, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, major parts of nordic countries in eu) and Location(B,  somalia), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the north, B is living in the somalia, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, major parts of nordic countries in eu) and Location(A,  somalia), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the north, A is living in the somalia, so A is not likely living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, major parts of nordic countries in eu) and Location(B,  somalia), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the north, B is living in the somalia, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, oslo, norway) and Location(B,  niger), so More(living in cold condition(A), living in cold condition(B))", ["A is living in Norway, B is living in the niger, so A is likely living in a colder condition than B."]], "negated": ["Location(A, oslo, norway) and Location(B,  niger), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in Norway, B is living in the niger, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B, oslo, norway) and Location(A,  niger), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in oslo, A is living in niger, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, oslo, norway) and Location(B,  niger), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in Norway, B is living in the niger, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, oslo, norway) and Location(A,  niger), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in Norway, A is living in niger, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, oslo, norway) and Location(B,  niger), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in Norway, B is living in niger, so B is not living in a colder condition than A."]]}
{"original": ["Location(A,north pole) and Location(B,  mali), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the north pole, B is living in the mali, so A is likely living in a colder condition than B."]], "negated": ["Location(A,north pole) and Location(B,  mali), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the north pole, B is living in the south pole, so A is not living in a less cold condition than B."]], "asymmetric_premise": ["Location(B,north pole) and Location(A,  mali), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the north pole, A is living in the north pole, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A,north pole) and Location(B,  mali), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the north pole, B is living in the mali, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B,north pole) and Location(A,  mali), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the north pole, A is living in the north pole, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A,north pole) and Location(B,  mali), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the north pole, B is living in the mali, so B is not likely living in a colder condition than A."]]}
{"original": ["Location(A, democratic republic of the congo) and Location(B, north pole), so More(living in hot condition(A), living in hot condition(B))", ["A is living in the democratic republic of the congo, B is living in the north pole, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, democratic republic of the congo) and Location(B, north pole), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in the democratic republic of the congo, B is living in the north pole, so A is not living in a less hot condition than B."]], "asymmetric_premise": ["Location(B, democratic republic of the congo) and Location(A, north pole), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in the democratic republic of the congo, A is living in the north pole, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, democratic republic of the congo) and Location(B, north pole), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in the democratic republic of the congo, B is living in the north pole, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, democratic republic of the congo) and Location(A, north pole), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in the democratic republic of the congo, A is living in the north pole, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, democratic republic of the congo) and Location(B, north pole), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in the democratic republic of the congo, B is living in the north pole, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A, northern siberia, russia) and Location(B,  somalia), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the northern siberia, B is living in the somalia, so A is likely living in a colder condition than B."]], "negated": ["Location(A, northern siberia, russia) and Location(B,  somalia), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the northern siberia, B is living in somalia, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B, northern siberia, russia) and Location(A,  somalia), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the northern siberia, A is living in the somalia, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, northern siberia, russia) and Location(B,  somalia), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the northern siberia, B is living in the somalia, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, northern siberia, russia) and Location(A,  somalia), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the northern siberia, A is living in the somalia, so A is not living in a colder condition than B"]], "negated_asymmetric_conclusion": ["Location(A, northern siberia, russia) and Location(B,  somalia), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the northern siberia, B is living in somalia, so B is not living in a colder condition than A"]]}
{"original": ["Location(A, democratic republic of the congo) and Location(B,  south pole), so More(living in hot condition(A), living in hot condition(B))", ["A is living in the democratic republic of the congo, B is living in the south pole, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, democratic republic of the congo) and Location(B,  south pole), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in the democratic republic of the congo, B is living in the south pole, so A is not living in a less hot condition than B."]], "asymmetric_premise": ["Location(B, democratic republic of the congo) and Location(A,  south pole), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in the democratic republic of the congo, A is living in the south pole, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, democratic republic of the congo) and Location(B,  south pole), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in the democratic republic of the congo, B is living in the south pole, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, democratic republic of the congo) and Location(A,  south pole), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in the democratic republic of the congo, A is living in the south pole, so A is not likely living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, democratic republic of the congo) and Location(B,  south pole), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in the democratic republic of the congo, B is living in the south pole, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A, somalia) and Location(B,  oslo, norway), so More(living in hot condition(A), living in hot condition(B))", ["A is living in somalia, B is living in oslo, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, somalia) and Location(B,  oslo, norway), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in somalia, B is living in oslo, so A is not living in a less hot condition than B"]], "asymmetric_premise": ["Location(B, somalia) and Location(A,  oslo, norway), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in somalia, A is living in oslo, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, somalia) and Location(B,  oslo, norway), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in somalia, B is living in oslo, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, somalia) and Location(A,  oslo, norway), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in somalia, A is living in oslo, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, somalia) and Location(B,  oslo, norway), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in somalia, B is living in oslo, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A, south pole) and Location(B,  mauritania), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the south pole, B is living in the mauritania, so A is likely living in a colder condition than B."]], "negated": ["Location(A, south pole) and Location(B,  mauritania), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the south pole, B is living in the mauritania, so A is not living in a less cold condition than B."]], "asymmetric_premise": ["Location(B, south pole) and Location(A,  mauritania), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the south pole, A is living in the mauritania, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, south pole) and Location(B,  mauritania), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the south pole, B is living in the mauritania, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, south pole) and Location(A,  mauritania), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the south pole, A is living in the mauritania, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, south pole) and Location(B,  mauritania), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the south pole, B is living in the mauritania, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, singapore) and Location(B,  stockholm, sweden), so More(living in hot condition(A), living in hot condition(B))", ["A is living in singapore, B is living in stockholm, Sweden, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, singapore) and Location(B,  stockholm, sweden), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in singapore, B is living in stockholm, so A is not living in a less hot condition than B"]], "asymmetric_premise": ["Location(B, singapore) and Location(A,  stockholm, sweden), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in singapore, A is living in stockholm, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, singapore) and Location(B,  stockholm, sweden), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in singapore, B is living in stockholm, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, singapore) and Location(A,  stockholm, sweden), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in singapore, A is living in stockholm, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, singapore) and Location(B,  stockholm, sweden), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in singapore, B is living in stockholm, so B is not living in a hotter condition than A."]]}
{"original": ["Location(A, stockholm, sweden) and Location(B,  thailand), so More(living in cold condition(A), living in cold condition(B))", ["A is living in Stockholm, B is living in thailand, so A is likely living in a colder condition than B."]], "negated": ["Location(A, stockholm, sweden) and Location(B,  thailand), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in Stockholm, B is living in thailand, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B, stockholm, sweden) and Location(A,  thailand), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in Stockholm, A is living in thailand, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, stockholm, sweden) and Location(B,  thailand), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in Stockholm, B is living in thailand, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, stockholm, sweden) and Location(A,  thailand), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in stockholm, A is living in thailand, so A is not living in a colder condition than B"]], "negated_asymmetric_conclusion": ["Location(A, stockholm, sweden) and Location(B,  thailand), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in Stockholm, B is living in thailand, so B is not living in a colder condition than A."]]}
{"original": ["Location(A,dome c, antarctica) and Location(B,  singapore), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the dome c, so A is likely living in a colder condition than B."]], "negated": ["Location(A,dome c, antarctica) and Location(B,  singapore), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the dome c, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B,dome c, antarctica) and Location(A,  singapore), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the dome c, A is living in the singapore, so A is likely living in a less cold condition than B"]], "asymmetric_conclusion": ["Location(A,dome c, antarctica) and Location(B,  singapore), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in dome c, so B is likely living in singapore, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B,dome c, antarctica) and Location(A,  singapore), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the dome c, so A is not living in a colder condition than B"]], "negated_asymmetric_conclusion": ["Location(A,dome c, antarctica) and Location(B,  singapore), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the dome c, so B is not living in a colder condition than A"]]}
{"original": ["Location(A, shetland, uk) and Location(B,  mauritania), so More(living in cold condition(A), living in cold condition(B))", ["A is living in shetland, B is living in mauritania, so A is likely living in a colder condition than B."]], "negated": ["Location(A, shetland, uk) and Location(B,  mauritania), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the shetland, B is living in mauritania, so A is not living in a less cold condition than B"]], "asymmetric_premise": ["Location(B, shetland, uk) and Location(A,  mauritania), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the shetland, A is living in mauritania, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A, shetland, uk) and Location(B,  mauritania), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the shetland, B is living in mauritania, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B, shetland, uk) and Location(A,  mauritania), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the shetland, A is living in mauritania, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A, shetland, uk) and Location(B,  mauritania), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the shetland, B is living in mauritania, so B is not living in a colder condition than A."]]}
{"original": ["Location(A, northern australia) and Location(B,  helsinki, finland), so More(living in hot condition(A), living in hot condition(B))", ["A is living in northern australia, B is living in helsinki, finland, so A is likely living in a hotter condition than B."]], "negated": ["Location(A, northern australia) and Location(B,  helsinki, finland), so not Less(living in hot condition(A), living in hot condition(B))", ["A is living in northern australia, B is living in helsinki, so A is not living in a less hot condition than B"]], "asymmetric_premise": ["Location(B, northern australia) and Location(A,  helsinki, finland), so Less(living in hot condition(A), living in hot condition(B))", ["B is living in northern australia, A is living in helsinki, so A is likely living in a less hot condition than B."]], "asymmetric_conclusion": ["Location(A, northern australia) and Location(B,  helsinki, finland), so Less(living in hot condition(B), living in hot condition(A))", ["A is living in northern australia, B is living in helsinki, so B is likely living in a less hot condition than A."]], "negated_asymmetric_premise": ["Location(B, northern australia) and Location(A,  helsinki, finland), so not More(living in hot condition(A), living in hot condition(B))", ["B is living in northern australia, A is living in helsinki, so A is not living in a hotter condition than B."]], "negated_asymmetric_conclusion": ["Location(A, northern australia) and Location(B,  helsinki, finland), so not More(living in hot condition(B), living in hot condition(A))", ["A is living in northern australia, B is living in helsinki, finland, so B is not living in a hotter condition than A"]]}
{"original": ["Location(A,north pole) and Location(B,  laos), so More(living in cold condition(A), living in cold condition(B))", ["A is living in the north pole, B is living in the laos, so A is likely living in a colder condition than B."]], "negated": ["Location(A,north pole) and Location(B,  laos), so not Less(living in cold condition(A), living in cold condition(B))", ["A is living in the north pole, B is living in the laos, so A is not living in a less cold condition than B."]], "asymmetric_premise": ["Location(B,north pole) and Location(A,  laos), so Less(living in cold condition(A), living in cold condition(B))", ["B is living in the north pole, A is living in the laos, so A is likely living in a less cold condition than B."]], "asymmetric_conclusion": ["Location(A,north pole) and Location(B,  laos), so Less(living in cold condition(B), living in cold condition(A))", ["A is living in the north pole, B is living in the laos, so B is likely living in a less cold condition than A."]], "negated_asymmetric_premise": ["Location(B,north pole) and Location(A,  laos), so not More(living in cold condition(A), living in cold condition(B))", ["B is living in the north pole, A is living in the laos, so A is not living in a colder condition than B."]], "negated_asymmetric_conclusion": ["Location(A,north pole) and Location(B,  laos), so not More(living in cold condition(B), living in cold condition(A))", ["A is living in the north pole, B is living in the laos, so B is not living in a colder condition than A."]]}
{"original": ["animal(A, duck) and animal(B, ant), so More(locate at the lake(A), locate at the lake(B))", ["A is a duck, B is a ant, so A is more likely to be in the lake than B"]], "negated": ["animal(A, duck) and animal(B, ant), so not Less(locate at the lake(A), locate at the lake(B))", ["A is a duck, B is an ant, so A is not less likely to be in the lake than B"]], "asymmetric_premise": ["animal(B, duck) and animal(A, ant), so Less(locate at the lake(A), locate at the lake(B))", ["B is a duck, A is an ant, so A is less likely to be in the lake than B"]], "asymmetric_conclusion": ["animal(A, duck) and animal(B, ant), so Less(locate at the lake(B), locate at the lake(A))", ["A is a duck, B is an ant, so B is less likely to be in the lake than A"]], "negated_asymmetric_premise": ["animal(B, duck) and animal(A, ant), so not More(locate at the lake(A), locate at the lake(B))", ["B is a duck, A is an ant, so A is not more likely to be in the lake than B"]], "negated_asymmetric_conclusion": ["animal(A, duck) and animal(B, ant), so not More(locate at the lake(B), locate at the lake(A))", ["A is a duck, B is an ant, so B is not more likely to be in the lake than A"]]}
{"original": ["animal(A, lion) and animal(B, bird), so More(locate at the veldt(A), locate at the veldt(B))", ["A is a lion, B is a bird, so A is more likely to be on the veldt than B"]], "negated": ["animal(A, lion) and animal(B, bird), so not Less(locate at the veldt(A), locate at the veldt(B))", ["A is a lion, B is a bird, so A is not less likely to be in the veld than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, bird), so Less(locate at the veldt(A), locate at the veldt(B))", ["B is a lion, A is a bird, so A is less likely to be on the veldt than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, bird), so Less(locate at the veldt(B), locate at the veldt(A))", ["A is a lion, B is a bird, so B is less likely to be in the veldt than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, bird), so not More(locate at the veldt(A), locate at the veldt(B))", ["B is a lion, A is a bird, so A is not more likely to be in the veld than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, bird), so not More(locate at the veldt(B), locate at the veldt(A))", ["A is a lion, B is a bird, so B is not more likely to be in the veldt than A"]]}
{"original": ["animal(A, bee) and animal(B, chicken), so More(locate at an orchard(A), locate at an orchard(B))", ["A is a bee, B is a chicken, so A is more likely to be in an orchard than B"]], "negated": ["animal(A, bee) and animal(B, chicken), so not Less(locate at an orchard(A), locate at an orchard(B))", ["A is a bee, B is a chicken, so A is not less likely to be in an orchard than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, chicken), so Less(locate at an orchard(A), locate at an orchard(B))", ["B is a bee, A is a chicken, so A is less likely to be in an orchard than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, chicken), so Less(locate at an orchard(B), locate at an orchard(A))", ["A is a bee, B is a chicken, so B is less likely to be in an orchard than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, chicken), so not More(locate at an orchard(A), locate at an orchard(B))", ["B is a bee, A is a chicken, so A is not more likely to be in an orchard than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, chicken), so not More(locate at an orchard(B), locate at an orchard(A))", ["A is a bee, B is a chicken, so B is not more likely to be in an orchard than A"]]}
{"original": ["animal(A, tiger) and animal(B, deer), so More(circle its prey(A), circle its prey(B))", ["A is a tiger, B is a deer, so A is more likely to circle its prey than B"]], "negated": ["animal(A, tiger) and animal(B, deer), so not Less(circle its prey(A), circle its prey(B))", ["A is a tiger, B is a deer, so A is not less likely to circle its prey than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, deer), so Less(circle its prey(A), circle its prey(B))", ["B is a tiger, A is a deer, so A is less likely to circle its prey than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, deer), so Less(circle its prey(B), circle its prey(A))", ["A is a tiger, B is a deer, so B is less likely to circle its prey than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, deer), so not More(circle its prey(A), circle its prey(B))", ["B is a tiger, A is a deer, so A is not more likely to circle its prey than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, deer), so not More(circle its prey(B), circle its prey(A))", ["A is a tiger, B is a deer, so B is not more likely to circle its prey than A"]]}
{"original": ["animal(A, bear) and animal(B, monkey), so More(locate at a meadow(A), locate at a meadow(B))", ["A is a bear, B is a monkey, so A is more likely to be in a meadow than B"]], "negated": ["animal(A, bear) and animal(B, monkey), so not Less(locate at a meadow(A), locate at a meadow(B))", ["A is a bear, B is a monkey, so A is not less likely to be in a meadow than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, monkey), so Less(locate at a meadow(A), locate at a meadow(B))", ["B is a bear, A is a monkey, so A is less likely to be in a meadow than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, monkey), so Less(locate at a meadow(B), locate at a meadow(A))", ["A is a bear, B is a monkey, so B is less likely to be in a meadow than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, monkey), so not More(locate at a meadow(A), locate at a meadow(B))", ["B is a bear, A is a monkey, so A is not more likely to be in a meadow than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, monkey), so not More(locate at a meadow(B), locate at a meadow(A))", ["A is a bear, B is a monkey, so B is not more likely to be in a meadow than A"]]}
{"original": ["animal(A, dog) and animal(B, fish), so More(locate at a kennel(A), locate at a kennel(B))", ["A is a dog, B is a fish, so A is more likely to be in a kennel than B"]], "negated": ["animal(A, dog) and animal(B, fish), so not Less(locate at a kennel(A), locate at a kennel(B))", ["A is a dog, B is a fish, so A is not less likely to be in a kennel than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, fish), so Less(locate at a kennel(A), locate at a kennel(B))", ["B is a dog, A is a fish, so A is less likely to be in a kennel than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, fish), so Less(locate at a kennel(B), locate at a kennel(A))", ["A is a dog, B is a fish, so B is less likely to be in a kennel than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, fish), so not More(locate at a kennel(A), locate at a kennel(B))", ["B is a dog, A is a fish, so A is not more likely to be in a kennel than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, fish), so not More(locate at a kennel(B), locate at a kennel(A))", ["A is a dog, B is a fish, so B is not more likely to be in a kennel than A"]]}
{"original": ["animal(A, sheep) and animal(B, spider), so More(graze(A), graze(B))", ["A is a sheep, B is a spider, so A is more likely to graze than B"]], "negated": ["animal(A, sheep) and animal(B, spider), so not Less(graze(A), graze(B))", ["A is a sheep, B is a spider, so A is not less likely to graze than B"]], "asymmetric_premise": ["animal(B, sheep) and animal(A, spider), so Less(graze(A), graze(B))", ["B is a sheep, A is a spider, so A is less likely to graze than B"]], "asymmetric_conclusion": ["animal(A, sheep) and animal(B, spider), so Less(graze(B), graze(A))", ["A is a sheep, B is a spider, so B is less likely to graze than A"]], "negated_asymmetric_premise": ["animal(B, sheep) and animal(A, spider), so not More(graze(A), graze(B))", ["B is a sheep, A is a spider, so A is not more likely to graze than B"]], "negated_asymmetric_conclusion": ["animal(A, sheep) and animal(B, spider), so not More(graze(B), graze(A))", ["A is a sheep, B is a spider, so B is not more likely to graze than A"]]}
{"original": ["animal(A, bird) and animal(B, zebra), so More(locate at a roof(A), locate at a roof(B))", ["A is a bird, B is a zebra, so A is more likely to be on a roof than B"]], "negated": ["animal(A, bird) and animal(B, zebra), so not Less(locate at a roof(A), locate at a roof(B))", ["A is a bird, B is a zebra, so A is not less likely to be on a roof than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, zebra), so Less(locate at a roof(A), locate at a roof(B))", ["B is a bird, A is a zebra, so A is less likely to be on a roof than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, zebra), so Less(locate at a roof(B), locate at a roof(A))", ["A is a bird, B is a zebra, so B is less likely to be on a roof than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, zebra), so not More(locate at a roof(A), locate at a roof(B))", ["B is a bird, A is a zebra, so A is not more likely to be on a roof than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, zebra), so not More(locate at a roof(B), locate at a roof(A))", ["A is a bird, B is a zebra, so B is not more likely to be on a roof than A"]]}
{"original": ["animal(A, bird) and animal(B, dog), so More(sing(A), sing(B))", ["A is a bird, B is a dog, so A is more likely to sing than B"]], "negated": ["animal(A, bird) and animal(B, dog), so not Less(sing(A), sing(B))", ["A is a bird, B is a dog, so A is not less likely to sing than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, dog), so Less(sing(A), sing(B))", ["B is a bird, A is a dog, so A is less likely to sing than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, dog), so Less(sing(B), sing(A))", ["A is a bird, B is a dog, so B is less likely to sing than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, dog), so not More(sing(A), sing(B))", ["B is a bird, A is a dog, so A is not more likely to sing than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, dog), so not More(sing(B), sing(A))", ["A is a bird, B is a dog, so B is not more likely to sing than A"]]}
{"original": ["animal(A, rabbit) and animal(B, lion), so More(appear suddenly(A), appear suddenly(B))", ["A is a rabbit, B is a lion, so A is more likely to appear suddenly than B"]], "negated": ["animal(A, rabbit) and animal(B, lion), so not Less(appear suddenly(A), appear suddenly(B))", ["A is a rabbit, B is a lion, so A is not less likely to appear suddenly than B"]], "asymmetric_premise": ["animal(B, rabbit) and animal(A, lion), so Less(appear suddenly(A), appear suddenly(B))", ["B is a rabbit, A is a lion, so A is less likely to appear suddenly than B"]], "asymmetric_conclusion": ["animal(A, rabbit) and animal(B, lion), so Less(appear suddenly(B), appear suddenly(A))", ["A is a rabbit, B is a lion, so B is less likely to appear suddenly than A"]], "negated_asymmetric_premise": ["animal(B, rabbit) and animal(A, lion), so not More(appear suddenly(A), appear suddenly(B))", ["B is a rabbit, A is a lion, so A is not more likely to appear suddenly than B"]], "negated_asymmetric_conclusion": ["animal(A, rabbit) and animal(B, lion), so not More(appear suddenly(B), appear suddenly(A))", ["A is a rabbit, B is a lion, so B is not more likely to appear suddenly than A"]]}
{"original": ["animal(A, horse) and animal(B, kangaroo), so More(step high(A), step high(B))", ["A is a horse, B is a kangaroo, so A is more likely to step high than B"]], "negated": ["animal(A, horse) and animal(B, kangaroo), so not Less(step high(A), step high(B))", ["A is a horse, B is a kangaroo, so A is not less step high than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, kangaroo), so Less(step high(A), step high(B))", ["B is a horse, A is a kangaroo, so A is less likely to step high than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, kangaroo), so Less(step high(B), step high(A))", ["A is a horse, B is a kangaroo, so B is less likely to step high than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, kangaroo), so not More(step high(A), step high(B))", ["B is a horse, A is a kangaroo, so A is not more step high than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, kangaroo), so not More(step high(B), step high(A))", ["A is a horse, B is a kangaroo, so B is not more step high than A"]]}
{"original": ["animal(A, lion) and animal(B, eagle), so More(locate at the veldt(A), locate at the veldt(B))", ["A is a lion, B is a eagle, so A is more likely to be on the veldt than B"]], "negated": ["animal(A, lion) and animal(B, eagle), so not Less(locate at the veldt(A), locate at the veldt(B))", ["A is a lion, B is a eagle, so A is not less likely to be in the veld than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, eagle), so Less(locate at the veldt(A), locate at the veldt(B))", ["B is a lion, A is a eagle, so A is less likely to be on the veldt than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, eagle), so Less(locate at the veldt(B), locate at the veldt(A))", ["A is a lion, B is a eagle, so B is less likely to be in the veldt than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, eagle), so not More(locate at the veldt(A), locate at the veldt(B))", ["B is a lion, A is a eagle, so A is not more likely to be in the veld than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, eagle), so not More(locate at the veldt(B), locate at the veldt(A))", ["A is a lion, B is a eagle, so B is not more likely to be in the veld than A"]]}
{"original": ["animal(A, cow) and animal(B, panda), so More(locate at a slaughter house(A), locate at a slaughter house(B))", ["A is a cow, B is a panda, so A is more likely to be in a slaughter house than B"]], "negated": ["animal(A, cow) and animal(B, panda), so not Less(locate at a slaughter house(A), locate at a slaughter house(B))", ["A is a cow, B is a panda, so A is not less likely to be in a slaughter house than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, panda), so Less(locate at a slaughter house(A), locate at a slaughter house(B))", ["B is a cow, A is a panda, so A is less likely to be in a slaughter house than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, panda), so Less(locate at a slaughter house(B), locate at a slaughter house(A))", ["A is a cow, B is a panda, so B is less likely to be in a slaughter house than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, panda), so not More(locate at a slaughter house(A), locate at a slaughter house(B))", ["B is a cow, A is a panda, so A is not more likely to be in a slaughter house than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, panda), so not More(locate at a slaughter house(B), locate at a slaughter house(A))", ["A is a cow, B is a panda, so B is not more likely to be in a slaughter house than A"]]}
{"original": ["animal(A, cow) and animal(B, snail), so More(jump over the moon(A), jump over the moon(B))", ["A is a cow, B is a snail, so A is more likely to jump over the moon than B"]], "negated": ["animal(A, cow) and animal(B, snail), so not Less(jump over the moon(A), jump over the moon(B))", ["A is a cow, B is a snail, so A is not less likely to jump over the moon than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, snail), so Less(jump over the moon(A), jump over the moon(B))", ["B is a cow, A is a snail, so A is less likely to jump over the moon than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, snail), so Less(jump over the moon(B), jump over the moon(A))", ["A is a cow, B is a snail, so B is less likely to jump over the moon than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, snail), so not More(jump over the moon(A), jump over the moon(B))", ["B is a cow, A is a snail, so A is not more likely to jump over the moon than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, snail), so not More(jump over the moon(B), jump over the moon(A))", ["A is a cow, B is a snail, so B is not more likely to jump over the moon than A"]]}
{"original": ["animal(A, fox) and animal(B, fish), so More(locate at foxhunt(A), locate at foxhunt(B))", ["A is a fox, B is a fish, so A is more likely to be in the foxhunt than B"]], "negated": ["animal(A, fox) and animal(B, fish), so not Less(locate at foxhunt(A), locate at foxhunt(B))", ["A is a fox, B is a fish, so A is not less likely to be in the foxhunt than B"]], "asymmetric_premise": ["animal(B, fox) and animal(A, fish), so Less(locate at foxhunt(A), locate at foxhunt(B))", ["B is a fox, A is a fish, so A is less likely to be in the foxhunt than B"]], "asymmetric_conclusion": ["animal(A, fox) and animal(B, fish), so Less(locate at foxhunt(B), locate at foxhunt(A))", ["A is a fox, B is a fish, so B is less likely to be in the foxhunt than A"]], "negated_asymmetric_premise": ["animal(B, fox) and animal(A, fish), so not More(locate at foxhunt(A), locate at foxhunt(B))", ["B is a fox, A is a fish, so A is not more likely to be in the foxhunt than B"]], "negated_asymmetric_conclusion": ["animal(A, fox) and animal(B, fish), so not More(locate at foxhunt(B), locate at foxhunt(A))", ["A is a fox, B is a fish, so B is not more likely to be in the foxhunt than A"]]}
{"original": ["animal(A, lion) and animal(B, rat), so More(sound scary(A), sound scary(B))", ["A is a lion, B is a rat, so A will sound more scary than B"]], "negated": ["animal(A, lion) and animal(B, rat), so not Less(sound scary(A), sound scary(B))", ["A is a lion, B is a rat, so A is not less scary than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, rat), so Less(sound scary(A), sound scary(B))", ["B is a lion, A is a rat, so A is less scary than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, rat), so Less(sound scary(B), sound scary(A))", ["A is a lion, B is a rat, so B should sound less scary than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, rat), so not More(sound scary(A), sound scary(B))", ["B is a lion, A is a rat, so A is not more scary than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, rat), so not More(sound scary(B), sound scary(A))", ["A is a lion, B is a rat, so B is not more scary than A"]]}
{"original": ["animal(A, goat) and animal(B, wolf), so More(locate at the barn(A), locate at the barn(B))", ["A is a goat, B is a wolf, so A is more likely to be in the barn than B"]], "negated": ["animal(A, goat) and animal(B, wolf), so not Less(locate at the barn(A), locate at the barn(B))", ["A is a goat, B is a wolf, so A is not less likely to be in the barn than B"]], "asymmetric_premise": ["animal(B, goat) and animal(A, wolf), so Less(locate at the barn(A), locate at the barn(B))", ["B is a goat, A is a wolf, so A is less likely to be in the barn than B"]], "asymmetric_conclusion": ["animal(A, goat) and animal(B, wolf), so Less(locate at the barn(B), locate at the barn(A))", ["A is a goat, B is a wolf, so B is less likely to be in the barn than A"]], "negated_asymmetric_premise": ["animal(B, goat) and animal(A, wolf), so not More(locate at the barn(A), locate at the barn(B))", ["B is a goat, A is a wolf, so A is not more likely to be in the barn than B"]], "negated_asymmetric_conclusion": ["animal(A, goat) and animal(B, wolf), so not More(locate at the barn(B), locate at the barn(A))", ["A is a goat, B is a wolf, so B is not more likely to be in the barn than A"]]}
{"original": ["animal(A, squirrel) and animal(B, panda), so More(store nuts(A), store nuts(B))", ["A is a squirrel, B is a panda, so A is more likely to store nuts than B"]], "negated": ["animal(A, squirrel) and animal(B, panda), so not Less(store nuts(A), store nuts(B))", ["A is a squirrel, B is a panda, so A is not less likely to store nuts than B"]], "asymmetric_premise": ["animal(B, squirrel) and animal(A, panda), so Less(store nuts(A), store nuts(B))", ["B is a squirrel, A is a panda, so A is less likely to store nuts than B"]], "asymmetric_conclusion": ["animal(A, squirrel) and animal(B, panda), so Less(store nuts(B), store nuts(A))", ["A is a squirrel, B is a panda, so B is less likely to store nuts than A"]], "negated_asymmetric_premise": ["animal(B, squirrel) and animal(A, panda), so not More(store nuts(A), store nuts(B))", ["B is a squirrel, A is a panda, so A is not more likely to store nuts than B"]], "negated_asymmetric_conclusion": ["animal(A, squirrel) and animal(B, panda), so not More(store nuts(B), store nuts(A))", ["A is a squirrel, B is a panda, so B is not more likely to store nuts than A"]]}
{"original": ["animal(A, frog) and animal(B, seal), so More(locate at the lawn(A), locate at the lawn(B))", ["A is a frog, B is a seal, so A is more likely to be on the lawn than B"]], "negated": ["animal(A, frog) and animal(B, seal), so not Less(locate at the lawn(A), locate at the lawn(B))", ["A is a frog, B is a seal, so A is not less likely to be on the lawn than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, seal), so Less(locate at the lawn(A), locate at the lawn(B))", ["B is a frog, A is a seal, so A is less likely to be on the lawn than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, seal), so Less(locate at the lawn(B), locate at the lawn(A))", ["A is a frog, B is a seal, so B is less likely to be on the lawn than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, seal), so not More(locate at the lawn(A), locate at the lawn(B))", ["B is a frog, A is a seal, so A is not more likely to be on the lawn than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, seal), so not More(locate at the lawn(B), locate at the lawn(A))", ["A is a frog, B is a seal, so B is not more likely to be on the lawn than A"]]}
{"original": ["animal(A, elephant) and animal(B, sheep), so More(weight 1000 kilos(A), weight 1000 kilos(B))", ["A is a elephant, B is a sheep, so A is more likely to weight 1000 kilos than B"]], "negated": ["animal(A, elephant) and animal(B, sheep), so not Less(weight 1000 kilos(A), weight 1000 kilos(B))", ["A is a elephant, B is a sheep, so A is not less weight than B"]], "asymmetric_premise": ["animal(B, elephant) and animal(A, sheep), so Less(weight 1000 kilos(A), weight 1000 kilos(B))", ["B is a elephant, A is a sheep, so A is less likely to weight 1000 kilos than B"]], "asymmetric_conclusion": ["animal(A, elephant) and animal(B, sheep), so Less(weight 1000 kilos(B), weight 1000 kilos(A))", ["A is a elephant, B is a sheep, so B is less likely to weight 1000 kilos than A"]], "negated_asymmetric_premise": ["animal(B, elephant) and animal(A, sheep), so not More(weight 1000 kilos(A), weight 1000 kilos(B))", ["B is a elephant, A is a sheep, so A is not more likely to weight 1000 kilos than B"]], "negated_asymmetric_conclusion": ["animal(A, elephant) and animal(B, sheep), so not More(weight 1000 kilos(B), weight 1000 kilos(A))", ["A is a elephant, B is a sheep, so B is not more likely to weight 1000 kilos than A"]]}
{"original": ["animal(A, snake) and animal(B, seal), so More(locate at a ditch(A), locate at a ditch(B))", ["A is a snake, B is a seal, so A is more likely to be in a ditch than B"]], "negated": ["animal(A, snake) and animal(B, seal), so not Less(locate at a ditch(A), locate at a ditch(B))", ["A is a snake, B is a seal, so A is not less likely to be in a ditch than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, seal), so Less(locate at a ditch(A), locate at a ditch(B))", ["B is a snake, A is a seal, so A is less likely to be in a ditch than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, seal), so Less(locate at a ditch(B), locate at a ditch(A))", ["A is a snake, B is a seal, so B is less likely to be in a ditch than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, seal), so not More(locate at a ditch(A), locate at a ditch(B))", ["B is a snake, A is a seal, so A is not more likely to be in a ditch than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, seal), so not More(locate at a ditch(B), locate at a ditch(A))", ["A is a snake, B is a seal, so B is not more likely to be in a ditch than A"]]}
{"original": ["animal(A, chicken) and animal(B, squirrel), so More(be reheated in the microwave(A), be reheated in the microwave(B))", ["A is a chicken, B is a squirrel, so A is more likely to be reheated in the microwave than B"]], "negated": ["animal(A, chicken) and animal(B, squirrel), so not Less(be reheated in the microwave(A), be reheated in the microwave(B))", ["A is a chicken, B is a squirrel, so A is not less likely to be reheated in the microwave than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, squirrel), so Less(be reheated in the microwave(A), be reheated in the microwave(B))", ["B is a chicken, A is a squirrel, so A is less likely to be reheated in the microwave than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, squirrel), so Less(be reheated in the microwave(B), be reheated in the microwave(A))", ["A is a chicken, B is a squirrel, so B is less likely to be reheated in the microwave than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, squirrel), so not More(be reheated in the microwave(A), be reheated in the microwave(B))", ["B is a chicken, A is a squirrel, so A is not more likely to be reheated in the microwave than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, squirrel), so not More(be reheated in the microwave(B), be reheated in the microwave(A))", ["A is a chicken, B is a squirrel, so B is not more likely to be reheated in the microwave than A"]]}
{"original": ["animal(A, dog) and animal(B, lion), so More(mark its territory(A), mark its territory(B))", ["A is a dog, B is a lion, so A is more likely to mark its territory than B"]], "negated": ["animal(A, dog) and animal(B, lion), so not Less(mark its territory(A), mark its territory(B))", ["A is a dog, B is a lion, so A is not less likely to mark its territory than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, lion), so Less(mark its territory(A), mark its territory(B))", ["B is a dog, A is a lion, so A is less likely to mark its territory than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, lion), so Less(mark its territory(B), mark its territory(A))", ["A is a dog, B is a lion, so B is less likely to mark its territory than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, lion), so not More(mark its territory(A), mark its territory(B))", ["B is a dog, A is a lion, so A is not more likely to mark its territory than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, lion), so not More(mark its territory(B), mark its territory(A))", ["A is a dog, B is a lion, so B is not more likely to mark its territory than A"]]}
{"original": ["animal(A, dog) and animal(B, owl), so More(drink water(A), drink water(B))", ["A is a dog, B is a owl, so A is more likely to drink water than B"]], "negated": ["animal(A, dog) and animal(B, owl), so not Less(drink water(A), drink water(B))", ["A is a dog, B is a owl, so A is not less likely to drink water than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, owl), so Less(drink water(A), drink water(B))", ["B is a dog, A is a owl, so A is less likely to drink water than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, owl), so Less(drink water(B), drink water(A))", ["A is a dog, B is a owl, so B is less likely to drink water than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, owl), so not More(drink water(A), drink water(B))", ["B is a dog, A is a owl, so A is not more likely to drink water than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, owl), so not More(drink water(B), drink water(A))", ["A is a dog, B is a owl, so B is not more likely to drink water than A"]]}
{"original": ["animal(A, fish) and animal(B, spider), so More(live in lakes(A), live in lakes(B))", ["A is a fish, B is a spider, so A is more likely to live in lakes than B"]], "negated": ["animal(A, fish) and animal(B, spider), so not Less(live in lakes(A), live in lakes(B))", ["A is a fish, B is a spider, so A is not less likely to live in lakes than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, spider), so Less(live in lakes(A), live in lakes(B))", ["B is a fish, A is a spider, so A is less likely to live in lakes than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, spider), so Less(live in lakes(B), live in lakes(A))", ["A is a fish, B is a spider, so B is less likely to live in lakes than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, spider), so not More(live in lakes(A), live in lakes(B))", ["B is a fish, A is a spider, so A is not more likely to live in lakes than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, spider), so not More(live in lakes(B), live in lakes(A))", ["A is a fish, B is a spider, so B is not more likely to live in lakes than A"]]}
{"original": ["animal(A, bee) and animal(B, camel), so More(locate at the sky(A), locate at the sky(B))", ["A is a bee, B is a camel, so A is more likely to be in the sky than B"]], "negated": ["animal(A, bee) and animal(B, camel), so not Less(locate at the sky(A), locate at the sky(B))", ["A is a bee, B is a camel, so A is not less likely to be in the sky than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, camel), so Less(locate at the sky(A), locate at the sky(B))", ["B is a bee, A is a camel, so A is less likely to be in the sky than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, camel), so Less(locate at the sky(B), locate at the sky(A))", ["A is a bee, B is a camel, so B is less likely to be in the sky than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, camel), so not More(locate at the sky(A), locate at the sky(B))", ["B is a bee, A is a camel, so A is not more likely to be in the sky than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, camel), so not More(locate at the sky(B), locate at the sky(A))", ["A is a bee, B is a camel, so B is not more likely to be in the sky than A"]]}
{"original": ["animal(A, turtle) and animal(B, chicken), so More(hide in its shell(A), hide in its shell(B))", ["A is a turtle, B is a chicken, so A is more likely to hide in its shell than B"]], "negated": ["animal(A, turtle) and animal(B, chicken), so not Less(hide in its shell(A), hide in its shell(B))", ["A is a turtle, B is a chicken, so A is not less likely to hide in its shell than B"]], "asymmetric_premise": ["animal(B, turtle) and animal(A, chicken), so Less(hide in its shell(A), hide in its shell(B))", ["B is a turtle, A is a chicken, so A is less likely to hide in its shell than B"]], "asymmetric_conclusion": ["animal(A, turtle) and animal(B, chicken), so Less(hide in its shell(B), hide in its shell(A))", ["A is a turtle, B is a chicken, so B is less likely to hide in its shell than A"]], "negated_asymmetric_premise": ["animal(B, turtle) and animal(A, chicken), so not More(hide in its shell(A), hide in its shell(B))", ["B is a turtle, A is a chicken, so A is not more likely to hide in its shell than B"]], "negated_asymmetric_conclusion": ["animal(A, turtle) and animal(B, chicken), so not More(hide in its shell(B), hide in its shell(A))", ["A is a turtle, B is a chicken, so B is not more likely to hide in its shell than A"]]}
{"original": ["animal(A, chimpanzee) and animal(B, snail), so More(locate at a zoo(A), locate at a zoo(B))", ["A is a chimpanzee, B is a snail, so A is more likely to be in a zoo than B"]], "negated": ["animal(A, chimpanzee) and animal(B, snail), so not Less(locate at a zoo(A), locate at a zoo(B))", ["A is a chimpanzee, B is a snail, so A is not less likely to be in a zoo than B"]], "asymmetric_premise": ["animal(B, chimpanzee) and animal(A, snail), so Less(locate at a zoo(A), locate at a zoo(B))", ["B is a chimpanzee, A is a snail, so A is less likely to be in a zoo than B"]], "asymmetric_conclusion": ["animal(A, chimpanzee) and animal(B, snail), so Less(locate at a zoo(B), locate at a zoo(A))", ["A is a chimpanzee, B is a snail, so B is less likely to be in a zoo than A"]], "negated_asymmetric_premise": ["animal(B, chimpanzee) and animal(A, snail), so not More(locate at a zoo(A), locate at a zoo(B))", ["B is a chimpanzee, A is a snail, so A is not more likely to be in a zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, chimpanzee) and animal(B, snail), so not More(locate at a zoo(B), locate at a zoo(A))", ["A is a chimpanzee, B is a snail, so B is not more likely to be in a zoo than A"]]}
{"original": ["animal(A, cat) and animal(B, bear), so More(locate at the windowsill(A), locate at the windowsill(B))", ["A is a cat, B is a bear, so A is more likely to be on the windowsill than B"]], "negated": ["animal(A, cat) and animal(B, bear), so not Less(locate at the windowsill(A), locate at the windowsill(B))", ["A is a cat, B is a bear, so A is not less likely to be on the windowsill than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, bear), so Less(locate at the windowsill(A), locate at the windowsill(B))", ["B is a cat, A is a bear, so A is less likely to be on the windowsill than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, bear), so Less(locate at the windowsill(B), locate at the windowsill(A))", ["A is a cat, B is a bear, so B is less likely to be on the windowsill than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, bear), so not More(locate at the windowsill(A), locate at the windowsill(B))", ["B is a cat, A is a bear, so A is not more likely to be on the windowsill than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, bear), so not More(locate at the windowsill(B), locate at the windowsill(A))", ["A is a cat, B is a bear, so B is not more likely to be on the windowsill than A"]]}
{"original": ["animal(A, shark) and animal(B, turtle), so More(locate at a reef(A), locate at a reef(B))", ["A is a shark, B is a turtle, so A is more likely to be on a reef than B"]], "negated": ["animal(A, shark) and animal(B, turtle), so not Less(locate at a reef(A), locate at a reef(B))", ["A is a shark, B is a turtle, so A is not less likely to be on a reef than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, turtle), so Less(locate at a reef(A), locate at a reef(B))", ["B is a shark, A is a turtle, so A is less likely to be on a reef than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, turtle), so Less(locate at a reef(B), locate at a reef(A))", ["A is a shark, B is a turtle, so B is less likely to be on a reef than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, turtle), so not More(locate at a reef(A), locate at a reef(B))", ["B is a shark, A is a turtle, so A is not more likely to be on a reef than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, turtle), so not More(locate at a reef(B), locate at a reef(A))", ["A is a shark, B is a turtle, so B is not more likely to be on a reef than A"]]}
{"original": ["animal(A, elephant) and animal(B, bee), so More(locate at india(A), locate at india(B))", ["A is a elephant, B is a bee, so A is more likely to be in India than B"]], "negated": ["animal(A, elephant) and animal(B, bee), so not Less(locate at india(A), locate at india(B))", ["A is made out of elephant and B is made out of bee, so A is not less likely to be in India than B"]], "asymmetric_premise": ["animal(B, elephant) and animal(A, bee), so Less(locate at india(A), locate at india(B))", ["B is made out of elephant and A is made out of bee, so A is less likely to be in India than B"]], "asymmetric_conclusion": ["animal(A, elephant) and animal(B, bee), so Less(locate at india(B), locate at india(A))", ["A is made out of elephant and B is made out of bee, so B is less likely to be in India than A"]], "negated_asymmetric_premise": ["animal(B, elephant) and animal(A, bee), so not More(locate at india(A), locate at india(B))", ["B is made out of elephant and A is made out of bee, so A is not more likely to be in India than B"]], "negated_asymmetric_conclusion": ["animal(A, elephant) and animal(B, bee), so not More(locate at india(B), locate at india(A))", ["A is a elephant, B is a bee, so B is not more likely to be in India than A"]]}
{"original": ["animal(A, fish) and animal(B, giraffe), so More(locate at a pond(A), locate at a pond(B))", ["A is a fish, B is a giraffe, so A is more likely to be in a pond than B"]], "negated": ["animal(A, fish) and animal(B, giraffe), so not Less(locate at a pond(A), locate at a pond(B))", ["A is a fish, B is a giraffe, so A is not less likely to be in a pond than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, giraffe), so Less(locate at a pond(A), locate at a pond(B))", ["B is a fish, A is a giraffe, so A is less likely to be in a pond than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, giraffe), so Less(locate at a pond(B), locate at a pond(A))", ["A is a fish, B is a giraffe, so B is less likely to be in a pond than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, giraffe), so not More(locate at a pond(A), locate at a pond(B))", ["B is a fish, A is a giraffe, so A is not more likely to be in a pond than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, giraffe), so not More(locate at a pond(B), locate at a pond(A))", ["A is a fish, B is a giraffe, so B is not more likely to be in a pond than A"]]}
{"original": ["animal(A, cat) and animal(B, horse), so More(locate at someone's home(A), locate at someone's home(B))", ["A is a cat, B is a horse, so A is more likely to be in someone's home than B"]], "negated": ["animal(A, cat) and animal(B, horse), so not Less(locate at someone's home(A), locate at someone's home(B))", ["A is a cat, B is a horse, so A is not less likely to be in someone's home than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, horse), so Less(locate at someone's home(A), locate at someone's home(B))", ["B is a cat, A is a horse, so A is less likely to be in someone's home than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, horse), so Less(locate at someone's home(B), locate at someone's home(A))", ["A is a cat, B is a horse, so B is less likely to be in someone's home than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, horse), so not More(locate at someone's home(A), locate at someone's home(B))", ["B is a cat, A is a horse, so A is not more likely to be in someone's home than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, horse), so not More(locate at someone's home(B), locate at someone's home(A))", ["A is a cat, B is a horse, so B is not more likely to be in someone's home than A"]]}
{"original": ["animal(A, monkey) and animal(B, dog), so More(throw a banana(A), throw a banana(B))", ["A is a monkey, B is a dog, so A is more likely to throw a banana than B"]], "negated": ["animal(A, monkey) and animal(B, dog), so not Less(throw a banana(A), throw a banana(B))", ["A is a monkey, B is a dog, so A is not less likely to throw a banana than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, dog), so Less(throw a banana(A), throw a banana(B))", ["B is a monkey, A is a dog, so A is less likely to throw a banana than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, dog), so Less(throw a banana(B), throw a banana(A))", ["A is a monkey, B is a dog, so B is less likely to throw a banana than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, dog), so not More(throw a banana(A), throw a banana(B))", ["B is a monkey, A is a dog, so A is not more likely to throw a banana than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, dog), so not More(throw a banana(B), throw a banana(A))", ["A is a monkey, B is a dog, so B is not more likely to throw a banana than A"]]}
{"original": ["animal(A, spider) and animal(B, snake), so More(spin webs(A), spin webs(B))", ["A is a spider, B is a snake, so A is more likely to spin webs than B"]], "negated": ["animal(A, spider) and animal(B, snake), so not Less(spin webs(A), spin webs(B))", ["A is a spider, B is a snake, so A is not less likely to spin webs than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, snake), so Less(spin webs(A), spin webs(B))", ["B is a spider, A is a snake, so A is less likely to spin webs than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, snake), so Less(spin webs(B), spin webs(A))", ["A is a spider, B is a snake, so B is less likely to spin webs than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, snake), so not More(spin webs(A), spin webs(B))", ["B is a spider, A is a snake, so A is not more likely to spin webs than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, snake), so not More(spin webs(B), spin webs(A))", ["A is a spider, B is a snake, so B is not more likely to spin webs than A"]]}
{"original": ["animal(A, horse) and animal(B, camel), so More(run in a pasture(A), run in a pasture(B))", ["A is a horse, B is a camel, so A is more likely to run in a pasture than B"]], "negated": ["animal(A, horse) and animal(B, camel), so not Less(run in a pasture(A), run in a pasture(B))", ["A is a horse, B is a camel, so A is not less likely to run in a pasture than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, camel), so Less(run in a pasture(A), run in a pasture(B))", ["B is a horse, A is a camel, so A is less likely to run in a pasture than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, camel), so Less(run in a pasture(B), run in a pasture(A))", ["A is a horse, B is a camel, so B is less likely to run in a pasture than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, camel), so not More(run in a pasture(A), run in a pasture(B))", ["B is a horse, A is a camel, so A is not more likely to run in a pasture than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, camel), so not More(run in a pasture(B), run in a pasture(A))", ["A is a horse, B is a camel, so B is not more likely to run in a pasture than A"]]}
{"original": ["animal(A, cow) and animal(B, eagle), so More(locate at a ranch(A), locate at a ranch(B))", ["A is a cow, B is a eagle, so A is more likely to be on a ranch than B"]], "negated": ["animal(A, cow) and animal(B, eagle), so not Less(locate at a ranch(A), locate at a ranch(B))", ["A is a cow, B is a eagle, so A is not less likely to be on a ranch than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, eagle), so Less(locate at a ranch(A), locate at a ranch(B))", ["B is a cow, A is a eagle, so A is less likely to be on a ranch than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, eagle), so Less(locate at a ranch(B), locate at a ranch(A))", ["A is a cow, B is a eagle, so B is less likely to be on a ranch than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, eagle), so not More(locate at a ranch(A), locate at a ranch(B))", ["B is a cow, A is a eagle, so A is not more likely to be on a ranch than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, eagle), so not More(locate at a ranch(B), locate at a ranch(A))", ["A is a cow, B is a eagle, so B is not more likely to be on a ranch than A"]]}
{"original": ["animal(A, dog) and animal(B, wolf), so More(guide a blind person(A), guide a blind person(B))", ["A is a dog, B is a wolf, so A is more likely to guide a blind person than B"]], "negated": ["animal(A, dog) and animal(B, wolf), so not Less(guide a blind person(A), guide a blind person(B))", ["A is a dog, B is a wolf, so A is not less likely to guide a blind person than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, wolf), so Less(guide a blind person(A), guide a blind person(B))", ["B is a dog, A is a wolf, so A is less likely to guide a blind person than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, wolf), so Less(guide a blind person(B), guide a blind person(A))", ["A is a dog, B is a wolf, so B is less likely to guide a blind person than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, wolf), so not More(guide a blind person(A), guide a blind person(B))", ["B is a dog, A is a wolf, so A is not more likely to guide a blind person than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, wolf), so not More(guide a blind person(B), guide a blind person(A))", ["A is a dog, B is a wolf, so B is not more likely to guide a blind person than A"]]}
{"original": ["animal(A, dog) and animal(B, deer), so More(hear whistling(A), hear whistling(B))", ["A is a dog, B is a deer, so A is more likely to hear whistling than B"]], "negated": ["animal(A, dog) and animal(B, deer), so not Less(hear whistling(A), hear whistling(B))", ["A is a dog, B is a deer, so A is not less likely to hear whistling than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, deer), so Less(hear whistling(A), hear whistling(B))", ["B is a dog, A is a deer, so A is less likely to hear whistling than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, deer), so Less(hear whistling(B), hear whistling(A))", ["A is a dog, B is a deer, so B is less likely to hear whistling than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, deer), so not More(hear whistling(A), hear whistling(B))", ["B is a dog, A is a deer, so A is not more likely to hear whistling than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, deer), so not More(hear whistling(B), hear whistling(A))", ["A is a dog, B is a deer, so B is not more likely to hear whistling than A"]]}
{"original": ["animal(A, rat) and animal(B, monkey), so More(eat wires(A), eat wires(B))", ["A is a rat, B is a monkey, so A is more likely to eat wires than B"]], "negated": ["animal(A, rat) and animal(B, monkey), so not Less(eat wires(A), eat wires(B))", ["A is a rat, B is a monkey, so A is not less likely to eat wires than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, monkey), so Less(eat wires(A), eat wires(B))", ["B is a rat, A is a monkey, so A is less likely to eat wires than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, monkey), so Less(eat wires(B), eat wires(A))", ["A is a rat, B is a monkey, so B is less likely to eat wires than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, monkey), so not More(eat wires(A), eat wires(B))", ["B is a rat, A is a monkey, so A is not more likely to eat wires than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, monkey), so not More(eat wires(B), eat wires(A))", ["A is a rat, B is a monkey, so B is not more likely to eat wires than A"]]}
{"original": ["animal(A, cat) and animal(B, alligator), so More(wash its paws(A), wash its paws(B))", ["A is a cat, B is a alligator, so A is more likely to wash its paws than B"]], "negated": ["animal(A, cat) and animal(B, alligator), so not Less(wash its paws(A), wash its paws(B))", ["A is a cat, B is a alligator, so A is not less likely to wash its paws than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, alligator), so Less(wash its paws(A), wash its paws(B))", ["B is a cat, A is an alligator, so A is less likely to wash its paws than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, alligator), so Less(wash its paws(B), wash its paws(A))", ["A is a cat, B is a alligator, so B is less likely to wash its paws than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, alligator), so not More(wash its paws(A), wash its paws(B))", ["B is a cat, A is an alligator, so A is not more likely to wash its paws than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, alligator), so not More(wash its paws(B), wash its paws(A))", ["A is a cat, B is a alligator, so B is not more likely to wash its paws than A"]]}
{"original": ["animal(A, snake) and animal(B, turtle), so More( be rude(A),  be rude(B))", ["A is a snake, B is a turtle, so A is more likely to be rude than B"]], "negated": ["animal(A, snake) and animal(B, turtle), so not Less( be rude(A),  be rude(B))", ["A is a snake, B is a turtle, so A is not less likely to be rude than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, turtle), so Less( be rude(A),  be rude(B))", ["B is a snake, A is a turtle, so A is less likely to be rude than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, turtle), so Less( be rude(B),  be rude(A))", ["A is a snake, B is a turtle, so B is less likely to be rude than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, turtle), so not More( be rude(A),  be rude(B))", ["B is a snake, A is a turtle, so A is not more likely to be rude than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, turtle), so not More( be rude(B),  be rude(A))", ["A is a snake, B is a turtle, so B is not more likely to be rude than A"]]}
{"original": ["animal(A, bear) and animal(B, deer), so More(climb a tree(A), climb a tree(B))", ["A is a bear, B is a deer, so A is more likely to climb a tree than B"]], "negated": ["animal(A, bear) and animal(B, deer), so not Less(climb a tree(A), climb a tree(B))", ["A is a bear, B is a deer, so A is not less likely to climb a tree than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, deer), so Less(climb a tree(A), climb a tree(B))", ["B is a bear, A is a deer, so A is less likely to climb a tree than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, deer), so Less(climb a tree(B), climb a tree(A))", ["A is a bear, B is a deer, so B is less likely to climb a tree than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, deer), so not More(climb a tree(A), climb a tree(B))", ["B is a bear, A is a deer, so A is not more likely to climb a tree than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, deer), so not More(climb a tree(B), climb a tree(A))", ["A is a bear, B is a deer, so B is not more likely to climb a tree than A"]]}
{"original": ["animal(A, bear) and animal(B, squirrel), so More(locate at the countryside(A), locate at the countryside(B))", ["A is a bear, B is a squirrel, so A is more likely to be in the countryside than B"]], "negated": ["animal(A, bear) and animal(B, squirrel), so not Less(locate at the countryside(A), locate at the countryside(B))", ["A is a bear, B is a squirrel, so A is not less likely to be in the countryside than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, squirrel), so Less(locate at the countryside(A), locate at the countryside(B))", ["B is a bear, A is a squirrel, so A is less likely to be in the countryside than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, squirrel), so Less(locate at the countryside(B), locate at the countryside(A))", ["A is a bear, B is a squirrel, so B is less likely to be in the countryside than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, squirrel), so not More(locate at the countryside(A), locate at the countryside(B))", ["B is a bear, A is a squirrel, so A is not more likely to be in the countryside than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, squirrel), so not More(locate at the countryside(B), locate at the countryside(A))", ["A is a bear, B is a squirrel, so B is not more likely to be in the countryside than A"]]}
{"original": ["animal(A, kangaroo) and animal(B, giraffe), so More(jump(A), jump(B))", ["A is a kangaroo, B is a giraffe, so A is more likely to jump than B"]], "negated": ["animal(A, kangaroo) and animal(B, giraffe), so not Less(jump(A), jump(B))", ["A is a kangaroo, B is a giraffe, so A is not less likely to jump than B"]], "asymmetric_premise": ["animal(B, kangaroo) and animal(A, giraffe), so Less(jump(A), jump(B))", ["B is a kangaroo, A is a giraffe, so A is less likely to jump than B"]], "asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, giraffe), so Less(jump(B), jump(A))", ["A is a kangaroo, B is a giraffe, so B is less likely to jump than A"]], "negated_asymmetric_premise": ["animal(B, kangaroo) and animal(A, giraffe), so not More(jump(A), jump(B))", ["B is a kangaroo, A is a giraffe, so A is not more likely to jump than B"]], "negated_asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, giraffe), so not More(jump(B), jump(A))", ["A is a kangaroo, B is a giraffe, so B is not more likely to jump than A"]]}
{"original": ["animal(A, spider) and animal(B, kangaroo), so More(locate at a web(A), locate at a web(B))", ["A is a spider, B is a kangaroo, so A is more likely to be in a web than B"]], "negated": ["animal(A, spider) and animal(B, kangaroo), so not Less(locate at a web(A), locate at a web(B))", ["A is a spider, B is a kangaroo, so A is not less likely to be in a web than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, kangaroo), so Less(locate at a web(A), locate at a web(B))", ["B is a spider, A is a kangaroo, so A is less likely to be in a web than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, kangaroo), so Less(locate at a web(B), locate at a web(A))", ["A is a spider, B is a kangaroo, so B is less likely to be in a web than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, kangaroo), so not More(locate at a web(A), locate at a web(B))", ["B is a spider, A is a kangaroo, so A is not more likely to be in a web than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, kangaroo), so not More(locate at a web(B), locate at a web(A))", ["A is a spider, B is a kangaroo, so B is not more likely to be in a web than A"]]}
{"original": ["animal(A, pig) and animal(B, alligator), so More(find truffles(A), find truffles(B))", ["A is a pig, B is an alligator, so A is more likely to find truffles than B"]], "negated": ["animal(A, pig) and animal(B, alligator), so not Less(find truffles(A), find truffles(B))", ["A is a pig, B is an alligator, so A is not less likely to find truffles than B"]], "asymmetric_premise": ["animal(B, pig) and animal(A, alligator), so Less(find truffles(A), find truffles(B))", ["B is a pig, A is an alligator, so A is less likely to find truffles than B"]], "asymmetric_conclusion": ["animal(A, pig) and animal(B, alligator), so Less(find truffles(B), find truffles(A))", ["A is a pig, B is an alligator, so B is less likely to find truffles than A"]], "negated_asymmetric_premise": ["animal(B, pig) and animal(A, alligator), so not More(find truffles(A), find truffles(B))", ["B is a pig, A is an alligator, so A is not more likely to find truffles than B"]], "negated_asymmetric_conclusion": ["animal(A, pig) and animal(B, alligator), so not More(find truffles(B), find truffles(A))", ["A is a pig, B is a alligator, so B is not more likely to find truffles than A"]]}
{"original": ["animal(A, bee) and animal(B, tiger), so More(locate at the sky(A), locate at the sky(B))", ["A is a bee, B is a tiger, so A is more likely to be in the sky than B"]], "negated": ["animal(A, bee) and animal(B, tiger), so not Less(locate at the sky(A), locate at the sky(B))", ["A is a bee, B is a tiger, so A is not less likely to be in the sky than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, tiger), so Less(locate at the sky(A), locate at the sky(B))", ["B is a bee, A is a tiger, so A is less likely to be in the sky than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, tiger), so Less(locate at the sky(B), locate at the sky(A))", ["A is a bee, B is a tiger, so B is less likely to be in the sky than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, tiger), so not More(locate at the sky(A), locate at the sky(B))", ["B is a bee, A is a tiger, so A is not more likely to be in the sky than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, tiger), so not More(locate at the sky(B), locate at the sky(A))", ["A is a bee, B is a tiger, so B is not more likely to be in the sky than A"]]}
{"original": ["animal(A, snake) and animal(B, dolphin), so More(locate at a field(A), locate at a field(B))", ["A is a snake, B is a dolphin, so A is more likely to be in a field than B"]], "negated": ["animal(A, snake) and animal(B, dolphin), so not Less(locate at a field(A), locate at a field(B))", ["A is a snake, B is a dolphin, so A is not less likely to be in a field than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, dolphin), so Less(locate at a field(A), locate at a field(B))", ["B is a snake, A is a dolphin, so A is less likely to be in a field than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, dolphin), so Less(locate at a field(B), locate at a field(A))", ["A is a snake, B is a dolphin, so B is less likely to be in a field than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, dolphin), so not More(locate at a field(A), locate at a field(B))", ["B is a snake, A is a dolphin, so A is not more likely to be in a field than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, dolphin), so not More(locate at a field(B), locate at a field(A))", ["A is a snake, B is a dolphin, so B is not more likely to be in a field than A"]]}
{"original": ["animal(A, cat) and animal(B, cheetah), so More(locate at my lap(A), locate at my lap(B))", ["A is a cat, B is a cheetah, so A is more likely to be in my lap than B"]], "negated": ["animal(A, cat) and animal(B, cheetah), so not Less(locate at my lap(A), locate at my lap(B))", ["A is a cat, B is a cheetah, so A is not less likely to be in my lap than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, cheetah), so Less(locate at my lap(A), locate at my lap(B))", ["B is a cat, A is a cheetah, so A is less likely to be in my lap than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, cheetah), so Less(locate at my lap(B), locate at my lap(A))", ["A is a cat, B is a cheetah, so B is less likely to be in my lap than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, cheetah), so not More(locate at my lap(A), locate at my lap(B))", ["B is a cat, A is a cheetah, so A is not more likely to be in my lap than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, cheetah), so not More(locate at my lap(B), locate at my lap(A))", ["A is a cat, B is a cheetah, so B is not more likely to be in my lap than A"]]}
{"original": ["animal(A, fly) and animal(B, fish), so More(fly around(A), fly around(B))", ["A is a fly, B is a fish, so A is more likely to fly around than B"]], "negated": ["animal(A, fly) and animal(B, fish), so not Less(fly around(A), fly around(B))", ["A is a fly, B is a fish, so A is not less likely to fly around than B"]], "asymmetric_premise": ["animal(B, fly) and animal(A, fish), so Less(fly around(A), fly around(B))", ["B is a fly, A is a fish, so A is less likely to fly around than B"]], "asymmetric_conclusion": ["animal(A, fly) and animal(B, fish), so Less(fly around(B), fly around(A))", ["A is a fly, B is a fish, so B is less likely to fly around than A"]], "negated_asymmetric_premise": ["animal(B, fly) and animal(A, fish), so not More(fly around(A), fly around(B))", ["B is a fly, A is a fish, so A is not more likely to fly around than B"]], "negated_asymmetric_conclusion": ["animal(A, fly) and animal(B, fish), so not More(fly around(B), fly around(A))", ["A is a fly, B is a fish, so B is not more likely to fly around than A"]]}
{"original": ["animal(A, turtle) and animal(B, frog), so More(live in water or on land(A), live in water or on land(B))", ["A is a turtle, B is a frog, so A is more likely to live in water than B"]], "negated": ["animal(A, turtle) and animal(B, frog), so not Less(live in water or on land(A), live in water or on land(B))", ["A is a turtle, B is a frog, so A is not less likely to live in water than B"]], "asymmetric_premise": ["animal(B, turtle) and animal(A, frog), so Less(live in water or on land(A), live in water or on land(B))", ["B is a turtle, A is a frog, so A is less likely to live in water than B"]], "asymmetric_conclusion": ["animal(A, turtle) and animal(B, frog), so Less(live in water or on land(B), live in water or on land(A))", ["A is a turtle, B is a frog, so B is less likely to live in water than A"]], "negated_asymmetric_premise": ["animal(B, turtle) and animal(A, frog), so not More(live in water or on land(A), live in water or on land(B))", ["B is a turtle, A is a frog, so A is not more likely to live in water than B"]], "negated_asymmetric_conclusion": ["animal(A, turtle) and animal(B, frog), so not More(live in water or on land(B), live in water or on land(A))", ["A is a turtle, B is a frog, so B is not more likely to live in water than A"]]}
{"original": ["animal(A, chicken) and animal(B, cat), so More(become a food(A), become a food(B))", ["A is a chicken, B is a cat, so A is more likely to become a food than B"]], "negated": ["animal(A, chicken) and animal(B, cat), so not Less(become a food(A), become a food(B))", ["A is a chicken, B is a cat, so A is not less likely to become a food than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, cat), so Less(become a food(A), become a food(B))", ["B is a chicken, A is a cat, so A is less likely to become a food than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, cat), so Less(become a food(B), become a food(A))", ["A is a chicken, B is a cat, so B is less likely to become a food than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, cat), so not More(become a food(A), become a food(B))", ["B is a chicken, A is a cat, so A is not more likely to become a food than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, cat), so not More(become a food(B), become a food(A))", ["A is a chicken, B is a cat, so B is not more likely to become a food than A"]]}
{"original": ["animal(A, spider) and animal(B, ant), so More(locate at the floor(A), locate at the floor(B))", ["A is a spider, B is a ant, so A is more likely to be on the floor than B"]], "negated": ["animal(A, spider) and animal(B, ant), so not Less(locate at the floor(A), locate at the floor(B))", ["A is a spider, B is an ant, so A is not less likely to be on the floor than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, ant), so Less(locate at the floor(A), locate at the floor(B))", ["B is a spider, A is an ant, so A is less likely to be on the floor than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, ant), so Less(locate at the floor(B), locate at the floor(A))", ["A is a spider, B is an ant, so B is less likely to be on the floor than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, ant), so not More(locate at the floor(A), locate at the floor(B))", ["B is a spider, A is an ant, so A is not more likely to be on the floor than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, ant), so not More(locate at the floor(B), locate at the floor(A))", ["A is a spider, B is an ant, so B is not more likely to be on the floor than A"]]}
{"original": ["animal(A, rabbit) and animal(B, seal), so More(spring over a bush(A), spring over a bush(B))", ["A is a rabbit, B is a seal, so A is more likely to spring over a bush than B"]], "negated": ["animal(A, rabbit) and animal(B, seal), so not Less(spring over a bush(A), spring over a bush(B))", ["A is a rabbit, B is a seal, so A is not less likely to spring over a bush than B"]], "asymmetric_premise": ["animal(B, rabbit) and animal(A, seal), so Less(spring over a bush(A), spring over a bush(B))", ["B is a rabbit, A is a seal, so A is less likely to spring over a bush than B"]], "asymmetric_conclusion": ["animal(A, rabbit) and animal(B, seal), so Less(spring over a bush(B), spring over a bush(A))", ["A is a rabbit, B is a seal, so B is less likely to spring over a bush than A"]], "negated_asymmetric_premise": ["animal(B, rabbit) and animal(A, seal), so not More(spring over a bush(A), spring over a bush(B))", ["B is a rabbit, A is a seal, so A is not more likely to spring over a bush than B"]], "negated_asymmetric_conclusion": ["animal(A, rabbit) and animal(B, seal), so not More(spring over a bush(B), spring over a bush(A))", ["A is a rabbit, B is a seal, so B is not more likely to spring over a bush than A"]]}
{"original": ["animal(A, elephant) and animal(B, rat), so More(lift logs from the ground(A), lift logs from the ground(B))", ["A is a elephant, B is a rat, so A is more likely to lift logs from the ground than B"]], "negated": ["animal(A, elephant) and animal(B, rat), so not Less(lift logs from the ground(A), lift logs from the ground(B))", ["A is a elephant, B is a rat, so A is not less likely to lift logs from the ground than B"]], "asymmetric_premise": ["animal(B, elephant) and animal(A, rat), so Less(lift logs from the ground(A), lift logs from the ground(B))", ["B is a elephant, A is a rat, so A is less likely to lift logs from the ground than B"]], "asymmetric_conclusion": ["animal(A, elephant) and animal(B, rat), so Less(lift logs from the ground(B), lift logs from the ground(A))", ["A is a elephant, B is a rat, so B is less likely to lift logs from the ground than A"]], "negated_asymmetric_premise": ["animal(B, elephant) and animal(A, rat), so not More(lift logs from the ground(A), lift logs from the ground(B))", ["B is a elephant, A is a rat, so A is not more likely to lift logs from the ground than B"]], "negated_asymmetric_conclusion": ["animal(A, elephant) and animal(B, rat), so not More(lift logs from the ground(B), lift logs from the ground(A))", ["A is a elephant, B is a rat, so B is not more likely to lift logs from the ground than A"]]}
{"original": ["animal(A, tiger) and animal(B, ant), so More(hunt for food(A), hunt for food(B))", ["A is a tiger, B is a ant, so A is more likely to hunt for food than B"]], "negated": ["animal(A, tiger) and animal(B, ant), so not Less(hunt for food(A), hunt for food(B))", ["A is a tiger, B is a ant, so A is not less likely to hunt for food than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, ant), so Less(hunt for food(A), hunt for food(B))", ["B is a tiger, A is a ant, so A is less likely to hunt for food than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, ant), so Less(hunt for food(B), hunt for food(A))", ["A is a tiger, B is a ant, so B is less likely to hunt for food than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, ant), so not More(hunt for food(A), hunt for food(B))", ["B is a tiger, A is a ant, so A is not more likely to hunt for food than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, ant), so not More(hunt for food(B), hunt for food(A))", ["A is a tiger, B is a ant, so B is not more likely to hunt for food than A"]]}
{"original": ["animal(A, fish) and animal(B, eagle), so More(find the food(A), find the food(B))", ["A is a fish, B is a eagle, so A is more likely to find the food than B"]], "negated": ["animal(A, fish) and animal(B, eagle), so not Less(find the food(A), find the food(B))", ["A is a fish, B is a eagle, so A is not less likely to find the food than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, eagle), so Less(find the food(A), find the food(B))", ["B is a fish, A is a eagle, so A is less likely to find the food than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, eagle), so Less(find the food(B), find the food(A))", ["A is a fish, B is a eagle, so B is less likely to find the food than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, eagle), so not More(find the food(A), find the food(B))", ["B is a fish, A is a eagle, so A is not more likely to find the food than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, eagle), so not More(find the food(B), find the food(A))", ["A is a fish, B is a eagle, so B is not more likely to find the food than A"]]}
{"original": ["animal(A, goat) and animal(B, cat), so More(lead sheep to slaughter(A), lead sheep to slaughter(B))", ["A is a goat, B is a cat, so A is more likely to lead sheep to slaughter than B"]], "negated": ["animal(A, goat) and animal(B, cat), so not Less(lead sheep to slaughter(A), lead sheep to slaughter(B))", ["A is a goat, B is a cat, so A is not less likely to lead sheep to slaughter than B"]], "asymmetric_premise": ["animal(B, goat) and animal(A, cat), so Less(lead sheep to slaughter(A), lead sheep to slaughter(B))", ["B is a goat, A is a cat, so A is less likely to lead sheep to slaughter than B"]], "asymmetric_conclusion": ["animal(A, goat) and animal(B, cat), so Less(lead sheep to slaughter(B), lead sheep to slaughter(A))", ["A is a goat, B is a cat, so B is less likely to lead sheep to slaughter than A"]], "negated_asymmetric_premise": ["animal(B, goat) and animal(A, cat), so not More(lead sheep to slaughter(A), lead sheep to slaughter(B))", ["B is a goat, A is a cat, so A is not more likely to lead sheep to slaughter than B"]], "negated_asymmetric_conclusion": ["animal(A, goat) and animal(B, cat), so not More(lead sheep to slaughter(B), lead sheep to slaughter(A))", ["A is a goat, B is a cat, so B is not more likely to lead sheep to slaughter than A"]]}
{"original": ["animal(A, pig) and animal(B, giraffe), so More(lie down(A), lie down(B))", ["A is a pig, B is a giraffe, so A is more likely to lie down than B"]], "negated": ["animal(A, pig) and animal(B, giraffe), so not Less(lie down(A), lie down(B))", ["A is a pig, B is a giraffe, so A is not less likely to lie down than B"]], "asymmetric_premise": ["animal(B, pig) and animal(A, giraffe), so Less(lie down(A), lie down(B))", ["B is a pig, A is a giraffe, so A is less likely to lie down than B"]], "asymmetric_conclusion": ["animal(A, pig) and animal(B, giraffe), so Less(lie down(B), lie down(A))", ["A is a pig, B is a giraffe, so B is less likely to lie down than A"]], "negated_asymmetric_premise": ["animal(B, pig) and animal(A, giraffe), so not More(lie down(A), lie down(B))", ["B is a pig, A is a giraffe, so A is not more likely to lie down than B"]], "negated_asymmetric_conclusion": ["animal(A, pig) and animal(B, giraffe), so not More(lie down(B), lie down(A))", ["A is a pig, B is a giraffe, so B is not more likely to lie down than A"]]}
{"original": ["animal(A, chicken) and animal(B, snake), so More(locate at a fast-food restaurant(A), locate at a fast-food restaurant(B))", ["A is a chicken, B is a snake, so A is more likely to be in a fast-food restaurant than B"]], "negated": ["animal(A, chicken) and animal(B, snake), so not Less(locate at a fast-food restaurant(A), locate at a fast-food restaurant(B))", ["A is a chicken, B is a snake, so A is not less likely to be in a fast-food restaurant than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, snake), so Less(locate at a fast-food restaurant(A), locate at a fast-food restaurant(B))", ["B is a chicken, A is a snake, so A is less likely to be in a fast-food restaurant than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, snake), so Less(locate at a fast-food restaurant(B), locate at a fast-food restaurant(A))", ["A is a chicken, B is a snake, so B is less likely to be in a fast-food restaurant than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, snake), so not More(locate at a fast-food restaurant(A), locate at a fast-food restaurant(B))", ["B is a chicken, A is a snake, so A is not more likely to be in a fast-food restaurant than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, snake), so not More(locate at a fast-food restaurant(B), locate at a fast-food restaurant(A))", ["A is a chicken, B is a snake, so B is not more likely to be in a fast-food restaurant than A"]]}
{"original": ["animal(A, cat) and animal(B, ant), so More(locate at a vet(A), locate at a vet(B))", ["A is a cat, B is a ant, so A is more likely to be at a vet than B"]], "negated": ["animal(A, cat) and animal(B, ant), so not Less(locate at a vet(A), locate at a vet(B))", ["A is a cat, B is an ant, so A is not less likely to be at a vet than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, ant), so Less(locate at a vet(A), locate at a vet(B))", ["B is a cat, A is an ant, so A is less likely to be at a vet than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, ant), so Less(locate at a vet(B), locate at a vet(A))", ["A is a cat, B is an ant, so B is less likely to be at a vet than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, ant), so not More(locate at a vet(A), locate at a vet(B))", ["B is a cat, A is an ant, so A is not more likely to be at a vet than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, ant), so not More(locate at a vet(B), locate at a vet(A))", ["A is a cat, B is an ant, so B is not more likely to be at a vet than A"]]}
{"original": ["animal(A, bear) and animal(B, shark), so More(mother a cub(A), mother a cub(B))", ["A is a bear, B is a shark, so A is more likely to mother a cub than B"]], "negated": ["animal(A, bear) and animal(B, shark), so not Less(mother a cub(A), mother a cub(B))", ["A is a bear, B is a shark, so A is not less likely to mother a cub than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, shark), so Less(mother a cub(A), mother a cub(B))", ["B is a bear, A is a shark, so A is less likely to mother a cub than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, shark), so Less(mother a cub(B), mother a cub(A))", ["A is a bear, B is a shark, so B is less likely to mother a cub than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, shark), so not More(mother a cub(A), mother a cub(B))", ["B is a bear, A is a shark, so A is not more likely to mother a cub than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, shark), so not More(mother a cub(B), mother a cub(A))", ["A is a bear, B is a shark, so B is not more likely to mother a cub than A"]]}
{"original": ["animal(A, kangaroo) and animal(B, goat), so More(be jumping high(A), be jumping high(B))", ["A is a kangaroo, B is a goat, so A is more likely to be jumping high than B"]], "negated": ["animal(A, kangaroo) and animal(B, goat), so not Less(be jumping high(A), be jumping high(B))", ["A is a kangaroo, B is a goat, so A is not less likely to be jumping high than B"]], "asymmetric_premise": ["animal(B, kangaroo) and animal(A, goat), so Less(be jumping high(A), be jumping high(B))", ["B is a kangaroo, A is a goat, so A is less likely to be jumping high than B"]], "asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, goat), so Less(be jumping high(B), be jumping high(A))", ["A is a kangaroo, B is a goat, so B is less likely to be jumping high than A"]], "negated_asymmetric_premise": ["animal(B, kangaroo) and animal(A, goat), so not More(be jumping high(A), be jumping high(B))", ["B is a kangaroo, A is a goat, so A is not more likely to be jumping high than B"]], "negated_asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, goat), so not More(be jumping high(B), be jumping high(A))", ["A is a kangaroo, B is a goat, so B is not more likely to be jumping high than A"]]}
{"original": ["animal(A, seal) and animal(B, turtle), so More(locate at a zoo(A), locate at a zoo(B))", ["A is a seal, B is a turtle, so A is more likely to be in a zoo than B"]], "negated": ["animal(A, seal) and animal(B, turtle), so not Less(locate at a zoo(A), locate at a zoo(B))", ["A is a seal, B is a turtle, so A is not less likely to be in a zoo than B"]], "asymmetric_premise": ["animal(B, seal) and animal(A, turtle), so Less(locate at a zoo(A), locate at a zoo(B))", ["B is a seal, A is a turtle, so A is less likely to be in a zoo than B"]], "asymmetric_conclusion": ["animal(A, seal) and animal(B, turtle), so Less(locate at a zoo(B), locate at a zoo(A))", ["A is a seal, B is a turtle, so B is less likely to be in a zoo than A"]], "negated_asymmetric_premise": ["animal(B, seal) and animal(A, turtle), so not More(locate at a zoo(A), locate at a zoo(B))", ["B is a seal, A is a turtle, so A is not more likely to be in a zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, seal) and animal(B, turtle), so not More(locate at a zoo(B), locate at a zoo(A))", ["A is a seal, B is a turtle, so B is not more likely to be in a zoo than A"]]}
{"original": ["animal(A, bear) and animal(B, zebra), so More(mother her cubs(A), mother her cubs(B))", ["A is a bear, B is a zebra, so A is more likely to mother her cubs than B"]], "negated": ["animal(A, bear) and animal(B, zebra), so not Less(mother her cubs(A), mother her cubs(B))", ["A is a bear, B is a zebra, so A is not less likely to mother her cubs than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, zebra), so Less(mother her cubs(A), mother her cubs(B))", ["B is a bear, A is a zebra, so A is less likely to mother her cubs than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, zebra), so Less(mother her cubs(B), mother her cubs(A))", ["A is a bear, B is a zebra, so B is less likely to mother her cubs than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, zebra), so not More(mother her cubs(A), mother her cubs(B))", ["B is a bear, A is a zebra, so A is not more likely to mother her cubs than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, zebra), so not More(mother her cubs(B), mother her cubs(A))", ["A is a bear, B is a zebra, so B is not more likely to mother her cubs than A"]]}
{"original": ["animal(A, dog) and animal(B, scorpion), so More(locate at the rug(A), locate at the rug(B))", ["A is a dog, B is a scorpion, so A is more likely to be on the rug than B"]], "negated": ["animal(A, dog) and animal(B, scorpion), so not Less(locate at the rug(A), locate at the rug(B))", ["A is a dog, B is a scorpion, so A is not less likely to be on the rug than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, scorpion), so Less(locate at the rug(A), locate at the rug(B))", ["B is a dog, A is a scorpion, so A is less likely to be on the rug than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, scorpion), so Less(locate at the rug(B), locate at the rug(A))", ["A is a dog, B is a scorpion, so B is less likely to be on the rug than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, scorpion), so not More(locate at the rug(A), locate at the rug(B))", ["B is a dog, A is a scorpion, so A is not more likely to be on the rug than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, scorpion), so not More(locate at the rug(B), locate at the rug(A))", ["A is a dog, B is a scorpion, so B is not more likely to be on the rug than A"]]}
{"original": ["animal(A, rat) and animal(B, duck), so More(locate at a subway tunnel(A), locate at a subway tunnel(B))", ["A is a rat, B is a duck, so A is more likely to be in a subway tunnel than B"]], "negated": ["animal(A, rat) and animal(B, duck), so not Less(locate at a subway tunnel(A), locate at a subway tunnel(B))", ["A is a rat, B is a duck, so A is not less likely to be in a subway tunnel than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, duck), so Less(locate at a subway tunnel(A), locate at a subway tunnel(B))", ["B is a rat, A is a duck, so A is less likely to be in a subway tunnel than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, duck), so Less(locate at a subway tunnel(B), locate at a subway tunnel(A))", ["A is a rat, B is a duck, so B is less likely to be in a subway tunnel than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, duck), so not More(locate at a subway tunnel(A), locate at a subway tunnel(B))", ["B is a rat, A is a duck, so A is not more likely to be in a subway tunnel than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, duck), so not More(locate at a subway tunnel(B), locate at a subway tunnel(A))", ["A is a rat, B is a duck, so B is not more likely to be in a subway tunnel than A"]]}
{"original": ["animal(A, dog) and animal(B, turtle), so More(sense danger(A), sense danger(B))", ["A is a dog, B is a turtle, so A is more likely to sense danger than B"]], "negated": ["animal(A, dog) and animal(B, turtle), so not Less(sense danger(A), sense danger(B))", ["A is a dog, B is a turtle, so A is not less likely to sense danger than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, turtle), so Less(sense danger(A), sense danger(B))", ["B is a dog, A is a turtle, so A is less likely to sense danger than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, turtle), so Less(sense danger(B), sense danger(A))", ["A is a dog, B is a turtle, so B is less likely to sense danger than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, turtle), so not More(sense danger(A), sense danger(B))", ["B is a dog, A is a turtle, so A is not more likely to sense danger than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, turtle), so not More(sense danger(B), sense danger(A))", ["A is a dog, B is a turtle, so B is not more likely to sense danger than A"]]}
{"original": ["animal(A, cat) and animal(B, lobster), so More(locate at your way(A), locate at your way(B))", ["A is a cat, B is a lobster, so A is more likely to be in your way than B"]], "negated": ["animal(A, cat) and animal(B, lobster), so not Less(locate at your way(A), locate at your way(B))", ["A is a cat, B is a lobster, so A is not less likely to be in your way than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, lobster), so Less(locate at your way(A), locate at your way(B))", ["B is a cat, A is a lobster, so A is less likely to be in your way than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, lobster), so Less(locate at your way(B), locate at your way(A))", ["A is a cat, B is a lobster, so B is less likely to be in your way than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, lobster), so not More(locate at your way(A), locate at your way(B))", ["B is a cat, A is a lobster, so A is not more likely to be in your way than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, lobster), so not More(locate at your way(B), locate at your way(A))", ["A is a cat, B is a lobster, so B is not more likely to be in your way than A"]]}
{"original": ["animal(A, spider) and animal(B, monkey), so More(inject venom(A), inject venom(B))", ["A is a spider, B is a monkey, so A is more likely to inject venom than B"]], "negated": ["animal(A, spider) and animal(B, monkey), so not Less(inject venom(A), inject venom(B))", ["A is a spider, B is a monkey, so A is not less likely to inject venom than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, monkey), so Less(inject venom(A), inject venom(B))", ["B is a spider, A is a monkey, so A is less likely to inject venom than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, monkey), so Less(inject venom(B), inject venom(A))", ["A is a spider, B is a monkey, so B is less likely to inject venom than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, monkey), so not More(inject venom(A), inject venom(B))", ["B is a spider, A is a monkey, so A is not more likely to inject venom than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, monkey), so not More(inject venom(B), inject venom(A))", ["A is a spider, B is a monkey, so B is not more likely to inject venom than A"]]}
{"original": ["animal(A, hamster) and animal(B, octopus), so More(burrow(A), burrow(B))", ["A is a hamster, B is a octopus, so A is more likely to burrow than B"]], "negated": ["animal(A, hamster) and animal(B, octopus), so not Less(burrow(A), burrow(B))", ["A is a hamster, B is a octopus, so A is not less likely to burrow than B"]], "asymmetric_premise": ["animal(B, hamster) and animal(A, octopus), so Less(burrow(A), burrow(B))", ["B is a hamster, A is a octopus, so A is less likely to burrow than B"]], "asymmetric_conclusion": ["animal(A, hamster) and animal(B, octopus), so Less(burrow(B), burrow(A))", ["A is a hamster, B is a octopus, so B is less likely to burrow than A"]], "negated_asymmetric_premise": ["animal(B, hamster) and animal(A, octopus), so not More(burrow(A), burrow(B))", ["B is a hamster, A is a octopus, so A is not more likely to burrow than B"]], "negated_asymmetric_conclusion": ["animal(A, hamster) and animal(B, octopus), so not More(burrow(B), burrow(A))", ["A is a hamster, B is a octopus, so B is not more likely to burrow than A"]]}
{"original": ["animal(A, turtle) and animal(B, snake), so More(live a long time(A), live a long time(B))", ["A is a turtle, B is a snake, so A is likely to live a longer time than B"]], "negated": ["animal(A, turtle) and animal(B, snake), so not Less(live a long time(A), live a long time(B))", ["A is a turtle, B is a snake, so A is not less likely to live a long time than B"]], "asymmetric_premise": ["animal(B, turtle) and animal(A, snake), so Less(live a long time(A), live a long time(B))", ["B is a turtle, A is a snake, so A is less likely to live a long time than B"]], "asymmetric_conclusion": ["animal(A, turtle) and animal(B, snake), so Less(live a long time(B), live a long time(A))", ["A is a turtle, B is a snake, so B is less likely to live a long time than A"]], "negated_asymmetric_premise": ["animal(B, turtle) and animal(A, snake), so not More(live a long time(A), live a long time(B))", ["B is a turtle, A is a snake, so A is not more likely to live a long time than B"]], "negated_asymmetric_conclusion": ["animal(A, turtle) and animal(B, snake), so not More(live a long time(B), live a long time(A))", ["A is a turtle, B is a snake, so B is not more likely to live a long time than A"]]}
{"original": ["animal(A, bird) and animal(B, rabbit), so More(locate at a cage(A), locate at a cage(B))", ["A is a bird, B is a rabbit, so A is more likely to be in a cage than B"]], "negated": ["animal(A, bird) and animal(B, rabbit), so not Less(locate at a cage(A), locate at a cage(B))", ["A is a bird, B is a rabbit, so A is not less likely to be in a cage than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, rabbit), so Less(locate at a cage(A), locate at a cage(B))", ["B is a bird, A is a rabbit, so A is less likely to be in a cage than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, rabbit), so Less(locate at a cage(B), locate at a cage(A))", ["A is a bird, B is a rabbit, so B is less likely to be in a cage than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, rabbit), so not More(locate at a cage(A), locate at a cage(B))", ["B is a bird, A is a rabbit, so A is not more likely to be in a cage than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, rabbit), so not More(locate at a cage(B), locate at a cage(A))", ["A is a bird, B is a rabbit, so B is not more likely to be in a cage than A"]]}
{"original": ["animal(A, ant) and animal(B, cat), so More(locate at the carpet(A), locate at the carpet(B))", ["A is a ant, B is a cat, so A is more likely to be on the carpet than B"]], "negated": ["animal(A, ant) and animal(B, cat), so not Less(locate at the carpet(A), locate at the carpet(B))", ["A is a ant, B is a cat, so A is not less likely to be on the carpet than B"]], "asymmetric_premise": ["animal(B, ant) and animal(A, cat), so Less(locate at the carpet(A), locate at the carpet(B))", ["B is a ant, A is a cat, so A is less likely to be on the carpet than B"]], "asymmetric_conclusion": ["animal(A, ant) and animal(B, cat), so Less(locate at the carpet(B), locate at the carpet(A))", ["A is a ant, B is a cat, so B is less likely to be on the carpet than A"]], "negated_asymmetric_premise": ["animal(B, ant) and animal(A, cat), so not More(locate at the carpet(A), locate at the carpet(B))", ["B is a ant, A is a cat, so A is not more likely to be on the carpet than B"]], "negated_asymmetric_conclusion": ["animal(A, ant) and animal(B, cat), so not More(locate at the carpet(B), locate at the carpet(A))", ["A is a ant, B is a cat, so B is not more likely to be on the carpet than A"]]}
{"original": ["animal(A, bear) and animal(B, frog), so More(eat a salmon(A), eat a salmon(B))", ["A is a bear, B is a frog, so A is more likely to eat a salmon than B"]], "negated": ["animal(A, bear) and animal(B, frog), so not Less(eat a salmon(A), eat a salmon(B))", ["A is a bear, B is a frog, so A is not less likely to eat a salmon than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, frog), so Less(eat a salmon(A), eat a salmon(B))", ["B is a bear, A is a frog, so A is less likely to eat a salmon than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, frog), so Less(eat a salmon(B), eat a salmon(A))", ["A is a bear, B is a frog, so B is less likely to eat a salmon than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, frog), so not More(eat a salmon(A), eat a salmon(B))", ["B is a bear, A is a frog, so A is not more likely to eat a salmon than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, frog), so not More(eat a salmon(B), eat a salmon(A))", ["A is a bear, B is a frog, so B is not more likely to eat a salmon than A"]]}
{"original": ["animal(A, horse) and animal(B, alligator), so More(drink water(A), drink water(B))", ["A is a horse, B is a alligator, so A is more likely to drink water than B"]], "negated": ["animal(A, horse) and animal(B, alligator), so not Less(drink water(A), drink water(B))", ["A is a horse, B is a alligator, so A is not less likely to drink water than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, alligator), so Less(drink water(A), drink water(B))", ["B is a horse, A is an alligator, so A is less likely to drink water than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, alligator), so Less(drink water(B), drink water(A))", ["A is a horse, B is a alligator, so B is less likely to drink water than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, alligator), so not More(drink water(A), drink water(B))", ["B is a horse, A is an alligator, so A is not more likely to drink water than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, alligator), so not More(drink water(B), drink water(A))", ["A is a horse, B is a alligator, so B is not more likely to drink water than A"]]}
{"original": ["animal(A, cheetah) and animal(B, owl), so More(catch a gazelle(A), catch a gazelle(B))", ["A is a cheetah, B is a owl, so A is more likely to catch a gazelle than B"]], "negated": ["animal(A, cheetah) and animal(B, owl), so not Less(catch a gazelle(A), catch a gazelle(B))", ["A is a cheetah, B is a owl, so A is not less likely to catch a gazelle than B"]], "asymmetric_premise": ["animal(B, cheetah) and animal(A, owl), so Less(catch a gazelle(A), catch a gazelle(B))", ["B is a cheetah, A is a owl, so A is less likely to catch a gazelle than B"]], "asymmetric_conclusion": ["animal(A, cheetah) and animal(B, owl), so Less(catch a gazelle(B), catch a gazelle(A))", ["A is a cheetah, B is a owl, so B is less likely to catch a gazelle than A"]], "negated_asymmetric_premise": ["animal(B, cheetah) and animal(A, owl), so not More(catch a gazelle(A), catch a gazelle(B))", ["B is a cheetah, A is a owl, so A is not more likely to catch a gazelle than B"]], "negated_asymmetric_conclusion": ["animal(A, cheetah) and animal(B, owl), so not More(catch a gazelle(B), catch a gazelle(A))", ["A is a cheetah, B is a owl, so B is not more likely to catch a gazelle than A"]]}
{"original": ["animal(A, fox) and animal(B, giraffe), so More(kill chickens(A), kill chickens(B))", ["A is a fox, B is a giraffe, so A is more likely to kill chickens than B"]], "negated": ["animal(A, fox) and animal(B, giraffe), so not Less(kill chickens(A), kill chickens(B))", ["A is a fox, B is a giraffe, so A is not less likely to kill chickens than B"]], "asymmetric_premise": ["animal(B, fox) and animal(A, giraffe), so Less(kill chickens(A), kill chickens(B))", ["B is a fox, A is a giraffe, so A is less likely to kill chickens than B"]], "asymmetric_conclusion": ["animal(A, fox) and animal(B, giraffe), so Less(kill chickens(B), kill chickens(A))", ["A is a fox, B is a giraffe, so B is less likely to kill chickens than A"]], "negated_asymmetric_premise": ["animal(B, fox) and animal(A, giraffe), so not More(kill chickens(A), kill chickens(B))", ["B is a fox, A is a giraffe, so A is not more likely to kill chickens than B"]], "negated_asymmetric_conclusion": ["animal(A, fox) and animal(B, giraffe), so not More(kill chickens(B), kill chickens(A))", ["A is a fox, B is a giraffe, so B is not more likely to kill chickens than A"]]}
{"original": ["animal(A, rat) and animal(B, fox), so More(be a pet(A), be a pet(B))", ["A is a rat, B is a fox, so A is more likely to be a pet than B"]], "negated": ["animal(A, rat) and animal(B, fox), so not Less(be a pet(A), be a pet(B))", ["A is a rat, B is a fox, so A is not less likely to be a pet than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, fox), so Less(be a pet(A), be a pet(B))", ["B is a rat, A is a fox, so A is less likely to be a pet than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, fox), so Less(be a pet(B), be a pet(A))", ["A is a rat, B is a fox, so B is less likely to be a pet than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, fox), so not More(be a pet(A), be a pet(B))", ["B is a rat, A is a fox, so A is not more likely to be a pet than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, fox), so not More(be a pet(B), be a pet(A))", ["A is a rat, B is a fox, so B is not more likely to be a pet than A"]]}
{"original": ["animal(A, deer) and animal(B, scorpion), so More(locate at the countryside(A), locate at the countryside(B))", ["A is a deer, B is a scorpion, so A is more likely to be in the countryside than B"]], "negated": ["animal(A, deer) and animal(B, scorpion), so not Less(locate at the countryside(A), locate at the countryside(B))", ["A is a deer, B is a scorpion, so A is not less likely to be in the countryside than B"]], "asymmetric_premise": ["animal(B, deer) and animal(A, scorpion), so Less(locate at the countryside(A), locate at the countryside(B))", ["B is a deer, A is a scorpion, so A is less likely to be in the countryside than B"]], "asymmetric_conclusion": ["animal(A, deer) and animal(B, scorpion), so Less(locate at the countryside(B), locate at the countryside(A))", ["A is a deer, B is a scorpion, so B is less likely to be in the countryside than A"]], "negated_asymmetric_premise": ["animal(B, deer) and animal(A, scorpion), so not More(locate at the countryside(A), locate at the countryside(B))", ["B is a deer, A is a scorpion, so A is not more likely to be in the countryside than B"]], "negated_asymmetric_conclusion": ["animal(A, deer) and animal(B, scorpion), so not More(locate at the countryside(B), locate at the countryside(A))", ["A is a deer, B is a scorpion, so B is not more likely to be in the countryside than A"]]}
{"original": ["animal(A, tiger) and animal(B, turtle), so More(spring from the bush(A), spring from the bush(B))", ["A is a tiger, B is a turtle, so A is more likely to spring from the bush than B"]], "negated": ["animal(A, tiger) and animal(B, turtle), so not Less(spring from the bush(A), spring from the bush(B))", ["A is a tiger, B is a turtle, so A is not less likely to spring from the bush than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, turtle), so Less(spring from the bush(A), spring from the bush(B))", ["B is a tiger, A is a turtle, so A is less likely to spring from the bush than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, turtle), so Less(spring from the bush(B), spring from the bush(A))", ["A is a tiger, B is a turtle, so B is less likely to spring from the bush than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, turtle), so not More(spring from the bush(A), spring from the bush(B))", ["B is a tiger, A is a turtle, so A does not spring from the bush more than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, turtle), so not More(spring from the bush(B), spring from the bush(A))", ["A is a tiger, B is a turtle, so B is not more likely to spring from the bush than A"]]}
{"original": ["animal(A, cow) and animal(B, duck), so More(supply humans with milk(A), supply humans with milk(B))", ["A is a cow, B is a duck, so A is more likely to supply humans with milk than B"]], "negated": ["animal(A, cow) and animal(B, duck), so not Less(supply humans with milk(A), supply humans with milk(B))", ["A is a cow, B is a duck, so A is not less likely to supply humans with milk than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, duck), so Less(supply humans with milk(A), supply humans with milk(B))", ["B is a cow, A is a duck, so A is less likely to supply humans with milk than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, duck), so Less(supply humans with milk(B), supply humans with milk(A))", ["A is a cow, B is a duck, so B is less likely to supply humans with milk than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, duck), so not More(supply humans with milk(A), supply humans with milk(B))", ["B is a cow, A is a duck, so A is not more likely to supply humans with milk than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, duck), so not More(supply humans with milk(B), supply humans with milk(A))", ["A is a cow, B is a duck, so B is not more likely to supply humans with milk than A"]]}
{"original": ["animal(A, fish) and animal(B, hamster), so More(attempt to fly(A), attempt to fly(B))", ["A is a fish, B is a hamster, so A is more likely to attempt to fly than B"]], "negated": ["animal(A, fish) and animal(B, hamster), so not Less(attempt to fly(A), attempt to fly(B))", ["A is a fish, B is a hamster, so A is not less likely to attempt to fly than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, hamster), so Less(attempt to fly(A), attempt to fly(B))", ["B is a fish, A is a hamster, so A is less likely to attempt to fly than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, hamster), so Less(attempt to fly(B), attempt to fly(A))", ["A is a fish, B is a hamster, so B is less likely to attempt to fly than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, hamster), so not More(attempt to fly(A), attempt to fly(B))", ["B is a fish, A is a hamster, so A is not more likely to attempt to fly than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, hamster), so not More(attempt to fly(B), attempt to fly(A))", ["A is a fish, B is a hamster, so B is not more likely to attempt to fly than A"]]}
{"original": ["animal(A, bird) and animal(B, lobster), so More(sing a song(A), sing a song(B))", ["A is a bird, B is a lobster, so A is more likely to sing a song than B"]], "negated": ["animal(A, bird) and animal(B, lobster), so not Less(sing a song(A), sing a song(B))", ["A is a bird, B is a lobster, so A is not less likely to sing a song than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, lobster), so Less(sing a song(A), sing a song(B))", ["B is a bird, A is a lobster, so A is less likely to sing a song than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, lobster), so Less(sing a song(B), sing a song(A))", ["A is a bird, B is a lobster, so B is less likely to sing a song than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, lobster), so not More(sing a song(A), sing a song(B))", ["B is a bird, A is a lobster, so A is not more likely to sing a song than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, lobster), so not More(sing a song(B), sing a song(A))", ["A is a bird, B is a lobster, so B is not more likely to sing a song than A"]]}
{"original": ["animal(A, fish) and animal(B, bear), so More(live underwater(A), live underwater(B))", ["A is a fish, B is a bear, so A is more likely to live underwater than B"]], "negated": ["animal(A, fish) and animal(B, bear), so not Less(live underwater(A), live underwater(B))", ["A is a fish, B is a bear, so A is not less likely to live underwater than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, bear), so Less(live underwater(A), live underwater(B))", ["B is a fish, A is a bear, so A is less likely to live underwater than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, bear), so Less(live underwater(B), live underwater(A))", ["A is a fish, B is a bear, so B is less likely to live underwater than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, bear), so not More(live underwater(A), live underwater(B))", ["B is a fish, A is a bear, so A is not more likely to live underwater than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, bear), so not More(live underwater(B), live underwater(A))", ["A is a fish, B is a bear, so B is not more likely to live underwater than A"]]}
{"original": ["animal(A, snake) and animal(B, fish), so More(eat an egg(A), eat an egg(B))", ["A is a snake, B is a fish, so A is more likely to eat an egg than B"]], "negated": ["animal(A, snake) and animal(B, fish), so not Less(eat an egg(A), eat an egg(B))", ["A is a snake, B is a fish, so A is not less likely to eat an egg than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, fish), so Less(eat an egg(A), eat an egg(B))", ["B is a snake, A is a fish, so A is less likely to eat an egg than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, fish), so Less(eat an egg(B), eat an egg(A))", ["A is a snake, B is a fish, so B is less likely to eat an egg than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, fish), so not More(eat an egg(A), eat an egg(B))", ["B is a snake, A is a fish, so A is not more likely to eat an egg than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, fish), so not More(eat an egg(B), eat an egg(A))", ["A is a snake, B is a fish, so B is not more likely to eat an egg than A"]]}
{"original": ["animal(A, eagle) and animal(B, chicken), so More(spot a rabbit on the ground(A), spot a rabbit on the ground(B))", ["A is a eagle, B is a chicken, so A is more likely to spot a rabbit on the ground than B"]], "negated": ["animal(A, eagle) and animal(B, chicken), so not Less(spot a rabbit on the ground(A), spot a rabbit on the ground(B))", ["A is a eagle, B is a chicken, so A is not less likely to spot a rabbit on the ground than B"]], "asymmetric_premise": ["animal(B, eagle) and animal(A, chicken), so Less(spot a rabbit on the ground(A), spot a rabbit on the ground(B))", ["B is a eagle, A is a chicken, so A is less likely to spot a rabbit on the ground than B"]], "asymmetric_conclusion": ["animal(A, eagle) and animal(B, chicken), so Less(spot a rabbit on the ground(B), spot a rabbit on the ground(A))", ["A is a eagle, B is a chicken, so B is less likely to spot a rabbit on the ground than A"]], "negated_asymmetric_premise": ["animal(B, eagle) and animal(A, chicken), so not More(spot a rabbit on the ground(A), spot a rabbit on the ground(B))", ["B is a eagle, A is a chicken, so A is not more likely to spot a rabbit on the ground than B"]], "negated_asymmetric_conclusion": ["animal(A, eagle) and animal(B, chicken), so not More(spot a rabbit on the ground(B), spot a rabbit on the ground(A))", ["A is a eagle, B is a chicken, so B is not more likely to spot a rabbit on the ground than A"]]}
{"original": ["animal(A, shark) and animal(B, alligator), so More(locate at any ocean(A), locate at any ocean(B))", ["A is a shark, B is a alligator, so A is more likely to be in the ocean than B"]], "negated": ["animal(A, shark) and animal(B, alligator), so not Less(locate at any ocean(A), locate at any ocean(B))", ["A is a shark, B is a alligator, so A is not less likely to be in the ocean than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, alligator), so Less(locate at any ocean(A), locate at any ocean(B))", ["B is a shark, A is a alligator, so A is less likely to be in the ocean than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, alligator), so Less(locate at any ocean(B), locate at any ocean(A))", ["A is a shark, B is a alligator, so B is less likely to be in the ocean than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, alligator), so not More(locate at any ocean(A), locate at any ocean(B))", ["B is a shark, A is a alligator, so A is not more likely to be in the ocean than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, alligator), so not More(locate at any ocean(B), locate at any ocean(A))", ["A is a shark, B is a alligator, so B is not more likely to be in the ocean than A"]]}
{"original": ["animal(A, duck) and animal(B, chicken), so More(mother her ducklings(A), mother her ducklings(B))", ["A is a duck, B is a chicken, so A is more likely to mother her ducklings than B"]], "negated": ["animal(A, duck) and animal(B, chicken), so not Less(mother her ducklings(A), mother her ducklings(B))", ["A is a duck, B is a chicken, so A is not less likely to mother her ducklings than B"]], "asymmetric_premise": ["animal(B, duck) and animal(A, chicken), so Less(mother her ducklings(A), mother her ducklings(B))", ["B is a duck, A is a chicken, so A is less likely to mother her ducklings than B"]], "asymmetric_conclusion": ["animal(A, duck) and animal(B, chicken), so Less(mother her ducklings(B), mother her ducklings(A))", ["A is a duck, B is a chicken, so B is less likely to mother her ducklings than A"]], "negated_asymmetric_premise": ["animal(B, duck) and animal(A, chicken), so not More(mother her ducklings(A), mother her ducklings(B))", ["B is a duck, A is a chicken, so A is not more likely to mother her ducklings than B"]], "negated_asymmetric_conclusion": ["animal(A, duck) and animal(B, chicken), so not More(mother her ducklings(B), mother her ducklings(A))", ["A is a duck, B is a chicken, so B is not more likely to mother her ducklings than A"]]}
{"original": ["animal(A, bee) and animal(B, wolf), so More(locate at honeysuckle vines(A), locate at honeysuckle vines(B))", ["A is a bee, B is a wolf, so A is more likely to be in honeysuckle vines than B"]], "negated": ["animal(A, bee) and animal(B, wolf), so not Less(locate at honeysuckle vines(A), locate at honeysuckle vines(B))", ["A is a bee, B is a wolf, so A is not less likely to be in honeysuckle vines than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, wolf), so Less(locate at honeysuckle vines(A), locate at honeysuckle vines(B))", ["B is a bee, A is a wolf, so A is less likely to be in honeysuckle vines than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, wolf), so Less(locate at honeysuckle vines(B), locate at honeysuckle vines(A))", ["A is a bee, B is a wolf, so B is less likely to be in honeysuckle vines than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, wolf), so not More(locate at honeysuckle vines(A), locate at honeysuckle vines(B))", ["B is a bee, A is a wolf, so A is not more likely to be in honeysuckle vines than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, wolf), so not More(locate at honeysuckle vines(B), locate at honeysuckle vines(A))", ["A is a bee, B is a wolf, so B is not more likely to be in honeysuckle vines than A"]]}
{"original": ["animal(A, pig) and animal(B, cow), so More(locate at a pen(A), locate at a pen(B))", ["A is a pig, B is a cow, so A is more likely to be in a pen than B"]], "negated": ["animal(A, pig) and animal(B, cow), so not Less(locate at a pen(A), locate at a pen(B))", ["A is a pig, B is a cow, so A is not less likely to be in a pen than B"]], "asymmetric_premise": ["animal(B, pig) and animal(A, cow), so Less(locate at a pen(A), locate at a pen(B))", ["B is a pig, A is a cow, so A is less likely to be in a pen than B"]], "asymmetric_conclusion": ["animal(A, pig) and animal(B, cow), so Less(locate at a pen(B), locate at a pen(A))", ["A is a pig, B is a cow, so B is less likely to be in a pen than A"]], "negated_asymmetric_premise": ["animal(B, pig) and animal(A, cow), so not More(locate at a pen(A), locate at a pen(B))", ["B is a pig, A is a cow, so A is not more likely to be in a pen than B"]], "negated_asymmetric_conclusion": ["animal(A, pig) and animal(B, cow), so not More(locate at a pen(B), locate at a pen(A))", ["A is a pig, B is a cow, so B is not more likely to be in a pen than A"]]}
{"original": ["animal(A, lion) and animal(B, ant), so More(roar(A), roar(B))", ["A is a lion, B is a ant, so A is more likely to roar than B"]], "negated": ["animal(A, lion) and animal(B, ant), so not Less(roar(A), roar(B))", ["A is a lion, B is an ant, so A is not less likely to roar than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, ant), so Less(roar(A), roar(B))", ["B is a lion, A is an ant, so A is less likely to roar than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, ant), so Less(roar(B), roar(A))", ["A is a lion, B is an ant, so B is less likely to roar than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, ant), so not More(roar(A), roar(B))", ["B is a lion, A is an ant, so A is not more likely to roar than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, ant), so not More(roar(B), roar(A))", ["A is a lion, B is an ant, so B is not more likely to roar than A"]]}
{"original": ["animal(A, goat) and animal(B, eagle), so More(jump a fence(A), jump a fence(B))", ["A is a goat, B is a eagle, so A is more likely to jump a fence than B"]], "negated": ["animal(A, goat) and animal(B, eagle), so not Less(jump a fence(A), jump a fence(B))", ["A is a goat, B is a eagle, so A is not less likely to jump a fence than B"]], "asymmetric_premise": ["animal(B, goat) and animal(A, eagle), so Less(jump a fence(A), jump a fence(B))", ["B is a goat, A is a eagle, so A is less likely to jump a fence than B"]], "asymmetric_conclusion": ["animal(A, goat) and animal(B, eagle), so Less(jump a fence(B), jump a fence(A))", ["A is a goat, B is a eagle, so B is less likely to jump a fence than A"]], "negated_asymmetric_premise": ["animal(B, goat) and animal(A, eagle), so not More(jump a fence(A), jump a fence(B))", ["B is a goat, A is a eagle, so A is not more likely to jump a fence than B"]], "negated_asymmetric_conclusion": ["animal(A, goat) and animal(B, eagle), so not More(jump a fence(B), jump a fence(A))", ["A is a goat, B is a eagle, so B is not more likely to jump a fence than A"]]}
{"original": ["animal(A, fish) and animal(B, bird), so More(locate at the market(A), locate at the market(B))", ["A is a fish, B is a bird, so A is more likely to be on the market than B"]], "negated": ["animal(A, fish) and animal(B, bird), so not Less(locate at the market(A), locate at the market(B))", ["A is a fish, B is a bird, so A is not less likely to be on the market than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, bird), so Less(locate at the market(A), locate at the market(B))", ["B is a fish, A is a bird, so A is less likely to be on the market than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, bird), so Less(locate at the market(B), locate at the market(A))", ["A is a fish, B is a bird, so B is less likely to be on the market than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, bird), so not More(locate at the market(A), locate at the market(B))", ["B is a fish, A is a bird, so A is not more likely to be on the market than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, bird), so not More(locate at the market(B), locate at the market(A))", ["A is a fish, B is a bird, so B is not more likely to be on the market than A"]]}
{"original": ["animal(A, bird) and animal(B, shark), so More(locate at a tree(A), locate at a tree(B))", ["A is a bird, B is a shark, so A is more likely to be in a tree than B"]], "negated": ["animal(A, bird) and animal(B, shark), so not Less(locate at a tree(A), locate at a tree(B))", ["A is a bird, B is a shark, so A is not less likely to be in a tree than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, shark), so Less(locate at a tree(A), locate at a tree(B))", ["B is a bird, A is a shark, so A is less likely to be in a tree than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, shark), so Less(locate at a tree(B), locate at a tree(A))", ["A is a bird, B is a shark, so B is less likely to be in a tree than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, shark), so not More(locate at a tree(A), locate at a tree(B))", ["B is a bird, A is a shark, so A is not more likely to be in a tree than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, shark), so not More(locate at a tree(B), locate at a tree(A))", ["A is a bird, B is a shark, so B is not more likely to be in a tree than A"]]}
{"original": ["animal(A, bee) and animal(B, fly), so More(locate at an apiary(A), locate at an apiary(B))", ["A is a bee, B is a fly, so A is more likely to be in an apiary than B"]], "negated": ["animal(A, bee) and animal(B, fly), so not Less(locate at an apiary(A), locate at an apiary(B))", ["A is a bee, B is a fly, so A is not less likely to be in an apiary than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, fly), so Less(locate at an apiary(A), locate at an apiary(B))", ["B is a bee, A is a fly, so A is less likely to be in an apiary than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, fly), so Less(locate at an apiary(B), locate at an apiary(A))", ["A is a bee, B is a fly, so B is less likely to be in an apiary than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, fly), so not More(locate at an apiary(A), locate at an apiary(B))", ["B is a bee, A is a fly, so A is not more likely to be in an apiary than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, fly), so not More(locate at an apiary(B), locate at an apiary(A))", ["A is a bee, B is a fly, so B is not more likely to be in an apiary than A"]]}
{"original": ["animal(A, sheep) and animal(B, fly), so More(live in a field(A), live in a field(B))", ["A is a sheep, B is a fly, so A is more likely to live in a field than B"]], "negated": ["animal(A, sheep) and animal(B, fly), so not Less(live in a field(A), live in a field(B))", ["A is a sheep, B is a fly, so A is not less likely to live in a field than B"]], "asymmetric_premise": ["animal(B, sheep) and animal(A, fly), so Less(live in a field(A), live in a field(B))", ["B is a sheep, A is a fly, so A is less likely to live in a field than B"]], "asymmetric_conclusion": ["animal(A, sheep) and animal(B, fly), so Less(live in a field(B), live in a field(A))", ["A is a sheep, B is a fly, so B is less likely to live in a field than A"]], "negated_asymmetric_premise": ["animal(B, sheep) and animal(A, fly), so not More(live in a field(A), live in a field(B))", ["B is a sheep, A is a fly, so A is not more likely to live in a field than B"]], "negated_asymmetric_conclusion": ["animal(A, sheep) and animal(B, fly), so not More(live in a field(B), live in a field(A))", ["A is a sheep, B is a fly, so B is not more likely to live in a field than A"]]}
{"original": ["animal(A, kangaroo) and animal(B, rat), so More(jump high(A), jump high(B))", ["A is a kangaroo, B is a rat, so A is more likely to jump high than B"]], "negated": ["animal(A, kangaroo) and animal(B, rat), so not Less(jump high(A), jump high(B))", ["A is a kangaroo, B is a rat, so A is not less likely to jump high than B"]], "asymmetric_premise": ["animal(B, kangaroo) and animal(A, rat), so Less(jump high(A), jump high(B))", ["B is a kangaroo, A is a rat, so A is less likely to jump high than B"]], "asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, rat), so Less(jump high(B), jump high(A))", ["A is a kangaroo, B is a rat, so B is less likely to jump high than A"]], "negated_asymmetric_premise": ["animal(B, kangaroo) and animal(A, rat), so not More(jump high(A), jump high(B))", ["B is a kangaroo, A is a rat, so A is not more likely to jump high than B"]], "negated_asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, rat), so not More(jump high(B), jump high(A))", ["A is a kangaroo, B is a rat, so B is not more likely to jump high than A"]]}
{"original": ["animal(A, cow) and animal(B, dolphin), so More(locate at a butcher shop(A), locate at a butcher shop(B))", ["A is a cow, B is a dolphin, so A is more likely to be in a butcher shop than B"]], "negated": ["animal(A, cow) and animal(B, dolphin), so not Less(locate at a butcher shop(A), locate at a butcher shop(B))", ["A is a cow, B is a dolphin, so A is not less likely to be in a butcher shop than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, dolphin), so Less(locate at a butcher shop(A), locate at a butcher shop(B))", ["B is a cow, A is a dolphin, so A is less likely to be in a butcher shop than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, dolphin), so Less(locate at a butcher shop(B), locate at a butcher shop(A))", ["A is a cow, B is a dolphin, so B is less likely to be in a butcher shop than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, dolphin), so not More(locate at a butcher shop(A), locate at a butcher shop(B))", ["B is a cow, A is a dolphin, so A is not more likely to be in a butcher shop than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, dolphin), so not More(locate at a butcher shop(B), locate at a butcher shop(A))", ["A is a cow, B is a dolphin, so B is not more likely to be in a butcher shop than A"]]}
{"original": ["animal(A, duck) and animal(B, snail), so More(locate at wetland areas(A), locate at wetland areas(B))", ["A is a duck, B is a snail, so A is more likely to be in wetland areas than B"]], "negated": ["animal(A, duck) and animal(B, snail), so not Less(locate at wetland areas(A), locate at wetland areas(B))", ["A is a duck, B is a snail, so A is not less likely to be in wetland areas than B"]], "asymmetric_premise": ["animal(B, duck) and animal(A, snail), so Less(locate at wetland areas(A), locate at wetland areas(B))", ["B is a duck, A is a snail, so A is less likely to be in wetland areas than B"]], "asymmetric_conclusion": ["animal(A, duck) and animal(B, snail), so Less(locate at wetland areas(B), locate at wetland areas(A))", ["A is a duck, B is a snail, so B is less likely to be in wetland areas than A"]], "negated_asymmetric_premise": ["animal(B, duck) and animal(A, snail), so not More(locate at wetland areas(A), locate at wetland areas(B))", ["B is a duck, A is a snail, so A is not more likely to be in wetland areas than B"]], "negated_asymmetric_conclusion": ["animal(A, duck) and animal(B, snail), so not More(locate at wetland areas(B), locate at wetland areas(A))", ["A is a duck, B is a snail, so B is not more likely to be in wetland areas than A"]]}
{"original": ["animal(A, cow) and animal(B, sheep), so More(produce methane gas(A), produce methane gas(B))", ["A is a cow, B is a sheep, so A is more likely to produce methane gas than B"]], "negated": ["animal(A, cow) and animal(B, sheep), so not Less(produce methane gas(A), produce methane gas(B))", ["A is a cow, B is a sheep, so A is not less likely to produce methane gas than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, sheep), so Less(produce methane gas(A), produce methane gas(B))", ["B is a cow, A is a sheep, so A is less likely to produce methane gas than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, sheep), so Less(produce methane gas(B), produce methane gas(A))", ["A is a cow, B is a sheep, so B is less likely to produce methane gas than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, sheep), so not More(produce methane gas(A), produce methane gas(B))", ["B is a cow, A is a sheep, so A is not more likely to produce methane gas than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, sheep), so not More(produce methane gas(B), produce methane gas(A))", ["A is a cow, B is a sheep, so B is not more likely to produce methane gas than A"]]}
{"original": ["animal(A, fox) and animal(B, turtle), so More(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["A is a fox, B is a turtle, so A is more likely to tail a rabbit in the woods than B"]], "negated": ["animal(A, fox) and animal(B, turtle), so not Less(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["A is a fox, B is a turtle, so A is not less likely to tail a rabbit in the woods than B"]], "asymmetric_premise": ["animal(B, fox) and animal(A, turtle), so Less(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["B is a fox, A is a turtle, so A is less likely to tail a rabbit in the woods than B"]], "asymmetric_conclusion": ["animal(A, fox) and animal(B, turtle), so Less(tail a rabbit in the woods(B), tail a rabbit in the woods(A))", ["A is a fox, B is a turtle, so B is less likely to tail a rabbit in the woods than A"]], "negated_asymmetric_premise": ["animal(B, fox) and animal(A, turtle), so not More(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["B is a fox, A is a turtle, so A is not more likely to tail a rabbit in the woods than B"]], "negated_asymmetric_conclusion": ["animal(A, fox) and animal(B, turtle), so not More(tail a rabbit in the woods(B), tail a rabbit in the woods(A))", ["A is a fox, B is a turtle, so B is not more likely to tail a rabbit in the woods than A"]]}
{"original": ["animal(A, squirrel) and animal(B, snake), so More(gather acorns(A), gather acorns(B))", ["A is a squirrel, B is a snake, so A is more likely to gather acorns than B"]], "negated": ["animal(A, squirrel) and animal(B, snake), so not Less(gather acorns(A), gather acorns(B))", ["A is a squirrel, B is a snake, so A is not less likely to gather acorns than B"]], "asymmetric_premise": ["animal(B, squirrel) and animal(A, snake), so Less(gather acorns(A), gather acorns(B))", ["B is a squirrel, A is a snake, so A is less likely to gather acorns than B"]], "asymmetric_conclusion": ["animal(A, squirrel) and animal(B, snake), so Less(gather acorns(B), gather acorns(A))", ["A is a squirrel, B is a snake, so B is less likely to gather acorns than A"]], "negated_asymmetric_premise": ["animal(B, squirrel) and animal(A, snake), so not More(gather acorns(A), gather acorns(B))", ["B is a squirrel, A is a snake, so A is not more likely to gather acorns than B"]], "negated_asymmetric_conclusion": ["animal(A, squirrel) and animal(B, snake), so not More(gather acorns(B), gather acorns(A))", ["A is a squirrel, B is a snake, so B is not more likely to gather acorns than A"]]}
{"original": ["animal(A, goat) and animal(B, tiger), so More(locate at the barn(A), locate at the barn(B))", ["A is a goat, B is a tiger, so A is more likely to be in the barn than B"]], "negated": ["animal(A, goat) and animal(B, tiger), so not Less(locate at the barn(A), locate at the barn(B))", ["A is a goat, B is a tiger, so A is not less likely to be in the barn than B"]], "asymmetric_premise": ["animal(B, goat) and animal(A, tiger), so Less(locate at the barn(A), locate at the barn(B))", ["B is a goat, A is a tiger, so A is less likely to be in the barn than B"]], "asymmetric_conclusion": ["animal(A, goat) and animal(B, tiger), so Less(locate at the barn(B), locate at the barn(A))", ["A is a goat, B is a tiger, so B is less likely to be in the barn than A"]], "negated_asymmetric_premise": ["animal(B, goat) and animal(A, tiger), so not More(locate at the barn(A), locate at the barn(B))", ["B is a goat, A is a tiger, so A is not more likely to be in the barn than B"]], "negated_asymmetric_conclusion": ["animal(A, goat) and animal(B, tiger), so not More(locate at the barn(B), locate at the barn(A))", ["A is a goat, B is a tiger, so B is not more likely to be in the barn than A"]]}
{"original": ["animal(A, cow) and animal(B, rat), so More(low by mooing(A), low by mooing(B))", ["A is a cow, B is a rat, so A is more low by mooing than B"]], "negated": ["animal(A, cow) and animal(B, rat), so not Less(low by mooing(A), low by mooing(B))", ["A is a cow, B is a rat, so A is not less low by mooing than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, rat), so Less(low by mooing(A), low by mooing(B))", ["B is a cow, A is a rat, so A is less low by mooing than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, rat), so Less(low by mooing(B), low by mooing(A))", ["A is a cow, B is a rat, so B is less low by mooing than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, rat), so not More(low by mooing(A), low by mooing(B))", ["B is a cow, A is a rat, so A is not more low by mooing than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, rat), so not More(low by mooing(B), low by mooing(A))", ["A is a cow, B is a rat, so B is not more low by mooing than A"]]}
{"original": ["animal(A, fly) and animal(B, squirrel), so More(fly around(A), fly around(B))", ["A is a fly, B is a squirrel, so A is more likely to fly around than B"]], "negated": ["animal(A, fly) and animal(B, squirrel), so not Less(fly around(A), fly around(B))", ["A is a fly, B is a squirrel, so A is not less likely to fly around than B"]], "asymmetric_premise": ["animal(B, fly) and animal(A, squirrel), so Less(fly around(A), fly around(B))", ["B is a fly, A is a squirrel, so A is less likely to fly around than B"]], "asymmetric_conclusion": ["animal(A, fly) and animal(B, squirrel), so Less(fly around(B), fly around(A))", ["A is a fly, B is a squirrel, so B is less likely to fly around than A"]], "negated_asymmetric_premise": ["animal(B, fly) and animal(A, squirrel), so not More(fly around(A), fly around(B))", ["B is a fly, A is a squirrel, so A is not more likely to fly around than B"]], "negated_asymmetric_conclusion": ["animal(A, fly) and animal(B, squirrel), so not More(fly around(B), fly around(A))", ["A is a fly, B is a squirrel, so B is not more likely to fly around than A"]]}
{"original": ["animal(A, bee) and animal(B, pig), so More(locate at the sky(A), locate at the sky(B))", ["A is a bee, B is a pig, so A is more likely to be in the sky than B"]], "negated": ["animal(A, bee) and animal(B, pig), so not Less(locate at the sky(A), locate at the sky(B))", ["A is a bee, B is a pig, so A is not less likely to be in the sky than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, pig), so Less(locate at the sky(A), locate at the sky(B))", ["B is a bee, A is a pig, so A is less likely to be in the sky than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, pig), so Less(locate at the sky(B), locate at the sky(A))", ["A is a bee, B is a pig, so B is less likely to be in the sky than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, pig), so not More(locate at the sky(A), locate at the sky(B))", ["B is a bee, A is a pig, so A is not more likely to be in the sky than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, pig), so not More(locate at the sky(B), locate at the sky(A))", ["A is a bee, B is a pig, so B is not more likely to be in the sky than A"]]}
{"original": ["animal(A, owl) and animal(B, eagle), so More(see at night(A), see at night(B))", ["A is a owl, B is a eagle, so A is more likely to see at night than B"]], "negated": ["animal(A, owl) and animal(B, eagle), so not Less(see at night(A), see at night(B))", ["A is a owl, B is a eagle, so A is not less likely to see at night than B"]], "asymmetric_premise": ["animal(B, owl) and animal(A, eagle), so Less(see at night(A), see at night(B))", ["B is a owl, A is a eagle, so A is less likely to see at night than B"]], "asymmetric_conclusion": ["animal(A, owl) and animal(B, eagle), so Less(see at night(B), see at night(A))", ["A is a owl, B is a eagle, so B is less likely to see at night than A"]], "negated_asymmetric_premise": ["animal(B, owl) and animal(A, eagle), so not More(see at night(A), see at night(B))", ["B is a owl, A is a eagle, so A is not more likely to see at night than B"]], "negated_asymmetric_conclusion": ["animal(A, owl) and animal(B, eagle), so not More(see at night(B), see at night(A))", ["A is a owl, B is a eagle, so B is not more likely to see at night than A"]]}
{"original": ["animal(A, cow) and animal(B, cat), so More(locate at a paddock(A), locate at a paddock(B))", ["A is a cow, B is a cat, so A is more likely to be in a paddock than B"]], "negated": ["animal(A, cow) and animal(B, cat), so not Less(locate at a paddock(A), locate at a paddock(B))", ["A is a cow, B is a cat, so A is not less likely to be in a paddock than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, cat), so Less(locate at a paddock(A), locate at a paddock(B))", ["B is a cow, A is a cat, so A is less likely to be in a paddock than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, cat), so Less(locate at a paddock(B), locate at a paddock(A))", ["A is a cow, B is a cat, so B is less likely to be in a paddock than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, cat), so not More(locate at a paddock(A), locate at a paddock(B))", ["B is a cow, A is a cat, so A is not more likely to be in a paddock than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, cat), so not More(locate at a paddock(B), locate at a paddock(A))", ["A is a cow, B is a cat, so B is not more likely to be in a paddock than A"]]}
{"original": ["animal(A, pig) and animal(B, kangaroo), so More(find a truffle(A), find a truffle(B))", ["A is a pig, B is a kangaroo, so A is more likely to find a truffle than B"]], "negated": ["animal(A, pig) and animal(B, kangaroo), so not Less(find a truffle(A), find a truffle(B))", ["A is a pig, B is a kangaroo, so A is not less likely to find a truffle than B"]], "asymmetric_premise": ["animal(B, pig) and animal(A, kangaroo), so Less(find a truffle(A), find a truffle(B))", ["B is a pig, A is a kangaroo, so A is less likely to find a truffle than B"]], "asymmetric_conclusion": ["animal(A, pig) and animal(B, kangaroo), so Less(find a truffle(B), find a truffle(A))", ["A is a pig, B is a kangaroo, so B is less likely to find a truffle than A"]], "negated_asymmetric_premise": ["animal(B, pig) and animal(A, kangaroo), so not More(find a truffle(A), find a truffle(B))", ["B is a pig, A is a kangaroo, so A is not more likely to find a truffle than B"]], "negated_asymmetric_conclusion": ["animal(A, pig) and animal(B, kangaroo), so not More(find a truffle(B), find a truffle(A))", ["A is a pig, B is a kangaroo, so B is not more likely to find a truffle than A"]]}
{"original": ["animal(A, cat) and animal(B, horse), so More(locate at my lap(A), locate at my lap(B))", ["A is a cat, B is a horse, so A is more likely to be in my lap than B"]], "negated": ["animal(A, cat) and animal(B, horse), so not Less(locate at my lap(A), locate at my lap(B))", ["A is a cat, B is a horse, so A is not less likely to be in my lap than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, horse), so Less(locate at my lap(A), locate at my lap(B))", ["B is a cat, A is a horse, so A is less likely to be in my lap than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, horse), so Less(locate at my lap(B), locate at my lap(A))", ["A is a cat, B is a horse, so B is less likely to be in my lap than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, horse), so not More(locate at my lap(A), locate at my lap(B))", ["B is a cat, A is a horse, so A is not more likely to be in my lap than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, horse), so not More(locate at my lap(B), locate at my lap(A))", ["A is a cat, B is a horse, so B is not more likely to be in my lap than A"]]}
{"original": ["animal(A, kangaroo) and animal(B, hamster), so More(jump(A), jump(B))", ["A is a kangaroo, B is a hamster, so A is more likely to jump than B"]], "negated": ["animal(A, kangaroo) and animal(B, hamster), so not Less(jump(A), jump(B))", ["A is a kangaroo, B is a hamster, so A is not less likely to jump than B"]], "asymmetric_premise": ["animal(B, kangaroo) and animal(A, hamster), so Less(jump(A), jump(B))", ["B is a kangaroo, A is a hamster, so A is less likely to jump than B"]], "asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, hamster), so Less(jump(B), jump(A))", ["A is a kangaroo, B is a hamster, so B is less likely to jump than A"]], "negated_asymmetric_premise": ["animal(B, kangaroo) and animal(A, hamster), so not More(jump(A), jump(B))", ["B is a kangaroo, A is a hamster, so A is not more likely to jump than B"]], "negated_asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, hamster), so not More(jump(B), jump(A))", ["A is a kangaroo, B is a hamster, so B is not more likely to jump than A"]]}
{"original": ["animal(A, horse) and animal(B, tiger), so More(locate at a parade(A), locate at a parade(B))", ["A is a horse, B is a tiger, so A is more likely to be in a parade than B"]], "negated": ["animal(A, horse) and animal(B, tiger), so not Less(locate at a parade(A), locate at a parade(B))", ["A is a horse, B is a tiger, so A is not less likely to be in a parade than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, tiger), so Less(locate at a parade(A), locate at a parade(B))", ["B is a horse, A is a tiger, so A is less likely to be in a parade than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, tiger), so Less(locate at a parade(B), locate at a parade(A))", ["A is a horse, B is a tiger, so B is less likely to be in a parade than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, tiger), so not More(locate at a parade(A), locate at a parade(B))", ["B is a horse, A is a tiger, so A is not more likely to be in a parade than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, tiger), so not More(locate at a parade(B), locate at a parade(A))", ["A is a horse, B is a tiger, so B is not more likely to be in a parade than A"]]}
{"original": ["animal(A, monkey) and animal(B, chicken), so More(locate at a barrel(A), locate at a barrel(B))", ["A is a monkey, B is a chicken, so A is more likely to be in a barrel than B"]], "negated": ["animal(A, monkey) and animal(B, chicken), so not Less(locate at a barrel(A), locate at a barrel(B))", ["A is a monkey, B is a chicken, so A is not less likely to be in a barrel than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, chicken), so Less(locate at a barrel(A), locate at a barrel(B))", ["B is a monkey, A is a chicken, so A is less likely to be in a barrel than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, chicken), so Less(locate at a barrel(B), locate at a barrel(A))", ["A is a monkey, B is a chicken, so B is less likely to be in a barrel than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, chicken), so not More(locate at a barrel(A), locate at a barrel(B))", ["B is a monkey, A is a chicken, so A is not more likely to be in a barrel than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, chicken), so not More(locate at a barrel(B), locate at a barrel(A))", ["A is a monkey, B is a chicken, so B is not more likely to be in a barrel than A"]]}
{"original": ["animal(A, bear) and animal(B, hippopotamus), so More(fish for salmon(A), fish for salmon(B))", ["A is a bear, B is a hippopotamus, so A is more likely to fish for salmon than B"]], "negated": ["animal(A, bear) and animal(B, hippopotamus), so not Less(fish for salmon(A), fish for salmon(B))", ["A is a bear, B is a hippopotamus, so A is not less likely to fish for salmon than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, hippopotamus), so Less(fish for salmon(A), fish for salmon(B))", ["B is a bear, A is a hippopotamus, so A is less likely to fish for salmon than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, hippopotamus), so Less(fish for salmon(B), fish for salmon(A))", ["A is a bear, B is a hippopotamus, so B is less likely to fish for salmon than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, hippopotamus), so not More(fish for salmon(A), fish for salmon(B))", ["B is a bear, A is a hippopotamus, so A is not more likely to fish for salmon than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, hippopotamus), so not More(fish for salmon(B), fish for salmon(A))", ["A is a bear, B is a hippopotamus, so B is not more likely to fish for salmon than A"]]}
{"original": ["animal(A, fish) and animal(B, snail), so More(locate at the market(A), locate at the market(B))", ["A is a fish, B is a snail, so A is more likely to be on the market than B"]], "negated": ["animal(A, fish) and animal(B, snail), so not Less(locate at the market(A), locate at the market(B))", ["A is a fish, B is a snail, so A is not less likely to be on the market than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, snail), so Less(locate at the market(A), locate at the market(B))", ["B is a fish, A is a snail, so A is less likely to be on the market than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, snail), so Less(locate at the market(B), locate at the market(A))", ["A is a fish, B is a snail, so B is less likely to be on the market than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, snail), so not More(locate at the market(A), locate at the market(B))", ["B is a fish, A is a snail, so A is not more likely to be on the market than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, snail), so not More(locate at the market(B), locate at the market(A))", ["A is a fish, B is a snail, so B is not more likely to be on the market than A"]]}
{"original": ["animal(A, cow) and animal(B, fox), so More(locate at a county fair(A), locate at a county fair(B))", ["A is a cow, B is a fox, so A is more likely to be at a county fair than B"]], "negated": ["animal(A, cow) and animal(B, fox), so not Less(locate at a county fair(A), locate at a county fair(B))", ["A is a cow, B is a fox, so A is not less likely to be at a county fair than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, fox), so Less(locate at a county fair(A), locate at a county fair(B))", ["B is a cow, A is a fox, so A is less likely to be at a county fair than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, fox), so Less(locate at a county fair(B), locate at a county fair(A))", ["A is a cow, B is a fox, so B is less likely to be at a county fair than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, fox), so not More(locate at a county fair(A), locate at a county fair(B))", ["B is a cow, A is a fox, so A is not more likely to be at a county fair than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, fox), so not More(locate at a county fair(B), locate at a county fair(A))", ["A is a cow, B is a fox, so B is not more likely to be at a county fair than A"]]}
{"original": ["animal(A, bee) and animal(B, fish), so More(locate at the sky(A), locate at the sky(B))", ["A is a bee, B is a fish, so A is more likely to be in the sky than B"]], "negated": ["animal(A, bee) and animal(B, fish), so not Less(locate at the sky(A), locate at the sky(B))", ["A is a bee, B is a fish, so A is not less likely to be in the sky than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, fish), so Less(locate at the sky(A), locate at the sky(B))", ["B is a bee, A is a fish, so A is less likely to be in the sky than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, fish), so Less(locate at the sky(B), locate at the sky(A))", ["A is a bee, B is a fish, so B is less likely to be in the sky than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, fish), so not More(locate at the sky(A), locate at the sky(B))", ["B is a bee, A is a fish, so A is not more likely to be in the sky than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, fish), so not More(locate at the sky(B), locate at the sky(A))", ["A is a bee, B is a fish, so B is not more likely to be in the sky than A"]]}
{"original": ["animal(A, fish) and animal(B, eagle), so More(locate at the market(A), locate at the market(B))", ["A is a fish, B is a eagle, so A is more likely to be on the market than B"]], "negated": ["animal(A, fish) and animal(B, eagle), so not Less(locate at the market(A), locate at the market(B))", ["A is a fish, B is a eagle, so A is not less likely to be on the market than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, eagle), so Less(locate at the market(A), locate at the market(B))", ["B is a fish, A is a eagle, so A is less likely to be on the market than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, eagle), so Less(locate at the market(B), locate at the market(A))", ["A is a fish, B is a eagle, so B is less likely to be on the market than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, eagle), so not More(locate at the market(A), locate at the market(B))", ["B is a fish, A is a eagle, so A is not more likely to be on the market than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, eagle), so not More(locate at the market(B), locate at the market(A))", ["A is a fish, B is a eagle, so B is not more likely to be on the market than A"]]}
{"original": ["animal(A, fish) and animal(B, eagle), so More(locate at a stream(A), locate at a stream(B))", ["A is a fish, B is a eagle, so A is more likely to be in a stream than B"]], "negated": ["animal(A, fish) and animal(B, eagle), so not Less(locate at a stream(A), locate at a stream(B))", ["A is a fish, B is a eagle, so A is not less likely to be in a stream than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, eagle), so Less(locate at a stream(A), locate at a stream(B))", ["B is a fish, A is a eagle, so A is less likely to be in a stream than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, eagle), so Less(locate at a stream(B), locate at a stream(A))", ["A is a fish, B is a eagle, so B is less likely to be in a stream than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, eagle), so not More(locate at a stream(A), locate at a stream(B))", ["B is a fish, A is a eagle, so A is not more likely to be in a stream than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, eagle), so not More(locate at a stream(B), locate at a stream(A))", ["A is a fish, B is a eagle, so B is not more likely to be in a stream than A"]]}
{"original": ["animal(A, frog) and animal(B, duck), so More(catch flies with its tongue(A), catch flies with its tongue(B))", ["A is a frog, B is a duck, so A is more likely to catch flies with its tongue than B"]], "negated": ["animal(A, frog) and animal(B, duck), so not Less(catch flies with its tongue(A), catch flies with its tongue(B))", ["A is a frog, B is a duck, so A is not less likely to catch flies with its tongue than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, duck), so Less(catch flies with its tongue(A), catch flies with its tongue(B))", ["B is a frog, A is a duck, so A is less likely to catch flies with its tongue than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, duck), so Less(catch flies with its tongue(B), catch flies with its tongue(A))", ["A is a frog, B is a duck, so B is less likely to catch flies with its tongue than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, duck), so not More(catch flies with its tongue(A), catch flies with its tongue(B))", ["B is a frog, A is a duck, so A is not more likely to catch flies with its tongue than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, duck), so not More(catch flies with its tongue(B), catch flies with its tongue(A))", ["A is a frog, B is a duck, so B is not more likely to catch flies with its tongue than A"]]}
{"original": ["animal(A, shark) and animal(B, alligator), so More(locate at the movie \"jaws\"(A), locate at the movie \"jaws\"(B))", ["A is a shark, B is a alligator, so A is more likely to be in the movie \"jaws than B"]], "negated": ["animal(A, shark) and animal(B, alligator), so not Less(locate at the movie \"jaws\"(A), locate at the movie \"jaws\"(B))", ["A is a shark, B is a alligator, so A is not less likely to be in the movie \"jaws than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, alligator), so Less(locate at the movie \"jaws\"(A), locate at the movie \"jaws\"(B))", ["B is a shark, A is a alligator, so A is less likely to be in the movie \"jaws\" than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, alligator), so Less(locate at the movie \"jaws\"(B), locate at the movie \"jaws\"(A))", ["A is a shark, B is a alligator, so B is less likely to be in the movie \"jaws\" than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, alligator), so not More(locate at the movie \"jaws\"(A), locate at the movie \"jaws\"(B))", ["B is a shark, A is a alligator, so A is not more likely to be in the movie \"jaws than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, alligator), so not More(locate at the movie \"jaws\"(B), locate at the movie \"jaws\"(A))", ["A is a shark, B is a alligator, so B is not more likely to be in the movie \"jaws than A"]]}
{"original": ["animal(A, bird) and animal(B, deer), so More(locate at a birdbath(A), locate at a birdbath(B))", ["A is a bird, B is a deer, so A is more likely to be in a birdbath than B"]], "negated": ["animal(A, bird) and animal(B, deer), so not Less(locate at a birdbath(A), locate at a birdbath(B))", ["A is a bird, B is a deer, so A is not less likely to be in a birdbath than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, deer), so Less(locate at a birdbath(A), locate at a birdbath(B))", ["B is a bird, A is a deer, so A is less likely to be in a birdbath than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, deer), so Less(locate at a birdbath(B), locate at a birdbath(A))", ["A is a bird, B is a deer, so B is less likely to be in a birdbath than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, deer), so not More(locate at a birdbath(A), locate at a birdbath(B))", ["B is a bird, A is a deer, so A is not more likely to be in a birdbath than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, deer), so not More(locate at a birdbath(B), locate at a birdbath(A))", ["A is a bird, B is a deer, so B is not more likely to be in a birdbath than A"]]}
{"original": ["animal(A, spider) and animal(B, camel), so More(locate at the cellar(A), locate at the cellar(B))", ["A is a spider, B is a camel, so A is more likely to be in the cellar than B"]], "negated": ["animal(A, spider) and animal(B, camel), so not Less(locate at the cellar(A), locate at the cellar(B))", ["A is a spider, B is a camel, so A is not less likely to be in the cellar than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, camel), so Less(locate at the cellar(A), locate at the cellar(B))", ["B is a spider, A is a camel, so A is less likely to be in the cellar than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, camel), so Less(locate at the cellar(B), locate at the cellar(A))", ["A is a spider, B is a camel, so B is less likely to be in the cellar than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, camel), so not More(locate at the cellar(A), locate at the cellar(B))", ["B is a spider, A is a camel, so A is not more likely to be in the cellar than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, camel), so not More(locate at the cellar(B), locate at the cellar(A))", ["A is a spider, B is a camel, so B is not more likely to be in the cellar than A"]]}
{"original": ["animal(A, chicken) and animal(B, shark), so More(locate at the freezer(A), locate at the freezer(B))", ["A is a chicken, B is a shark, so A is more likely to be in the freezer than B"]], "negated": ["animal(A, chicken) and animal(B, shark), so not Less(locate at the freezer(A), locate at the freezer(B))", ["A is a chicken, B is a shark, so A is not less likely to be in the freezer than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, shark), so Less(locate at the freezer(A), locate at the freezer(B))", ["B is a chicken, A is a shark, so A is less likely to be in the freezer than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, shark), so Less(locate at the freezer(B), locate at the freezer(A))", ["A is a chicken, B is a shark, so B is less likely to be in the freezer than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, shark), so not More(locate at the freezer(A), locate at the freezer(B))", ["B is a chicken, A is a shark, so A is not more likely to be in the freezer than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, shark), so not More(locate at the freezer(B), locate at the freezer(A))", ["A is a chicken, B is a shark, so B is not more likely to be in the freezer than A"]]}
{"original": ["animal(A, lion) and animal(B, shark), so More(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["A is a lion, B is a shark, so A is more likely to be in a large cities zoo than B"]], "negated": ["animal(A, lion) and animal(B, shark), so not Less(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["A is a lion, B is a shark, so A is not less likely to be in a large cities zoo than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, shark), so Less(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["B is a lion, A is a shark, so A is less likely to be in a large cities zoo than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, shark), so Less(locate at a large cities zoo(B), locate at a large cities zoo(A))", ["A is a lion, B is a shark, so B is less likely to be in a large cities zoo than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, shark), so not More(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["B is a lion, A is a shark, so A is not more likely to be in a large cities zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, shark), so not More(locate at a large cities zoo(B), locate at a large cities zoo(A))", ["A is a lion, B is a shark, so B is not more likely to be in a large cities zoo than A"]]}
{"original": ["animal(A, bird) and animal(B, ant), so More(chirp(A), chirp(B))", ["A is a bird, B is an ant, so A is more likely to chirp than B"]], "negated": ["animal(A, bird) and animal(B, ant), so not Less(chirp(A), chirp(B))", ["A is a bird, B is an ant, so A is not less likely to chirp than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, ant), so Less(chirp(A), chirp(B))", ["B is a bird, A is an ant, so A is less likely to chirp than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, ant), so Less(chirp(B), chirp(A))", ["A is a bird, B is an ant, so B is less likely to chirp than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, ant), so not More(chirp(A), chirp(B))", ["B is a bird, A is an ant, so A is not more likely to chirp than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, ant), so not More(chirp(B), chirp(A))", ["A is a bird, B is an ant, so B is not more likely to chirp than A"]]}
{"original": ["animal(A, eagle) and animal(B, cat), so More(spot a rabbit on the ground(A), spot a rabbit on the ground(B))", ["A is a eagle, B is a cat, so A is more likely to spot a rabbit on the ground than B"]], "negated": ["animal(A, eagle) and animal(B, cat), so not Less(spot a rabbit on the ground(A), spot a rabbit on the ground(B))", ["A is a eagle, B is a cat, so A is not less likely to spot a rabbit on the ground than B"]], "asymmetric_premise": ["animal(B, eagle) and animal(A, cat), so Less(spot a rabbit on the ground(A), spot a rabbit on the ground(B))", ["B is a eagle, A is a cat, so A is less likely to spot a rabbit on the ground than B"]], "asymmetric_conclusion": ["animal(A, eagle) and animal(B, cat), so Less(spot a rabbit on the ground(B), spot a rabbit on the ground(A))", ["A is a eagle, B is a cat, so B is less likely to spot a rabbit on the ground than A"]], "negated_asymmetric_premise": ["animal(B, eagle) and animal(A, cat), so not More(spot a rabbit on the ground(A), spot a rabbit on the ground(B))", ["B is a eagle, A is a cat, so A is not more likely to spot a rabbit on the ground than B"]], "negated_asymmetric_conclusion": ["animal(A, eagle) and animal(B, cat), so not More(spot a rabbit on the ground(B), spot a rabbit on the ground(A))", ["A is a eagle, B is a cat, so B is not more likely to spot a rabbit on the ground than A"]]}
{"original": ["animal(A, elephant) and animal(B, dolphin), so More(to lift the tree(A), to lift the tree(B))", ["A is a elephant, B is a dolphin, so A is more likely to lift the tree than B"]], "negated": ["animal(A, elephant) and animal(B, dolphin), so not Less(to lift the tree(A), to lift the tree(B))", ["A is a elephant, B is a dolphin, so A is not less likely to lift the tree than B"]], "asymmetric_premise": ["animal(B, elephant) and animal(A, dolphin), so Less(to lift the tree(A), to lift the tree(B))", ["B is a elephant, A is a dolphin, so A is less likely to lift the tree than B"]], "asymmetric_conclusion": ["animal(A, elephant) and animal(B, dolphin), so Less(to lift the tree(B), to lift the tree(A))", ["A is a elephant, B is a dolphin, so B is less likely to lift the tree than A"]], "negated_asymmetric_premise": ["animal(B, elephant) and animal(A, dolphin), so not More(to lift the tree(A), to lift the tree(B))", ["B is a elephant, A is a dolphin, so A is not more likely to lift the tree than B"]], "negated_asymmetric_conclusion": ["animal(A, elephant) and animal(B, dolphin), so not More(to lift the tree(B), to lift the tree(A))", ["A is a elephant, B is a dolphin, so B is not more likely to lift the tree than A"]]}
{"original": ["animal(A, bird) and animal(B, snake), so More(locate at the air(A), locate at the air(B))", ["A is a bird, B is a snake, so A is more likely to be in the air than B"]], "negated": ["animal(A, bird) and animal(B, snake), so not Less(locate at the air(A), locate at the air(B))", ["A is a bird, B is a snake, so A is not less likely to be in the air than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, snake), so Less(locate at the air(A), locate at the air(B))", ["B is a bird, A is a snake, so A is less likely to be in the air than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, snake), so Less(locate at the air(B), locate at the air(A))", ["A is a bird, B is a snake, so B is less likely to be in the air than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, snake), so not More(locate at the air(A), locate at the air(B))", ["B is a bird, A is a snake, so A is not more likely to be in the air than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, snake), so not More(locate at the air(B), locate at the air(A))", ["A is a bird, B is a snake, so B is not more likely to be in the air than A"]]}
{"original": ["animal(A, tiger) and animal(B, fish), so More(locate at the jungle(A), locate at the jungle(B))", ["A is a tiger, B is a fish, so A is more likely to be in the jungle than B"]], "negated": ["animal(A, tiger) and animal(B, fish), so not Less(locate at the jungle(A), locate at the jungle(B))", ["A is a tiger, B is a fish, so A is not less likely to be in the jungle than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, fish), so Less(locate at the jungle(A), locate at the jungle(B))", ["B is a tiger, A is a fish, so A is less likely to be in the jungle than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, fish), so Less(locate at the jungle(B), locate at the jungle(A))", ["A is a tiger, B is a fish, so B is less likely to be in the jungle than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, fish), so not More(locate at the jungle(A), locate at the jungle(B))", ["B is a tiger, A is a fish, so A is not more likely to be in the jungle than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, fish), so not More(locate at the jungle(B), locate at the jungle(A))", ["A is a tiger, B is a fish, so B is not more likely to be in the jungle than A"]]}
{"original": ["animal(A, shark) and animal(B, lobster), so More(locate at a pool hall(A), locate at a pool hall(B))", ["A is a shark, B is a lobster, so A is more likely to be in a pool hall than B"]], "negated": ["animal(A, shark) and animal(B, lobster), so not Less(locate at a pool hall(A), locate at a pool hall(B))", ["A is a shark, B is a lobster, so A is not less likely to be in a pool hall than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, lobster), so Less(locate at a pool hall(A), locate at a pool hall(B))", ["B is a shark, A is a lobster, so A is less likely to be in a pool hall than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, lobster), so Less(locate at a pool hall(B), locate at a pool hall(A))", ["A is a shark, B is a lobster, so B is less likely to be in a pool hall than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, lobster), so not More(locate at a pool hall(A), locate at a pool hall(B))", ["B is a shark, A is a lobster, so A is not more likely to be in a pool hall than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, lobster), so not More(locate at a pool hall(B), locate at a pool hall(A))", ["A is a shark, B is a lobster, so B is not more likely to be in a pool hall than A"]]}
{"original": ["animal(A, horse) and animal(B, spider), so More(jump a fence(A), jump a fence(B))", ["A is a horse, B is a spider, so A is more likely to jump a fence than B"]], "negated": ["animal(A, horse) and animal(B, spider), so not Less(jump a fence(A), jump a fence(B))", ["A is a horse, B is a spider, so A is not less likely to jump a fence than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, spider), so Less(jump a fence(A), jump a fence(B))", ["B is a horse, A is a spider, so A is less likely to jump a fence than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, spider), so Less(jump a fence(B), jump a fence(A))", ["A is a horse, B is a spider, so B is less likely to jump a fence than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, spider), so not More(jump a fence(A), jump a fence(B))", ["B is a horse, A is a spider, so A is not more likely to jump a fence than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, spider), so not More(jump a fence(B), jump a fence(A))", ["A is a horse, B is a spider, so B is not more likely to jump a fence than A"]]}
{"original": ["animal(A, shark) and animal(B, sheep), so More(locate at saltwater(A), locate at saltwater(B))", ["A is a shark, B is a sheep, so A is more likely to be in saltwater than B"]], "negated": ["animal(A, shark) and animal(B, sheep), so not Less(locate at saltwater(A), locate at saltwater(B))", ["A is a shark, B is a sheep, so A is not less likely to be in saltwater than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, sheep), so Less(locate at saltwater(A), locate at saltwater(B))", ["B is a shark, A is a sheep, so A is less likely to be in saltwater than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, sheep), so Less(locate at saltwater(B), locate at saltwater(A))", ["A is a shark, B is a sheep, so B is less likely to be in saltwater than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, sheep), so not More(locate at saltwater(A), locate at saltwater(B))", ["B is a shark, A is a sheep, so A is not more likely to be in saltwater than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, sheep), so not More(locate at saltwater(B), locate at saltwater(A))", ["A is a shark, B is a sheep, so B is not more likely to be in saltwater than A"]]}
{"original": ["animal(A, spider) and animal(B, hippopotamus), so More(kill a fly(A), kill a fly(B))", ["A is a spider, B is a hippopotamus, so A is more likely to kill a fly than B"]], "negated": ["animal(A, spider) and animal(B, hippopotamus), so not Less(kill a fly(A), kill a fly(B))", ["A is a spider, B is a hippopotamus, so A is not less likely to kill a fly than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, hippopotamus), so Less(kill a fly(A), kill a fly(B))", ["B is a spider, A is a hippopotamus, so A is less likely to kill a fly than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, hippopotamus), so Less(kill a fly(B), kill a fly(A))", ["A is a spider, B is a hippopotamus, so B is less likely to kill a fly than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, hippopotamus), so not More(kill a fly(A), kill a fly(B))", ["B is a spider, A is a hippopotamus, so A is not more likely to kill a fly than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, hippopotamus), so not More(kill a fly(B), kill a fly(A))", ["A is a spider, B is a hippopotamus, so B is not more likely to kill a fly than A"]]}
{"original": ["animal(A, frog) and animal(B, crocodile), so More(be a pet(A), be a pet(B))", ["A is a frog, B is a crocodile, so A is more likely to be a pet than B"]], "negated": ["animal(A, frog) and animal(B, crocodile), so not Less(be a pet(A), be a pet(B))", ["A is a frog, B is a crocodile, so A is not less likely to be a pet than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, crocodile), so Less(be a pet(A), be a pet(B))", ["B is a frog, A is a crocodile, so A is less likely to be a pet than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, crocodile), so Less(be a pet(B), be a pet(A))", ["A is a frog, B is a crocodile, so B is less likely to be a pet than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, crocodile), so not More(be a pet(A), be a pet(B))", ["B is a frog, A is a crocodile, so A is not more likely to be a pet than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, crocodile), so not More(be a pet(B), be a pet(A))", ["A is a frog, B is a crocodile, so B is not more likely to be a pet than A"]]}
{"original": ["animal(A, fish) and animal(B, goat), so More(locate at a pond(A), locate at a pond(B))", ["A is a fish, B is a goat, so A is more likely to be in a pond than B"]], "negated": ["animal(A, fish) and animal(B, goat), so not Less(locate at a pond(A), locate at a pond(B))", ["A is a fish, B is a goat, so A is not less likely to be in a pond than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, goat), so Less(locate at a pond(A), locate at a pond(B))", ["B is a fish, A is a goat, so A is less likely to be in a pond than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, goat), so Less(locate at a pond(B), locate at a pond(A))", ["A is a fish, B is a goat, so B is less likely to be in a pond than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, goat), so not More(locate at a pond(A), locate at a pond(B))", ["B is a fish, A is a goat, so A is not more likely to be in a pond than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, goat), so not More(locate at a pond(B), locate at a pond(A))", ["A is a fish, B is a goat, so B is not more likely to be in a pond than A"]]}
{"original": ["animal(A, bird) and animal(B, hamster), so More(head south(A), head south(B))", ["A is a bird, B is a hamster, so A is more likely to head south than B"]], "negated": ["animal(A, bird) and animal(B, hamster), so not Less(head south(A), head south(B))", ["A is a bird, B is a hamster, so A is not less likely to head south than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, hamster), so Less(head south(A), head south(B))", ["B is a bird, A is a hamster, so A is less likely to head south than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, hamster), so Less(head south(B), head south(A))", ["A is a bird, B is a hamster, so B is less likely to head south than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, hamster), so not More(head south(A), head south(B))", ["B is a bird, A is a hamster, so A is not more likely to head south than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, hamster), so not More(head south(B), head south(A))", ["A is a bird, B is a hamster, so B is not more likely to head south than A"]]}
{"original": ["animal(A, lobster) and animal(B, cat), so More(locate at a pot of boiling water(A), locate at a pot of boiling water(B))", ["A is a lobster, B is a cat, so A is more likely to be in a pot of boiling water than B"]], "negated": ["animal(A, lobster) and animal(B, cat), so not Less(locate at a pot of boiling water(A), locate at a pot of boiling water(B))", ["A is a lobster, B is a cat, so A is not less likely to be in a pot of boiling water than B"]], "asymmetric_premise": ["animal(B, lobster) and animal(A, cat), so Less(locate at a pot of boiling water(A), locate at a pot of boiling water(B))", ["B is a lobster, A is a cat, so A is less likely to be in a pot of boiling water than B"]], "asymmetric_conclusion": ["animal(A, lobster) and animal(B, cat), so Less(locate at a pot of boiling water(B), locate at a pot of boiling water(A))", ["A is a lobster, B is a cat, so B is less likely to be in a pot of boiling water than A"]], "negated_asymmetric_premise": ["animal(B, lobster) and animal(A, cat), so not More(locate at a pot of boiling water(A), locate at a pot of boiling water(B))", ["B is a lobster, A is a cat, so A is not more likely to be in a pot of boiling water than B"]], "negated_asymmetric_conclusion": ["animal(A, lobster) and animal(B, cat), so not More(locate at a pot of boiling water(B), locate at a pot of boiling water(A))", ["A is a lobster, B is a cat, so B is not more likely to be in a pot of boiling water than A"]]}
{"original": ["animal(A, bear) and animal(B, chimpanzee), so More(eat a salmon(A), eat a salmon(B))", ["A is a bear, B is a chimpanzee, so A is more likely to eat a salmon than B"]], "negated": ["animal(A, bear) and animal(B, chimpanzee), so not Less(eat a salmon(A), eat a salmon(B))", ["A is a bear, B is a chimpanzee, so A is not less likely to eat a salmon than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, chimpanzee), so Less(eat a salmon(A), eat a salmon(B))", ["B is a bear, A is a chimpanzee, so A is less likely to eat a salmon than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, chimpanzee), so Less(eat a salmon(B), eat a salmon(A))", ["A is a bear, B is a chimpanzee, so B is less likely to eat a salmon than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, chimpanzee), so not More(eat a salmon(A), eat a salmon(B))", ["B is a bear, A is a chimpanzee, so A is not more likely to eat a salmon than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, chimpanzee), so not More(eat a salmon(B), eat a salmon(A))", ["A is a bear, B is a chimpanzee, so B is not more likely to eat a salmon than A"]]}
{"original": ["animal(A, frog) and animal(B, sheep), so More(jump very high(A), jump very high(B))", ["A is a frog, B is a sheep, so A is more likely to jump very high than B"]], "negated": ["animal(A, frog) and animal(B, sheep), so not Less(jump very high(A), jump very high(B))", ["A is a frog, B is a sheep, so A is not less likely to jump very high than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, sheep), so Less(jump very high(A), jump very high(B))", ["B is a frog, A is a sheep, so A is less likely to jump very high than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, sheep), so Less(jump very high(B), jump very high(A))", ["A is a frog, B is a sheep, so B is less likely to jump very high than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, sheep), so not More(jump very high(A), jump very high(B))", ["B is a frog, A is a sheep, so A is not more likely to jump very high than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, sheep), so not More(jump very high(B), jump very high(A))", ["A is a frog, B is a sheep, so B is not more likely to jump very high than A"]]}
{"original": ["animal(A, cow) and animal(B, squirrel), so More(locate at hamburger(A), locate at hamburger(B))", ["A is a cow, B is a squirrel, so A is more likely to be in the hamburger than B"]], "negated": ["animal(A, cow) and animal(B, squirrel), so not Less(locate at hamburger(A), locate at hamburger(B))", ["A is a cow, B is a squirrel, so A is not less likely to be in the hamburger than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, squirrel), so Less(locate at hamburger(A), locate at hamburger(B))", ["B is a cow, A is a squirrel, so A is less likely to be in the hamburger than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, squirrel), so Less(locate at hamburger(B), locate at hamburger(A))", ["A is a cow, B is a squirrel, so B is less likely to be in the hamburger than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, squirrel), so not More(locate at hamburger(A), locate at hamburger(B))", ["B is a cow, A is a squirrel, so A is not more likely to be in the hamburger than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, squirrel), so not More(locate at hamburger(B), locate at hamburger(A))", ["A is a cow, B is a squirrel, so B is not more likely to be in the hamburger than A"]]}
{"original": ["animal(A, kangaroo) and animal(B, ant), so More(carry its baby in its pouch(A), carry its baby in its pouch(B))", ["A is a kangaroo, B is a ant, so A is more likely to carry its baby in its pouch than B"]], "negated": ["animal(A, kangaroo) and animal(B, ant), so not Less(carry its baby in its pouch(A), carry its baby in its pouch(B))", ["A is a kangaroo, B is a ant, so A is not less likely to carry its baby in its pouch than B"]], "asymmetric_premise": ["animal(B, kangaroo) and animal(A, ant), so Less(carry its baby in its pouch(A), carry its baby in its pouch(B))", ["B is a kangaroo, A is a ant, so A is less likely to carry its baby in its pouch than B"]], "asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, ant), so Less(carry its baby in its pouch(B), carry its baby in its pouch(A))", ["A is a kangaroo, B is a ant, so B is less likely to carry its baby in its pouch than A"]], "negated_asymmetric_premise": ["animal(B, kangaroo) and animal(A, ant), so not More(carry its baby in its pouch(A), carry its baby in its pouch(B))", ["B is a kangaroo, A is a ant, so A is not more likely to carry its baby in its pouch than B"]], "negated_asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, ant), so not More(carry its baby in its pouch(B), carry its baby in its pouch(A))", ["A is a kangaroo, B is a ant, so B is not more likely to carry its baby in its pouch than A"]]}
{"original": ["animal(A, octopus) and animal(B, sheep), so More(locate at water(A), locate at water(B))", ["A is a octopus, B is a sheep, so A is more likely to be in water than B"]], "negated": ["animal(A, octopus) and animal(B, sheep), so not Less(locate at water(A), locate at water(B))", ["A is a octopus, B is a sheep, so A is not less likely to be in water than B"]], "asymmetric_premise": ["animal(B, octopus) and animal(A, sheep), so Less(locate at water(A), locate at water(B))", ["B is a octopus, A is a sheep, so A is less likely to be in water than B"]], "asymmetric_conclusion": ["animal(A, octopus) and animal(B, sheep), so Less(locate at water(B), locate at water(A))", ["A is a octopus, B is a sheep, so B is less likely to be in water than A"]], "negated_asymmetric_premise": ["animal(B, octopus) and animal(A, sheep), so not More(locate at water(A), locate at water(B))", ["B is a octopus, A is a sheep, so A is not more likely to be in water than B"]], "negated_asymmetric_conclusion": ["animal(A, octopus) and animal(B, sheep), so not More(locate at water(B), locate at water(A))", ["A is a octopus, B is a sheep, so B is not more likely to be in water than A"]]}
{"original": ["animal(A, bird) and animal(B, fox), so More(locate at the air(A), locate at the air(B))", ["A is a bird, B is a fox, so A is more likely to be in the air than B"]], "negated": ["animal(A, bird) and animal(B, fox), so not Less(locate at the air(A), locate at the air(B))", ["A is a bird, B is a fox, so A is not less likely to be in the air than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, fox), so Less(locate at the air(A), locate at the air(B))", ["B is a bird, A is a fox, so A is less likely to be in the air than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, fox), so Less(locate at the air(B), locate at the air(A))", ["A is a bird, B is a fox, so B is less likely to be in the air than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, fox), so not More(locate at the air(A), locate at the air(B))", ["B is a bird, A is a fox, so A is not more likely to be in the air than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, fox), so not More(locate at the air(B), locate at the air(A))", ["A is a bird, B is a fox, so B is not more likely to be in the air than A"]]}
{"original": ["animal(A, owl) and animal(B, dog), so More(hear the slightest rustle(A), hear the slightest rustle(B))", ["A is a owl, B is a dog, so A is more likely to hear the slightest rustle than B"]], "negated": ["animal(A, owl) and animal(B, dog), so not Less(hear the slightest rustle(A), hear the slightest rustle(B))", ["A is a owl, B is a dog, so A is not less likely to hear the slightest rustle than B"]], "asymmetric_premise": ["animal(B, owl) and animal(A, dog), so Less(hear the slightest rustle(A), hear the slightest rustle(B))", ["B is a owl, A is a dog, so A is less likely to hear the slightest rustle than B"]], "asymmetric_conclusion": ["animal(A, owl) and animal(B, dog), so Less(hear the slightest rustle(B), hear the slightest rustle(A))", ["A is a owl, B is a dog, so B is less likely to hear the slightest rustle than A"]], "negated_asymmetric_premise": ["animal(B, owl) and animal(A, dog), so not More(hear the slightest rustle(A), hear the slightest rustle(B))", ["B is a owl, A is a dog, so A is not more likely to hear the slightest rustle than B"]], "negated_asymmetric_conclusion": ["animal(A, owl) and animal(B, dog), so not More(hear the slightest rustle(B), hear the slightest rustle(A))", ["A is a owl, B is a dog, so B is not more likely to hear the slightest rustle than A"]]}
{"original": ["animal(A, hamster) and animal(B, ant), so More(spin on a wheel(A), spin on a wheel(B))", ["A is a hamster, B is a ant, so A is more likely to spin on a wheel than B"]], "negated": ["animal(A, hamster) and animal(B, ant), so not Less(spin on a wheel(A), spin on a wheel(B))", ["A is a hamster, B is an ant, so A is not less likely to spin on a wheel than B"]], "asymmetric_premise": ["animal(B, hamster) and animal(A, ant), so Less(spin on a wheel(A), spin on a wheel(B))", ["B is a hamster, A is a ant, so A is less likely to spin on a wheel than B"]], "asymmetric_conclusion": ["animal(A, hamster) and animal(B, ant), so Less(spin on a wheel(B), spin on a wheel(A))", ["A is a hamster, B is a ant, so B is less likely to spin on a wheel than A"]], "negated_asymmetric_premise": ["animal(B, hamster) and animal(A, ant), so not More(spin on a wheel(A), spin on a wheel(B))", ["B is a hamster, A is an ant, so A is not more likely to spin on a wheel than B"]], "negated_asymmetric_conclusion": ["animal(A, hamster) and animal(B, ant), so not More(spin on a wheel(B), spin on a wheel(A))", ["A is a hamster, B is an ant, so B is not more likely to spin on a wheel than A"]]}
{"original": ["animal(A, chicken) and animal(B, duck), so More(be food(A), be food(B))", ["A is a chicken, B is a duck, so A is more likely to be food than B"]], "negated": ["animal(A, chicken) and animal(B, duck), so not Less(be food(A), be food(B))", ["A is a chicken, B is a duck, so A is not less food than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, duck), so Less(be food(A), be food(B))", ["B is a chicken, A is a duck, so A is less likely to be food than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, duck), so Less(be food(B), be food(A))", ["A is a chicken, B is a duck, so B is less likely to be food than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, duck), so not More(be food(A), be food(B))", ["B is a chicken, A is a duck, so A is not more likely to be food than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, duck), so not More(be food(B), be food(A))", ["A is a chicken, B is a duck, so B is not more likely to be food than A"]]}
{"original": ["animal(A, bird) and animal(B, shark), so More(be a pet(A), be a pet(B))", ["A is a bird, B is a shark, so A is more likely to be a pet than B"]], "negated": ["animal(A, bird) and animal(B, shark), so not Less(be a pet(A), be a pet(B))", ["A is a bird, B is a shark, so A is not less likely to be a pet than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, shark), so Less(be a pet(A), be a pet(B))", ["B is a bird, A is a shark, so A is less likely to be a pet than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, shark), so Less(be a pet(B), be a pet(A))", ["A is a bird, B is a shark, so B is less likely to be a pet than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, shark), so not More(be a pet(A), be a pet(B))", ["B is a bird, A is a shark, so A is not more likely to be a pet than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, shark), so not More(be a pet(B), be a pet(A))", ["A is a bird, B is a shark, so B is not more likely to be a pet than A"]]}
{"original": ["animal(A, giraffe) and animal(B, eagle), so More(locate at a zoo(A), locate at a zoo(B))", ["A is a giraffe, B is a eagle, so A is more likely to be in a zoo than B"]], "negated": ["animal(A, giraffe) and animal(B, eagle), so not Less(locate at a zoo(A), locate at a zoo(B))", ["A is a giraffe, B is a eagle, so A is not less likely to be in a zoo than B"]], "asymmetric_premise": ["animal(B, giraffe) and animal(A, eagle), so Less(locate at a zoo(A), locate at a zoo(B))", ["B is a giraffe, A is a eagle, so A is less likely to be in a zoo than B"]], "asymmetric_conclusion": ["animal(A, giraffe) and animal(B, eagle), so Less(locate at a zoo(B), locate at a zoo(A))", ["A is a giraffe, B is a eagle, so B is less likely to be in a zoo than A"]], "negated_asymmetric_premise": ["animal(B, giraffe) and animal(A, eagle), so not More(locate at a zoo(A), locate at a zoo(B))", ["B is a giraffe, A is a eagle, so A is not more likely to be in a zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, giraffe) and animal(B, eagle), so not More(locate at a zoo(B), locate at a zoo(A))", ["A is a giraffe, B is a eagle, so B is not more likely to be in a zoo than A"]]}
{"original": ["animal(A, shark) and animal(B, goat), so More(locate at a pool hall(A), locate at a pool hall(B))", ["A is a shark, B is a goat, so A is more likely to be in a pool hall than B"]], "negated": ["animal(A, shark) and animal(B, goat), so not Less(locate at a pool hall(A), locate at a pool hall(B))", ["A is a shark, B is a goat, so A is not less likely to be in a pool hall than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, goat), so Less(locate at a pool hall(A), locate at a pool hall(B))", ["B is a shark, A is a goat, so A is less likely to be in a pool hall than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, goat), so Less(locate at a pool hall(B), locate at a pool hall(A))", ["A is a shark, B is a goat, so B is less likely to be in a pool hall than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, goat), so not More(locate at a pool hall(A), locate at a pool hall(B))", ["B is a shark, A is a goat, so A is not more likely to be in a pool hall than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, goat), so not More(locate at a pool hall(B), locate at a pool hall(A))", ["A is a shark, B is a goat, so B is not more likely to be in a pool hall than A"]]}
{"original": ["animal(A, fly) and animal(B, fox), so More(fly around(A), fly around(B))", ["A is a fly, B is a fox, so A is more likely to fly around than B"]], "negated": ["animal(A, fly) and animal(B, fox), so not Less(fly around(A), fly around(B))", ["A is a fly, B is a fox, so A is not less likely to fly around than B"]], "asymmetric_premise": ["animal(B, fly) and animal(A, fox), so Less(fly around(A), fly around(B))", ["B is a fly, A is a fox, so A is less likely to fly around than B"]], "asymmetric_conclusion": ["animal(A, fly) and animal(B, fox), so Less(fly around(B), fly around(A))", ["A is a fly, B is a fox, so B is less likely to fly around than A"]], "negated_asymmetric_premise": ["animal(B, fly) and animal(A, fox), so not More(fly around(A), fly around(B))", ["B is a fly, A is a fox, so A is not more likely to fly around than B"]], "negated_asymmetric_conclusion": ["animal(A, fly) and animal(B, fox), so not More(fly around(B), fly around(A))", ["A is a fly, B is a fox, so B is not more likely to fly around than A"]]}
{"original": ["animal(A, monkey) and animal(B, hippopotamus), so More(use a tool(A), use a tool(B))", ["A is a monkey, B is a hippopotamus, so A is more likely to use a tool than B"]], "negated": ["animal(A, monkey) and animal(B, hippopotamus), so not Less(use a tool(A), use a tool(B))", ["A is a monkey, B is a hippopotamus, so A is not less likely to use a tool than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, hippopotamus), so Less(use a tool(A), use a tool(B))", ["B is a monkey, A is a hippopotamus, so A is less likely to use a tool than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, hippopotamus), so Less(use a tool(B), use a tool(A))", ["A is a monkey, B is a hippopotamus, so B is less likely to use a tool than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, hippopotamus), so not More(use a tool(A), use a tool(B))", ["B is a monkey, A is a hippopotamus, so A is not more likely to use a tool than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, hippopotamus), so not More(use a tool(B), use a tool(A))", ["A is a monkey, B is a hippopotamus, so B is not more likely to use a tool than A"]]}
{"original": ["animal(A, frog) and animal(B, fox), so More(wish to be a prince(A), wish to be a prince(B))", ["A is a frog, B is a fox, so A is more likely to be a prince than B"]], "negated": ["animal(A, frog) and animal(B, fox), so not Less(wish to be a prince(A), wish to be a prince(B))", ["A is a frog, B is a fox, so A is not less likely to wish to be a prince than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, fox), so Less(wish to be a prince(A), wish to be a prince(B))", ["B is a frog, A is a fox, so A is less likely to wish to be a prince than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, fox), so Less(wish to be a prince(B), wish to be a prince(A))", ["A is a frog, B is a fox, so B is less likely to wish to be a prince than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, fox), so not More(wish to be a prince(A), wish to be a prince(B))", ["B is a frog, A is a fox, so A is not more likely to wish to be a prince than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, fox), so not More(wish to be a prince(B), wish to be a prince(A))", ["A is a frog, B is a fox, so B is not more likely to wish to be a prince than A"]]}
{"original": ["animal(A, pig) and animal(B, hippopotamus), so More(find truffles(A), find truffles(B))", ["A is a pig, B is a hippopotamus, so A is more likely to find truffles than B"]], "negated": ["animal(A, pig) and animal(B, hippopotamus), so not Less(find truffles(A), find truffles(B))", ["A is a pig, B is a hippopotamus, so A is not less likely to find truffles than B"]], "asymmetric_premise": ["animal(B, pig) and animal(A, hippopotamus), so Less(find truffles(A), find truffles(B))", ["B is a pig, A is a hippopotamus, so A is less likely to find truffles than B"]], "asymmetric_conclusion": ["animal(A, pig) and animal(B, hippopotamus), so Less(find truffles(B), find truffles(A))", ["A is a pig, B is a hippopotamus, so B is less likely to find truffles than A"]], "negated_asymmetric_premise": ["animal(B, pig) and animal(A, hippopotamus), so not More(find truffles(A), find truffles(B))", ["B is a pig, A is a hippopotamus, so A is not more likely to find truffles than B"]], "negated_asymmetric_conclusion": ["animal(A, pig) and animal(B, hippopotamus), so not More(find truffles(B), find truffles(A))", ["A is a pig, B is a hippopotamus, so B is not more likely to find truffles than A"]]}
{"original": ["animal(A, cow) and animal(B, scorpion), so More(low by mooing(A), low by mooing(B))", ["A is a cow, B is a scorpion, so A is more low by mooing than B"]], "negated": ["animal(A, cow) and animal(B, scorpion), so not Less(low by mooing(A), low by mooing(B))", ["A is a cow, B is a scorpion, so A is not less low by mooing than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, scorpion), so Less(low by mooing(A), low by mooing(B))", ["B is a cow, A is a scorpion, so A is less low by mooing than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, scorpion), so Less(low by mooing(B), low by mooing(A))", ["A is a cow, B is a scorpion, so B is less low by mooing than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, scorpion), so not More(low by mooing(A), low by mooing(B))", ["B is a cow, A is a scorpion, so A is not more low by mooing than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, scorpion), so not More(low by mooing(B), low by mooing(A))", ["A is a cow, B is a scorpion, so B is not more low by mooing than A"]]}
{"original": ["animal(A, spider) and animal(B, elephant), so More(spin a web(A), spin a web(B))", ["A is a spider, B is an elephant, so A is more likely to spin a web than B"]], "negated": ["animal(A, spider) and animal(B, elephant), so not Less(spin a web(A), spin a web(B))", ["A is a spider, B is an elephant, so A is not less likely to spin a web than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, elephant), so Less(spin a web(A), spin a web(B))", ["B is a spider, A is a elephant, so A is less likely to spin a web than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, elephant), so Less(spin a web(B), spin a web(A))", ["A is a spider, B is an elephant, so B is less likely to spin a web than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, elephant), so not More(spin a web(A), spin a web(B))", ["B is a spider, A is an elephant, so A is not more likely to spin a web than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, elephant), so not More(spin a web(B), spin a web(A))", ["A is a spider, B is an elephant, so B is not more likely to spin a web than A"]]}
{"original": ["animal(A, fish) and animal(B, snake), so More(locate at a stream(A), locate at a stream(B))", ["A is a fish, B is a snake, so A is more likely to be in a stream than B"]], "negated": ["animal(A, fish) and animal(B, snake), so not Less(locate at a stream(A), locate at a stream(B))", ["A is a fish, B is a snake, so A is not less likely to be in a stream than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, snake), so Less(locate at a stream(A), locate at a stream(B))", ["B is a fish, A is a snake, so A is less likely to be in a stream than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, snake), so Less(locate at a stream(B), locate at a stream(A))", ["A is a fish, B is a snake, so B is less likely to be in a stream than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, snake), so not More(locate at a stream(A), locate at a stream(B))", ["B is a fish, A is a snake, so A is not more likely to be in a stream than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, snake), so not More(locate at a stream(B), locate at a stream(A))", ["A is a fish, B is a snake, so B is not more likely to be in a stream than A"]]}
{"original": ["animal(A, chicken) and animal(B, wolf), so More(locate at the oven(A), locate at the oven(B))", ["A is a chicken, B is a wolf, so A is more likely to be in the oven than B"]], "negated": ["animal(A, chicken) and animal(B, wolf), so not Less(locate at the oven(A), locate at the oven(B))", ["A is a chicken, B is a wolf, so A is not less likely to be in the oven than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, wolf), so Less(locate at the oven(A), locate at the oven(B))", ["B is a chicken, A is a wolf, so A is less likely to be in the oven than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, wolf), so Less(locate at the oven(B), locate at the oven(A))", ["A is a chicken, B is a wolf, so B is less likely to be in the oven than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, wolf), so not More(locate at the oven(A), locate at the oven(B))", ["B is a chicken, A is a wolf, so A is not more likely to be in the oven than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, wolf), so not More(locate at the oven(B), locate at the oven(A))", ["A is a chicken, B is a wolf, so B is not more likely to be in the oven than A"]]}
{"original": ["animal(A, cat) and animal(B, scorpion), so More(look at a king(A), look at a king(B))", ["A is a cat, B is a scorpion, so A is more likely to look at a king than B"]], "negated": ["animal(A, cat) and animal(B, scorpion), so not Less(look at a king(A), look at a king(B))", ["A is a cat, B is a scorpion, so A is not less likely to look at a king than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, scorpion), so Less(look at a king(A), look at a king(B))", ["B is a cat, A is a scorpion, so A is less likely to look at a king than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, scorpion), so Less(look at a king(B), look at a king(A))", ["A is a cat, B is a scorpion, so B is less likely to look at a king than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, scorpion), so not More(look at a king(A), look at a king(B))", ["B is a cat, A is a scorpion, so A is not more likely to look at a king than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, scorpion), so not More(look at a king(B), look at a king(A))", ["A is a cat, B is a scorpion, so B is not more likely to look at a king than A"]]}
{"original": ["animal(A, dog) and animal(B, fly), so More(drink water(A), drink water(B))", ["A is a dog, B is a fly, so A is more likely to drink water than B"]], "negated": ["animal(A, dog) and animal(B, fly), so not Less(drink water(A), drink water(B))", ["A is a dog, B is a fly, so A is not less likely to drink water than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, fly), so Less(drink water(A), drink water(B))", ["B is a dog, A is a fly, so A is less likely to drink water than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, fly), so Less(drink water(B), drink water(A))", ["A is a dog, B is a fly, so B is less likely to drink water than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, fly), so not More(drink water(A), drink water(B))", ["B is a dog, A is a fly, so A is not more likely to drink water than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, fly), so not More(drink water(B), drink water(A))", ["A is a dog, B is a fly, so B is not more likely to drink water than A"]]}
{"original": ["animal(A, spider) and animal(B, bird), so More(kill an insect(A), kill an insect(B))", ["A is a spider, B is a bird, so A is more likely to kill an insect than B"]], "negated": ["animal(A, spider) and animal(B, bird), so not Less(kill an insect(A), kill an insect(B))", ["A is a spider, B is a bird, so A is not less likely to kill an insect than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, bird), so Less(kill an insect(A), kill an insect(B))", ["B is a spider, A is a bird, so A is less likely to kill an insect than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, bird), so Less(kill an insect(B), kill an insect(A))", ["A is a spider, B is a bird, so B is less likely to kill an insect than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, bird), so not More(kill an insect(A), kill an insect(B))", ["B is a spider, A is a bird, so A is not more likely to kill an insect than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, bird), so not More(kill an insect(B), kill an insect(A))", ["A is a spider, B is a bird, so B is not more likely to kill an insect than A"]]}
{"original": ["animal(A, deer) and animal(B, fly), so More(long for water(A), long for water(B))", ["A is a deer, B is a fly, so A is more long for water than B"]], "negated": ["animal(A, deer) and animal(B, fly), so not Less(long for water(A), long for water(B))", ["A is a deer, B is a fly, so A is not less long for water than B"]], "asymmetric_premise": ["animal(B, deer) and animal(A, fly), so Less(long for water(A), long for water(B))", ["B is a deer, A is a fly, so A is less long for water than B"]], "asymmetric_conclusion": ["animal(A, deer) and animal(B, fly), so Less(long for water(B), long for water(A))", ["A is a deer, B is a fly, so B is less long for water than A"]], "negated_asymmetric_premise": ["animal(B, deer) and animal(A, fly), so not More(long for water(A), long for water(B))", ["B is a deer, A is a fly, so A is not more long for water than B"]], "negated_asymmetric_conclusion": ["animal(A, deer) and animal(B, fly), so not More(long for water(B), long for water(A))", ["A is a deer, B is a fly, so B is not more long for water than A"]]}
{"original": ["animal(A, lion) and animal(B, duck), so More(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["A is a lion, B is a duck, so A is more likely to be in a large cities zoo than B"]], "negated": ["animal(A, lion) and animal(B, duck), so not Less(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["A is a lion, B is a duck, so A is not less likely to be in a large cities zoo than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, duck), so Less(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["B is a lion, A is a duck, so A is less likely to be in a large cities zoo than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, duck), so Less(locate at a large cities zoo(B), locate at a large cities zoo(A))", ["A is a lion, B is a duck, so B is less likely to be in a large cities zoo than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, duck), so not More(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["B is a lion, A is a duck, so A is not more likely to be in a large cities zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, duck), so not More(locate at a large cities zoo(B), locate at a large cities zoo(A))", ["A is a lion, B is a duck, so B is not more likely to be in a large cities zoo than A"]]}
{"original": ["animal(A, elephant) and animal(B, chicken), so More(locate at africa(A), locate at africa(B))", ["A is a elephant, B is a chicken, so A is more likely to be in africa than B"]], "negated": ["animal(A, elephant) and animal(B, chicken), so not Less(locate at africa(A), locate at africa(B))", ["A is a elephant, B is a chicken, so A is not less likely to be in africa than B"]], "asymmetric_premise": ["animal(B, elephant) and animal(A, chicken), so Less(locate at africa(A), locate at africa(B))", ["B is a elephant, A is a chicken, so A is less likely to be in africa than B"]], "asymmetric_conclusion": ["animal(A, elephant) and animal(B, chicken), so Less(locate at africa(B), locate at africa(A))", ["A is a elephant, B is a chicken, so B is less likely to be in africa than A"]], "negated_asymmetric_premise": ["animal(B, elephant) and animal(A, chicken), so not More(locate at africa(A), locate at africa(B))", ["B is a elephant, A is a chicken, so A is not more likely to be in africa than B"]], "negated_asymmetric_conclusion": ["animal(A, elephant) and animal(B, chicken), so not More(locate at africa(B), locate at africa(A))", ["A is a elephant, B is a chicken, so B is not more likely to be in africa than A"]]}
{"original": ["animal(A, fish) and animal(B, owl), so More(locate at a stream(A), locate at a stream(B))", ["A is a fish, B is a owl, so A is more likely to be in a stream than B"]], "negated": ["animal(A, fish) and animal(B, owl), so not Less(locate at a stream(A), locate at a stream(B))", ["A is a fish, B is a owl, so A is not less likely to be in a stream than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, owl), so Less(locate at a stream(A), locate at a stream(B))", ["B is a fish, A is a owl, so A is less likely to be in a stream than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, owl), so Less(locate at a stream(B), locate at a stream(A))", ["A is a fish, B is a owl, so B is less likely to be in a stream than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, owl), so not More(locate at a stream(A), locate at a stream(B))", ["B is a fish, A is a owl, so A is not more likely to be in a stream than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, owl), so not More(locate at a stream(B), locate at a stream(A))", ["A is a fish, B is a owl, so B is not more likely to be in a stream than A"]]}
{"original": ["animal(A, bird) and animal(B, zebra), so More(locate at a tree(A), locate at a tree(B))", ["A is a bird, B is a zebra, so A is more likely to be in a tree than B"]], "negated": ["animal(A, bird) and animal(B, zebra), so not Less(locate at a tree(A), locate at a tree(B))", ["A is a bird, B is a zebra, so A is not less likely to be in a tree than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, zebra), so Less(locate at a tree(A), locate at a tree(B))", ["B is a bird, A is a zebra, so A is less likely to be in a tree than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, zebra), so Less(locate at a tree(B), locate at a tree(A))", ["A is a bird, B is a zebra, so B is less likely to be in a tree than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, zebra), so not More(locate at a tree(A), locate at a tree(B))", ["B is a bird, A is a zebra, so A is not more likely to be in a tree than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, zebra), so not More(locate at a tree(B), locate at a tree(A))", ["A is a bird, B is a zebra, so B is not more likely to be in a tree than A"]]}
{"original": ["animal(A, fish) and animal(B, lobster), so More(live underwater(A), live underwater(B))", ["A is a fish, B is a lobster, so A is more likely to live underwater than B"]], "negated": ["animal(A, fish) and animal(B, lobster), so not Less(live underwater(A), live underwater(B))", ["A is a fish, B is a lobster, so A is not less likely to live underwater than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, lobster), so Less(live underwater(A), live underwater(B))", ["B is a fish, A is a lobster, so A is less likely to live underwater than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, lobster), so Less(live underwater(B), live underwater(A))", ["A is a fish, B is a lobster, so B is less likely to live underwater than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, lobster), so not More(live underwater(A), live underwater(B))", ["B is a fish, A is a lobster, so A is not more likely to live underwater than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, lobster), so not More(live underwater(B), live underwater(A))", ["A is a fish, B is a lobster, so B is not more likely to live underwater than A"]]}
{"original": ["animal(A, bird) and animal(B, hippopotamus), so More(locate at a roof(A), locate at a roof(B))", ["A is a bird, B is a hippopotamus, so A is more likely to be on a roof than B"]], "negated": ["animal(A, bird) and animal(B, hippopotamus), so not Less(locate at a roof(A), locate at a roof(B))", ["A is a bird, B is a hippopotamus, so A is not less likely to be on a roof than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, hippopotamus), so Less(locate at a roof(A), locate at a roof(B))", ["B is a bird, A is a hippopotamus, so A is less likely to be on a roof than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, hippopotamus), so Less(locate at a roof(B), locate at a roof(A))", ["A is a bird, B is a hippopotamus, so B is less likely to be on a roof than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, hippopotamus), so not More(locate at a roof(A), locate at a roof(B))", ["B is a bird, A is a hippopotamus, so A is not more likely to be on a roof than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, hippopotamus), so not More(locate at a roof(B), locate at a roof(A))", ["A is a bird, B is a hippopotamus, so B is not more likely to be on a roof than A"]]}
{"original": ["animal(A, bee) and animal(B, dolphin), so More(locate at a meadow(A), locate at a meadow(B))", ["A is a bee, B is a dolphin, so A is more likely to be in a meadow than B"]], "negated": ["animal(A, bee) and animal(B, dolphin), so not Less(locate at a meadow(A), locate at a meadow(B))", ["A is a bee, B is a dolphin, so A is not less likely to be in a meadow than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, dolphin), so Less(locate at a meadow(A), locate at a meadow(B))", ["B is a bee, A is a dolphin, so A is less likely to be in a meadow than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, dolphin), so Less(locate at a meadow(B), locate at a meadow(A))", ["A is a bee, B is a dolphin, so B is less likely to be in a meadow than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, dolphin), so not More(locate at a meadow(A), locate at a meadow(B))", ["B is a bee, A is a dolphin, so A is not more likely to be in a meadow than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, dolphin), so not More(locate at a meadow(B), locate at a meadow(A))", ["A is a bee, B is a dolphin, so B is not more likely to be in a meadow than A"]]}
{"original": ["animal(A, fish) and animal(B, rat), so More(live in lakes(A), live in lakes(B))", ["A is a fish, B is a rat, so A is more likely to live in lakes than B"]], "negated": ["animal(A, fish) and animal(B, rat), so not Less(live in lakes(A), live in lakes(B))", ["A is a fish, B is a rat, so A is not less likely to live in lakes than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, rat), so Less(live in lakes(A), live in lakes(B))", ["B is a fish, A is a rat, so A is less likely to live in lakes than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, rat), so Less(live in lakes(B), live in lakes(A))", ["A is a fish, B is a rat, so B is less likely to live in lakes than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, rat), so not More(live in lakes(A), live in lakes(B))", ["B is a fish, A is a rat, so A is not more likely to live in lakes than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, rat), so not More(live in lakes(B), live in lakes(A))", ["A is a fish, B is a rat, so B is not more likely to live in lakes than A"]]}
{"original": ["animal(A, bear) and animal(B, cat), so More(hunt a rabbit(A), hunt a rabbit(B))", ["A is a bear, B is a cat, so A is more likely to hunt a rabbit than B"]], "negated": ["animal(A, bear) and animal(B, cat), so not Less(hunt a rabbit(A), hunt a rabbit(B))", ["A is a bear, B is a cat, so A is not less likely to hunt a rabbit than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, cat), so Less(hunt a rabbit(A), hunt a rabbit(B))", ["B is a bear, A is a cat, so A is less likely to hunt a rabbit than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, cat), so Less(hunt a rabbit(B), hunt a rabbit(A))", ["A is a bear, B is a cat, so B is less likely to hunt a rabbit than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, cat), so not More(hunt a rabbit(A), hunt a rabbit(B))", ["B is a bear, A is a cat, so A is not more likely to hunt a rabbit than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, cat), so not More(hunt a rabbit(B), hunt a rabbit(A))", ["A is a bear, B is a cat, so B is not more likely to hunt a rabbit than A"]]}
{"original": ["animal(A, alligator) and animal(B, dolphin), so More(locate at a swamp(A), locate at a swamp(B))", ["A is a alligator, B is a dolphin, so A is more likely to be in a swamp than B"]], "negated": ["animal(A, alligator) and animal(B, dolphin), so not Less(locate at a swamp(A), locate at a swamp(B))", ["A is a alligator, B is a dolphin, so A is not less likely to be in a swamp than B"]], "asymmetric_premise": ["animal(B, alligator) and animal(A, dolphin), so Less(locate at a swamp(A), locate at a swamp(B))", ["B is a alligator, A is a dolphin, so A is less likely to be in a swamp than B"]], "asymmetric_conclusion": ["animal(A, alligator) and animal(B, dolphin), so Less(locate at a swamp(B), locate at a swamp(A))", ["A is a alligator, B is a dolphin, so B is less likely to be in a swamp than A"]], "negated_asymmetric_premise": ["animal(B, alligator) and animal(A, dolphin), so not More(locate at a swamp(A), locate at a swamp(B))", ["B is a alligator, A is a dolphin, so A is not more likely to be in a swamp than B"]], "negated_asymmetric_conclusion": ["animal(A, alligator) and animal(B, dolphin), so not More(locate at a swamp(B), locate at a swamp(A))", ["A is a alligator, B is a dolphin, so B is not more likely to be in a swamp than A"]]}
{"original": ["animal(A, tiger) and animal(B, rabbit), so More(spring from the bush(A), spring from the bush(B))", ["A is a tiger, B is a rabbit, so A is more likely to spring from the bush than B"]], "negated": ["animal(A, tiger) and animal(B, rabbit), so not Less(spring from the bush(A), spring from the bush(B))", ["A is a tiger, B is a rabbit, so A is not less likely to spring from the bush than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, rabbit), so Less(spring from the bush(A), spring from the bush(B))", ["B is a tiger, A is a rabbit, so A is less likely to spring from the bush than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, rabbit), so Less(spring from the bush(B), spring from the bush(A))", ["A is a tiger, B is a rabbit, so B is less likely to spring from the bush than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, rabbit), so not More(spring from the bush(A), spring from the bush(B))", ["B is a tiger, A is a rabbit, so A does not spring from the bush more than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, rabbit), so not More(spring from the bush(B), spring from the bush(A))", ["A is a tiger, B is a rabbit, so B is not more likely to spring from the bush than A"]]}
{"original": ["animal(A, bird) and animal(B, eagle), so More(build a nest(A), build a nest(B))", ["A is a bird, B is a eagle, so A is more likely to build a nest than B"]], "negated": ["animal(A, bird) and animal(B, eagle), so not Less(build a nest(A), build a nest(B))", ["A is a bird, B is a eagle, so A is not less likely to build a nest than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, eagle), so Less(build a nest(A), build a nest(B))", ["B is a bird, A is a eagle, so A is less likely to build a nest than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, eagle), so Less(build a nest(B), build a nest(A))", ["A is a bird, B is a eagle, so B is less likely to build a nest than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, eagle), so not More(build a nest(A), build a nest(B))", ["B is a bird, A is a eagle, so A is not more likely to build a nest than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, eagle), so not More(build a nest(B), build a nest(A))", ["A is a bird, B is a eagle, so B is not more likely to build a nest than A"]]}
{"original": ["animal(A, monkey) and animal(B, eagle), so More(locate at the circus(A), locate at the circus(B))", ["A is a monkey, B is a eagle, so A is more likely to be in the circus than B"]], "negated": ["animal(A, monkey) and animal(B, eagle), so not Less(locate at the circus(A), locate at the circus(B))", ["A is a monkey, B is a eagle, so A is not less likely to be in the circus than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, eagle), so Less(locate at the circus(A), locate at the circus(B))", ["B is a monkey, A is a eagle, so A is less likely to be in the circus than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, eagle), so Less(locate at the circus(B), locate at the circus(A))", ["A is a monkey, B is a eagle, so B is less likely to be in the circus than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, eagle), so not More(locate at the circus(A), locate at the circus(B))", ["B is a monkey, A is a eagle, so A is not more likely to be in the circus than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, eagle), so not More(locate at the circus(B), locate at the circus(A))", ["A is a monkey, B is a eagle, so B is not more likely to be in the circus than A"]]}
{"original": ["animal(A, rat) and animal(B, camel), so More(be a pet(A), be a pet(B))", ["A is a rat, B is a camel, so A is more likely to be a pet than B"]], "negated": ["animal(A, rat) and animal(B, camel), so not Less(be a pet(A), be a pet(B))", ["A is a rat, B is a camel, so A is not less likely to be a pet than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, camel), so Less(be a pet(A), be a pet(B))", ["B is a rat, A is a camel, so A is less likely to be a pet than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, camel), so Less(be a pet(B), be a pet(A))", ["A is a rat, B is a camel, so B is less likely to be a pet than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, camel), so not More(be a pet(A), be a pet(B))", ["B is a rat, A is a camel, so A is not more likely to be a pet than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, camel), so not More(be a pet(B), be a pet(A))", ["A is a rat, B is a camel, so B is not more likely to be a pet than A"]]}
{"original": ["animal(A, bird) and animal(B, chicken), so More(locate at a nest(A), locate at a nest(B))", ["A is a bird, B is a chicken, so A is more likely to be in a nest than B"]], "negated": ["animal(A, bird) and animal(B, chicken), so not Less(locate at a nest(A), locate at a nest(B))", ["A is a bird, B is a chicken, so A is not less likely to be in a nest than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, chicken), so Less(locate at a nest(A), locate at a nest(B))", ["B is a bird, A is a chicken, so A is less likely to be in a nest than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, chicken), so Less(locate at a nest(B), locate at a nest(A))", ["A is a bird, B is a chicken, so B is less likely to be in a nest than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, chicken), so not More(locate at a nest(A), locate at a nest(B))", ["B is a bird, A is a chicken, so A is not more likely to be in a nest than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, chicken), so not More(locate at a nest(B), locate at a nest(A))", ["A is a bird, B is a chicken, so B is not more likely to be in a nest than A"]]}
{"original": ["animal(A, rat) and animal(B, deer), so More(locate at a maze(A), locate at a maze(B))", ["A is a rat, B is a deer, so A is more likely to be in a maze than B"]], "negated": ["animal(A, rat) and animal(B, deer), so not Less(locate at a maze(A), locate at a maze(B))", ["A is a rat, B is a deer, so A is not less likely to be in a maze than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, deer), so Less(locate at a maze(A), locate at a maze(B))", ["B is a rat, A is a deer, so A is less likely to be in a maze than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, deer), so Less(locate at a maze(B), locate at a maze(A))", ["A is a rat, B is a deer, so B is less likely to be in a maze than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, deer), so not More(locate at a maze(A), locate at a maze(B))", ["B is a rat, A is a deer, so A is not more likely to be in a maze than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, deer), so not More(locate at a maze(B), locate at a maze(A))", ["A is a rat, B is a deer, so B is not more likely to be in a maze than A"]]}
{"original": ["animal(A, cat) and animal(B, horse), so More(kill birds(A), kill birds(B))", ["A is a cat, B is a horse, so A is more likely to kill birds than B"]], "negated": ["animal(A, cat) and animal(B, horse), so not Less(kill birds(A), kill birds(B))", ["A is a cat, B is a horse, so A is not less likely to kill birds than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, horse), so Less(kill birds(A), kill birds(B))", ["B is a cat, A is a horse, so A is less likely to kill birds than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, horse), so Less(kill birds(B), kill birds(A))", ["A is a cat, B is a horse, so B is less likely to kill birds than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, horse), so not More(kill birds(A), kill birds(B))", ["B is a cat, A is a horse, so A is not more likely to kill birds than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, horse), so not More(kill birds(B), kill birds(A))", ["A is a cat, B is a horse, so B is not more likely to kill birds than A"]]}
{"original": ["animal(A, horse) and animal(B, cat), so More(run in a pasture(A), run in a pasture(B))", ["A is a horse, B is a cat, so A is more likely to run in a pasture than B"]], "negated": ["animal(A, horse) and animal(B, cat), so not Less(run in a pasture(A), run in a pasture(B))", ["A is a horse, B is a cat, so A is not less likely to run in a pasture than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, cat), so Less(run in a pasture(A), run in a pasture(B))", ["B is a horse, A is a cat, so A is less likely to run in a pasture than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, cat), so Less(run in a pasture(B), run in a pasture(A))", ["A is a horse, B is a cat, so B is less likely to run in a pasture than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, cat), so not More(run in a pasture(A), run in a pasture(B))", ["B is a horse, A is a cat, so A is not more likely to run in a pasture than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, cat), so not More(run in a pasture(B), run in a pasture(A))", ["A is a horse, B is a cat, so B is not more likely to run in a pasture than A"]]}
{"original": ["animal(A, horse) and animal(B, bird), so More(locate at stall(A), locate at stall(B))", ["A is a horse, B is a bird, so A is more likely to be in a stall than B"]], "negated": ["animal(A, horse) and animal(B, bird), so not Less(locate at stall(A), locate at stall(B))", ["A is a horse, B is a bird, so A is not less likely to be in a stall than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, bird), so Less(locate at stall(A), locate at stall(B))", ["B is a horse, A is a bird, so A is less likely to be in a stall than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, bird), so Less(locate at stall(B), locate at stall(A))", ["A is a horse, B is a bird, so B is less likely to be in the stall than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, bird), so not More(locate at stall(A), locate at stall(B))", ["B is a horse, A is a bird, so A is not more likely to be in a stall than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, bird), so not More(locate at stall(B), locate at stall(A))", ["A is a horse, B is a bird, so B is not more likely to be in a stall than A"]]}
{"original": ["animal(A, frog) and animal(B, bird), so More(jump very high(A), jump very high(B))", ["A is a frog, B is a bird, so A is more likely to jump very high than B"]], "negated": ["animal(A, frog) and animal(B, bird), so not Less(jump very high(A), jump very high(B))", ["A is a frog, B is a bird, so A is not less likely to jump very high than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, bird), so Less(jump very high(A), jump very high(B))", ["B is a frog, A is a bird, so A is less likely to jump very high than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, bird), so Less(jump very high(B), jump very high(A))", ["A is a frog, B is a bird, so B is less likely to jump very high than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, bird), so not More(jump very high(A), jump very high(B))", ["B is a frog, A is a bird, so A is not more likely to jump very high than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, bird), so not More(jump very high(B), jump very high(A))", ["A is a frog, B is a bird, so B is not more likely to jump very high than A"]]}
{"original": ["animal(A, cat) and animal(B, wolf), so More(drink water(A), drink water(B))", ["A is a cat, B is a wolf, so A is more likely to drink water than B"]], "negated": ["animal(A, cat) and animal(B, wolf), so not Less(drink water(A), drink water(B))", ["A is a cat, B is a wolf, so A is not less likely to drink water than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, wolf), so Less(drink water(A), drink water(B))", ["B is a cat, A is a wolf, so A is less likely to drink water than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, wolf), so Less(drink water(B), drink water(A))", ["A is a cat, B is a wolf, so B is less likely to drink water than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, wolf), so not More(drink water(A), drink water(B))", ["B is a cat, A is a wolf, so A is not more likely to drink water than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, wolf), so not More(drink water(B), drink water(A))", ["A is a cat, B is a wolf, so B is not more likely to drink water than A"]]}
{"original": ["animal(A, cat) and animal(B, panda), so More(hunt mice(A), hunt mice(B))", ["A is a cat, B is a panda, so A is more likely to hunt mice than B"]], "negated": ["animal(A, cat) and animal(B, panda), so not Less(hunt mice(A), hunt mice(B))", ["A is a cat, B is a panda, so A is not less likely to hunt mice than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, panda), so Less(hunt mice(A), hunt mice(B))", ["B is a cat, A is a panda, so A is less likely to hunt mice than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, panda), so Less(hunt mice(B), hunt mice(A))", ["A is a cat, B is a panda, so B is less likely to hunt mice than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, panda), so not More(hunt mice(A), hunt mice(B))", ["B is a cat, A is a panda, so A is not more likely to hunt mice than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, panda), so not More(hunt mice(B), hunt mice(A))", ["A is a cat, B is a panda, so B is not more likely to hunt mice than A"]]}
{"original": ["animal(A, tiger) and animal(B, frog), so More(jump though hoops(A), jump though hoops(B))", ["A is a tiger, B is a frog, so A is more likely to jump though hoops than B"]], "negated": ["animal(A, tiger) and animal(B, frog), so not Less(jump though hoops(A), jump though hoops(B))", ["A is a tiger, B is a frog, so A is not less likely to jump though hoops than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, frog), so Less(jump though hoops(A), jump though hoops(B))", ["B is a tiger, A is a frog, so A is less likely to jump though hoops than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, frog), so Less(jump though hoops(B), jump though hoops(A))", ["A is a tiger, B is a frog, so B is less likely to jump though hoops than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, frog), so not More(jump though hoops(A), jump though hoops(B))", ["B is a tiger, A is a frog, so A is not more likely to jump though hoops than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, frog), so not More(jump though hoops(B), jump though hoops(A))", ["A is a tiger, B is a frog, so B is not more likely to jump though hoops than A"]]}
{"original": ["animal(A, tiger) and animal(B, bear), so More(locate at the zoo(A), locate at the zoo(B))", ["A is a tiger, B is a bear, so A is more likely to be in the zoo than B"]], "negated": ["animal(A, tiger) and animal(B, bear), so not Less(locate at the zoo(A), locate at the zoo(B))", ["A is a tiger, B is a bear, so A is not less likely to be in the zoo than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, bear), so Less(locate at the zoo(A), locate at the zoo(B))", ["B is a tiger, A is a bear, so A is less likely to be in the zoo than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, bear), so Less(locate at the zoo(B), locate at the zoo(A))", ["A is a tiger, B is a bear, so B is less likely to be in the zoo than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, bear), so not More(locate at the zoo(A), locate at the zoo(B))", ["B is a tiger, A is a bear, so A is not more likely to be in the zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, bear), so not More(locate at the zoo(B), locate at the zoo(A))", ["A is a tiger, B is a bear, so B is not more likely to be in the zoo than A"]]}
{"original": ["animal(A, monkey) and animal(B, camel), so More(throw a banana(A), throw a banana(B))", ["A is a monkey, B is a camel, so A is more likely to throw a banana than B"]], "negated": ["animal(A, monkey) and animal(B, camel), so not Less(throw a banana(A), throw a banana(B))", ["A is a monkey, B is a camel, so A is not less likely to throw a banana than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, camel), so Less(throw a banana(A), throw a banana(B))", ["B is a monkey, A is a camel, so A is less likely to throw a banana than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, camel), so Less(throw a banana(B), throw a banana(A))", ["A is a monkey, B is a camel, so B is less likely to throw a banana than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, camel), so not More(throw a banana(A), throw a banana(B))", ["B is a monkey, A is a camel, so A is not more likely to throw a banana than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, camel), so not More(throw a banana(B), throw a banana(A))", ["A is a monkey, B is a camel, so B is not more likely to throw a banana than A"]]}
{"original": ["animal(A, elephant) and animal(B, crocodile), so More(locate at a zoo(A), locate at a zoo(B))", ["A is a elephant, B is a crocodile, so A is more likely to be in a zoo than B"]], "negated": ["animal(A, elephant) and animal(B, crocodile), so not Less(locate at a zoo(A), locate at a zoo(B))", ["A is a elephant, B is a crocodile, so A is not less likely to be in a zoo than B"]], "asymmetric_premise": ["animal(B, elephant) and animal(A, crocodile), so Less(locate at a zoo(A), locate at a zoo(B))", ["B is a elephant, A is a crocodile, so A is less likely to be in a zoo than B"]], "asymmetric_conclusion": ["animal(A, elephant) and animal(B, crocodile), so Less(locate at a zoo(B), locate at a zoo(A))", ["A is a elephant, B is a crocodile, so B is less likely to be in a zoo than A"]], "negated_asymmetric_premise": ["animal(B, elephant) and animal(A, crocodile), so not More(locate at a zoo(A), locate at a zoo(B))", ["B is a elephant, A is a crocodile, so A is not more likely to be in a zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, elephant) and animal(B, crocodile), so not More(locate at a zoo(B), locate at a zoo(A))", ["A is a elephant, B is a crocodile, so B is not more likely to be in a zoo than A"]]}
{"original": ["animal(A, shark) and animal(B, snail), so More(circle the swimmer(A), circle the swimmer(B))", ["A is a shark, B is a snail, so A is more likely to be in the water than B"]], "negated": ["animal(A, shark) and animal(B, snail), so not Less(circle the swimmer(A), circle the swimmer(B))", ["A is a shark, B is a snail, so A is not less likely to be in the water than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, snail), so Less(circle the swimmer(A), circle the swimmer(B))", ["B is a shark, A is a snail, so A is less likely to circle the swimmer than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, snail), so Less(circle the swimmer(B), circle the swimmer(A))", ["A is a shark, B is a snail, so B is less likely to circle the swimmer than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, snail), so not More(circle the swimmer(A), circle the swimmer(B))", ["B is a shark, A is a snail, so A is not more likely to circle the swimmer than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, snail), so not More(circle the swimmer(B), circle the swimmer(A))", ["A is a shark, B is a snail, so B is not more likely to circle the swimmer than A"]]}
{"original": ["animal(A, fish) and animal(B, monkey), so More(locate at a lake(A), locate at a lake(B))", ["A is a fish, B is a monkey, so A is more likely to be in a lake than B"]], "negated": ["animal(A, fish) and animal(B, monkey), so not Less(locate at a lake(A), locate at a lake(B))", ["A is a fish, B is a monkey, so A is not less likely to be in a lake than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, monkey), so Less(locate at a lake(A), locate at a lake(B))", ["B is a fish, A is a monkey, so A is less likely to be in a lake than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, monkey), so Less(locate at a lake(B), locate at a lake(A))", ["A is a fish, B is a monkey, so B is less likely to be in a lake than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, monkey), so not More(locate at a lake(A), locate at a lake(B))", ["B is a fish, A is a monkey, so A is not more likely to be in a lake than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, monkey), so not More(locate at a lake(B), locate at a lake(A))", ["A is a fish, B is a monkey, so B is not more likely to be in a lake than A"]]}
{"original": ["animal(A, monkey) and animal(B, crocodile), so More(locate at an african jungle(A), locate at an african jungle(B))", ["A is a monkey, B is a crocodile, so A is more likely to be in an african jungle than B"]], "negated": ["animal(A, monkey) and animal(B, crocodile), so not Less(locate at an african jungle(A), locate at an african jungle(B))", ["A is a monkey, B is a crocodile, so A is not less likely to be in an african jungle than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, crocodile), so Less(locate at an african jungle(A), locate at an african jungle(B))", ["B is a monkey, A is a crocodile, so A is less likely to be in an african jungle than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, crocodile), so Less(locate at an african jungle(B), locate at an african jungle(A))", ["A is a monkey, B is a crocodile, so B is less likely to be in an african jungle than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, crocodile), so not More(locate at an african jungle(A), locate at an african jungle(B))", ["B is a monkey, A is a crocodile, so A is not more likely to be in an african jungle than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, crocodile), so not More(locate at an african jungle(B), locate at an african jungle(A))", ["A is a monkey, B is a crocodile, so B is not more likely to be in an african jungle than A"]]}
{"original": ["animal(A, cheetah) and animal(B, kangaroo), so More(catch a gazelle(A), catch a gazelle(B))", ["A is a cheetah, B is a kangaroo, so A is more likely to catch a gazelle than B"]], "negated": ["animal(A, cheetah) and animal(B, kangaroo), so not Less(catch a gazelle(A), catch a gazelle(B))", ["A is a cheetah, B is a kangaroo, so A is not less likely to catch a gazelle than B"]], "asymmetric_premise": ["animal(B, cheetah) and animal(A, kangaroo), so Less(catch a gazelle(A), catch a gazelle(B))", ["B is a cheetah, A is a kangaroo, so A is less likely to catch a gazelle than B"]], "asymmetric_conclusion": ["animal(A, cheetah) and animal(B, kangaroo), so Less(catch a gazelle(B), catch a gazelle(A))", ["A is a cheetah, B is a kangaroo, so B is less likely to catch a gazelle than A"]], "negated_asymmetric_premise": ["animal(B, cheetah) and animal(A, kangaroo), so not More(catch a gazelle(A), catch a gazelle(B))", ["B is a cheetah, A is a kangaroo, so A is not more likely to catch a gazelle than B"]], "negated_asymmetric_conclusion": ["animal(A, cheetah) and animal(B, kangaroo), so not More(catch a gazelle(B), catch a gazelle(A))", ["A is a cheetah, B is a kangaroo, so B is not more likely to catch a gazelle than A"]]}
{"original": ["animal(A, horse) and animal(B, fly), so More(locate at a parade(A), locate at a parade(B))", ["A is a horse, B is a fly, so A is more likely to be in a parade than B"]], "negated": ["animal(A, horse) and animal(B, fly), so not Less(locate at a parade(A), locate at a parade(B))", ["A is a horse, B is a fly, so A is not less likely to be in a parade than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, fly), so Less(locate at a parade(A), locate at a parade(B))", ["B is a horse, A is a fly, so A is less likely to be in a parade than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, fly), so Less(locate at a parade(B), locate at a parade(A))", ["A is a horse, B is a fly, so B is less likely to be in a parade than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, fly), so not More(locate at a parade(A), locate at a parade(B))", ["B is a horse, A is a fly, so A is not more likely to be in a parade than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, fly), so not More(locate at a parade(B), locate at a parade(A))", ["A is a horse, B is a fly, so B is not more likely to be in a parade than A"]]}
{"original": ["animal(A, turtle) and animal(B, horse), so More(race a hare(A), race a hare(B))", ["A is a turtle, B is a horse, so A is more likely to race a hare than B"]], "negated": ["animal(A, turtle) and animal(B, horse), so not Less(race a hare(A), race a hare(B))", ["A is a turtle, B is a horse, so A is not less likely to race a hare than B"]], "asymmetric_premise": ["animal(B, turtle) and animal(A, horse), so Less(race a hare(A), race a hare(B))", ["B is a turtle, A is a horse, so A is less likely to race a hare than B"]], "asymmetric_conclusion": ["animal(A, turtle) and animal(B, horse), so Less(race a hare(B), race a hare(A))", ["A is a turtle, B is a horse, so B is less likely to race a hare than A"]], "negated_asymmetric_premise": ["animal(B, turtle) and animal(A, horse), so not More(race a hare(A), race a hare(B))", ["B is a turtle, A is a horse, so A is not more likely to race a hare than B"]], "negated_asymmetric_conclusion": ["animal(A, turtle) and animal(B, horse), so not More(race a hare(B), race a hare(A))", ["A is a turtle, B is a horse, so B is not more likely to race a hare than A"]]}
{"original": ["animal(A, dog) and animal(B, seal), so More(mark its territory(A), mark its territory(B))", ["A is a dog, B is a seal, so A is more likely to mark its territory than B"]], "negated": ["animal(A, dog) and animal(B, seal), so not Less(mark its territory(A), mark its territory(B))", ["A is a dog, B is a seal, so A is not less likely to mark its territory than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, seal), so Less(mark its territory(A), mark its territory(B))", ["B is a dog, A is a seal, so A is less likely to mark its territory than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, seal), so Less(mark its territory(B), mark its territory(A))", ["A is a dog, B is a seal, so B is less likely to mark its territory than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, seal), so not More(mark its territory(A), mark its territory(B))", ["B is a dog, A is a seal, so A is not more likely to mark its territory than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, seal), so not More(mark its territory(B), mark its territory(A))", ["A is a dog, B is a seal, so B is not more likely to mark its territory than A"]]}
{"original": ["animal(A, chicken) and animal(B, cheetah), so More(be a pet(A), be a pet(B))", ["A is a chicken, B is a cheetah, so A is more likely to be a pet than B"]], "negated": ["animal(A, chicken) and animal(B, cheetah), so not Less(be a pet(A), be a pet(B))", ["A is a chicken, B is a cheetah, so A is not less likely to be a pet than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, cheetah), so Less(be a pet(A), be a pet(B))", ["B is a chicken, A is a cheetah, so A is less likely to be a pet than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, cheetah), so Less(be a pet(B), be a pet(A))", ["A is a chicken, B is a cheetah, so B is less likely to be a pet than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, cheetah), so not More(be a pet(A), be a pet(B))", ["B is a chicken, A is a cheetah, so A is not more likely to be a pet than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, cheetah), so not More(be a pet(B), be a pet(A))", ["A is a chicken, B is a cheetah, so B is not more likely to be a pet than A"]]}
{"original": ["animal(A, ant) and animal(B, scorpion), so More(locate at the carpet(A), locate at the carpet(B))", ["A is a ant, B is a scorpion, so A is more likely to be on the carpet than B"]], "negated": ["animal(A, ant) and animal(B, scorpion), so not Less(locate at the carpet(A), locate at the carpet(B))", ["A is a ant, B is a scorpion, so A is not less likely to be on the carpet than B"]], "asymmetric_premise": ["animal(B, ant) and animal(A, scorpion), so Less(locate at the carpet(A), locate at the carpet(B))", ["B is a ant, A is a scorpion, so A is less likely to be on the carpet than B"]], "asymmetric_conclusion": ["animal(A, ant) and animal(B, scorpion), so Less(locate at the carpet(B), locate at the carpet(A))", ["A is a ant, B is a scorpion, so B is less likely to be on the carpet than A"]], "negated_asymmetric_premise": ["animal(B, ant) and animal(A, scorpion), so not More(locate at the carpet(A), locate at the carpet(B))", ["B is a ant, A is a scorpion, so A is not more likely to be on the carpet than B"]], "negated_asymmetric_conclusion": ["animal(A, ant) and animal(B, scorpion), so not More(locate at the carpet(B), locate at the carpet(A))", ["A is a ant, B is a scorpion, so B is not more likely to be on the carpet than A"]]}
{"original": ["animal(A, fox) and animal(B, turtle), so More(locate at a wooded area(A), locate at a wooded area(B))", ["A is a fox, B is a turtle, so A is more likely to be in a wooded area than B"]], "negated": ["animal(A, fox) and animal(B, turtle), so not Less(locate at a wooded area(A), locate at a wooded area(B))", ["A is a fox, B is a turtle, so A is not less likely to be in a wooded area than B"]], "asymmetric_premise": ["animal(B, fox) and animal(A, turtle), so Less(locate at a wooded area(A), locate at a wooded area(B))", ["B is a fox, A is a turtle, so A is less likely to be in a wooded area than B"]], "asymmetric_conclusion": ["animal(A, fox) and animal(B, turtle), so Less(locate at a wooded area(B), locate at a wooded area(A))", ["A is a fox, B is a turtle, so B is less likely to be in a wooded area than A"]], "negated_asymmetric_premise": ["animal(B, fox) and animal(A, turtle), so not More(locate at a wooded area(A), locate at a wooded area(B))", ["B is a fox, A is a turtle, so A is not more likely to be in a wooded area than B"]], "negated_asymmetric_conclusion": ["animal(A, fox) and animal(B, turtle), so not More(locate at a wooded area(B), locate at a wooded area(A))", ["A is a fox, B is a turtle, so B is not more likely to be in a wooded area than A"]]}
{"original": ["animal(A, rabbit) and animal(B, alligator), so More(appear suddenly(A), appear suddenly(B))", ["A is a rabbit, B is a alligator, so A is more likely to appear suddenly than B"]], "negated": ["animal(A, rabbit) and animal(B, alligator), so not Less(appear suddenly(A), appear suddenly(B))", ["A is a rabbit, B is a alligator, so A is not less likely to appear suddenly than B"]], "asymmetric_premise": ["animal(B, rabbit) and animal(A, alligator), so Less(appear suddenly(A), appear suddenly(B))", ["B is a rabbit, A is a alligator, so A is less likely to appear suddenly than B"]], "asymmetric_conclusion": ["animal(A, rabbit) and animal(B, alligator), so Less(appear suddenly(B), appear suddenly(A))", ["A is a rabbit, B is a alligator, so B is less likely to appear suddenly than A"]], "negated_asymmetric_premise": ["animal(B, rabbit) and animal(A, alligator), so not More(appear suddenly(A), appear suddenly(B))", ["B is a rabbit, A is a alligator, so A is not more likely to appear suddenly than B"]], "negated_asymmetric_conclusion": ["animal(A, rabbit) and animal(B, alligator), so not More(appear suddenly(B), appear suddenly(A))", ["A is a rabbit, B is a alligator, so B is not more likely to appear suddenly than A"]]}
{"original": ["animal(A, chicken) and animal(B, bird), so More(locate at a fast-food restaurant(A), locate at a fast-food restaurant(B))", ["A is a chicken, B is a bird, so A is more likely to be in a fast-food restaurant than B"]], "negated": ["animal(A, chicken) and animal(B, bird), so not Less(locate at a fast-food restaurant(A), locate at a fast-food restaurant(B))", ["A is a chicken, B is a bird, so A is not less likely to be in a fast-food restaurant than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, bird), so Less(locate at a fast-food restaurant(A), locate at a fast-food restaurant(B))", ["B is a chicken, A is a bird, so A is less likely to be in a fast-food restaurant than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, bird), so Less(locate at a fast-food restaurant(B), locate at a fast-food restaurant(A))", ["A is a chicken, B is a bird, so B is less likely to be in a fast-food restaurant than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, bird), so not More(locate at a fast-food restaurant(A), locate at a fast-food restaurant(B))", ["B is a chicken, A is a bird, so A is not more likely to be in a fast-food restaurant than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, bird), so not More(locate at a fast-food restaurant(B), locate at a fast-food restaurant(A))", ["A is a chicken, B is a bird, so B is not more likely to be in a fast-food restaurant than A"]]}
{"original": ["animal(A, deer) and animal(B, bird), so More(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["A is a deer, B is a bird, so A is more likely to be in north america than B"]], "negated": ["animal(A, deer) and animal(B, bird), so not Less(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["A is a deer, B is a bird, so A is not less likely to be in africa than B"]], "asymmetric_premise": ["animal(B, deer) and animal(A, bird), so Less(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["B is a deer, A is a bird, so A is less likely to be in north america than B"]], "asymmetric_conclusion": ["animal(A, deer) and animal(B, bird), so Less(locate at north america and antelopes in africa(B), locate at north america and antelopes in africa(A))", ["A is a deer, B is a bird, so B is less likely to be in north america than A"]], "negated_asymmetric_premise": ["animal(B, deer) and animal(A, bird), so not More(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["B is a deer, A is a bird, so A is not more likely to be in north america than B"]], "negated_asymmetric_conclusion": ["animal(A, deer) and animal(B, bird), so not More(locate at north america and antelopes in africa(B), locate at north america and antelopes in africa(A))", ["A is a deer, B is a bird, so B is not more likely to be in north america than A"]]}
{"original": ["animal(A, pig) and animal(B, owl), so More(locate at fairgrounds(A), locate at fairgrounds(B))", ["A is a pig, B is a owl, so A is more likely to be on the fairgrounds than B"]], "negated": ["animal(A, pig) and animal(B, owl), so not Less(locate at fairgrounds(A), locate at fairgrounds(B))", ["A is a pig, B is a owl, so A is not less likely to be on the fairgrounds than B"]], "asymmetric_premise": ["animal(B, pig) and animal(A, owl), so Less(locate at fairgrounds(A), locate at fairgrounds(B))", ["B is a pig, A is a owl, so A is less likely to be on the fairgrounds than B"]], "asymmetric_conclusion": ["animal(A, pig) and animal(B, owl), so Less(locate at fairgrounds(B), locate at fairgrounds(A))", ["A is a pig, B is a owl, so B is less likely to be on the fairgrounds than A"]], "negated_asymmetric_premise": ["animal(B, pig) and animal(A, owl), so not More(locate at fairgrounds(A), locate at fairgrounds(B))", ["B is a pig, A is a owl, so A is not more likely to be on the fairgrounds than B"]], "negated_asymmetric_conclusion": ["animal(A, pig) and animal(B, owl), so not More(locate at fairgrounds(B), locate at fairgrounds(A))", ["A is a pig, B is a owl, so B is not more likely to be on the fairgrounds than A"]]}
{"original": ["animal(A, snake) and animal(B, alligator), so More(locate at a garden(A), locate at a garden(B))", ["A is a snake, B is a alligator, so A is more likely to be in a garden than B"]], "negated": ["animal(A, snake) and animal(B, alligator), so not Less(locate at a garden(A), locate at a garden(B))", ["A is a snake, B is a alligator, so A is not less likely to be in a garden than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, alligator), so Less(locate at a garden(A), locate at a garden(B))", ["B is a snake, A is a alligator, so A is less likely to be in a garden than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, alligator), so Less(locate at a garden(B), locate at a garden(A))", ["A is a snake, B is a alligator, so B is less likely to be in a garden than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, alligator), so not More(locate at a garden(A), locate at a garden(B))", ["B is a snake, A is a alligator, so A is not more likely to be in a garden than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, alligator), so not More(locate at a garden(B), locate at a garden(A))", ["A is a snake, B is a alligator, so B is not more likely to be in a garden than A"]]}
{"original": ["animal(A, spider) and animal(B, rabbit), so More(kill an insect(A), kill an insect(B))", ["A is a spider, B is a rabbit, so A is more likely to kill an insect than B"]], "negated": ["animal(A, spider) and animal(B, rabbit), so not Less(kill an insect(A), kill an insect(B))", ["A is a spider, B is a rabbit, so A is not less likely to kill an insect than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, rabbit), so Less(kill an insect(A), kill an insect(B))", ["B is a spider, A is a rabbit, so A is less likely to kill an insect than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, rabbit), so Less(kill an insect(B), kill an insect(A))", ["A is a spider, B is a rabbit, so B is less likely to kill an insect than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, rabbit), so not More(kill an insect(A), kill an insect(B))", ["B is a spider, A is a rabbit, so A is not more likely to kill an insect than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, rabbit), so not More(kill an insect(B), kill an insect(A))", ["A is a spider, B is a rabbit, so B is not more likely to kill an insect than A"]]}
{"original": ["animal(A, monkey) and animal(B, frog), so More(move from one tree to another(A), move from one tree to another(B))", ["A is a monkey, B is a frog, so A is more likely to be in a tree than B"]], "negated": ["animal(A, monkey) and animal(B, frog), so not Less(move from one tree to another(A), move from one tree to another(B))", ["A is a monkey, B is a frog, so A is not less likely to move from one tree to another than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, frog), so Less(move from one tree to another(A), move from one tree to another(B))", ["B is a monkey, A is a frog, so A is less likely to move from one tree to another than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, frog), so Less(move from one tree to another(B), move from one tree to another(A))", ["A is a monkey, B is a frog, so B is less likely to move from one tree to another than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, frog), so not More(move from one tree to another(A), move from one tree to another(B))", ["B is a monkey, A is a frog, so A is not more likely to be in a tree than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, frog), so not More(move from one tree to another(B), move from one tree to another(A))", ["A is a monkey, B is a frog, so B is not more likely to move from one tree to another than A"]]}
{"original": ["animal(A, cow) and animal(B, scorpion), so More(blow his horn(A), blow his horn(B))", ["A is a cow, B is a scorpion, so A is more likely to blow his horn than B"]], "negated": ["animal(A, cow) and animal(B, scorpion), so not Less(blow his horn(A), blow his horn(B))", ["A is a cow, B is a scorpion, so A is not less likely to blow his horn than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, scorpion), so Less(blow his horn(A), blow his horn(B))", ["B is a cow, A is a scorpion, so A is less likely to blow his horn than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, scorpion), so Less(blow his horn(B), blow his horn(A))", ["A is a cow, B is a scorpion, so B is less likely to blow his horn than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, scorpion), so not More(blow his horn(A), blow his horn(B))", ["B is a cow, A is a scorpion, so A is not more likely to blow his horn than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, scorpion), so not More(blow his horn(B), blow his horn(A))", ["A is a cow, B is a scorpion, so B is not more likely to blow his horn than A"]]}
{"original": ["animal(A, cat) and animal(B, kangaroo), so More(locate at someone's home(A), locate at someone's home(B))", ["A is a cat, B is a kangaroo, so A is more likely to be in someone's home than B"]], "negated": ["animal(A, cat) and animal(B, kangaroo), so not Less(locate at someone's home(A), locate at someone's home(B))", ["A is a cat, B is a kangaroo, so A is not less likely to be in someone's home than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, kangaroo), so Less(locate at someone's home(A), locate at someone's home(B))", ["B is a cat, A is a kangaroo, so A is less likely to be in someone's home than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, kangaroo), so Less(locate at someone's home(B), locate at someone's home(A))", ["A is a cat, B is a kangaroo, so B is less likely to be in someone's home than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, kangaroo), so not More(locate at someone's home(A), locate at someone's home(B))", ["B is a cat, A is a kangaroo, so A is not more likely to be in someone's home than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, kangaroo), so not More(locate at someone's home(B), locate at someone's home(A))", ["A is a cat, B is a kangaroo, so B is not more likely to be in someone's home than A"]]}
{"original": ["animal(A, frog) and animal(B, kangaroo), so More(win a princess(A), win a princess(B))", ["A is a frog, B is a kangaroo, so A is more likely to win a princess than B"]], "negated": ["animal(A, frog) and animal(B, kangaroo), so not Less(win a princess(A), win a princess(B))", ["A is a frog, B is a kangaroo, so A is not less likely to win a princess than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, kangaroo), so Less(win a princess(A), win a princess(B))", ["B is a frog, A is a kangaroo, so A is less likely to win a princess than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, kangaroo), so Less(win a princess(B), win a princess(A))", ["A is a frog, B is a kangaroo, so B is less likely to win a princess than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, kangaroo), so not More(win a princess(A), win a princess(B))", ["B is a frog, A is a kangaroo, so A is not more likely to win a princess than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, kangaroo), so not More(win a princess(B), win a princess(A))", ["A is a frog, B is a kangaroo, so B is not more likely to win a princess than A"]]}
{"original": ["animal(A, goat) and animal(B, lobster), so More(locate at a farm(A), locate at a farm(B))", ["A is a goat, B is a lobster, so A is more likely to be on a farm than B"]], "negated": ["animal(A, goat) and animal(B, lobster), so not Less(locate at a farm(A), locate at a farm(B))", ["A is a goat, B is a lobster, so A is not less likely to be on a farm than B"]], "asymmetric_premise": ["animal(B, goat) and animal(A, lobster), so Less(locate at a farm(A), locate at a farm(B))", ["B is a goat, A is a lobster, so A is less likely to be on a farm than B"]], "asymmetric_conclusion": ["animal(A, goat) and animal(B, lobster), so Less(locate at a farm(B), locate at a farm(A))", ["A is a goat, B is a lobster, so B is less likely to be on a farm than A"]], "negated_asymmetric_premise": ["animal(B, goat) and animal(A, lobster), so not More(locate at a farm(A), locate at a farm(B))", ["B is a goat, A is a lobster, so A is not more likely to be on a farm than B"]], "negated_asymmetric_conclusion": ["animal(A, goat) and animal(B, lobster), so not More(locate at a farm(B), locate at a farm(A))", ["A is a goat, B is a lobster, so B is not more likely to be on a farm than A"]]}
{"original": ["animal(A, spider) and animal(B, horse), so More(locate at a web(A), locate at a web(B))", ["A is a spider, B is a horse, so A is more likely to be in a web than B"]], "negated": ["animal(A, spider) and animal(B, horse), so not Less(locate at a web(A), locate at a web(B))", ["A is a spider, B is a horse, so A is not less likely to be in a web than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, horse), so Less(locate at a web(A), locate at a web(B))", ["B is a spider, A is a horse, so A is less likely to be in a web than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, horse), so Less(locate at a web(B), locate at a web(A))", ["A is a spider, B is a horse, so B is less likely to be in a web than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, horse), so not More(locate at a web(A), locate at a web(B))", ["B is a spider, A is a horse, so A is not more likely to be in a web than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, horse), so not More(locate at a web(B), locate at a web(A))", ["A is a spider, B is a horse, so B is not more likely to be in a web than A"]]}
{"original": ["animal(A, rat) and animal(B, deer), so More(eat wires(A), eat wires(B))", ["A is a rat, B is a deer, so A is more likely to eat wires than B"]], "negated": ["animal(A, rat) and animal(B, deer), so not Less(eat wires(A), eat wires(B))", ["A is a rat, B is a deer, so A is not less likely to eat wires than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, deer), so Less(eat wires(A), eat wires(B))", ["B is a rat, A is a deer, so A is less likely to eat wires than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, deer), so Less(eat wires(B), eat wires(A))", ["A is a rat, B is a deer, so B is less likely to eat wires than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, deer), so not More(eat wires(A), eat wires(B))", ["B is a rat, A is a deer, so A is not more likely to eat wires than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, deer), so not More(eat wires(B), eat wires(A))", ["A is a rat, B is a deer, so B is not more likely to eat wires than A"]]}
{"original": ["animal(A, bird) and animal(B, octopus), so More(learn to fly(A), learn to fly(B))", ["A is a bird, B is a octopus, so A is more likely to learn to fly than B"]], "negated": ["animal(A, bird) and animal(B, octopus), so not Less(learn to fly(A), learn to fly(B))", ["A is a bird, B is an octopus, so A is not less likely to learn to fly than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, octopus), so Less(learn to fly(A), learn to fly(B))", ["B is a bird, A is a octopus, so A is less likely to learn to fly than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, octopus), so Less(learn to fly(B), learn to fly(A))", ["A is a bird, B is an octopus, so B is less likely to fly than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, octopus), so not More(learn to fly(A), learn to fly(B))", ["B is a bird, A is an octopus, so A is not more likely to learn to fly than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, octopus), so not More(learn to fly(B), learn to fly(A))", ["A is a bird, B is an octopus, so B is not more likely to learn to fly than A"]]}
{"original": ["animal(A, cat) and animal(B, panda), so More(drink water(A), drink water(B))", ["A is a cat, B is a panda, so A is more likely to drink water than B"]], "negated": ["animal(A, cat) and animal(B, panda), so not Less(drink water(A), drink water(B))", ["A is a cat, B is a panda, so A is not less likely to drink water than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, panda), so Less(drink water(A), drink water(B))", ["B is a cat, A is a panda, so A is less likely to drink water than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, panda), so Less(drink water(B), drink water(A))", ["A is a cat, B is a panda, so B is less likely to drink water than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, panda), so not More(drink water(A), drink water(B))", ["B is a cat, A is a panda, so A is not more likely to drink water than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, panda), so not More(drink water(B), drink water(A))", ["A is a cat, B is a panda, so B is not more likely to drink water than A"]]}
{"original": ["animal(A, tiger) and animal(B, goat), so More(locate at the jungle(A), locate at the jungle(B))", ["A is a tiger, B is a goat, so A is more likely to be in the jungle than B"]], "negated": ["animal(A, tiger) and animal(B, goat), so not Less(locate at the jungle(A), locate at the jungle(B))", ["A is a tiger, B is a goat, so A is not less likely to be in the jungle than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, goat), so Less(locate at the jungle(A), locate at the jungle(B))", ["B is a tiger, A is a goat, so A is less likely to be in the jungle than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, goat), so Less(locate at the jungle(B), locate at the jungle(A))", ["A is a tiger, B is a goat, so B is less likely to be in the jungle than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, goat), so not More(locate at the jungle(A), locate at the jungle(B))", ["B is a tiger, A is a goat, so A is not more likely to be in the jungle than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, goat), so not More(locate at the jungle(B), locate at the jungle(A))", ["A is a tiger, B is a goat, so B is not more likely to be in the jungle than A"]]}
{"original": ["animal(A, snake) and animal(B, cheetah), so More(slither down the street(A), slither down the street(B))", ["A is a snake, B is a cheetah, so A is more likely to slither down the street than B"]], "negated": ["animal(A, snake) and animal(B, cheetah), so not Less(slither down the street(A), slither down the street(B))", ["A is a snake, B is a cheetah, so A is not less likely to slither down the street than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, cheetah), so Less(slither down the street(A), slither down the street(B))", ["B is a snake, A is a cheetah, so A is less likely to slither down the street than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, cheetah), so Less(slither down the street(B), slither down the street(A))", ["A is a snake, B is a cheetah, so B is less likely to slither down the street than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, cheetah), so not More(slither down the street(A), slither down the street(B))", ["B is a snake, A is a cheetah, so A is not more likely to slither down the street than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, cheetah), so not More(slither down the street(B), slither down the street(A))", ["A is a snake, B is a cheetah, so B is not more likely to slither down the street than A"]]}
{"original": ["animal(A, bee) and animal(B, goat), so More(locate at swarm(A), locate at swarm(B))", ["A is a bee, B is a goat, so A is more likely to be in a swarm than B"]], "negated": ["animal(A, bee) and animal(B, goat), so not Less(locate at swarm(A), locate at swarm(B))", ["A is a bee, B is a goat, so A is not less likely to be in a swarm than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, goat), so Less(locate at swarm(A), locate at swarm(B))", ["B is a bee, A is a goat, so A is less likely to be in a swarm than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, goat), so Less(locate at swarm(B), locate at swarm(A))", ["A is a bee, B is a goat, so B is less likely to be in a swarm than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, goat), so not More(locate at swarm(A), locate at swarm(B))", ["B is a bee, A is a goat, so A is not more likely to be in a swarm than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, goat), so not More(locate at swarm(B), locate at swarm(A))", ["A is a bee, B is a goat, so B is not more likely to be in a swarm than A"]]}
{"original": ["animal(A, frog) and animal(B, cheetah), so More(catch flies with its tongue(A), catch flies with its tongue(B))", ["A is a frog, B is a cheetah, so A is more likely to catch flies with its tongue than B"]], "negated": ["animal(A, frog) and animal(B, cheetah), so not Less(catch flies with its tongue(A), catch flies with its tongue(B))", ["A is a frog, B is a cheetah, so A is not less likely to catch flies than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, cheetah), so Less(catch flies with its tongue(A), catch flies with its tongue(B))", ["B is a frog, A is a cheetah, so A is less likely to catch flies with its tongue than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, cheetah), so Less(catch flies with its tongue(B), catch flies with its tongue(A))", ["A is a frog, B is a cheetah, so B is less likely to catch flies with its tongue than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, cheetah), so not More(catch flies with its tongue(A), catch flies with its tongue(B))", ["B is a frog, A is a cheetah, so A is not more likely to catch flies with its tongue than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, cheetah), so not More(catch flies with its tongue(B), catch flies with its tongue(A))", ["A is a frog, B is a cheetah, so B is not more likely to catch flies with its tongue than A"]]}
{"original": ["animal(A, dog) and animal(B, scorpion), so More(locate at the porch(A), locate at the porch(B))", ["A is a dog, B is a scorpion, so A is more likely to be on the porch than B"]], "negated": ["animal(A, dog) and animal(B, scorpion), so not Less(locate at the porch(A), locate at the porch(B))", ["A is a dog, B is a scorpion, so A is not less likely to be on the porch than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, scorpion), so Less(locate at the porch(A), locate at the porch(B))", ["B is a dog, A is a scorpion, so A is less likely to be on the porch than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, scorpion), so Less(locate at the porch(B), locate at the porch(A))", ["A is a dog, B is a scorpion, so B is less likely to be on the porch than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, scorpion), so not More(locate at the porch(A), locate at the porch(B))", ["B is a dog, A is a scorpion, so A is not more likely to be on the porch than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, scorpion), so not More(locate at the porch(B), locate at the porch(A))", ["A is a dog, B is a scorpion, so B is not more likely to be on the porch than A"]]}
{"original": ["animal(A, chicken) and animal(B, snake), so More(lay an egg(A), lay an egg(B))", ["A is a chicken, B is a snake, so A is more likely to lay an egg than B"]], "negated": ["animal(A, chicken) and animal(B, snake), so not Less(lay an egg(A), lay an egg(B))", ["A is a chicken, B is a snake, so A is not less likely to lay an egg than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, snake), so Less(lay an egg(A), lay an egg(B))", ["B is a chicken, A is a snake, so A is less likely to lay an egg than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, snake), so Less(lay an egg(B), lay an egg(A))", ["A is a chicken, B is a snake, so B is less likely to lay an egg than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, snake), so not More(lay an egg(A), lay an egg(B))", ["B is a chicken, A is a snake, so A is not more likely to lay an egg than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, snake), so not More(lay an egg(B), lay an egg(A))", ["A is a chicken, B is a snake, so B is not more likely to lay an egg than A"]]}
{"original": ["animal(A, lion) and animal(B, cat), so More(father some cubs(A), father some cubs(B))", ["A is a lion, B is a cat, so A is more likely to father some cubs than B"]], "negated": ["animal(A, lion) and animal(B, cat), so not Less(father some cubs(A), father some cubs(B))", ["A is a lion, B is a cat, so A is not less likely to father some cubs than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, cat), so Less(father some cubs(A), father some cubs(B))", ["B is a lion, A is a cat, so A is less likely to father some cubs than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, cat), so Less(father some cubs(B), father some cubs(A))", ["A is a lion, B is a cat, so B is less likely to father some cubs than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, cat), so not More(father some cubs(A), father some cubs(B))", ["B is a lion, A is a cat, so A is not more likely to father some cubs than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, cat), so not More(father some cubs(B), father some cubs(A))", ["A is a lion, B is a cat, so B is not more likely to father some cubs than A"]]}
{"original": ["animal(A, fish) and animal(B, elephant), so More(attempt to fly(A), attempt to fly(B))", ["A is a fish, B is a elephant, so A is more likely to attempt to fly than B"]], "negated": ["animal(A, fish) and animal(B, elephant), so not Less(attempt to fly(A), attempt to fly(B))", ["A is a fish, B is an elephant, so A is not less likely to attempt to fly than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, elephant), so Less(attempt to fly(A), attempt to fly(B))", ["B is a fish, A is a elephant, so A is less likely to attempt to fly than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, elephant), so Less(attempt to fly(B), attempt to fly(A))", ["A is a fish, B is a elephant, so B is less likely to attempt to fly than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, elephant), so not More(attempt to fly(A), attempt to fly(B))", ["B is a fish, A is an elephant, so A is not more likely to attempt to fly than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, elephant), so not More(attempt to fly(B), attempt to fly(A))", ["A is a fish, B is an elephant, so B is not more likely to attempt to fly than A"]]}
{"original": ["animal(A, chimpanzee) and animal(B, horse), so More(fool the caretakers(A), fool the caretakers(B))", ["A is a chimpanzee, B is a horse, so A is more likely to fool the caretakers than B"]], "negated": ["animal(A, chimpanzee) and animal(B, horse), so not Less(fool the caretakers(A), fool the caretakers(B))", ["A is a chimpanzee, B is a horse, so A is not less likely to fool the caretakers than B"]], "asymmetric_premise": ["animal(B, chimpanzee) and animal(A, horse), so Less(fool the caretakers(A), fool the caretakers(B))", ["B is a chimpanzee, A is a horse, so A is less likely to fool the caretakers than B"]], "asymmetric_conclusion": ["animal(A, chimpanzee) and animal(B, horse), so Less(fool the caretakers(B), fool the caretakers(A))", ["A is a chimpanzee, B is a horse, so B is less likely to fool the caretakers than A"]], "negated_asymmetric_premise": ["animal(B, chimpanzee) and animal(A, horse), so not More(fool the caretakers(A), fool the caretakers(B))", ["B is a chimpanzee, A is a horse, so A is not more likely to fool the caretakers than B"]], "negated_asymmetric_conclusion": ["animal(A, chimpanzee) and animal(B, horse), so not More(fool the caretakers(B), fool the caretakers(A))", ["A is a chimpanzee, B is a horse, so B is not more likely to fool the caretakers than A"]]}
{"original": ["animal(A, camel) and animal(B, duck), so More(locate at the desert(A), locate at the desert(B))", ["A is a camel, B is a duck, so A is more likely to be in the desert than B"]], "negated": ["animal(A, camel) and animal(B, duck), so not Less(locate at the desert(A), locate at the desert(B))", ["A is a camel, B is a duck, so A is not less likely to be in the desert than B"]], "asymmetric_premise": ["animal(B, camel) and animal(A, duck), so Less(locate at the desert(A), locate at the desert(B))", ["B is a camel, A is a duck, so A is less likely to be in the desert than B"]], "asymmetric_conclusion": ["animal(A, camel) and animal(B, duck), so Less(locate at the desert(B), locate at the desert(A))", ["A is a camel, B is a duck, so B is less likely to be in the desert than A"]], "negated_asymmetric_premise": ["animal(B, camel) and animal(A, duck), so not More(locate at the desert(A), locate at the desert(B))", ["B is a camel, A is a duck, so A is not more likely to be in the desert than B"]], "negated_asymmetric_conclusion": ["animal(A, camel) and animal(B, duck), so not More(locate at the desert(B), locate at the desert(A))", ["A is a camel, B is a duck, so B is not more likely to be in the desert than A"]]}
{"original": ["animal(A, fish) and animal(B, lion), so More(swim(A), swim(B))", ["A is a fish, B is a lion, so A is more likely to swim than B"]], "negated": ["animal(A, fish) and animal(B, lion), so not Less(swim(A), swim(B))", ["A is a fish, B is a lion, so A is not less likely to swim than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, lion), so Less(swim(A), swim(B))", ["B is a fish, A is a lion, so A is less likely to swim than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, lion), so Less(swim(B), swim(A))", ["A is a fish, B is a lion, so B is less likely to swim than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, lion), so not More(swim(A), swim(B))", ["B is a fish, A is a lion, so A is not more likely to swim than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, lion), so not More(swim(B), swim(A))", ["A is a fish, B is a lion, so B is not more likely to swim than A"]]}
{"original": ["animal(A, bird) and animal(B, snake), so More(locate at a roof(A), locate at a roof(B))", ["A is a bird, B is a snake, so A is more likely to be on a roof than B"]], "negated": ["animal(A, bird) and animal(B, snake), so not Less(locate at a roof(A), locate at a roof(B))", ["A is a bird, B is a snake, so A is not less likely to be on a roof than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, snake), so Less(locate at a roof(A), locate at a roof(B))", ["B is a bird, A is a snake, so A is less likely to be on a roof than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, snake), so Less(locate at a roof(B), locate at a roof(A))", ["A is a bird, B is a snake, so B is less likely to be on a roof than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, snake), so not More(locate at a roof(A), locate at a roof(B))", ["B is a bird, A is a snake, so A is not more likely to be on a roof than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, snake), so not More(locate at a roof(B), locate at a roof(A))", ["A is a bird, B is a snake, so B is not more likely to be on a roof than A"]]}
{"original": ["animal(A, wolf) and animal(B, hippopotamus), so More(kill deer(A), kill deer(B))", ["A is a wolf, B is a hippopotamus, so A is more likely to kill deer than B"]], "negated": ["animal(A, wolf) and animal(B, hippopotamus), so not Less(kill deer(A), kill deer(B))", ["A is a wolf, B is a hippopotamus, so A is not less likely to kill deer than B"]], "asymmetric_premise": ["animal(B, wolf) and animal(A, hippopotamus), so Less(kill deer(A), kill deer(B))", ["B is a wolf, A is a hippopotamus, so A is less likely to kill deer than B"]], "asymmetric_conclusion": ["animal(A, wolf) and animal(B, hippopotamus), so Less(kill deer(B), kill deer(A))", ["A is a wolf, B is a hippopotamus, so B is less likely to kill deer than A"]], "negated_asymmetric_premise": ["animal(B, wolf) and animal(A, hippopotamus), so not More(kill deer(A), kill deer(B))", ["B is a wolf, A is a hippopotamus, so A is not more likely to kill deer than B"]], "negated_asymmetric_conclusion": ["animal(A, wolf) and animal(B, hippopotamus), so not More(kill deer(B), kill deer(A))", ["A is a wolf, B is a hippopotamus, so B is not more likely to kill deer than A"]]}
{"original": ["animal(A, snake) and animal(B, turtle), so More(slither down the street(A), slither down the street(B))", ["A is a snake, B is a turtle, so A is more likely to slither down the street than B"]], "negated": ["animal(A, snake) and animal(B, turtle), so not Less(slither down the street(A), slither down the street(B))", ["A is a snake, B is a turtle, so A is not less likely to slither down the street than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, turtle), so Less(slither down the street(A), slither down the street(B))", ["B is a snake, A is a turtle, so A is less likely to slither down the street than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, turtle), so Less(slither down the street(B), slither down the street(A))", ["A is a snake, B is a turtle, so B is less likely to slither down the street than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, turtle), so not More(slither down the street(A), slither down the street(B))", ["B is a snake, A is a turtle, so A is not more likely to slither down the street than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, turtle), so not More(slither down the street(B), slither down the street(A))", ["A is a snake, B is a turtle, so B is not more likely to slither down the street than A"]]}
{"original": ["animal(A, cow) and animal(B, panda), so More(jump over the moon(A), jump over the moon(B))", ["A is a cow, B is a panda, so A is more likely to jump over the moon than B"]], "negated": ["animal(A, cow) and animal(B, panda), so not Less(jump over the moon(A), jump over the moon(B))", ["A is a cow, B is a panda, so A is not less likely to jump over the moon than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, panda), so Less(jump over the moon(A), jump over the moon(B))", ["B is a cow, A is a panda, so A is less likely to jump over the moon than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, panda), so Less(jump over the moon(B), jump over the moon(A))", ["A is a cow, B is a panda, so B is less likely to jump over the moon than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, panda), so not More(jump over the moon(A), jump over the moon(B))", ["B is a cow, A is a panda, so A is not more likely to jump over the moon than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, panda), so not More(jump over the moon(B), jump over the moon(A))", ["A is a cow, B is a panda, so B is not more likely to jump over the moon than A"]]}
{"original": ["animal(A, bird) and animal(B, ant), so More(locate at a tree(A), locate at a tree(B))", ["A is a bird, B is a ant, so A is more likely to be in a tree than B"]], "negated": ["animal(A, bird) and animal(B, ant), so not Less(locate at a tree(A), locate at a tree(B))", ["A is a bird, B is a ant, so A is not less likely to be in a tree than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, ant), so Less(locate at a tree(A), locate at a tree(B))", ["B is a bird, A is a ant, so A is less likely to be in a tree than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, ant), so Less(locate at a tree(B), locate at a tree(A))", ["A is a bird, B is a ant, so B is less likely to be in a tree than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, ant), so not More(locate at a tree(A), locate at a tree(B))", ["B is a bird, A is a ant, so A is not more likely to be in a tree than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, ant), so not More(locate at a tree(B), locate at a tree(A))", ["A is a bird, B is an ant, so B is not more likely to be in a tree than A"]]}
{"original": ["animal(A, bear) and animal(B, fly), so More(fish with it's paws(A), fish with it's paws(B))", ["A is a bear, B is a fly, so A is more likely to fish with it's paws than B"]], "negated": ["animal(A, bear) and animal(B, fly), so not Less(fish with it's paws(A), fish with it's paws(B))", ["A is a bear, B is a fly, so A is not less likely to fish with it's paws than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, fly), so Less(fish with it's paws(A), fish with it's paws(B))", ["B is a bear, A is a fly, so A is less likely to fish with it's paws than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, fly), so Less(fish with it's paws(B), fish with it's paws(A))", ["A is a bear, B is a fly, so B is less likely to fish with it's paws than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, fly), so not More(fish with it's paws(A), fish with it's paws(B))", ["B is a bear, A is a fly, so A is not more likely to fish with it's paws than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, fly), so not More(fish with it's paws(B), fish with it's paws(A))", ["A is a bear, B is a fly, so B is not more likely to fish with it's paws than A"]]}
{"original": ["animal(A, spider) and animal(B, eagle), so More(locate at the floor(A), locate at the floor(B))", ["A is a spider, B is a eagle, so A is more likely to be on the floor than B"]], "negated": ["animal(A, spider) and animal(B, eagle), so not Less(locate at the floor(A), locate at the floor(B))", ["A is a spider, B is a eagle, so A is not less likely to be on the floor than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, eagle), so Less(locate at the floor(A), locate at the floor(B))", ["B is a spider, A is a eagle, so A is less likely to be on the floor than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, eagle), so Less(locate at the floor(B), locate at the floor(A))", ["A is a spider, B is a eagle, so B is less likely to be on the floor than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, eagle), so not More(locate at the floor(A), locate at the floor(B))", ["B is a spider, A is a eagle, so A is not more likely to be on the floor than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, eagle), so not More(locate at the floor(B), locate at the floor(A))", ["A is a spider, B is a eagle, so B is not more likely to be on the floor than A"]]}
{"original": ["animal(A, cat) and animal(B, tiger), so More(wash its paws(A), wash its paws(B))", ["A is a cat, B is a tiger, so A is more likely to wash its paws than B"]], "negated": ["animal(A, cat) and animal(B, tiger), so not Less(wash its paws(A), wash its paws(B))", ["A is a cat, B is a tiger, so A is not less likely to wash its paws than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, tiger), so Less(wash its paws(A), wash its paws(B))", ["B is a cat, A is a tiger, so A is less likely to wash its paws than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, tiger), so Less(wash its paws(B), wash its paws(A))", ["A is a cat, B is a tiger, so B is less likely to wash its paws than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, tiger), so not More(wash its paws(A), wash its paws(B))", ["B is a cat, A is a tiger, so A is not more likely to wash its paws than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, tiger), so not More(wash its paws(B), wash its paws(A))", ["A is a cat, B is a tiger, so B is not more likely to wash its paws than A"]]}
{"original": ["animal(A, fox) and animal(B, pig), so More(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["A is a fox, B is a pig, so A is more likely to tail a rabbit in the woods than B"]], "negated": ["animal(A, fox) and animal(B, pig), so not Less(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["A is a fox, B is a pig, so A is not less likely to tail a rabbit in the woods than B"]], "asymmetric_premise": ["animal(B, fox) and animal(A, pig), so Less(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["B is a fox, A is a pig, so A is less likely to tail a rabbit in the woods than B"]], "asymmetric_conclusion": ["animal(A, fox) and animal(B, pig), so Less(tail a rabbit in the woods(B), tail a rabbit in the woods(A))", ["A is a fox, B is a pig, so B is less likely to tail a rabbit in the woods than A"]], "negated_asymmetric_premise": ["animal(B, fox) and animal(A, pig), so not More(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["B is a fox, A is a pig, so A is not more likely to tail a rabbit in the woods than B"]], "negated_asymmetric_conclusion": ["animal(A, fox) and animal(B, pig), so not More(tail a rabbit in the woods(B), tail a rabbit in the woods(A))", ["A is a fox, B is a pig, so B is not more likely to tail a rabbit in the woods than A"]]}
{"original": ["animal(A, tiger) and animal(B, scorpion), so More(kill you(A), kill you(B))", ["A is a tiger, B is a scorpion, so A is more likely to kill you than B"]], "negated": ["animal(A, tiger) and animal(B, scorpion), so not Less(kill you(A), kill you(B))", ["A is a tiger, B is a scorpion, so A is not less likely to kill you than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, scorpion), so Less(kill you(A), kill you(B))", ["B is a tiger, A is a scorpion, so A is less likely to kill you than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, scorpion), so Less(kill you(B), kill you(A))", ["A is a tiger, B is a scorpion, so B is less likely to kill you than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, scorpion), so not More(kill you(A), kill you(B))", ["B is a tiger, A is a scorpion, so A is not more likely to kill you than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, scorpion), so not More(kill you(B), kill you(A))", ["A is a tiger, B is a scorpion, so B is not more likely to kill you than A"]]}
{"original": ["animal(A, dog) and animal(B, kangaroo), so More(locate at a park(A), locate at a park(B))", ["A is a dog, B is a kangaroo, so A is more likely to be in a park than B"]], "negated": ["animal(A, dog) and animal(B, kangaroo), so not Less(locate at a park(A), locate at a park(B))", ["A is a dog, B is a kangaroo, so A is not less likely to be in a park than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, kangaroo), so Less(locate at a park(A), locate at a park(B))", ["B is a dog, A is a kangaroo, so A is less likely to be in a park than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, kangaroo), so Less(locate at a park(B), locate at a park(A))", ["A is a dog, B is a kangaroo, so B is less likely to be in a park than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, kangaroo), so not More(locate at a park(A), locate at a park(B))", ["B is a dog, A is a kangaroo, so A is not more likely to be in a park than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, kangaroo), so not More(locate at a park(B), locate at a park(A))", ["A is a dog, B is a kangaroo, so B is not more likely to be in a park than A"]]}
{"original": ["animal(A, horse) and animal(B, dolphin), so More(locate at equestrian competition(A), locate at equestrian competition(B))", ["A is a horse, B is a dolphin, so A is more likely to be in the equestrian competition than B"]], "negated": ["animal(A, horse) and animal(B, dolphin), so not Less(locate at equestrian competition(A), locate at equestrian competition(B))", ["A is a horse, B is a dolphin, so A is not less likely to be in the equestrian competition than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, dolphin), so Less(locate at equestrian competition(A), locate at equestrian competition(B))", ["B is a horse, A is a dolphin, so A is less likely to be in the equestrian competition than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, dolphin), so Less(locate at equestrian competition(B), locate at equestrian competition(A))", ["A is a horse, B is a dolphin, so B is less likely to be in the equestrian competition than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, dolphin), so not More(locate at equestrian competition(A), locate at equestrian competition(B))", ["B is a horse, A is a dolphin, so A is not more likely to be in the equestrian competition than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, dolphin), so not More(locate at equestrian competition(B), locate at equestrian competition(A))", ["A is a horse, B is a dolphin, so B is not more likely to be in the equestrian competition than A"]]}
{"original": ["animal(A, snake) and animal(B, pig), so More(sun itself(A), sun itself(B))", ["A is a snake, B is a pig, so A is more likely to be in the sun than B"]], "negated": ["animal(A, snake) and animal(B, pig), so not Less(sun itself(A), sun itself(B))", ["A is a snake, B is a pig, so A is not less solar than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, pig), so Less(sun itself(A), sun itself(B))", ["B is a snake, A is a pig, so A is less likely to be in the sun than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, pig), so Less(sun itself(B), sun itself(A))", ["A is a snake, B is a pig, so B is less likely to be in the sun than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, pig), so not More(sun itself(A), sun itself(B))", ["B is a snake, A is a pig, so A is not more likely to be in the sun than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, pig), so not More(sun itself(B), sun itself(A))", ["A is a snake, B is a pig, so B is not more likely to be in the sun than A"]]}
{"original": ["animal(A, giraffe) and animal(B, tiger), so More(locate at a zoo(A), locate at a zoo(B))", ["A is a giraffe, B is a tiger, so A is more likely to be in a zoo than B"]], "negated": ["animal(A, giraffe) and animal(B, tiger), so not Less(locate at a zoo(A), locate at a zoo(B))", ["A is a giraffe, B is a tiger, so A is not less likely to be in a zoo than B"]], "asymmetric_premise": ["animal(B, giraffe) and animal(A, tiger), so Less(locate at a zoo(A), locate at a zoo(B))", ["B is a giraffe, A is a tiger, so A is less likely to be in a zoo than B"]], "asymmetric_conclusion": ["animal(A, giraffe) and animal(B, tiger), so Less(locate at a zoo(B), locate at a zoo(A))", ["A is a giraffe, B is a tiger, so B is less likely to be in a zoo than A"]], "negated_asymmetric_premise": ["animal(B, giraffe) and animal(A, tiger), so not More(locate at a zoo(A), locate at a zoo(B))", ["B is a giraffe, A is a tiger, so A is not more likely to be in a zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, giraffe) and animal(B, tiger), so not More(locate at a zoo(B), locate at a zoo(A))", ["A is a giraffe, B is a tiger, so B is not more likely to be in a zoo than A"]]}
{"original": ["animal(A, horse) and animal(B, snake), so More(jump a barrier(A), jump a barrier(B))", ["A is a horse, B is a snake, so A is more likely to jump a barrier than B"]], "negated": ["animal(A, horse) and animal(B, snake), so not Less(jump a barrier(A), jump a barrier(B))", ["A is a horse, B is a snake, so A is not less likely to jump a barrier than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, snake), so Less(jump a barrier(A), jump a barrier(B))", ["B is a horse, A is a snake, so A is less likely to jump a barrier than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, snake), so Less(jump a barrier(B), jump a barrier(A))", ["A is a horse, B is a snake, so B is less likely to jump a barrier than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, snake), so not More(jump a barrier(A), jump a barrier(B))", ["B is a horse, A is a snake, so A is not more likely to jump a barrier than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, snake), so not More(jump a barrier(B), jump a barrier(A))", ["A is a horse, B is a snake, so B is not more likely to jump a barrier than A"]]}
{"original": ["animal(A, elephant) and animal(B, dolphin), so More(forget to go on the paper(A), forget to go on the paper(B))", ["A is a elephant, B is a dolphin, so A will likely forget to go on the paper more than B"]], "negated": ["animal(A, elephant) and animal(B, dolphin), so not Less(forget to go on the paper(A), forget to go on the paper(B))", ["A is a elephant, B is a dolphin, so A is not less likely to go on the paper than B"]], "asymmetric_premise": ["animal(B, elephant) and animal(A, dolphin), so Less(forget to go on the paper(A), forget to go on the paper(B))", ["B is a elephant, A is a dolphin, so A is less likely to go on the paper than B"]], "asymmetric_conclusion": ["animal(A, elephant) and animal(B, dolphin), so Less(forget to go on the paper(B), forget to go on the paper(A))", ["A is a elephant, B is a dolphin, so B is less likely to go on the paper than A"]], "negated_asymmetric_premise": ["animal(B, elephant) and animal(A, dolphin), so not More(forget to go on the paper(A), forget to go on the paper(B))", ["B is a elephant, A is a dolphin, so A is not more likely to go on the paper than B"]], "negated_asymmetric_conclusion": ["animal(A, elephant) and animal(B, dolphin), so not More(forget to go on the paper(B), forget to go on the paper(A))", ["A is a elephant, B is a dolphin, so B is not more likely to go on the paper than A"]]}
{"original": ["animal(A, bee) and animal(B, sheep), so More(locate at honeysuckle vines(A), locate at honeysuckle vines(B))", ["A is a bee, B is a sheep, so A is more likely to be in honeysuckle vines than B"]], "negated": ["animal(A, bee) and animal(B, sheep), so not Less(locate at honeysuckle vines(A), locate at honeysuckle vines(B))", ["A is a bee, B is a sheep, so A is not less likely to be in honeysuckle vines than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, sheep), so Less(locate at honeysuckle vines(A), locate at honeysuckle vines(B))", ["B is a bee, A is a sheep, so A is less likely to be in honeysuckle vines than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, sheep), so Less(locate at honeysuckle vines(B), locate at honeysuckle vines(A))", ["A is a bee, B is a sheep, so B is less likely to be in honeysuckle vines than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, sheep), so not More(locate at honeysuckle vines(A), locate at honeysuckle vines(B))", ["B is a bee, A is a sheep, so A is not more likely to be in honeysuckle vines than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, sheep), so not More(locate at honeysuckle vines(B), locate at honeysuckle vines(A))", ["A is a bee, B is a sheep, so B is not more likely to be in honeysuckle vines than A"]]}
{"original": ["animal(A, horse) and animal(B, cow), so More(step high(A), step high(B))", ["A is a horse, B is a cow, so A is more likely to step high than B"]], "negated": ["animal(A, horse) and animal(B, cow), so not Less(step high(A), step high(B))", ["A is a horse, B is a cow, so A is not less step high than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, cow), so Less(step high(A), step high(B))", ["B is a horse, A is a cow, so A is less likely to step high than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, cow), so Less(step high(B), step high(A))", ["A is a horse, B is a cow, so B is less likely to step high than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, cow), so not More(step high(A), step high(B))", ["B is a horse, A is a cow, so A is not more step high than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, cow), so not More(step high(B), step high(A))", ["A is a horse, B is a cow, so B is not more step high than A"]]}
{"original": ["animal(A, bear) and animal(B, lobster), so More(hunt a rabbit(A), hunt a rabbit(B))", ["A is a bear, B is a lobster, so A is more likely to hunt a rabbit than B"]], "negated": ["animal(A, bear) and animal(B, lobster), so not Less(hunt a rabbit(A), hunt a rabbit(B))", ["A is a bear, B is a lobster, so A is not less likely to hunt a rabbit than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, lobster), so Less(hunt a rabbit(A), hunt a rabbit(B))", ["B is a bear, A is a lobster, so A is less likely to hunt a rabbit than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, lobster), so Less(hunt a rabbit(B), hunt a rabbit(A))", ["A is a bear, B is a lobster, so B is less likely to hunt a rabbit than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, lobster), so not More(hunt a rabbit(A), hunt a rabbit(B))", ["B is a bear, A is a lobster, so A is not more likely to hunt a rabbit than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, lobster), so not More(hunt a rabbit(B), hunt a rabbit(A))", ["A is a bear, B is a lobster, so B is not more likely to hunt a rabbit than A"]]}
{"original": ["animal(A, turtle) and animal(B, giraffe), so More(locate at a box(A), locate at a box(B))", ["A is a turtle, B is a giraffe, so A is more likely to be in a box than B"]], "negated": ["animal(A, turtle) and animal(B, giraffe), so not Less(locate at a box(A), locate at a box(B))", ["A is a turtle, B is a giraffe, so A is not less likely to be in a box than B"]], "asymmetric_premise": ["animal(B, turtle) and animal(A, giraffe), so Less(locate at a box(A), locate at a box(B))", ["B is a turtle, A is a giraffe, so A is less likely to be in a box than B"]], "asymmetric_conclusion": ["animal(A, turtle) and animal(B, giraffe), so Less(locate at a box(B), locate at a box(A))", ["A is a turtle, B is a giraffe, so B is less likely to be in a box than A"]], "negated_asymmetric_premise": ["animal(B, turtle) and animal(A, giraffe), so not More(locate at a box(A), locate at a box(B))", ["B is a turtle, A is a giraffe, so A is not more likely to be in a box than B"]], "negated_asymmetric_conclusion": ["animal(A, turtle) and animal(B, giraffe), so not More(locate at a box(B), locate at a box(A))", ["A is a turtle, B is a giraffe, so B is not more likely to be in a box than A"]]}
{"original": ["animal(A, dog) and animal(B, deer), so More(guard your house(A), guard your house(B))", ["A is a dog, B is a deer, so A is more likely to guard your house than B"]], "negated": ["animal(A, dog) and animal(B, deer), so not Less(guard your house(A), guard your house(B))", ["A is a dog, B is a deer, so A is not less likely to guard your house than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, deer), so Less(guard your house(A), guard your house(B))", ["B is a dog, A is a deer, so A is less likely to guard your house than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, deer), so Less(guard your house(B), guard your house(A))", ["A is a dog, B is a deer, so B is less likely to guard your house than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, deer), so not More(guard your house(A), guard your house(B))", ["B is a dog, A is a deer, so A is not more likely to guard your house than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, deer), so not More(guard your house(B), guard your house(A))", ["A is a dog, B is a deer, so B is not more likely to guard your house than A"]]}
{"original": ["animal(A, chicken) and animal(B, scorpion), so More(cross the road(A), cross the road(B))", ["A is a chicken, B is a scorpion, so A is more likely to cross the road than B"]], "negated": ["animal(A, chicken) and animal(B, scorpion), so not Less(cross the road(A), cross the road(B))", ["A is a chicken, B is a scorpion, so A is not less likely to cross the road than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, scorpion), so Less(cross the road(A), cross the road(B))", ["B is a chicken, A is a scorpion, so A is less likely to cross the road than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, scorpion), so Less(cross the road(B), cross the road(A))", ["A is a chicken, B is a scorpion, so B is less likely to cross the road than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, scorpion), so not More(cross the road(A), cross the road(B))", ["B is a chicken, A is a scorpion, so A is not more likely to cross the road than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, scorpion), so not More(cross the road(B), cross the road(A))", ["A is a chicken, B is a scorpion, so B is not more likely to cross the road than A"]]}
{"original": ["animal(A, spider) and animal(B, turtle), so More(spin webs(A), spin webs(B))", ["A is a spider, B is a turtle, so A is more likely to spin webs than B"]], "negated": ["animal(A, spider) and animal(B, turtle), so not Less(spin webs(A), spin webs(B))", ["A is a spider, B is a turtle, so A is not less likely to spin webs than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, turtle), so Less(spin webs(A), spin webs(B))", ["B is a spider, A is a turtle, so A is less likely to spin webs than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, turtle), so Less(spin webs(B), spin webs(A))", ["A is a spider, B is a turtle, so B is less likely to spin webs than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, turtle), so not More(spin webs(A), spin webs(B))", ["B is a spider, A is a turtle, so A is not more likely to spin webs than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, turtle), so not More(spin webs(B), spin webs(A))", ["A is a spider, B is a turtle, so B is not more likely to spin webs than A"]]}
{"original": ["animal(A, octopus) and animal(B, rabbit), so More(locate at the ocean(A), locate at the ocean(B))", ["A is a octopus, B is a rabbit, so A is more likely to be in the ocean than B"]], "negated": ["animal(A, octopus) and animal(B, rabbit), so not Less(locate at the ocean(A), locate at the ocean(B))", ["A is a octopus, B is a rabbit, so A is not less likely to be in the ocean than B"]], "asymmetric_premise": ["animal(B, octopus) and animal(A, rabbit), so Less(locate at the ocean(A), locate at the ocean(B))", ["B is a octopus, A is a rabbit, so A is less likely to be in the ocean than B"]], "asymmetric_conclusion": ["animal(A, octopus) and animal(B, rabbit), so Less(locate at the ocean(B), locate at the ocean(A))", ["A is a octopus, B is a rabbit, so B is less likely to be in the ocean than A"]], "negated_asymmetric_premise": ["animal(B, octopus) and animal(A, rabbit), so not More(locate at the ocean(A), locate at the ocean(B))", ["B is a octopus, A is a rabbit, so A is not more likely to be in the ocean than B"]], "negated_asymmetric_conclusion": ["animal(A, octopus) and animal(B, rabbit), so not More(locate at the ocean(B), locate at the ocean(A))", ["A is a octopus, B is a rabbit, so B is not more likely to be in the ocean than A"]]}
{"original": ["animal(A, cat) and animal(B, dolphin), so More(locate at a vet(A), locate at a vet(B))", ["A is a cat, B is a dolphin, so A is more likely to be at a vet than B"]], "negated": ["animal(A, cat) and animal(B, dolphin), so not Less(locate at a vet(A), locate at a vet(B))", ["A is a cat, B is a dolphin, so A is not less likely to be at a vet than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, dolphin), so Less(locate at a vet(A), locate at a vet(B))", ["B is a cat, A is a dolphin, so A is less likely to be at a vet than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, dolphin), so Less(locate at a vet(B), locate at a vet(A))", ["A is a cat, B is a dolphin, so B is less likely to be at a vet than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, dolphin), so not More(locate at a vet(A), locate at a vet(B))", ["B is a cat, A is a dolphin, so A is not more likely to be at a vet than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, dolphin), so not More(locate at a vet(B), locate at a vet(A))", ["A is a cat, B is a dolphin, so B is not more likely to be at a vet than A"]]}
{"original": ["animal(A, bird) and animal(B, bear), so More(locate at a cage(A), locate at a cage(B))", ["A is a bird, B is a bear, so A is more likely to be in a cage than B"]], "negated": ["animal(A, bird) and animal(B, bear), so not Less(locate at a cage(A), locate at a cage(B))", ["A is a bird, B is a bear, so A is not less likely to be in a cage than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, bear), so Less(locate at a cage(A), locate at a cage(B))", ["B is a bird, A is a bear, so A is less likely to be in a cage than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, bear), so Less(locate at a cage(B), locate at a cage(A))", ["A is a bird, B is a bear, so B is less likely to be in a cage than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, bear), so not More(locate at a cage(A), locate at a cage(B))", ["B is a bird, A is a bear, so A is not more likely to be in a cage than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, bear), so not More(locate at a cage(B), locate at a cage(A))", ["A is a bird, B is a bear, so B is not more likely to be in a cage than A"]]}
{"original": ["animal(A, sheep) and animal(B, kangaroo), so More(graze(A), graze(B))", ["A is a sheep, B is a kangaroo, so A is more likely to graze than B"]], "negated": ["animal(A, sheep) and animal(B, kangaroo), so not Less(graze(A), graze(B))", ["A is a sheep, B is a kangaroo, so A is not less likely to graze than B"]], "asymmetric_premise": ["animal(B, sheep) and animal(A, kangaroo), so Less(graze(A), graze(B))", ["B is a sheep, A is a kangaroo, so A is less likely to graze than B"]], "asymmetric_conclusion": ["animal(A, sheep) and animal(B, kangaroo), so Less(graze(B), graze(A))", ["A is a sheep, B is a kangaroo, so B is less likely to graze than A"]], "negated_asymmetric_premise": ["animal(B, sheep) and animal(A, kangaroo), so not More(graze(A), graze(B))", ["B is a sheep, A is a kangaroo, so A is not more likely to graze than B"]], "negated_asymmetric_conclusion": ["animal(A, sheep) and animal(B, kangaroo), so not More(graze(B), graze(A))", ["A is a sheep, B is a kangaroo, so B is not more likely to graze than A"]]}
{"original": ["animal(A, dog) and animal(B, dolphin), so More(guard your house(A), guard your house(B))", ["A is a dog, B is a dolphin, so A is more likely to guard your house than B"]], "negated": ["animal(A, dog) and animal(B, dolphin), so not Less(guard your house(A), guard your house(B))", ["A is a dog, B is a dolphin, so A is not less likely to guard your house than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, dolphin), so Less(guard your house(A), guard your house(B))", ["B is a dog, A is a dolphin, so A is less likely to guard your house than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, dolphin), so Less(guard your house(B), guard your house(A))", ["A is a dog, B is a dolphin, so B is less likely to guard your house than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, dolphin), so not More(guard your house(A), guard your house(B))", ["B is a dog, A is a dolphin, so A is not more likely to guard your house than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, dolphin), so not More(guard your house(B), guard your house(A))", ["A is a dog, B is a dolphin, so B is not more likely to guard your house than A"]]}
{"original": ["animal(A, monkey) and animal(B, ant), so More(locate at the rain forest(A), locate at the rain forest(B))", ["A is a monkey, B is a ant, so A is more likely to be in the rain forest than B"]], "negated": ["animal(A, monkey) and animal(B, ant), so not Less(locate at the rain forest(A), locate at the rain forest(B))", ["A is a monkey, B is an ant, so A is not less likely to be in the rain forest than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, ant), so Less(locate at the rain forest(A), locate at the rain forest(B))", ["B is a monkey, A is a ant, so A is less likely to be in the rain forest than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, ant), so Less(locate at the rain forest(B), locate at the rain forest(A))", ["A is a monkey, B is an ant, so B is less likely to be in the rain forest than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, ant), so not More(locate at the rain forest(A), locate at the rain forest(B))", ["B is a monkey, A is an ant, so A is not more likely to be in the rain forest than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, ant), so not More(locate at the rain forest(B), locate at the rain forest(A))", ["A is a monkey, B is an ant, so B is not more likely to be in the rain forest than A"]]}
{"original": ["animal(A, kangaroo) and animal(B, seal), so More(carry its baby in its pouch(A), carry its baby in its pouch(B))", ["A is a kangaroo, B is a seal, so A is more likely to carry its baby in its pouch than B"]], "negated": ["animal(A, kangaroo) and animal(B, seal), so not Less(carry its baby in its pouch(A), carry its baby in its pouch(B))", ["A is a kangaroo, B is a seal, so A is not less likely to carry its baby in its pouch than B"]], "asymmetric_premise": ["animal(B, kangaroo) and animal(A, seal), so Less(carry its baby in its pouch(A), carry its baby in its pouch(B))", ["B is a kangaroo, A is a seal, so A is less likely to carry its baby in its pouch than B"]], "asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, seal), so Less(carry its baby in its pouch(B), carry its baby in its pouch(A))", ["A is a kangaroo, B is a seal, so B is less likely to carry its baby in its pouch than A"]], "negated_asymmetric_premise": ["animal(B, kangaroo) and animal(A, seal), so not More(carry its baby in its pouch(A), carry its baby in its pouch(B))", ["B is a kangaroo, A is a seal, so A is not more likely to carry its baby in its pouch than B"]], "negated_asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, seal), so not More(carry its baby in its pouch(B), carry its baby in its pouch(A))", ["A is a kangaroo, B is a seal, so B is not more likely to carry its baby in its pouch than A"]]}
{"original": ["animal(A, chicken) and animal(B, dog), so More(be stirfried in butter(A), be stirfried in butter(B))", ["A is a chicken, B is a dog, so A is more likely to be stirfried in butter than B"]], "negated": ["animal(A, chicken) and animal(B, dog), so not Less(be stirfried in butter(A), be stirfried in butter(B))", ["A is a chicken, B is a dog, so A is not less likely to be stirfried in butter than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, dog), so Less(be stirfried in butter(A), be stirfried in butter(B))", ["B is a chicken, A is a dog, so A is less likely to be stirfried in butter than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, dog), so Less(be stirfried in butter(B), be stirfried in butter(A))", ["A is a chicken, B is a dog, so B is less likely to be stirfried in butter than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, dog), so not More(be stirfried in butter(A), be stirfried in butter(B))", ["B is a chicken, A is a dog, so A is not more likely to be stirfried in butter than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, dog), so not More(be stirfried in butter(B), be stirfried in butter(A))", ["A is a chicken, B is a dog, so B is not more likely to be stirfried in butter than A"]]}
{"original": ["animal(A, chicken) and animal(B, shark), so More(be a pet(A), be a pet(B))", ["A is a chicken, B is a shark, so A is more likely to be a pet than B"]], "negated": ["animal(A, chicken) and animal(B, shark), so not Less(be a pet(A), be a pet(B))", ["A is a chicken, B is a shark, so A is not less likely to be a pet than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, shark), so Less(be a pet(A), be a pet(B))", ["B is a chicken, A is a shark, so A is less likely to be a pet than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, shark), so Less(be a pet(B), be a pet(A))", ["A is a chicken, B is a shark, so B is less likely to be a pet than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, shark), so not More(be a pet(A), be a pet(B))", ["B is a chicken, A is a shark, so A is not more likely to be a pet than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, shark), so not More(be a pet(B), be a pet(A))", ["A is a chicken, B is a shark, so B is not more likely to be a pet than A"]]}
{"original": ["animal(A, rat) and animal(B, cheetah), so More(press a lever(A), press a lever(B))", ["A is a rat, B is a cheetah, so A is more likely to press a lever than B"]], "negated": ["animal(A, rat) and animal(B, cheetah), so not Less(press a lever(A), press a lever(B))", ["A is a rat, B is a cheetah, so A is not less likely to press a lever than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, cheetah), so Less(press a lever(A), press a lever(B))", ["B is a rat, A is a cheetah, so A is less likely to press a lever than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, cheetah), so Less(press a lever(B), press a lever(A))", ["A is a rat, B is a cheetah, so B is less likely to press a lever than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, cheetah), so not More(press a lever(A), press a lever(B))", ["B is a rat, A is a cheetah, so A is not more likely to press a lever than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, cheetah), so not More(press a lever(B), press a lever(A))", ["A is a rat, B is a cheetah, so B is not more likely to press a lever than A"]]}
{"original": ["animal(A, dog) and animal(B, snail), so More(locate at a leash(A), locate at a leash(B))", ["A is a dog, B is a snail, so A is more likely to be on a leash than B"]], "negated": ["animal(A, dog) and animal(B, snail), so not Less(locate at a leash(A), locate at a leash(B))", ["A is a dog, B is a snail, so A is not less likely to be on a leash than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, snail), so Less(locate at a leash(A), locate at a leash(B))", ["B is a dog, A is a snail, so A is less likely to be on a leash than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, snail), so Less(locate at a leash(B), locate at a leash(A))", ["A is a dog, B is a snail, so B is less likely to be on a leash than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, snail), so not More(locate at a leash(A), locate at a leash(B))", ["B is a dog, A is a snail, so A is not more likely to be on a leash than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, snail), so not More(locate at a leash(B), locate at a leash(A))", ["A is a dog, B is a snail, so B is not more likely to be on a leash than A"]]}
{"original": ["animal(A, spider) and animal(B, shark), so More(locate at a web(A), locate at a web(B))", ["A is a spider, B is a shark, so A is more likely to be in a web than B"]], "negated": ["animal(A, spider) and animal(B, shark), so not Less(locate at a web(A), locate at a web(B))", ["A is a spider, B is a shark, so A is not less likely to be in a web than B"]], "asymmetric_premise": ["animal(B, spider) and animal(A, shark), so Less(locate at a web(A), locate at a web(B))", ["B is a spider, A is a shark, so A is less likely to be in a web than B"]], "asymmetric_conclusion": ["animal(A, spider) and animal(B, shark), so Less(locate at a web(B), locate at a web(A))", ["A is a spider, B is a shark, so B is less likely to be in a web than A"]], "negated_asymmetric_premise": ["animal(B, spider) and animal(A, shark), so not More(locate at a web(A), locate at a web(B))", ["B is a spider, A is a shark, so A is not more likely to be in a web than B"]], "negated_asymmetric_conclusion": ["animal(A, spider) and animal(B, shark), so not More(locate at a web(B), locate at a web(A))", ["A is a spider, B is a shark, so B is not more likely to be in a web than A"]]}
{"original": ["animal(A, bird) and animal(B, chicken), so More(locate at the forest(A), locate at the forest(B))", ["A is a bird, B is a chicken, so A is more likely to be in the forest than B"]], "negated": ["animal(A, bird) and animal(B, chicken), so not Less(locate at the forest(A), locate at the forest(B))", ["A is a bird, B is a chicken, so A is not less likely to be in the forest than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, chicken), so Less(locate at the forest(A), locate at the forest(B))", ["B is a bird, A is a chicken, so A is less likely to be in the forest than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, chicken), so Less(locate at the forest(B), locate at the forest(A))", ["A is a bird, B is a chicken, so B is less likely to be in the forest than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, chicken), so not More(locate at the forest(A), locate at the forest(B))", ["B is a bird, A is a chicken, so A is not more likely to be in the forest than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, chicken), so not More(locate at the forest(B), locate at the forest(A))", ["A is a bird, B is a chicken, so B is not more likely to be in the forest than A"]]}
{"original": ["animal(A, horse) and animal(B, alligator), so More(locate at a farmyard(A), locate at a farmyard(B))", ["A is a horse, B is a alligator, so A is more likely to be in a farmyard than B"]], "negated": ["animal(A, horse) and animal(B, alligator), so not Less(locate at a farmyard(A), locate at a farmyard(B))", ["A is a horse, B is a alligator, so A is not less likely to be in a farmyard than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, alligator), so Less(locate at a farmyard(A), locate at a farmyard(B))", ["B is a horse, A is a alligator, so A is less likely to be in a farmyard than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, alligator), so Less(locate at a farmyard(B), locate at a farmyard(A))", ["A is a horse, B is a alligator, so B is less likely to be in a farmyard than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, alligator), so not More(locate at a farmyard(A), locate at a farmyard(B))", ["B is a horse, A is a alligator, so A is not more likely to be in a farmyard than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, alligator), so not More(locate at a farmyard(B), locate at a farmyard(A))", ["A is a horse, B is a alligator, so B is not more likely to be in a farmyard than A"]]}
{"original": ["animal(A, bear) and animal(B, spider), so More(fish for salmon(A), fish for salmon(B))", ["A is a bear, B is a spider, so A is more likely to fish for salmon than B"]], "negated": ["animal(A, bear) and animal(B, spider), so not Less(fish for salmon(A), fish for salmon(B))", ["A is a bear, B is a spider, so A is not less likely to fish for salmon than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, spider), so Less(fish for salmon(A), fish for salmon(B))", ["B is a bear, A is a spider, so A is less likely to fish for salmon than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, spider), so Less(fish for salmon(B), fish for salmon(A))", ["A is a bear, B is a spider, so B is less likely to fish for salmon than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, spider), so not More(fish for salmon(A), fish for salmon(B))", ["B is a bear, A is a spider, so A is not more likely to fish for salmon than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, spider), so not More(fish for salmon(B), fish for salmon(A))", ["A is a bear, B is a spider, so B is not more likely to fish for salmon than A"]]}
{"original": ["animal(A, horse) and animal(B, frog), so More(locate at a parade(A), locate at a parade(B))", ["A is a horse, B is a frog, so A is more likely to be in a parade than B"]], "negated": ["animal(A, horse) and animal(B, frog), so not Less(locate at a parade(A), locate at a parade(B))", ["A is a horse, B is a frog, so A is not less likely to be in a parade than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, frog), so Less(locate at a parade(A), locate at a parade(B))", ["B is a horse, A is a frog, so A is less likely to be in a parade than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, frog), so Less(locate at a parade(B), locate at a parade(A))", ["A is a horse, B is a frog, so B is less likely to be in a parade than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, frog), so not More(locate at a parade(A), locate at a parade(B))", ["B is a horse, A is a frog, so A is not more likely to be in a parade than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, frog), so not More(locate at a parade(B), locate at a parade(A))", ["A is a horse, B is a frog, so B is not more likely to be in a parade than A"]]}
{"original": ["animal(A, sheep) and animal(B, fox), so More(graze(A), graze(B))", ["A is a sheep, B is a fox, so A is more likely to graze than B"]], "negated": ["animal(A, sheep) and animal(B, fox), so not Less(graze(A), graze(B))", ["A is a sheep, B is a fox, so A is not less likely to graze than B"]], "asymmetric_premise": ["animal(B, sheep) and animal(A, fox), so Less(graze(A), graze(B))", ["B is a sheep, A is a fox, so A is less likely to graze than B"]], "asymmetric_conclusion": ["animal(A, sheep) and animal(B, fox), so Less(graze(B), graze(A))", ["A is a sheep, B is a fox, so B is less likely to graze than A"]], "negated_asymmetric_premise": ["animal(B, sheep) and animal(A, fox), so not More(graze(A), graze(B))", ["B is a sheep, A is a fox, so A is not more likely to graze than B"]], "negated_asymmetric_conclusion": ["animal(A, sheep) and animal(B, fox), so not More(graze(B), graze(A))", ["A is a sheep, B is a fox, so B is not more likely to graze than A"]]}
{"original": ["animal(A, pig) and animal(B, bear), so More(locate at a pigsty(A), locate at a pigsty(B))", ["A is a pig, B is a bear, so A is more likely to be in a pigsty than B"]], "negated": ["animal(A, pig) and animal(B, bear), so not Less(locate at a pigsty(A), locate at a pigsty(B))", ["A is a pig, B is a bear, so A is not less likely to be in a pigsty than B"]], "asymmetric_premise": ["animal(B, pig) and animal(A, bear), so Less(locate at a pigsty(A), locate at a pigsty(B))", ["B is a pig, A is a bear, so A is less likely to be in a pigsty than B"]], "asymmetric_conclusion": ["animal(A, pig) and animal(B, bear), so Less(locate at a pigsty(B), locate at a pigsty(A))", ["A is a pig, B is a bear, so B is less likely to be in a pigsty than A"]], "negated_asymmetric_premise": ["animal(B, pig) and animal(A, bear), so not More(locate at a pigsty(A), locate at a pigsty(B))", ["B is a pig, A is a bear, so A is not more likely to be in a pigsty than B"]], "negated_asymmetric_conclusion": ["animal(A, pig) and animal(B, bear), so not More(locate at a pigsty(B), locate at a pigsty(A))", ["A is a pig, B is a bear, so B is not more likely to be in a pigsty than A"]]}
{"original": ["animal(A, bear) and animal(B, horse), so More(fish with his bare paws(A), fish with his bare paws(B))", ["A is a bear, B is a horse, so A is more likely to fish with his bare paws than B"]], "negated": ["animal(A, bear) and animal(B, horse), so not Less(fish with his bare paws(A), fish with his bare paws(B))", ["A is a bear, B is a horse, so A is not less likely to fish with his bare paws than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, horse), so Less(fish with his bare paws(A), fish with his bare paws(B))", ["B is a bear, A is a horse, so A is less likely to fish with his bare paws than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, horse), so Less(fish with his bare paws(B), fish with his bare paws(A))", ["A is a bear, B is a horse, so B is less likely to fish with his bare paws than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, horse), so not More(fish with his bare paws(A), fish with his bare paws(B))", ["B is a bear, A is a horse, so A is not more likely to fish with his bare paws than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, horse), so not More(fish with his bare paws(B), fish with his bare paws(A))", ["A is a bear, B is a horse, so B is not more likely to fish with his bare paws than A"]]}
{"original": ["animal(A, dog) and animal(B, fox), so More(guide a blind person(A), guide a blind person(B))", ["A is a dog, B is a fox, so A is more likely to guide a blind person than B"]], "negated": ["animal(A, dog) and animal(B, fox), so not Less(guide a blind person(A), guide a blind person(B))", ["A is a dog, B is a fox, so A is not less likely to guide a blind person than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, fox), so Less(guide a blind person(A), guide a blind person(B))", ["B is a dog, A is a fox, so A is less likely to guide a blind person than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, fox), so Less(guide a blind person(B), guide a blind person(A))", ["A is a dog, B is a fox, so B is less likely to guide a blind person than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, fox), so not More(guide a blind person(A), guide a blind person(B))", ["B is a dog, A is a fox, so A is not more likely to guide a blind person than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, fox), so not More(guide a blind person(B), guide a blind person(A))", ["A is a dog, B is a fox, so B is not more likely to guide a blind person than A"]]}
{"original": ["animal(A, tiger) and animal(B, seal), so More(locate at the zoo(A), locate at the zoo(B))", ["A is a tiger, B is a seal, so A is more likely to be in the zoo than B"]], "negated": ["animal(A, tiger) and animal(B, seal), so not Less(locate at the zoo(A), locate at the zoo(B))", ["A is a tiger, B is a seal, so A is not less likely to be in the zoo than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, seal), so Less(locate at the zoo(A), locate at the zoo(B))", ["B is a tiger, A is a seal, so A is less likely to be in the zoo than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, seal), so Less(locate at the zoo(B), locate at the zoo(A))", ["A is a tiger, B is a seal, so B is less likely to be in the zoo than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, seal), so not More(locate at the zoo(A), locate at the zoo(B))", ["B is a tiger, A is a seal, so A is not more likely to be in the zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, seal), so not More(locate at the zoo(B), locate at the zoo(A))", ["A is a tiger, B is a seal, so B is not more likely to be in the zoo than A"]]}
{"original": ["animal(A, lion) and animal(B, rat), so More(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["A is a lion, B is a rat, so A is more likely to be in a large cities zoo than B"]], "negated": ["animal(A, lion) and animal(B, rat), so not Less(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["A is a lion, B is a rat, so A is not less likely to be in a large cities zoo than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, rat), so Less(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["B is a lion, A is a rat, so A is less likely to be in a large cities zoo than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, rat), so Less(locate at a large cities zoo(B), locate at a large cities zoo(A))", ["A is a lion, B is a rat, so B is less likely to be in a large cities zoo than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, rat), so not More(locate at a large cities zoo(A), locate at a large cities zoo(B))", ["B is a lion, A is a rat, so A is not more likely to be in a large cities zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, rat), so not More(locate at a large cities zoo(B), locate at a large cities zoo(A))", ["A is a lion, B is a rat, so B is not more likely to be in a large cities zoo than A"]]}
{"original": ["animal(A, horse) and animal(B, hippopotamus), so More(step high(A), step high(B))", ["A is a horse, B is a hippopotamus, so A is more likely to step high than B"]], "negated": ["animal(A, horse) and animal(B, hippopotamus), so not Less(step high(A), step high(B))", ["A is a horse, B is a hippopotamus, so A is not less step high than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, hippopotamus), so Less(step high(A), step high(B))", ["B is a horse, A is a hippopotamus, so A is less likely to step high than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, hippopotamus), so Less(step high(B), step high(A))", ["A is a horse, B is a hippopotamus, so B is less likely to step high than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, hippopotamus), so not More(step high(A), step high(B))", ["B is a horse, A is a hippopotamus, so A is not more step high than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, hippopotamus), so not More(step high(B), step high(A))", ["A is a horse, B is a hippopotamus, so B is not more step high than A"]]}
{"original": ["animal(A, bird) and animal(B, bear), so More(chirp(A), chirp(B))", ["A is a bird, B is a bear, so A is more likely to chirp than B"]], "negated": ["animal(A, bird) and animal(B, bear), so not Less(chirp(A), chirp(B))", ["A is a bird, B is a bear, so A is not less likely to chirp than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, bear), so Less(chirp(A), chirp(B))", ["B is a bird, A is a bear, so A is less likely to chirp than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, bear), so Less(chirp(B), chirp(A))", ["A is a bird, B is a bear, so B is less likely to chirp than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, bear), so not More(chirp(A), chirp(B))", ["B is a bird, A is a bear, so A is not more likely to chirp than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, bear), so not More(chirp(B), chirp(A))", ["A is a bird, B is a bear, so B is not more likely to chirp than A"]]}
{"original": ["animal(A, rat) and animal(B, lobster), so More(locate at a maze(A), locate at a maze(B))", ["A is a rat, B is a lobster, so A is more likely to be in a maze than B"]], "negated": ["animal(A, rat) and animal(B, lobster), so not Less(locate at a maze(A), locate at a maze(B))", ["A is a rat, B is a lobster, so A is not less likely to be in a maze than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, lobster), so Less(locate at a maze(A), locate at a maze(B))", ["B is a rat, A is a lobster, so A is less likely to be in a maze than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, lobster), so Less(locate at a maze(B), locate at a maze(A))", ["A is a rat, B is a lobster, so B is less likely to be in a maze than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, lobster), so not More(locate at a maze(A), locate at a maze(B))", ["B is a rat, A is a lobster, so A is not more likely to be in a maze than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, lobster), so not More(locate at a maze(B), locate at a maze(A))", ["A is a rat, B is a lobster, so B is not more likely to be in a maze than A"]]}
{"original": ["animal(A, fish) and animal(B, hamster), so More(be pets(A), be pets(B))", ["A is a fish, B is a hamster, so A is more likely to be pets than B"]], "negated": ["animal(A, fish) and animal(B, hamster), so not Less(be pets(A), be pets(B))", ["A is a fish, B is a hamster, so A is not less pets than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, hamster), so Less(be pets(A), be pets(B))", ["B is a fish, A is a hamster, so A is less likely to be pets than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, hamster), so Less(be pets(B), be pets(A))", ["A is a fish, B is a hamster, so B is less likely to be pets than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, hamster), so not More(be pets(A), be pets(B))", ["B is a fish, A is a hamster, so A is not more likely to be pets than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, hamster), so not More(be pets(B), be pets(A))", ["A is a fish, B is a hamster, so B is not more likely to be pets than A"]]}
{"original": ["animal(A, monkey) and animal(B, frog), so More(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["A is a monkey, B is a frog, so A is more likely to be in a cage at the zoo than B"]], "negated": ["animal(A, monkey) and animal(B, frog), so not Less(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["A is a monkey, B is a frog, so A is not less likely to be in a cage at the zoo than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, frog), so Less(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["B is a monkey, A is a frog, so A is less likely to be in a cage at the zoo than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, frog), so Less(locate at a cage at the zoo(B), locate at a cage at the zoo(A))", ["A is a monkey, B is a frog, so B is less likely to be in a cage at the zoo than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, frog), so not More(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["B is a monkey, A is a frog, so A is not more likely to be in a cage at the zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, frog), so not More(locate at a cage at the zoo(B), locate at a cage at the zoo(A))", ["A is a monkey, B is a frog, so B is not more likely to be in a cage at the zoo than A"]]}
{"original": ["animal(A, bear) and animal(B, rat), so More(fish for salmon(A), fish for salmon(B))", ["A is a bear, B is a rat, so A is more likely to fish for salmon than B"]], "negated": ["animal(A, bear) and animal(B, rat), so not Less(fish for salmon(A), fish for salmon(B))", ["A is a bear, B is a rat, so A is not less likely to fish for salmon than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, rat), so Less(fish for salmon(A), fish for salmon(B))", ["B is a bear, A is a rat, so A is less likely to fish for salmon than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, rat), so Less(fish for salmon(B), fish for salmon(A))", ["A is a bear, B is a rat, so B is less likely to fish for salmon than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, rat), so not More(fish for salmon(A), fish for salmon(B))", ["B is a bear, A is a rat, so A is not more likely to fish for salmon than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, rat), so not More(fish for salmon(B), fish for salmon(A))", ["A is a bear, B is a rat, so B is not more likely to fish for salmon than A"]]}
{"original": ["animal(A, snake) and animal(B, chimpanzee), so More(locate at a garden(A), locate at a garden(B))", ["A is a snake, B is a chimpanzee, so A is more likely to be in a garden than B"]], "negated": ["animal(A, snake) and animal(B, chimpanzee), so not Less(locate at a garden(A), locate at a garden(B))", ["A is a snake, B is a chimpanzee, so A is not less likely to be in a garden than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, chimpanzee), so Less(locate at a garden(A), locate at a garden(B))", ["B is a snake, A is a chimpanzee, so A is less likely to be in a garden than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, chimpanzee), so Less(locate at a garden(B), locate at a garden(A))", ["A is a snake, B is a chimpanzee, so B is less likely to be in a garden than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, chimpanzee), so not More(locate at a garden(A), locate at a garden(B))", ["B is a snake, A is a chimpanzee, so A is not more likely to be in a garden than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, chimpanzee), so not More(locate at a garden(B), locate at a garden(A))", ["A is a snake, B is a chimpanzee, so B is not more likely to be in a garden than A"]]}
{"original": ["animal(A, cow) and animal(B, pig), so More(low at milking time(A), low at milking time(B))", ["A is a cow, B is a pig, so A is more low at milking time than B"]], "negated": ["animal(A, cow) and animal(B, pig), so not Less(low at milking time(A), low at milking time(B))", ["A is a cow, B is a pig, so A is not less low at milking time than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, pig), so Less(low at milking time(A), low at milking time(B))", ["B is a cow, A is a pig, so A is less low at milking time than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, pig), so Less(low at milking time(B), low at milking time(A))", ["A is a cow, B is a pig, so B is less low at milking time than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, pig), so not More(low at milking time(A), low at milking time(B))", ["B is a cow, A is a pig, so A is not more low at milking time than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, pig), so not More(low at milking time(B), low at milking time(A))", ["A is a cow, B is a pig, so B is not more low at milking time than A"]]}
{"original": ["animal(A, monkey) and animal(B, giraffe), so More(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["A is a monkey, B is a giraffe, so A is more likely to be in a cage at the zoo than B"]], "negated": ["animal(A, monkey) and animal(B, giraffe), so not Less(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["A is a monkey, B is a giraffe, so A is not less likely to be in a cage at the zoo than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, giraffe), so Less(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["B is a monkey, A is a giraffe, so A is less likely to be in a cage at the zoo than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, giraffe), so Less(locate at a cage at the zoo(B), locate at a cage at the zoo(A))", ["A is a monkey, B is a giraffe, so B is less likely to be in a cage at the zoo than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, giraffe), so not More(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["B is a monkey, A is a giraffe, so A is not more likely to be in a cage at the zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, giraffe), so not More(locate at a cage at the zoo(B), locate at a cage at the zoo(A))", ["A is a monkey, B is a giraffe, so B is not more likely to be in a cage at the zoo than A"]]}
{"original": ["animal(A, elephant) and animal(B, cow), so More(to lift the tree(A), to lift the tree(B))", ["A is a elephant, B is a cow, so A is more likely to lift the tree than B"]], "negated": ["animal(A, elephant) and animal(B, cow), so not Less(to lift the tree(A), to lift the tree(B))", ["A is a elephant, B is a cow, so A is not less likely to lift the tree than B"]], "asymmetric_premise": ["animal(B, elephant) and animal(A, cow), so Less(to lift the tree(A), to lift the tree(B))", ["B is a elephant, A is a cow, so A is less likely to lift the tree than B"]], "asymmetric_conclusion": ["animal(A, elephant) and animal(B, cow), so Less(to lift the tree(B), to lift the tree(A))", ["A is a elephant, B is a cow, so B is less likely to lift the tree than A"]], "negated_asymmetric_premise": ["animal(B, elephant) and animal(A, cow), so not More(to lift the tree(A), to lift the tree(B))", ["B is a elephant, A is a cow, so A is not more likely to lift the tree than B"]], "negated_asymmetric_conclusion": ["animal(A, elephant) and animal(B, cow), so not More(to lift the tree(B), to lift the tree(A))", ["A is a elephant, B is a cow, so B is not more likely to lift the tree than A"]]}
{"original": ["animal(A, bear) and animal(B, owl), so More(locate at a meadow(A), locate at a meadow(B))", ["A is a bear, B is a owl, so A is more likely to be in a meadow than B"]], "negated": ["animal(A, bear) and animal(B, owl), so not Less(locate at a meadow(A), locate at a meadow(B))", ["A is a bear, B is a owl, so A is not less likely to be in a meadow than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, owl), so Less(locate at a meadow(A), locate at a meadow(B))", ["B is a bear, A is a owl, so A is less likely to be in a meadow than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, owl), so Less(locate at a meadow(B), locate at a meadow(A))", ["A is a bear, B is a owl, so B is less likely to be in a meadow than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, owl), so not More(locate at a meadow(A), locate at a meadow(B))", ["B is a bear, A is a owl, so A is not more likely to be in a meadow than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, owl), so not More(locate at a meadow(B), locate at a meadow(A))", ["A is a bear, B is a owl, so B is not more likely to be in a meadow than A"]]}
{"original": ["animal(A, snake) and animal(B, elephant), so More(locate at a feild(A), locate at a feild(B))", ["A is a snake, B is a elephant, so A is more likely to be in a feild than B"]], "negated": ["animal(A, snake) and animal(B, elephant), so not Less(locate at a feild(A), locate at a feild(B))", ["A is a snake, B is a elephant, so A is not less likely to be in a feild than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, elephant), so Less(locate at a feild(A), locate at a feild(B))", ["B is a snake, A is a elephant, so A is less likely to be in a feild than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, elephant), so Less(locate at a feild(B), locate at a feild(A))", ["A is a snake, B is an elephant, so B is less likely to be in a feild than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, elephant), so not More(locate at a feild(A), locate at a feild(B))", ["B is a snake, A is a elephant, so A is not more likely to be in a feild than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, elephant), so not More(locate at a feild(B), locate at a feild(A))", ["A is a snake, B is an elephant, so B is not more likely to be in a feild than A"]]}
{"original": ["animal(A, snake) and animal(B, horse), so More(locate at the bible(A), locate at the bible(B))", ["A is a snake, B is a horse, so A is more likely to be in the bible than B"]], "negated": ["animal(A, snake) and animal(B, horse), so not Less(locate at the bible(A), locate at the bible(B))", ["A is a snake, B is a horse, so A is not less likely to be in the bible than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, horse), so Less(locate at the bible(A), locate at the bible(B))", ["B is a snake, A is a horse, so A is less likely to be in the bible than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, horse), so Less(locate at the bible(B), locate at the bible(A))", ["A is a snake, B is a horse, so B is less likely to be in the bible than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, horse), so not More(locate at the bible(A), locate at the bible(B))", ["B is a snake, A is a horse, so A is not more likely to be in the bible than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, horse), so not More(locate at the bible(B), locate at the bible(A))", ["A is a snake, B is a horse, so B is not more likely to be in the bible than A"]]}
{"original": ["animal(A, cat) and animal(B, hamster), so More(locate at your way(A), locate at your way(B))", ["A is a cat, B is a hamster, so A is more likely to be in your way than B"]], "negated": ["animal(A, cat) and animal(B, hamster), so not Less(locate at your way(A), locate at your way(B))", ["A is a cat, B is a hamster, so A is not less likely to be in your way than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, hamster), so Less(locate at your way(A), locate at your way(B))", ["B is a cat, A is a hamster, so A is less likely to be in your way than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, hamster), so Less(locate at your way(B), locate at your way(A))", ["A is a cat, B is a hamster, so B is less likely to be in your way than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, hamster), so not More(locate at your way(A), locate at your way(B))", ["B is a cat, A is a hamster, so A is not more likely to be in your way than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, hamster), so not More(locate at your way(B), locate at your way(A))", ["A is a cat, B is a hamster, so B is not more likely to be in your way than A"]]}
{"original": ["animal(A, chimpanzee) and animal(B, spider), so More(hold her baby(A), hold her baby(B))", ["A is a chimpanzee, B is a spider, so A is more likely to hold her baby than B"]], "negated": ["animal(A, chimpanzee) and animal(B, spider), so not Less(hold her baby(A), hold her baby(B))", ["A is a chimpanzee, B is a spider, so A is not less likely to hold her baby than B"]], "asymmetric_premise": ["animal(B, chimpanzee) and animal(A, spider), so Less(hold her baby(A), hold her baby(B))", ["B is a chimpanzee, A is a spider, so A is less likely to hold her baby than B"]], "asymmetric_conclusion": ["animal(A, chimpanzee) and animal(B, spider), so Less(hold her baby(B), hold her baby(A))", ["A is a chimpanzee, B is a spider, so B is less likely to hold her baby than A"]], "negated_asymmetric_premise": ["animal(B, chimpanzee) and animal(A, spider), so not More(hold her baby(A), hold her baby(B))", ["B is a chimpanzee, A is a spider, so A is not more likely to hold her baby than B"]], "negated_asymmetric_conclusion": ["animal(A, chimpanzee) and animal(B, spider), so not More(hold her baby(B), hold her baby(A))", ["A is a chimpanzee, B is a spider, so B is not more likely to hold her baby than A"]]}
{"original": ["animal(A, fish) and animal(B, snake), so More(locate at a pond(A), locate at a pond(B))", ["A is a fish, B is a snake, so A is more likely to be in a pond than B"]], "negated": ["animal(A, fish) and animal(B, snake), so not Less(locate at a pond(A), locate at a pond(B))", ["A is a fish, B is a snake, so A is not less likely to be in a pond than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, snake), so Less(locate at a pond(A), locate at a pond(B))", ["B is a fish, A is a snake, so A is less likely to be in a pond than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, snake), so Less(locate at a pond(B), locate at a pond(A))", ["A is a fish, B is a snake, so B is less likely to be in a pond than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, snake), so not More(locate at a pond(A), locate at a pond(B))", ["B is a fish, A is a snake, so A is not more likely to be in a pond than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, snake), so not More(locate at a pond(B), locate at a pond(A))", ["A is a fish, B is a snake, so B is not more likely to be in a pond than A"]]}
{"original": ["animal(A, deer) and animal(B, dolphin), so More(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["A is a deer, B is a dolphin, so A is more likely to be in north america than B"]], "negated": ["animal(A, deer) and animal(B, dolphin), so not Less(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["A is a deer, B is a dolphin, so A is not less likely to be in africa than B"]], "asymmetric_premise": ["animal(B, deer) and animal(A, dolphin), so Less(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["B is a deer, A is a dolphin, so A is less likely to be in north america than B"]], "asymmetric_conclusion": ["animal(A, deer) and animal(B, dolphin), so Less(locate at north america and antelopes in africa(B), locate at north america and antelopes in africa(A))", ["A is a deer, B is a dolphin, so B is less likely to be in africa than A"]], "negated_asymmetric_premise": ["animal(B, deer) and animal(A, dolphin), so not More(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["B is a deer, A is a dolphin, so A is not more likely to be in north america than B"]], "negated_asymmetric_conclusion": ["animal(A, deer) and animal(B, dolphin), so not More(locate at north america and antelopes in africa(B), locate at north america and antelopes in africa(A))", ["A is a deer, B is a dolphin, so B is not more likely to be in north america than A"]]}
{"original": ["animal(A, fish) and animal(B, goat), so More(live underwater(A), live underwater(B))", ["A is a fish, B is a goat, so A is more likely to live underwater than B"]], "negated": ["animal(A, fish) and animal(B, goat), so not Less(live underwater(A), live underwater(B))", ["A is a fish, B is a goat, so A is not less likely to live underwater than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, goat), so Less(live underwater(A), live underwater(B))", ["B is a fish, A is a goat, so A is less likely to live underwater than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, goat), so Less(live underwater(B), live underwater(A))", ["A is a fish, B is a goat, so B is less likely to live underwater than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, goat), so not More(live underwater(A), live underwater(B))", ["B is a fish, A is a goat, so A is not more likely to live underwater than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, goat), so not More(live underwater(B), live underwater(A))", ["A is a fish, B is a goat, so B is not more likely to live underwater than A"]]}
{"original": ["animal(A, rat) and animal(B, lion), so More(press a lever(A), press a lever(B))", ["A is a rat, B is a lion, so A is more likely to press a lever than B"]], "negated": ["animal(A, rat) and animal(B, lion), so not Less(press a lever(A), press a lever(B))", ["A is a rat, B is a lion, so A is not less likely to press a lever than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, lion), so Less(press a lever(A), press a lever(B))", ["B is a rat, A is a lion, so A is less likely to press a lever than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, lion), so Less(press a lever(B), press a lever(A))", ["A is a rat, B is a lion, so B is less likely to press a lever than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, lion), so not More(press a lever(A), press a lever(B))", ["B is a rat, A is a lion, so A is not more likely to press a lever than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, lion), so not More(press a lever(B), press a lever(A))", ["A is a rat, B is a lion, so B is not more likely to press a lever than A"]]}
{"original": ["animal(A, ant) and animal(B, dolphin), so More(locate at the carpet(A), locate at the carpet(B))", ["A is a ant, B is a dolphin, so A is more likely to be on the carpet than B"]], "negated": ["animal(A, ant) and animal(B, dolphin), so not Less(locate at the carpet(A), locate at the carpet(B))", ["A is a ant, B is a dolphin, so A is not less likely to be on the carpet than B"]], "asymmetric_premise": ["animal(B, ant) and animal(A, dolphin), so Less(locate at the carpet(A), locate at the carpet(B))", ["B is a ant, A is a dolphin, so A is less likely to be on the carpet than B"]], "asymmetric_conclusion": ["animal(A, ant) and animal(B, dolphin), so Less(locate at the carpet(B), locate at the carpet(A))", ["A is a ant, B is a dolphin, so B is less likely to be on the carpet than A"]], "negated_asymmetric_premise": ["animal(B, ant) and animal(A, dolphin), so not More(locate at the carpet(A), locate at the carpet(B))", ["B is a ant, A is a dolphin, so A is not more likely to be on the carpet than B"]], "negated_asymmetric_conclusion": ["animal(A, ant) and animal(B, dolphin), so not More(locate at the carpet(B), locate at the carpet(A))", ["A is a ant, B is a dolphin, so B is not more likely to be on the carpet than A"]]}
{"original": ["animal(A, tiger) and animal(B, dolphin), so More(drink water(A), drink water(B))", ["A is a tiger, B is a dolphin, so A is more likely to drink water than B"]], "negated": ["animal(A, tiger) and animal(B, dolphin), so not Less(drink water(A), drink water(B))", ["A is a tiger, B is a dolphin, so A is not less likely to drink water than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, dolphin), so Less(drink water(A), drink water(B))", ["B is a tiger, A is a dolphin, so A is less likely to drink water than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, dolphin), so Less(drink water(B), drink water(A))", ["A is a tiger, B is a dolphin, so B is less likely to drink water than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, dolphin), so not More(drink water(A), drink water(B))", ["B is a tiger, A is a dolphin, so A is not more likely to drink water than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, dolphin), so not More(drink water(B), drink water(A))", ["A is a tiger, B is a dolphin, so B is not more likely to drink water than A"]]}
{"original": ["animal(A, shark) and animal(B, kangaroo), so More(locate at the gulf of mexico(A), locate at the gulf of mexico(B))", ["A is a shark, B is a kangaroo, so A is more likely to be in the gulf of mexico than B"]], "negated": ["animal(A, shark) and animal(B, kangaroo), so not Less(locate at the gulf of mexico(A), locate at the gulf of mexico(B))", ["A is a shark, B is a kangaroo, so A is not less likely to be in the gulf of mexico than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, kangaroo), so Less(locate at the gulf of mexico(A), locate at the gulf of mexico(B))", ["B is a shark, A is a kangaroo, so A is less likely to be in the gulf of mexico than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, kangaroo), so Less(locate at the gulf of mexico(B), locate at the gulf of mexico(A))", ["A is a shark, B is a kangaroo, so B is less likely to be in the gulf of mexico than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, kangaroo), so not More(locate at the gulf of mexico(A), locate at the gulf of mexico(B))", ["B is a shark, A is a kangaroo, so A is not more likely to be in the gulf of mexico than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, kangaroo), so not More(locate at the gulf of mexico(B), locate at the gulf of mexico(A))", ["A is a shark, B is a kangaroo, so B is not more likely to be in the gulf of mexico than A"]]}
{"original": ["animal(A, monkey) and animal(B, crocodile), so More(throw a banana(A), throw a banana(B))", ["A is a monkey, B is a crocodile, so A is more likely to throw a banana than B"]], "negated": ["animal(A, monkey) and animal(B, crocodile), so not Less(throw a banana(A), throw a banana(B))", ["A is a monkey, B is a crocodile, so A is not less likely to throw a banana than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, crocodile), so Less(throw a banana(A), throw a banana(B))", ["B is a monkey, A is a crocodile, so A is less likely to throw a banana than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, crocodile), so Less(throw a banana(B), throw a banana(A))", ["A is a monkey, B is a crocodile, so B is less likely to throw a banana than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, crocodile), so not More(throw a banana(A), throw a banana(B))", ["B is a monkey, A is a crocodile, so A is not more likely to throw a banana than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, crocodile), so not More(throw a banana(B), throw a banana(A))", ["A is a monkey, B is a crocodile, so B is not more likely to throw a banana than A"]]}
{"original": ["animal(A, snake) and animal(B, giraffe), so More( be rude(A),  be rude(B))", ["A is a snake, B is a giraffe, so A is more likely to be rude than B"]], "negated": ["animal(A, snake) and animal(B, giraffe), so not Less( be rude(A),  be rude(B))", ["A is a snake, B is a giraffe, so A is not less likely to be rude than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, giraffe), so Less( be rude(A),  be rude(B))", ["B is a snake, A is a giraffe, so A is less likely to be rude than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, giraffe), so Less( be rude(B),  be rude(A))", ["A is a snake, B is a giraffe, so B is less likely to be rude than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, giraffe), so not More( be rude(A),  be rude(B))", ["B is a snake, A is a giraffe, so A is not more likely to be rude than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, giraffe), so not More( be rude(B),  be rude(A))", ["A is a snake, B is a giraffe, so B is not more likely to be rude than A"]]}
{"original": ["animal(A, lion) and animal(B, pig), so More(roar(A), roar(B))", ["A is a lion, B is a pig, so A is more likely to roar than B"]], "negated": ["animal(A, lion) and animal(B, pig), so not Less(roar(A), roar(B))", ["A is a lion, B is a pig, so A is not less likely to roar than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, pig), so Less(roar(A), roar(B))", ["B is a lion, A is a pig, so A is less likely to roar than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, pig), so Less(roar(B), roar(A))", ["A is a lion, B is a pig, so B is less likely to roar than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, pig), so not More(roar(A), roar(B))", ["B is a lion, A is a pig, so A is not more likely to roar than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, pig), so not More(roar(B), roar(A))", ["A is a lion, B is a pig, so B is not more likely to roar than A"]]}
{"original": ["animal(A, cow) and animal(B, tiger), so More(low for her calf(A), low for her calf(B))", ["A is a cow, B is a tiger, so A is more low for her calf than B"]], "negated": ["animal(A, cow) and animal(B, tiger), so not Less(low for her calf(A), low for her calf(B))", ["A is a cow, B is a tiger, so A is not less low for her calf than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, tiger), so Less(low for her calf(A), low for her calf(B))", ["B is a cow, A is a tiger, so A is less low for her calf than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, tiger), so Less(low for her calf(B), low for her calf(A))", ["A is a cow, B is a tiger, so B is less low for her calf than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, tiger), so not More(low for her calf(A), low for her calf(B))", ["B is a cow, A is a tiger, so A is not more low for her calf than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, tiger), so not More(low for her calf(B), low for her calf(A))", ["A is a cow, B is a tiger, so B is not more low for her calf than A"]]}
{"original": ["animal(A, shark) and animal(B, duck), so More(locate at any ocean(A), locate at any ocean(B))", ["A is a shark, B is a duck, so A is more likely to be in the ocean than B"]], "negated": ["animal(A, shark) and animal(B, duck), so not Less(locate at any ocean(A), locate at any ocean(B))", ["A is a shark, B is a duck, so A is not less likely to be in the ocean than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, duck), so Less(locate at any ocean(A), locate at any ocean(B))", ["B is a shark, A is a duck, so A is less likely to be in the ocean than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, duck), so Less(locate at any ocean(B), locate at any ocean(A))", ["A is a shark, B is a duck, so B is less likely to be in the ocean than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, duck), so not More(locate at any ocean(A), locate at any ocean(B))", ["B is a shark, A is a duck, so A is not more likely to be in the ocean than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, duck), so not More(locate at any ocean(B), locate at any ocean(A))", ["A is a shark, B is a duck, so B is not more likely to be in the ocean than A"]]}
{"original": ["animal(A, alligator) and animal(B, monkey), so More(locate at a swamp(A), locate at a swamp(B))", ["A is a alligator, B is a monkey, so A is more likely to be in a swamp than B"]], "negated": ["animal(A, alligator) and animal(B, monkey), so not Less(locate at a swamp(A), locate at a swamp(B))", ["A is a alligator, B is a monkey, so A is not less likely to be in a swamp than B"]], "asymmetric_premise": ["animal(B, alligator) and animal(A, monkey), so Less(locate at a swamp(A), locate at a swamp(B))", ["B is a alligator, A is a monkey, so A is less likely to be in a swamp than B"]], "asymmetric_conclusion": ["animal(A, alligator) and animal(B, monkey), so Less(locate at a swamp(B), locate at a swamp(A))", ["A is a alligator, B is a monkey, so B is less likely to be in a swamp than A"]], "negated_asymmetric_premise": ["animal(B, alligator) and animal(A, monkey), so not More(locate at a swamp(A), locate at a swamp(B))", ["B is a alligator, A is a monkey, so A is not more likely to be in a swamp than B"]], "negated_asymmetric_conclusion": ["animal(A, alligator) and animal(B, monkey), so not More(locate at a swamp(B), locate at a swamp(A))", ["A is a alligator, B is a monkey, so B is not more likely to be in a swamp than A"]]}
{"original": ["animal(A, squirrel) and animal(B, panda), so More(locate at a street(A), locate at a street(B))", ["A is a squirrel, B is a panda, so A is more likely to be on a street than B"]], "negated": ["animal(A, squirrel) and animal(B, panda), so not Less(locate at a street(A), locate at a street(B))", ["A is a squirrel, B is a panda, so A is not less likely to be on a street than B"]], "asymmetric_premise": ["animal(B, squirrel) and animal(A, panda), so Less(locate at a street(A), locate at a street(B))", ["B is a squirrel, A is a panda, so A is less likely to be on a street than B"]], "asymmetric_conclusion": ["animal(A, squirrel) and animal(B, panda), so Less(locate at a street(B), locate at a street(A))", ["A is a squirrel, B is a panda, so B is less likely to be on a street than A"]], "negated_asymmetric_premise": ["animal(B, squirrel) and animal(A, panda), so not More(locate at a street(A), locate at a street(B))", ["B is a squirrel, A is a panda, so A is not more likely to be on a street than B"]], "negated_asymmetric_conclusion": ["animal(A, squirrel) and animal(B, panda), so not More(locate at a street(B), locate at a street(A))", ["A is a squirrel, B is a panda, so B is not more likely to be on a street than A"]]}
{"original": ["animal(A, wolf) and animal(B, lobster), so More(locate at a forest(A), locate at a forest(B))", ["A is a wolf, B is a lobster, so A is more likely to be in a forest than B"]], "negated": ["animal(A, wolf) and animal(B, lobster), so not Less(locate at a forest(A), locate at a forest(B))", ["A is a wolf, B is a lobster, so A is not less likely to be in a forest than B"]], "asymmetric_premise": ["animal(B, wolf) and animal(A, lobster), so Less(locate at a forest(A), locate at a forest(B))", ["B is a wolf, A is a lobster, so A is less likely to be in a forest than B"]], "asymmetric_conclusion": ["animal(A, wolf) and animal(B, lobster), so Less(locate at a forest(B), locate at a forest(A))", ["A is a wolf, B is a lobster, so B is less likely to be in a forest than A"]], "negated_asymmetric_premise": ["animal(B, wolf) and animal(A, lobster), so not More(locate at a forest(A), locate at a forest(B))", ["B is a wolf, A is a lobster, so A is not more likely to be in a forest than B"]], "negated_asymmetric_conclusion": ["animal(A, wolf) and animal(B, lobster), so not More(locate at a forest(B), locate at a forest(A))", ["A is a wolf, B is a lobster, so B is not more likely to be in a forest than A"]]}
{"original": ["animal(A, squirrel) and animal(B, crocodile), so More(locate at the yard(A), locate at the yard(B))", ["A is a squirrel, B is a crocodile, so A is more likely to be in the yard than B"]], "negated": ["animal(A, squirrel) and animal(B, crocodile), so not Less(locate at the yard(A), locate at the yard(B))", ["A is a squirrel, B is a crocodile, so A is not less likely to be in the yard than B"]], "asymmetric_premise": ["animal(B, squirrel) and animal(A, crocodile), so Less(locate at the yard(A), locate at the yard(B))", ["B is a squirrel, A is a crocodile, so A is less likely to be in the yard than B"]], "asymmetric_conclusion": ["animal(A, squirrel) and animal(B, crocodile), so Less(locate at the yard(B), locate at the yard(A))", ["A is a squirrel, B is a crocodile, so B is less likely to be in the yard than A"]], "negated_asymmetric_premise": ["animal(B, squirrel) and animal(A, crocodile), so not More(locate at the yard(A), locate at the yard(B))", ["B is a squirrel, A is a crocodile, so A is not more likely to be in the yard than B"]], "negated_asymmetric_conclusion": ["animal(A, squirrel) and animal(B, crocodile), so not More(locate at the yard(B), locate at the yard(A))", ["A is a squirrel, B is a crocodile, so B is not more likely to be in the yard than A"]]}
{"original": ["animal(A, bear) and animal(B, alligator), so More(swim(A), swim(B))", ["A is a bear, B is a alligator, so A is more likely to swim than B"]], "negated": ["animal(A, bear) and animal(B, alligator), so not Less(swim(A), swim(B))", ["A is a bear, B is a alligator, so A is not less likely to swim than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, alligator), so Less(swim(A), swim(B))", ["B is a bear, A is an alligator, so A is less likely to swim than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, alligator), so Less(swim(B), swim(A))", ["A is a bear, B is a alligator, so B is less likely to swim than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, alligator), so not More(swim(A), swim(B))", ["B is a bear, A is a alligator, so A is not more likely to swim than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, alligator), so not More(swim(B), swim(A))", ["A is a bear, B is a alligator, so B is not more likely to swim than A"]]}
{"original": ["animal(A, monkey) and animal(B, snail), so More(move from one tree to another(A), move from one tree to another(B))", ["A is a monkey, B is a snail, so A is more likely to move from one tree to another than B"]], "negated": ["animal(A, monkey) and animal(B, snail), so not Less(move from one tree to another(A), move from one tree to another(B))", ["A is a monkey, B is a snail, so A is not less likely to move from one tree to another than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, snail), so Less(move from one tree to another(A), move from one tree to another(B))", ["B is a monkey, A is a snail, so A is less likely to move from one tree to another than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, snail), so Less(move from one tree to another(B), move from one tree to another(A))", ["A is a monkey, B is a snail, so B is less likely to move from one tree to another than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, snail), so not More(move from one tree to another(A), move from one tree to another(B))", ["B is a monkey, A is a snail, so A is not more likely to move from one tree to another than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, snail), so not More(move from one tree to another(B), move from one tree to another(A))", ["A is a monkey, B is a snail, so B is not more likely to move from one tree to another than A"]]}
{"original": ["animal(A, squirrel) and animal(B, eagle), so More(locate at a park(A), locate at a park(B))", ["A is a squirrel, B is a eagle, so A is more likely to be in a park than B"]], "negated": ["animal(A, squirrel) and animal(B, eagle), so not Less(locate at a park(A), locate at a park(B))", ["A is a squirrel, B is a eagle, so A is not less likely to be in a park than B"]], "asymmetric_premise": ["animal(B, squirrel) and animal(A, eagle), so Less(locate at a park(A), locate at a park(B))", ["B is a squirrel, A is a eagle, so A is less likely to be in a park than B"]], "asymmetric_conclusion": ["animal(A, squirrel) and animal(B, eagle), so Less(locate at a park(B), locate at a park(A))", ["A is a squirrel, B is a eagle, so B is less likely to be in a park than A"]], "negated_asymmetric_premise": ["animal(B, squirrel) and animal(A, eagle), so not More(locate at a park(A), locate at a park(B))", ["B is a squirrel, A is a eagle, so A is not more likely to be in a park than B"]], "negated_asymmetric_conclusion": ["animal(A, squirrel) and animal(B, eagle), so not More(locate at a park(B), locate at a park(A))", ["A is a squirrel, B is a eagle, so B is not more likely to be in a park than A"]]}
{"original": ["animal(A, rat) and animal(B, owl), so More(press a lever(A), press a lever(B))", ["A is a rat, B is a owl, so A is more likely to press a lever than B"]], "negated": ["animal(A, rat) and animal(B, owl), so not Less(press a lever(A), press a lever(B))", ["A is a rat, B is a owl, so A is not less likely to press a lever than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, owl), so Less(press a lever(A), press a lever(B))", ["B is a rat, A is a owl, so A is less likely to press a lever than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, owl), so Less(press a lever(B), press a lever(A))", ["A is a rat, B is a owl, so B is less likely to press a lever than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, owl), so not More(press a lever(A), press a lever(B))", ["B is a rat, A is a owl, so A is not more likely to press a lever than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, owl), so not More(press a lever(B), press a lever(A))", ["A is a rat, B is a owl, so B is not more likely to press a lever than A"]]}
{"original": ["animal(A, bird) and animal(B, owl), so More(locate at a nest(A), locate at a nest(B))", ["A is a bird, B is a owl, so A is more likely to be in a nest than B"]], "negated": ["animal(A, bird) and animal(B, owl), so not Less(locate at a nest(A), locate at a nest(B))", ["A is a bird, B is a owl, so A is not less likely to be in a nest than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, owl), so Less(locate at a nest(A), locate at a nest(B))", ["B is a bird, A is a owl, so A is less likely to be in a nest than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, owl), so Less(locate at a nest(B), locate at a nest(A))", ["A is a bird, B is a owl, so B is less likely to be in a nest than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, owl), so not More(locate at a nest(A), locate at a nest(B))", ["B is a bird, A is a owl, so A is not more likely to be in a nest than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, owl), so not More(locate at a nest(B), locate at a nest(A))", ["A is a bird, B is a owl, so B is not more likely to be in a nest than A"]]}
{"original": ["animal(A, monkey) and animal(B, tiger), so More(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["A is a monkey, B is a tiger, so A is more likely to be in a cage at the zoo than B"]], "negated": ["animal(A, monkey) and animal(B, tiger), so not Less(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["A is a monkey, B is a tiger, so A is not less likely to be in a cage at the zoo than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, tiger), so Less(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["B is a monkey, A is a tiger, so A is less likely to be in a cage at the zoo than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, tiger), so Less(locate at a cage at the zoo(B), locate at a cage at the zoo(A))", ["A is a monkey, B is a tiger, so B is less likely to be in a cage at the zoo than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, tiger), so not More(locate at a cage at the zoo(A), locate at a cage at the zoo(B))", ["B is a monkey, A is a tiger, so A is not more likely to be in a cage at the zoo than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, tiger), so not More(locate at a cage at the zoo(B), locate at a cage at the zoo(A))", ["A is a monkey, B is a tiger, so B is not more likely to be in a cage at the zoo than A"]]}
{"original": ["animal(A, turtle) and animal(B, dog), so More(hide in its shell(A), hide in its shell(B))", ["A is a turtle, B is a dog, so A is more likely to hide in its shell than B"]], "negated": ["animal(A, turtle) and animal(B, dog), so not Less(hide in its shell(A), hide in its shell(B))", ["A is a turtle, B is a dog, so A is not less likely to hide in its shell than B"]], "asymmetric_premise": ["animal(B, turtle) and animal(A, dog), so Less(hide in its shell(A), hide in its shell(B))", ["B is a turtle, A is a dog, so A is less likely to hide in its shell than B"]], "asymmetric_conclusion": ["animal(A, turtle) and animal(B, dog), so Less(hide in its shell(B), hide in its shell(A))", ["A is a turtle, B is a dog, so B is less likely to hide in its shell than A"]], "negated_asymmetric_premise": ["animal(B, turtle) and animal(A, dog), so not More(hide in its shell(A), hide in its shell(B))", ["B is a turtle, A is a dog, so A is not more likely to hide in its shell than B"]], "negated_asymmetric_conclusion": ["animal(A, turtle) and animal(B, dog), so not More(hide in its shell(B), hide in its shell(A))", ["A is a turtle, B is a dog, so B is not more likely to hide in its shell than A"]]}
{"original": ["animal(A, cat) and animal(B, giraffe), so More(look at a king(A), look at a king(B))", ["A is a cat, B is a giraffe, so A is more likely to look at a king than B"]], "negated": ["animal(A, cat) and animal(B, giraffe), so not Less(look at a king(A), look at a king(B))", ["A is a cat, B is a giraffe, so A is not less likely to look at a king than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, giraffe), so Less(look at a king(A), look at a king(B))", ["B is a cat, A is a giraffe, so A is less likely to look at a king than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, giraffe), so Less(look at a king(B), look at a king(A))", ["A is a cat, B is a giraffe, so B is less likely to look at a king than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, giraffe), so not More(look at a king(A), look at a king(B))", ["B is a cat, A is a giraffe, so A is not more likely to look at a king than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, giraffe), so not More(look at a king(B), look at a king(A))", ["A is a cat, B is a giraffe, so B is not more likely to look at a king than A"]]}
{"original": ["animal(A, cat) and animal(B, cow), so More(hunt mice(A), hunt mice(B))", ["A is a cat, B is a cow, so A is more likely to hunt mice than B"]], "negated": ["animal(A, cat) and animal(B, cow), so not Less(hunt mice(A), hunt mice(B))", ["A is a cat, B is a cow, so A is not less likely to hunt mice than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, cow), so Less(hunt mice(A), hunt mice(B))", ["B is a cat, A is a cow, so A is less likely to hunt mice than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, cow), so Less(hunt mice(B), hunt mice(A))", ["A is a cat, B is a cow, so B is less likely to hunt mice than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, cow), so not More(hunt mice(A), hunt mice(B))", ["B is a cat, A is a cow, so A is not more likely to hunt mice than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, cow), so not More(hunt mice(B), hunt mice(A))", ["A is a cat, B is a cow, so B is not more likely to hunt mice than A"]]}
{"original": ["animal(A, rabbit) and animal(B, seal), so More(move fast(A), move fast(B))", ["A is a rabbit, B is a seal, so A is more likely to move fast than B"]], "negated": ["animal(A, rabbit) and animal(B, seal), so not Less(move fast(A), move fast(B))", ["A is a rabbit, B is a seal, so A is not less likely to move fast than B"]], "asymmetric_premise": ["animal(B, rabbit) and animal(A, seal), so Less(move fast(A), move fast(B))", ["B is a rabbit, A is a seal, so A is less likely to move fast than B"]], "asymmetric_conclusion": ["animal(A, rabbit) and animal(B, seal), so Less(move fast(B), move fast(A))", ["A is a rabbit, B is a seal, so B is less likely to move fast than A"]], "negated_asymmetric_premise": ["animal(B, rabbit) and animal(A, seal), so not More(move fast(A), move fast(B))", ["B is a rabbit, A is a seal, so A is not more likely to move fast than B"]], "negated_asymmetric_conclusion": ["animal(A, rabbit) and animal(B, seal), so not More(move fast(B), move fast(A))", ["A is a rabbit, B is a seal, so B is not more likely to move fast than A"]]}
{"original": ["animal(A, bee) and animal(B, lobster), so More(locate at any garden(A), locate at any garden(B))", ["A is a bee, B is a lobster, so A is more likely to be in any garden than B"]], "negated": ["animal(A, bee) and animal(B, lobster), so not Less(locate at any garden(A), locate at any garden(B))", ["A is a bee, B is a lobster, so A is not less likely to be in any garden than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, lobster), so Less(locate at any garden(A), locate at any garden(B))", ["B is a bee, A is a lobster, so A is less likely to be in any garden than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, lobster), so Less(locate at any garden(B), locate at any garden(A))", ["A is a bee, B is a lobster, so B is less likely to be in any garden than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, lobster), so not More(locate at any garden(A), locate at any garden(B))", ["B is a bee, A is a lobster, so A is not more likely to be in any garden than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, lobster), so not More(locate at any garden(B), locate at any garden(A))", ["A is a bee, B is a lobster, so B is not more likely to be in any garden than A"]]}
{"original": ["animal(A, wolf) and animal(B, dog), so More(mother its cub(A), mother its cub(B))", ["A is a wolf, B is a dog, so A is more likely to mother its cub than B"]], "negated": ["animal(A, wolf) and animal(B, dog), so not Less(mother its cub(A), mother its cub(B))", ["A is a wolf, B is a dog, so A is not less likely to mother its cub than B"]], "asymmetric_premise": ["animal(B, wolf) and animal(A, dog), so Less(mother its cub(A), mother its cub(B))", ["B is a wolf, A is a dog, so A is less likely to mother its cub than B"]], "asymmetric_conclusion": ["animal(A, wolf) and animal(B, dog), so Less(mother its cub(B), mother its cub(A))", ["A is a wolf, B is a dog, so B is less likely to mother its cub than A"]], "negated_asymmetric_premise": ["animal(B, wolf) and animal(A, dog), so not More(mother its cub(A), mother its cub(B))", ["B is a wolf, A is a dog, so A is not more likely to mother its cub than B"]], "negated_asymmetric_conclusion": ["animal(A, wolf) and animal(B, dog), so not More(mother its cub(B), mother its cub(A))", ["A is a wolf, B is a dog, so B is not more likely to mother its cub than A"]]}
{"original": ["animal(A, monkey) and animal(B, fox), so More(locate at the rain forest(A), locate at the rain forest(B))", ["A is a monkey, B is a fox, so A is more likely to be in the rain forest than B"]], "negated": ["animal(A, monkey) and animal(B, fox), so not Less(locate at the rain forest(A), locate at the rain forest(B))", ["A is a monkey, B is a fox, so A is not less likely to be in the rain forest than B"]], "asymmetric_premise": ["animal(B, monkey) and animal(A, fox), so Less(locate at the rain forest(A), locate at the rain forest(B))", ["B is a monkey, A is a fox, so A is less likely to be in the rain forest than B"]], "asymmetric_conclusion": ["animal(A, monkey) and animal(B, fox), so Less(locate at the rain forest(B), locate at the rain forest(A))", ["A is a monkey, B is a fox, so B is less likely to be in the rain forest than A"]], "negated_asymmetric_premise": ["animal(B, monkey) and animal(A, fox), so not More(locate at the rain forest(A), locate at the rain forest(B))", ["B is a monkey, A is a fox, so A is not more likely to be in the rain forest than B"]], "negated_asymmetric_conclusion": ["animal(A, monkey) and animal(B, fox), so not More(locate at the rain forest(B), locate at the rain forest(A))", ["A is a monkey, B is a fox, so B is not more likely to be in the rain forest than A"]]}
{"original": ["animal(A, dog) and animal(B, shark), so More(locate at the porch(A), locate at the porch(B))", ["A is a dog, B is a shark, so A is more likely to be on the porch than B"]], "negated": ["animal(A, dog) and animal(B, shark), so not Less(locate at the porch(A), locate at the porch(B))", ["A is a dog, B is a shark, so A is not less likely to be on the porch than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, shark), so Less(locate at the porch(A), locate at the porch(B))", ["B is a dog, A is a shark, so A is less likely to be on the porch than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, shark), so Less(locate at the porch(B), locate at the porch(A))", ["A is a dog, B is a shark, so B is less likely to be on the porch than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, shark), so not More(locate at the porch(A), locate at the porch(B))", ["B is a dog, A is a shark, so A is not more likely to be on the porch than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, shark), so not More(locate at the porch(B), locate at the porch(A))", ["A is a dog, B is a shark, so B is not more likely to be on the porch than A"]]}
{"original": ["animal(A, bee) and animal(B, scorpion), so More(try to sting a dog(A), try to sting a dog(B))", ["A is a bee, B is a scorpion, so A is more likely to sting a dog than B"]], "negated": ["animal(A, bee) and animal(B, scorpion), so not Less(try to sting a dog(A), try to sting a dog(B))", ["A is a bee, B is a scorpion, so A is not less likely to sting a dog than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, scorpion), so Less(try to sting a dog(A), try to sting a dog(B))", ["B is a bee, A is a scorpion, so A is less likely to try to sting a dog than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, scorpion), so Less(try to sting a dog(B), try to sting a dog(A))", ["A is a bee, B is a scorpion, so B is less likely to try to sting a dog than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, scorpion), so not More(try to sting a dog(A), try to sting a dog(B))", ["B is a bee, A is a scorpion, so A is not more likely to sting a dog than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, scorpion), so not More(try to sting a dog(B), try to sting a dog(A))", ["A is a bee, B is a scorpion, so B is not more likely to sting a dog than A"]]}
{"original": ["animal(A, rat) and animal(B, snail), so More(locate at a maze(A), locate at a maze(B))", ["A is a rat, B is a snail, so A is more likely to be in a maze than B"]], "negated": ["animal(A, rat) and animal(B, snail), so not Less(locate at a maze(A), locate at a maze(B))", ["A is a rat, B is a snail, so A is not less likely to be in a maze than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, snail), so Less(locate at a maze(A), locate at a maze(B))", ["B is a rat, A is a snail, so A is less likely to be in a maze than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, snail), so Less(locate at a maze(B), locate at a maze(A))", ["A is a rat, B is a snail, so B is less likely to be in a maze than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, snail), so not More(locate at a maze(A), locate at a maze(B))", ["B is a rat, A is a snail, so A is not more likely to be in a maze than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, snail), so not More(locate at a maze(B), locate at a maze(A))", ["A is a rat, B is a snail, so B is not more likely to be in a maze than A"]]}
{"original": ["animal(A, sheep) and animal(B, rat), so More(live in a field(A), live in a field(B))", ["A is a sheep, B is a rat, so A is more likely to live in a field than B"]], "negated": ["animal(A, sheep) and animal(B, rat), so not Less(live in a field(A), live in a field(B))", ["A is a sheep, B is a rat, so A is not less likely to live in a field than B"]], "asymmetric_premise": ["animal(B, sheep) and animal(A, rat), so Less(live in a field(A), live in a field(B))", ["B is a sheep, A is a rat, so A is less likely to live in a field than B"]], "asymmetric_conclusion": ["animal(A, sheep) and animal(B, rat), so Less(live in a field(B), live in a field(A))", ["A is a sheep, B is a rat, so B is less likely to live in a field than A"]], "negated_asymmetric_premise": ["animal(B, sheep) and animal(A, rat), so not More(live in a field(A), live in a field(B))", ["B is a sheep, A is a rat, so A is not more likely to live in a field than B"]], "negated_asymmetric_conclusion": ["animal(A, sheep) and animal(B, rat), so not More(live in a field(B), live in a field(A))", ["A is a sheep, B is a rat, so B is not more likely to live in a field than A"]]}
{"original": ["animal(A, owl) and animal(B, seal), so More(hear a mouse(A), hear a mouse(B))", ["A is a owl, B is a seal, so A is more likely to hear a mouse than B"]], "negated": ["animal(A, owl) and animal(B, seal), so not Less(hear a mouse(A), hear a mouse(B))", ["A is a owl, B is a seal, so A is not less likely to hear a mouse than B"]], "asymmetric_premise": ["animal(B, owl) and animal(A, seal), so Less(hear a mouse(A), hear a mouse(B))", ["B is a owl, A is a seal, so A is less likely to hear a mouse than B"]], "asymmetric_conclusion": ["animal(A, owl) and animal(B, seal), so Less(hear a mouse(B), hear a mouse(A))", ["A is a owl, B is a seal, so B is less likely to hear a mouse than A"]], "negated_asymmetric_premise": ["animal(B, owl) and animal(A, seal), so not More(hear a mouse(A), hear a mouse(B))", ["B is a owl, A is a seal, so A is not more likely to hear a mouse than B"]], "negated_asymmetric_conclusion": ["animal(A, owl) and animal(B, seal), so not More(hear a mouse(B), hear a mouse(A))", ["A is a owl, B is a seal, so B is not more likely to hear a mouse than A"]]}
{"original": ["animal(A, frog) and animal(B, chimpanzee), so More(leap(A), leap(B))", ["A is a frog, B is a chimpanzee, so A is more likely to leap than B"]], "negated": ["animal(A, frog) and animal(B, chimpanzee), so not Less(leap(A), leap(B))", ["A is a frog, B is a chimpanzee, so A is not less likely to leap than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, chimpanzee), so Less(leap(A), leap(B))", ["B is a frog, A is a chimpanzee, so A is less likely to leap than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, chimpanzee), so Less(leap(B), leap(A))", ["A is a frog, B is a chimpanzee, so B is less likely to leap than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, chimpanzee), so not More(leap(A), leap(B))", ["B is a frog, A is a chimpanzee, so A is not more likely to leap than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, chimpanzee), so not More(leap(B), leap(A))", ["A is a frog, B is a chimpanzee, so B is not more likely to leap than A"]]}
{"original": ["animal(A, fox) and animal(B, eagle), so More(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["A is a fox, B is a eagle, so A is more likely to tail a rabbit in the woods than B"]], "negated": ["animal(A, fox) and animal(B, eagle), so not Less(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["A is a fox, B is a eagle, so A is not less likely to tail a rabbit in the woods than B"]], "asymmetric_premise": ["animal(B, fox) and animal(A, eagle), so Less(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["B is a fox, A is a eagle, so A is less likely to tail a rabbit in the woods than B"]], "asymmetric_conclusion": ["animal(A, fox) and animal(B, eagle), so Less(tail a rabbit in the woods(B), tail a rabbit in the woods(A))", ["A is a fox, B is a eagle, so B is less likely to tail a rabbit in the woods than A"]], "negated_asymmetric_premise": ["animal(B, fox) and animal(A, eagle), so not More(tail a rabbit in the woods(A), tail a rabbit in the woods(B))", ["B is a fox, A is a eagle, so A is not more likely to tail a rabbit in the woods than B"]], "negated_asymmetric_conclusion": ["animal(A, fox) and animal(B, eagle), so not More(tail a rabbit in the woods(B), tail a rabbit in the woods(A))", ["A is a fox, B is a eagle, so B is not more likely to tail a rabbit in the woods than A"]]}
{"original": ["animal(A, fox) and animal(B, kangaroo), so More(locate at a box(A), locate at a box(B))", ["A is a fox, B is a kangaroo, so A is more likely to be in a box than B"]], "negated": ["animal(A, fox) and animal(B, kangaroo), so not Less(locate at a box(A), locate at a box(B))", ["A is a fox, B is a kangaroo, so A is not less likely to be in a box than B"]], "asymmetric_premise": ["animal(B, fox) and animal(A, kangaroo), so Less(locate at a box(A), locate at a box(B))", ["B is a fox, A is a kangaroo, so A is less likely to be in a box than B"]], "asymmetric_conclusion": ["animal(A, fox) and animal(B, kangaroo), so Less(locate at a box(B), locate at a box(A))", ["A is a fox, B is a kangaroo, so B is less likely to be in a box than A"]], "negated_asymmetric_premise": ["animal(B, fox) and animal(A, kangaroo), so not More(locate at a box(A), locate at a box(B))", ["B is a fox, A is a kangaroo, so A is not more likely to be in a box than B"]], "negated_asymmetric_conclusion": ["animal(A, fox) and animal(B, kangaroo), so not More(locate at a box(B), locate at a box(A))", ["A is a fox, B is a kangaroo, so B is not more likely to be in a box than A"]]}
{"original": ["animal(A, rat) and animal(B, deer), so More(race through a maze(A), race through a maze(B))", ["A is a rat, B is a deer, so A is more likely to race through a maze than B"]], "negated": ["animal(A, rat) and animal(B, deer), so not Less(race through a maze(A), race through a maze(B))", ["A is a rat, B is a deer, so A is not less likely to race through a maze than B"]], "asymmetric_premise": ["animal(B, rat) and animal(A, deer), so Less(race through a maze(A), race through a maze(B))", ["B is a rat, A is a deer, so A is less likely to race through a maze than B"]], "asymmetric_conclusion": ["animal(A, rat) and animal(B, deer), so Less(race through a maze(B), race through a maze(A))", ["A is a rat, B is a deer, so B is less likely to race through a maze than A"]], "negated_asymmetric_premise": ["animal(B, rat) and animal(A, deer), so not More(race through a maze(A), race through a maze(B))", ["B is a rat, A is a deer, so A is not more likely to race through a maze than B"]], "negated_asymmetric_conclusion": ["animal(A, rat) and animal(B, deer), so not More(race through a maze(B), race through a maze(A))", ["A is a rat, B is a deer, so B is not more likely to race through a maze than A"]]}
{"original": ["animal(A, cow) and animal(B, bird), so More(locate at a farmyard(A), locate at a farmyard(B))", ["A is a cow, B is a bird, so A is more likely to be in a farmyard than B"]], "negated": ["animal(A, cow) and animal(B, bird), so not Less(locate at a farmyard(A), locate at a farmyard(B))", ["A is a cow, B is a bird, so A is not less likely to be in a farmyard than B"]], "asymmetric_premise": ["animal(B, cow) and animal(A, bird), so Less(locate at a farmyard(A), locate at a farmyard(B))", ["B is a cow, A is a bird, so A is less likely to be in a farmyard than B"]], "asymmetric_conclusion": ["animal(A, cow) and animal(B, bird), so Less(locate at a farmyard(B), locate at a farmyard(A))", ["A is a cow, B is a bird, so B is less likely to be in a farmyard than A"]], "negated_asymmetric_premise": ["animal(B, cow) and animal(A, bird), so not More(locate at a farmyard(A), locate at a farmyard(B))", ["B is a cow, A is a bird, so A is not more likely to be in a farmyard than B"]], "negated_asymmetric_conclusion": ["animal(A, cow) and animal(B, bird), so not More(locate at a farmyard(B), locate at a farmyard(A))", ["A is a cow, B is a bird, so B is not more likely to be in a farmyard than A"]]}
{"original": ["animal(A, bee) and animal(B, seal), so More(locate at a field of flowers(A), locate at a field of flowers(B))", ["A is a bee, B is a seal, so A is more likely to be in a field of flowers than B"]], "negated": ["animal(A, bee) and animal(B, seal), so not Less(locate at a field of flowers(A), locate at a field of flowers(B))", ["A is a bee, B is a seal, so A is not less likely to be in a field of flowers than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, seal), so Less(locate at a field of flowers(A), locate at a field of flowers(B))", ["B is a bee, A is a seal, so A is less likely to be in a field of flowers than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, seal), so Less(locate at a field of flowers(B), locate at a field of flowers(A))", ["A is a bee, B is a seal, so B is less likely to be in a field of flowers than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, seal), so not More(locate at a field of flowers(A), locate at a field of flowers(B))", ["B is a bee, A is a seal, so A is not more likely to be in a field of flowers than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, seal), so not More(locate at a field of flowers(B), locate at a field of flowers(A))", ["A is a bee, B is a seal, so B is not more likely to be in a field of flowers than A"]]}
{"original": ["animal(A, dog) and animal(B, bee), so More(guide a blind person(A), guide a blind person(B))", ["A is a dog, B is a bee, so A is more likely to guide a blind person than B"]], "negated": ["animal(A, dog) and animal(B, bee), so not Less(guide a blind person(A), guide a blind person(B))", ["A is a dog, B is a bee, so A is not less likely to guide a blind person than B"]], "asymmetric_premise": ["animal(B, dog) and animal(A, bee), so Less(guide a blind person(A), guide a blind person(B))", ["B is a dog, A is a bee, so A is less likely to guide a blind person than B"]], "asymmetric_conclusion": ["animal(A, dog) and animal(B, bee), so Less(guide a blind person(B), guide a blind person(A))", ["A is a dog, B is a bee, so B is less likely to guide a blind person than A"]], "negated_asymmetric_premise": ["animal(B, dog) and animal(A, bee), so not More(guide a blind person(A), guide a blind person(B))", ["B is a dog, A is a bee, so A is not more likely to guide a blind person than B"]], "negated_asymmetric_conclusion": ["animal(A, dog) and animal(B, bee), so not More(guide a blind person(B), guide a blind person(A))", ["A is a dog, B is a bee, so B is not more likely to guide a blind person than A"]]}
{"original": ["animal(A, wolf) and animal(B, fish), so More(mother its cub(A), mother its cub(B))", ["A is a wolf, B is a fish, so A is more likely to mother its cub than B"]], "negated": ["animal(A, wolf) and animal(B, fish), so not Less(mother its cub(A), mother its cub(B))", ["A is a wolf, B is a fish, so A is not less likely to mother its cub than B"]], "asymmetric_premise": ["animal(B, wolf) and animal(A, fish), so Less(mother its cub(A), mother its cub(B))", ["B is a wolf, A is a fish, so A is less likely to mother its cub than B"]], "asymmetric_conclusion": ["animal(A, wolf) and animal(B, fish), so Less(mother its cub(B), mother its cub(A))", ["A is a wolf, B is a fish, so B is less likely to mother its cub than A"]], "negated_asymmetric_premise": ["animal(B, wolf) and animal(A, fish), so not More(mother its cub(A), mother its cub(B))", ["B is a wolf, A is a fish, so A is not more likely to mother its cub than B"]], "negated_asymmetric_conclusion": ["animal(A, wolf) and animal(B, fish), so not More(mother its cub(B), mother its cub(A))", ["A is a wolf, B is a fish, so B is not more likely to mother its cub than A"]]}
{"original": ["animal(A, lion) and animal(B, ant), so More(father some cubs(A), father some cubs(B))", ["A is a lion, B is a ant, so A is more likely to father some cubs than B"]], "negated": ["animal(A, lion) and animal(B, ant), so not Less(father some cubs(A), father some cubs(B))", ["A is a lion, B is a ant, so A is not less likely to father some cubs than B"]], "asymmetric_premise": ["animal(B, lion) and animal(A, ant), so Less(father some cubs(A), father some cubs(B))", ["B is a lion, A is a ant, so A is less likely to father some cubs than B"]], "asymmetric_conclusion": ["animal(A, lion) and animal(B, ant), so Less(father some cubs(B), father some cubs(A))", ["A is a lion, B is a ant, so B is less likely to father some cubs than A"]], "negated_asymmetric_premise": ["animal(B, lion) and animal(A, ant), so not More(father some cubs(A), father some cubs(B))", ["B is a lion, A is a ant, so A is not more likely to father some cubs than B"]], "negated_asymmetric_conclusion": ["animal(A, lion) and animal(B, ant), so not More(father some cubs(B), father some cubs(A))", ["A is a lion, B is a ant, so B is not more likely to father some cubs than A"]]}
{"original": ["animal(A, bee) and animal(B, fish), so More(locate at an orchard(A), locate at an orchard(B))", ["A is a bee, B is a fish, so A is more likely to be in an orchard than B"]], "negated": ["animal(A, bee) and animal(B, fish), so not Less(locate at an orchard(A), locate at an orchard(B))", ["A is a bee, B is a fish, so A is not less likely to be in an orchard than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, fish), so Less(locate at an orchard(A), locate at an orchard(B))", ["B is a bee, A is a fish, so A is less likely to be in an orchard than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, fish), so Less(locate at an orchard(B), locate at an orchard(A))", ["A is a bee, B is a fish, so B is less likely to be in an orchard than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, fish), so not More(locate at an orchard(A), locate at an orchard(B))", ["B is a bee, A is a fish, so A is not more likely to be in an orchard than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, fish), so not More(locate at an orchard(B), locate at an orchard(A))", ["A is a bee, B is a fish, so B is not more likely to be in an orchard than A"]]}
{"original": ["animal(A, bird) and animal(B, cow), so More(locate at the sea(A), locate at the sea(B))", ["A is a bird, B is a cow, so A is more likely to be in the sea than B"]], "negated": ["animal(A, bird) and animal(B, cow), so not Less(locate at the sea(A), locate at the sea(B))", ["A is a bird, B is a cow, so A is not less likely to be in the sea than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, cow), so Less(locate at the sea(A), locate at the sea(B))", ["B is a bird, A is a cow, so A is less likely to be in the sea than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, cow), so Less(locate at the sea(B), locate at the sea(A))", ["A is a bird, B is a cow, so B is less likely to be in the sea than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, cow), so not More(locate at the sea(A), locate at the sea(B))", ["B is a bird, A is a cow, so A is not more likely to be in the sea than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, cow), so not More(locate at the sea(B), locate at the sea(A))", ["A is a bird, B is a cow, so B is not more likely to be in the sea than A"]]}
{"original": ["animal(A, deer) and animal(B, crocodile), so More(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["A is a deer, B is a crocodile, so A is more likely to be in north america than B"]], "negated": ["animal(A, deer) and animal(B, crocodile), so not Less(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["A is a deer, B is a crocodile, so A is not less likely to be in africa than B"]], "asymmetric_premise": ["animal(B, deer) and animal(A, crocodile), so Less(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["B is a deer, A is a crocodile, so A is less likely to be in north america than B"]], "asymmetric_conclusion": ["animal(A, deer) and animal(B, crocodile), so Less(locate at north america and antelopes in africa(B), locate at north america and antelopes in africa(A))", ["A is a deer, B is a crocodile, so B is less likely to be in north america than A"]], "negated_asymmetric_premise": ["animal(B, deer) and animal(A, crocodile), so not More(locate at north america and antelopes in africa(A), locate at north america and antelopes in africa(B))", ["B is a deer, A is a crocodile, so A is not more likely to be in north america than B"]], "negated_asymmetric_conclusion": ["animal(A, deer) and animal(B, crocodile), so not More(locate at north america and antelopes in africa(B), locate at north america and antelopes in africa(A))", ["A is a deer, B is a crocodile, so B is not more likely to be in north america than A"]]}
{"original": ["animal(A, bear) and animal(B, scorpion), so More(hunt a rabbit(A), hunt a rabbit(B))", ["A is a bear, B is a scorpion, so A is more likely to hunt a rabbit than B"]], "negated": ["animal(A, bear) and animal(B, scorpion), so not Less(hunt a rabbit(A), hunt a rabbit(B))", ["A is a bear, B is a scorpion, so A is not less likely to hunt a rabbit than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, scorpion), so Less(hunt a rabbit(A), hunt a rabbit(B))", ["B is a bear, A is a scorpion, so A is less likely to hunt a rabbit than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, scorpion), so Less(hunt a rabbit(B), hunt a rabbit(A))", ["A is a bear, B is a scorpion, so B is less likely to hunt a rabbit than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, scorpion), so not More(hunt a rabbit(A), hunt a rabbit(B))", ["B is a bear, A is a scorpion, so A is not more likely to hunt a rabbit than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, scorpion), so not More(hunt a rabbit(B), hunt a rabbit(A))", ["A is a bear, B is a scorpion, so B is not more likely to hunt a rabbit than A"]]}
{"original": ["animal(A, tiger) and animal(B, eagle), so More(drink water(A), drink water(B))", ["A is a tiger, B is a eagle, so A is more likely to drink water than B"]], "negated": ["animal(A, tiger) and animal(B, eagle), so not Less(drink water(A), drink water(B))", ["A is a tiger, B is a eagle, so A is not less likely to drink water than B"]], "asymmetric_premise": ["animal(B, tiger) and animal(A, eagle), so Less(drink water(A), drink water(B))", ["B is a tiger, A is a eagle, so A is less likely to drink water than B"]], "asymmetric_conclusion": ["animal(A, tiger) and animal(B, eagle), so Less(drink water(B), drink water(A))", ["A is a tiger, B is a eagle, so B is less likely to drink water than A"]], "negated_asymmetric_premise": ["animal(B, tiger) and animal(A, eagle), so not More(drink water(A), drink water(B))", ["B is a tiger, A is a eagle, so A is not more likely to drink water than B"]], "negated_asymmetric_conclusion": ["animal(A, tiger) and animal(B, eagle), so not More(drink water(B), drink water(A))", ["A is a tiger, B is a eagle, so B is not more likely to drink water than A"]]}
{"original": ["animal(A, cat) and animal(B, dog), so More(locate at someone's home(A), locate at someone's home(B))", ["A is a cat, B is a dog, so A is more likely to be in someone's home than B"]], "negated": ["animal(A, cat) and animal(B, dog), so not Less(locate at someone's home(A), locate at someone's home(B))", ["A is a cat, B is a dog, so A is not less likely to be in someone's home than B"]], "asymmetric_premise": ["animal(B, cat) and animal(A, dog), so Less(locate at someone's home(A), locate at someone's home(B))", ["B is a cat, A is a dog, so A is less likely to be in someone's home than B"]], "asymmetric_conclusion": ["animal(A, cat) and animal(B, dog), so Less(locate at someone's home(B), locate at someone's home(A))", ["A is a cat, B is a dog, so B is less likely to be in someone's home than A"]], "negated_asymmetric_premise": ["animal(B, cat) and animal(A, dog), so not More(locate at someone's home(A), locate at someone's home(B))", ["B is a cat, A is a dog, so A is not more likely to be in someone's home than B"]], "negated_asymmetric_conclusion": ["animal(A, cat) and animal(B, dog), so not More(locate at someone's home(B), locate at someone's home(A))", ["A is a cat, B is a dog, so B is not more likely to be in someone's home than A"]]}
{"original": ["animal(A, elephant) and animal(B, tiger), so More(carry a trunk(A), carry a trunk(B))", ["A is a elephant, B is a tiger, so A is more likely to carry a trunk than B"]], "negated": ["animal(A, elephant) and animal(B, tiger), so not Less(carry a trunk(A), carry a trunk(B))", ["A is a elephant, B is a tiger, so A is not less likely to carry a trunk than B"]], "asymmetric_premise": ["animal(B, elephant) and animal(A, tiger), so Less(carry a trunk(A), carry a trunk(B))", ["B is a elephant, A is a tiger, so A is less likely to carry a trunk than B"]], "asymmetric_conclusion": ["animal(A, elephant) and animal(B, tiger), so Less(carry a trunk(B), carry a trunk(A))", ["A is a elephant, B is a tiger, so B is less likely to carry a trunk than A"]], "negated_asymmetric_premise": ["animal(B, elephant) and animal(A, tiger), so not More(carry a trunk(A), carry a trunk(B))", ["B is a elephant, A is a tiger, so A is not more likely to carry a trunk than B"]], "negated_asymmetric_conclusion": ["animal(A, elephant) and animal(B, tiger), so not More(carry a trunk(B), carry a trunk(A))", ["A is a elephant, B is a tiger, so B is not more likely to carry a trunk than A"]]}
{"original": ["animal(A, squirrel) and animal(B, duck), so More(locate at a forest(A), locate at a forest(B))", ["A is a squirrel, B is a duck, so A is more likely to be in a forest than B"]], "negated": ["animal(A, squirrel) and animal(B, duck), so not Less(locate at a forest(A), locate at a forest(B))", ["A is a squirrel, B is a duck, so A is not less likely to be in a forest than B"]], "asymmetric_premise": ["animal(B, squirrel) and animal(A, duck), so Less(locate at a forest(A), locate at a forest(B))", ["B is a squirrel, A is a duck, so A is less likely to be in a forest than B"]], "asymmetric_conclusion": ["animal(A, squirrel) and animal(B, duck), so Less(locate at a forest(B), locate at a forest(A))", ["A is a squirrel, B is a duck, so B is less likely to be in a forest than A"]], "negated_asymmetric_premise": ["animal(B, squirrel) and animal(A, duck), so not More(locate at a forest(A), locate at a forest(B))", ["B is a squirrel, A is a duck, so A is not more likely to be in a forest than B"]], "negated_asymmetric_conclusion": ["animal(A, squirrel) and animal(B, duck), so not More(locate at a forest(B), locate at a forest(A))", ["A is a squirrel, B is a duck, so B is not more likely to be in a forest than A"]]}
{"original": ["animal(A, squirrel) and animal(B, goat), so More(locate at a park(A), locate at a park(B))", ["A is a squirrel, B is a goat, so A is more likely to be in a park than B"]], "negated": ["animal(A, squirrel) and animal(B, goat), so not Less(locate at a park(A), locate at a park(B))", ["A is a squirrel, B is a goat, so A is not less likely to be in a park than B"]], "asymmetric_premise": ["animal(B, squirrel) and animal(A, goat), so Less(locate at a park(A), locate at a park(B))", ["B is a squirrel, A is a goat, so A is less likely to be in a park than B"]], "asymmetric_conclusion": ["animal(A, squirrel) and animal(B, goat), so Less(locate at a park(B), locate at a park(A))", ["A is a squirrel, B is a goat, so B is less likely to be in a park than A"]], "negated_asymmetric_premise": ["animal(B, squirrel) and animal(A, goat), so not More(locate at a park(A), locate at a park(B))", ["B is a squirrel, A is a goat, so A is not more likely to be in a park than B"]], "negated_asymmetric_conclusion": ["animal(A, squirrel) and animal(B, goat), so not More(locate at a park(B), locate at a park(A))", ["A is a squirrel, B is a goat, so B is not more likely to be in a park than A"]]}
{"original": ["animal(A, fly) and animal(B, kangaroo), so More(locate at the sky(A), locate at the sky(B))", ["A is a fly, B is a kangaroo, so A is more likely to be in the sky than B"]], "negated": ["animal(A, fly) and animal(B, kangaroo), so not Less(locate at the sky(A), locate at the sky(B))", ["A is a fly, B is a kangaroo, so A is not less likely to be in the sky than B"]], "asymmetric_premise": ["animal(B, fly) and animal(A, kangaroo), so Less(locate at the sky(A), locate at the sky(B))", ["B is a fly, A is a kangaroo, so A is less likely to be in the sky than B"]], "asymmetric_conclusion": ["animal(A, fly) and animal(B, kangaroo), so Less(locate at the sky(B), locate at the sky(A))", ["A is a fly, B is a kangaroo, so B is less likely to be in the sky than A"]], "negated_asymmetric_premise": ["animal(B, fly) and animal(A, kangaroo), so not More(locate at the sky(A), locate at the sky(B))", ["B is a fly, A is a kangaroo, so A is not more likely to be in the sky than B"]], "negated_asymmetric_conclusion": ["animal(A, fly) and animal(B, kangaroo), so not More(locate at the sky(B), locate at the sky(A))", ["A is a fly, B is a kangaroo, so B is not more likely to be in the sky than A"]]}
{"original": ["animal(A, fish) and animal(B, panda), so More(locate at a lake(A), locate at a lake(B))", ["A is a fish, B is a panda, so A is more likely to be in a lake than B"]], "negated": ["animal(A, fish) and animal(B, panda), so not Less(locate at a lake(A), locate at a lake(B))", ["A is a fish, B is a panda, so A is not less likely to be in a lake than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, panda), so Less(locate at a lake(A), locate at a lake(B))", ["B is a fish, A is a panda, so A is less likely to be in a lake than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, panda), so Less(locate at a lake(B), locate at a lake(A))", ["A is a fish, B is a panda, so B is less likely to be in a lake than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, panda), so not More(locate at a lake(A), locate at a lake(B))", ["B is a fish, A is a panda, so A is not more likely to be in a lake than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, panda), so not More(locate at a lake(B), locate at a lake(A))", ["A is a fish, B is a panda, so B is not more likely to be in a lake than A"]]}
{"original": ["animal(A, pig) and animal(B, rat), so More(locate at a poke(A), locate at a poke(B))", ["A is a pig, B is a rat, so A is more likely to be in a poke than B"]], "negated": ["animal(A, pig) and animal(B, rat), so not Less(locate at a poke(A), locate at a poke(B))", ["A is a pig, B is a rat, so A is not less likely to be in a poke than B"]], "asymmetric_premise": ["animal(B, pig) and animal(A, rat), so Less(locate at a poke(A), locate at a poke(B))", ["B is a pig, A is a rat, so A is less likely to be in a poke than B"]], "asymmetric_conclusion": ["animal(A, pig) and animal(B, rat), so Less(locate at a poke(B), locate at a poke(A))", ["A is a pig, B is a rat, so B is less likely to be in a poke than A"]], "negated_asymmetric_premise": ["animal(B, pig) and animal(A, rat), so not More(locate at a poke(A), locate at a poke(B))", ["B is a pig, A is a rat, so A is not more likely to be in a poke than B"]], "negated_asymmetric_conclusion": ["animal(A, pig) and animal(B, rat), so not More(locate at a poke(B), locate at a poke(A))", ["A is a pig, B is a rat, so B is not more likely to be in a poke than A"]]}
{"original": ["animal(A, bear) and animal(B, kangaroo), so More(locate at a park(A), locate at a park(B))", ["A is a bear, B is a kangaroo, so A is more likely to be in a park than B"]], "negated": ["animal(A, bear) and animal(B, kangaroo), so not Less(locate at a park(A), locate at a park(B))", ["A is a bear, B is a kangaroo, so A is not less likely to be in a park than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, kangaroo), so Less(locate at a park(A), locate at a park(B))", ["B is a bear, A is a kangaroo, so A is less likely to be in a park than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, kangaroo), so Less(locate at a park(B), locate at a park(A))", ["A is a bear, B is a kangaroo, so B is less likely to be in a park than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, kangaroo), so not More(locate at a park(A), locate at a park(B))", ["B is a bear, A is a kangaroo, so A is not more likely to be in a park than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, kangaroo), so not More(locate at a park(B), locate at a park(A))", ["A is a bear, B is a kangaroo, so B is not more likely to be in a park than A"]]}
{"original": ["animal(A, frog) and animal(B, chimpanzee), so More(win a princess(A), win a princess(B))", ["A is a frog, B is a chimpanzee, so A is more likely to win a princess than B"]], "negated": ["animal(A, frog) and animal(B, chimpanzee), so not Less(win a princess(A), win a princess(B))", ["A is a frog, B is a chimpanzee, so A is not less likely to win a princess than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, chimpanzee), so Less(win a princess(A), win a princess(B))", ["B is a frog, A is a chimpanzee, so A is less likely to win a princess than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, chimpanzee), so Less(win a princess(B), win a princess(A))", ["A is a frog, B is a chimpanzee, so B is less likely to win a princess than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, chimpanzee), so not More(win a princess(A), win a princess(B))", ["B is a frog, A is a chimpanzee, so A is not more likely to win a princess than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, chimpanzee), so not More(win a princess(B), win a princess(A))", ["A is a frog, B is a chimpanzee, so B is not more likely to win a princess than A"]]}
{"original": ["animal(A, wolf) and animal(B, chicken), so More(locate at a forest(A), locate at a forest(B))", ["A is a wolf, B is a chicken, so A is more likely to be in a forest than B"]], "negated": ["animal(A, wolf) and animal(B, chicken), so not Less(locate at a forest(A), locate at a forest(B))", ["A is a wolf, B is a chicken, so A is not less likely to be in a forest than B"]], "asymmetric_premise": ["animal(B, wolf) and animal(A, chicken), so Less(locate at a forest(A), locate at a forest(B))", ["B is a wolf, A is a chicken, so A is less likely to be in a forest than B"]], "asymmetric_conclusion": ["animal(A, wolf) and animal(B, chicken), so Less(locate at a forest(B), locate at a forest(A))", ["A is a wolf, B is a chicken, so B is less likely to be in a forest than A"]], "negated_asymmetric_premise": ["animal(B, wolf) and animal(A, chicken), so not More(locate at a forest(A), locate at a forest(B))", ["B is a wolf, A is a chicken, so A is not more likely to be in a forest than B"]], "negated_asymmetric_conclusion": ["animal(A, wolf) and animal(B, chicken), so not More(locate at a forest(B), locate at a forest(A))", ["A is a wolf, B is a chicken, so B is not more likely to be in a forest than A"]]}
{"original": ["animal(A, bear) and animal(B, bird), so More(climb a tree(A), climb a tree(B))", ["A is a bear, B is a bird, so A is more likely to climb a tree than B"]], "negated": ["animal(A, bear) and animal(B, bird), so not Less(climb a tree(A), climb a tree(B))", ["A is a bear, B is a bird, so A is not less likely to climb a tree than B"]], "asymmetric_premise": ["animal(B, bear) and animal(A, bird), so Less(climb a tree(A), climb a tree(B))", ["B is a bear, A is a bird, so A is less likely to climb a tree than B"]], "asymmetric_conclusion": ["animal(A, bear) and animal(B, bird), so Less(climb a tree(B), climb a tree(A))", ["A is a bear, B is a bird, so B is less likely to climb a tree than A"]], "negated_asymmetric_premise": ["animal(B, bear) and animal(A, bird), so not More(climb a tree(A), climb a tree(B))", ["B is a bear, A is a bird, so A is not more likely to climb a tree than B"]], "negated_asymmetric_conclusion": ["animal(A, bear) and animal(B, bird), so not More(climb a tree(B), climb a tree(A))", ["A is a bear, B is a bird, so B is not more likely to climb a tree than A"]]}
{"original": ["animal(A, snake) and animal(B, scorpion), so More( be rude(A),  be rude(B))", ["A is a snake, B is a scorpion, so A is more likely to be rude than B"]], "negated": ["animal(A, snake) and animal(B, scorpion), so not Less( be rude(A),  be rude(B))", ["A is a snake, B is a scorpion, so A is not less likely to be rude than B"]], "asymmetric_premise": ["animal(B, snake) and animal(A, scorpion), so Less( be rude(A),  be rude(B))", ["B is a snake, A is a scorpion, so A is less likely to be rude than B"]], "asymmetric_conclusion": ["animal(A, snake) and animal(B, scorpion), so Less( be rude(B),  be rude(A))", ["A is a snake, B is a scorpion, so B is less likely to be rude than A"]], "negated_asymmetric_premise": ["animal(B, snake) and animal(A, scorpion), so not More( be rude(A),  be rude(B))", ["B is a snake, A is a scorpion, so A is not more likely to be rude than B"]], "negated_asymmetric_conclusion": ["animal(A, snake) and animal(B, scorpion), so not More( be rude(B),  be rude(A))", ["A is a snake, B is a scorpion, so B is not more likely to be rude than A"]]}
{"original": ["animal(A, frog) and animal(B, cheetah), so More(return to the pond(A), return to the pond(B))", ["A is a frog, B is a cheetah, so A is more likely to be in the pond than B"]], "negated": ["animal(A, frog) and animal(B, cheetah), so not Less(return to the pond(A), return to the pond(B))", ["A is a frog, B is a cheetah, so A is not less likely to return to the pond than B"]], "asymmetric_premise": ["animal(B, frog) and animal(A, cheetah), so Less(return to the pond(A), return to the pond(B))", ["B is a frog, A is a cheetah, so A is less likely to return to the pond than B"]], "asymmetric_conclusion": ["animal(A, frog) and animal(B, cheetah), so Less(return to the pond(B), return to the pond(A))", ["A is a frog, B is a cheetah, so B is less likely to return to the pond than A"]], "negated_asymmetric_premise": ["animal(B, frog) and animal(A, cheetah), so not More(return to the pond(A), return to the pond(B))", ["B is a frog, A is a cheetah, so A is not more likely to return to the pond than B"]], "negated_asymmetric_conclusion": ["animal(A, frog) and animal(B, cheetah), so not More(return to the pond(B), return to the pond(A))", ["A is a frog, B is a cheetah, so B is not more likely to return to the pond than A"]]}
{"original": ["animal(A, horse) and animal(B, hamster), so More(run in a pasture(A), run in a pasture(B))", ["A is a horse, B is a hamster, so A is more likely to run in a pasture than B"]], "negated": ["animal(A, horse) and animal(B, hamster), so not Less(run in a pasture(A), run in a pasture(B))", ["A is a horse, B is a hamster, so A is not less likely to run in a pasture than B"]], "asymmetric_premise": ["animal(B, horse) and animal(A, hamster), so Less(run in a pasture(A), run in a pasture(B))", ["B is a horse, A is a hamster, so A is less likely to run in a pasture than B"]], "asymmetric_conclusion": ["animal(A, horse) and animal(B, hamster), so Less(run in a pasture(B), run in a pasture(A))", ["A is a horse, B is a hamster, so B is less likely to run in a pasture than A"]], "negated_asymmetric_premise": ["animal(B, horse) and animal(A, hamster), so not More(run in a pasture(A), run in a pasture(B))", ["B is a horse, A is a hamster, so A is not more likely to run in a pasture than B"]], "negated_asymmetric_conclusion": ["animal(A, horse) and animal(B, hamster), so not More(run in a pasture(B), run in a pasture(A))", ["A is a horse, B is a hamster, so B is not more likely to run in a pasture than A"]]}
{"original": ["animal(A, bee) and animal(B, tiger), so More(locate at any garden(A), locate at any garden(B))", ["A is a bee, B is a tiger, so A is more likely to be in any garden than B"]], "negated": ["animal(A, bee) and animal(B, tiger), so not Less(locate at any garden(A), locate at any garden(B))", ["A is a bee, B is a tiger, so A is not less likely to be in any garden than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, tiger), so Less(locate at any garden(A), locate at any garden(B))", ["B is a bee, A is a tiger, so A is less likely to be in any garden than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, tiger), so Less(locate at any garden(B), locate at any garden(A))", ["A is a bee, B is a tiger, so B is less likely to be in any garden than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, tiger), so not More(locate at any garden(A), locate at any garden(B))", ["B is a bee, A is a tiger, so A is not more likely to be in any garden than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, tiger), so not More(locate at any garden(B), locate at any garden(A))", ["A is a bee, B is a tiger, so B is not more likely to be in any garden than A"]]}
{"original": ["animal(A, chicken) and animal(B, panda), so More(locate at the oven(A), locate at the oven(B))", ["A is a chicken, B is a panda, so A is more likely to be in the oven than B"]], "negated": ["animal(A, chicken) and animal(B, panda), so not Less(locate at the oven(A), locate at the oven(B))", ["A is a chicken, B is a panda, so A is not less likely to be in the oven than B"]], "asymmetric_premise": ["animal(B, chicken) and animal(A, panda), so Less(locate at the oven(A), locate at the oven(B))", ["B is a chicken, A is a panda, so A is less likely to be in the oven than B"]], "asymmetric_conclusion": ["animal(A, chicken) and animal(B, panda), so Less(locate at the oven(B), locate at the oven(A))", ["A is a chicken, B is a panda, so B is less likely to be in the oven than A"]], "negated_asymmetric_premise": ["animal(B, chicken) and animal(A, panda), so not More(locate at the oven(A), locate at the oven(B))", ["B is a chicken, A is a panda, so A is not more likely to be in the oven than B"]], "negated_asymmetric_conclusion": ["animal(A, chicken) and animal(B, panda), so not More(locate at the oven(B), locate at the oven(A))", ["A is a chicken, B is a panda, so B is not more likely to be in the oven than A"]]}
{"original": ["animal(A, kangaroo) and animal(B, frog), so More(jump up and down(A), jump up and down(B))", ["A is a kangaroo, B is a frog, so A is more likely to jump up and down than B"]], "negated": ["animal(A, kangaroo) and animal(B, frog), so not Less(jump up and down(A), jump up and down(B))", ["A is a kangaroo, B is a frog, so A is not less likely to jump up and down than B"]], "asymmetric_premise": ["animal(B, kangaroo) and animal(A, frog), so Less(jump up and down(A), jump up and down(B))", ["B is a kangaroo, A is a frog, so A is less likely to jump up and down than B"]], "asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, frog), so Less(jump up and down(B), jump up and down(A))", ["A is a kangaroo, B is a frog, so B is less likely to jump up and down than A"]], "negated_asymmetric_premise": ["animal(B, kangaroo) and animal(A, frog), so not More(jump up and down(A), jump up and down(B))", ["B is a kangaroo, A is a frog, so A is not more likely to jump up and down than B"]], "negated_asymmetric_conclusion": ["animal(A, kangaroo) and animal(B, frog), so not More(jump up and down(B), jump up and down(A))", ["A is a kangaroo, B is a frog, so B is not more likely to jump up and down than A"]]}
{"original": ["animal(A, shark) and animal(B, eagle), so More(locate at sea world(A), locate at sea world(B))", ["A is a shark, B is a eagle, so A is more likely to be in the sea world than B"]], "negated": ["animal(A, shark) and animal(B, eagle), so not Less(locate at sea world(A), locate at sea world(B))", ["A is a shark, B is a eagle, so A is not less likely to be in the sea world than B"]], "asymmetric_premise": ["animal(B, shark) and animal(A, eagle), so Less(locate at sea world(A), locate at sea world(B))", ["B is a shark, A is a eagle, so A is less likely to be in the sea world than B"]], "asymmetric_conclusion": ["animal(A, shark) and animal(B, eagle), so Less(locate at sea world(B), locate at sea world(A))", ["A is a shark, B is a eagle, so B is less likely to be in the sea world than A"]], "negated_asymmetric_premise": ["animal(B, shark) and animal(A, eagle), so not More(locate at sea world(A), locate at sea world(B))", ["B is a shark, A is a eagle, so A is not more likely to be in the sea world than B"]], "negated_asymmetric_conclusion": ["animal(A, shark) and animal(B, eagle), so not More(locate at sea world(B), locate at sea world(A))", ["A is a shark, B is a eagle, so B is not more likely to be in the sea world than A"]]}
{"original": ["animal(A, fish) and animal(B, dolphin), so More(live in lakes(A), live in lakes(B))", ["A is a fish, B is a dolphin, so A is more likely to live in lakes than B"]], "negated": ["animal(A, fish) and animal(B, dolphin), so not Less(live in lakes(A), live in lakes(B))", ["A is a fish, B is a dolphin, so A is not less likely to live in lakes than B"]], "asymmetric_premise": ["animal(B, fish) and animal(A, dolphin), so Less(live in lakes(A), live in lakes(B))", ["B is a fish, A is a dolphin, so A is less likely to live in lakes than B"]], "asymmetric_conclusion": ["animal(A, fish) and animal(B, dolphin), so Less(live in lakes(B), live in lakes(A))", ["A is a fish, B is a dolphin, so B is less likely to live in lakes than A"]], "negated_asymmetric_premise": ["animal(B, fish) and animal(A, dolphin), so not More(live in lakes(A), live in lakes(B))", ["B is a fish, A is a dolphin, so A is not more likely to live in lakes than B"]], "negated_asymmetric_conclusion": ["animal(A, fish) and animal(B, dolphin), so not More(live in lakes(B), live in lakes(A))", ["A is a fish, B is a dolphin, so B is not more likely to live in lakes than A"]]}
{"original": ["animal(A, owl) and animal(B, rabbit), so More(rest during the day(A), rest during the day(B))", ["A is a owl, B is a rabbit, so A is more likely to rest during the day than B"]], "negated": ["animal(A, owl) and animal(B, rabbit), so not Less(rest during the day(A), rest during the day(B))", ["A is a owl, B is a rabbit, so A is not less likely to rest during the day than B"]], "asymmetric_premise": ["animal(B, owl) and animal(A, rabbit), so Less(rest during the day(A), rest during the day(B))", ["B is a owl, A is a rabbit, so A is less likely to rest during the day than B"]], "asymmetric_conclusion": ["animal(A, owl) and animal(B, rabbit), so Less(rest during the day(B), rest during the day(A))", ["A is a owl, B is a rabbit, so B is less likely to rest during the day than A"]], "negated_asymmetric_premise": ["animal(B, owl) and animal(A, rabbit), so not More(rest during the day(A), rest during the day(B))", ["B is a owl, A is a rabbit, so A is not more likely to rest during the day than B"]], "negated_asymmetric_conclusion": ["animal(A, owl) and animal(B, rabbit), so not More(rest during the day(B), rest during the day(A))", ["A is a owl, B is a rabbit, so B is not more likely to rest during the day than A"]]}
{"original": ["animal(A, bee) and animal(B, crocodile), so More(sting you(A), sting you(B))", ["A is a bee, B is a crocodile, so A is more likely to sting you than B"]], "negated": ["animal(A, bee) and animal(B, crocodile), so not Less(sting you(A), sting you(B))", ["A is a bee, B is a crocodile, so A is not less likely to sting you than B"]], "asymmetric_premise": ["animal(B, bee) and animal(A, crocodile), so Less(sting you(A), sting you(B))", ["B is a bee, A is a crocodile, so A is less likely to sting you than B"]], "asymmetric_conclusion": ["animal(A, bee) and animal(B, crocodile), so Less(sting you(B), sting you(A))", ["A is a bee, B is a crocodile, so B is less likely to sting you than A"]], "negated_asymmetric_premise": ["animal(B, bee) and animal(A, crocodile), so not More(sting you(A), sting you(B))", ["B is a bee, A is a crocodile, so A is not more likely to sting you than B"]], "negated_asymmetric_conclusion": ["animal(A, bee) and animal(B, crocodile), so not More(sting you(B), sting you(A))", ["A is a bee, B is a crocodile, so B is not more likely to sting you than A"]]}
{"original": ["animal(A, bird) and animal(B, fish), so More(head south(A), head south(B))", ["A is a bird, B is a fish, so A is more likely to head south than B"]], "negated": ["animal(A, bird) and animal(B, fish), so not Less(head south(A), head south(B))", ["A is a bird, B is a fish, so A is not less likely to head south than B"]], "asymmetric_premise": ["animal(B, bird) and animal(A, fish), so Less(head south(A), head south(B))", ["B is a bird, A is a fish, so A is less likely to head south than B"]], "asymmetric_conclusion": ["animal(A, bird) and animal(B, fish), so Less(head south(B), head south(A))", ["A is a bird, B is a fish, so B is less likely to head south than A"]], "negated_asymmetric_premise": ["animal(B, bird) and animal(A, fish), so not More(head south(A), head south(B))", ["B is a bird, A is a fish, so A is not more likely to head south than B"]], "negated_asymmetric_conclusion": ["animal(A, bird) and animal(B, fish), so not More(head south(B), head south(A))", ["A is a bird, B is a fish, so B is not more likely to head south than A"]]}
{"original": ["pianist(A,B), so More(perform concert(A), perform concert(B))", ["A is a pianist, B is a violinist, so A is more likely to perform concert than B"]], "negated": ["pianist(A,B), so not Less(perform concert(A), perform concert(B))", ["A is a pianist, B is not, so A is not less likely to perform concert than B"]], "asymmetric_premise": ["pianist(B,A), so Less(perform concert(A), perform concert(B))", ["B is a pianist, A is not, so A is less likely to perform concert than B"]], "asymmetric_conclusion": ["pianist(A,B), so Less(perform concert(B), perform concert(A))", ["A is a pianist, B is a violinist, so B is less likely to perform concert than A"]], "negated_asymmetric_premise": ["pianist(B,A), so not More(perform concert(A), perform concert(B))", ["B is a pianist, A is not, so A is not more likely to perform concert than B"]], "negated_asymmetric_conclusion": ["pianist(A,B), so not More(perform concert(B), perform concert(A))", ["A is a pianist, B is not, so B is not more likely to perform concert than A"]]}
{"original": ["producer(A,B), so More(play musical well(A), play musical well(B))", ["A is a musical producer, B is a musician, so A is more likely to play musical well than B"]], "negated": ["producer(A,B), so not Less(play musical well(A), play musical well(B))", ["A is a musical producer, B is not, so A is not less likely to play musical well than B"]], "asymmetric_premise": ["producer(B,A), so Less(play musical well(A), play musical well(B))", ["B is A's producer, so A is less likely to play musical well than B"]], "asymmetric_conclusion": ["producer(A,B), so Less(play musical well(B), play musical well(A))", ["A is B's producer, so B is less likely to play musical well than A"]], "negated_asymmetric_premise": ["producer(B,A), so not More(play musical well(A), play musical well(B))", ["B is a producer, A is not, so A is not more likely to play musical well than B"]], "negated_asymmetric_conclusion": ["producer(A,B), so not More(play musical well(B), play musical well(A))", ["A is a musical producer, B is not, so B is not more likely to play musical well than A"]]}
{"original": ["engineer(A,B), so More(be engineer(A), be engineer(B))", ["A is a engineer, B is not, so A is more likely to be engineer than B"]], "negated": ["engineer(A,B), so not Less(be engineer(A), be engineer(B))", ["A is a engineer, B is not, so A is not less likely to be engineer than B"]], "asymmetric_premise": ["engineer(B,A), so Less(be engineer(A), be engineer(B))", ["B is a engineer, A is not, so A is less likely to be engineer than B"]], "asymmetric_conclusion": ["engineer(A,B), so Less(be engineer(B), be engineer(A))", ["A is a engineer, B is not, so B is less likely to be engineer than A"]], "negated_asymmetric_premise": ["engineer(B,A), so not More(be engineer(A), be engineer(B))", ["B is not A's engineer, so A is not more likely to be engineer than B"]], "negated_asymmetric_conclusion": ["engineer(A,B), so not More(be engineer(B), be engineer(A))", ["A is not B's engineer, so B is not more likely to be engineer than A"]]}
{"original": ["singer(A,B), so More(act in play(A), act in play(B))", ["A is a singer, B is a dancer, so A is more likely to act in play than B"]], "negated": ["singer(A,B), so not Less(act in play(A), act in play(B))", ["A is a singer, B is a dancer, so A is not less likely to act in play than B"]], "asymmetric_premise": ["singer(B,A), so Less(act in play(A), act in play(B))", ["B is a singer, A is a dancer, so A is less likely to act in play than B"]], "asymmetric_conclusion": ["singer(A,B), so Less(act in play(B), act in play(A))", ["A is a singer, B is a dancer, so B is less likely to act in play than A"]], "negated_asymmetric_premise": ["singer(B,A), so not More(act in play(A), act in play(B))", ["B is a singer, A is not, so A is not more likely to act in play than B"]], "negated_asymmetric_conclusion": ["singer(A,B), so not More(act in play(B), act in play(A))", ["A is a singer, B is not, so B is not more likely to act in play than A"]]}
{"original": ["poet(A,B), so More(express his emotion(A), express his emotion(B))", ["A is a poet, B is a poet, so A is more likely to express his emotion than B"]], "negated": ["poet(A,B), so not Less(express his emotion(A), express his emotion(B))", ["A is a poet, B is not, so A is not less likely to express his emotion than B"]], "asymmetric_premise": ["poet(B,A), so Less(express his emotion(A), express his emotion(B))", ["B is a poet, A is not, so A is less likely to express his emotion than B"]], "asymmetric_conclusion": ["poet(A,B), so Less(express his emotion(B), express his emotion(A))", ["A is a poet, B is not, so B is less likely to express his emotion than A"]], "negated_asymmetric_premise": ["poet(B,A), so not More(express his emotion(A), express his emotion(B))", ["B is a poet, A is not, so A is not more likely to express his emotion than B"]], "negated_asymmetric_conclusion": ["poet(A,B), so not More(express his emotion(B), express his emotion(A))", ["A is a poet, B is not, so B is not more likely to express his emotion than A"]]}
{"original": ["umpire(A,B), so More(hit triple(A), hit triple(B))", ["A is able to hit triple more than B, so A is more likely to hit triple than B"]], "negated": ["umpire(A,B), so not Less(hit triple(A), hit triple(B))", ["A is able to hit triple more than B, so A is not less likely to hit triple than B"]], "asymmetric_premise": ["umpire(B,A), so Less(hit triple(A), hit triple(B))", ["B is less likely to hit triple than A, so A is less likely to hit triple than B"]], "asymmetric_conclusion": ["umpire(A,B), so Less(hit triple(B), hit triple(A))", ["A is less likely to hit triple than B, so B is less likely to hit triple than A"]], "negated_asymmetric_premise": ["umpire(B,A), so not More(hit triple(A), hit triple(B))", ["B is able to hit triple more than A, so A is not more likely to hit triple than B"]], "negated_asymmetric_conclusion": ["umpire(A,B), so not More(hit triple(B), hit triple(A))", ["A is able to hit triple more than B, so B is not more likely to hit triple than A"]]}
{"original": ["judge(A,B), so More(settle dispute(A), settle dispute(B))", ["A is able to settle dispute more than B, so A is more likely to settle dispute than B"]], "negated": ["judge(A,B), so not Less(settle dispute(A), settle dispute(B))", ["A is a judge, B is not, so A is not less likely to settle dispute than B"]], "asymmetric_premise": ["judge(B,A), so Less(settle dispute(A), settle dispute(B))", ["B is a judge, A is not, so A is less likely to settle dispute than B"]], "asymmetric_conclusion": ["judge(A,B), so Less(settle dispute(B), settle dispute(A))", ["A is a judge, B is a lawyer, so B is less likely to settle dispute than A"]], "negated_asymmetric_premise": ["judge(B,A), so not More(settle dispute(A), settle dispute(B))", ["B is not A's judge, so A is not more likely to settle dispute than B"]], "negated_asymmetric_conclusion": ["judge(A,B), so not More(settle dispute(B), settle dispute(A))", ["A is a judge, B is not, so B is not more likely to settle dispute than A"]]}
{"original": ["parent(A,B), so More(raise his child(A), raise his child(B))", ["A is B's parent, so A is more likely to raise his child than B"]], "negated": ["parent(A,B), so not Less(raise his child(A), raise his child(B))", ["A is B's parent, so A is not less likely to raise his child than B"]], "asymmetric_premise": ["parent(B,A), so Less(raise his child(A), raise his child(B))", ["B is A's parent, so A is less likely to raise his child than B"]], "asymmetric_conclusion": ["parent(A,B), so Less(raise his child(B), raise his child(A))", ["A is B's parent, so B is less likely to raise his child than A"]], "negated_asymmetric_premise": ["parent(B,A), so not More(raise his child(A), raise his child(B))", ["B is A's parent, so A is not more likely to raise his child than B"]], "negated_asymmetric_conclusion": ["parent(A,B), so not More(raise his child(B), raise his child(A))", ["A is not B's parent, so B is not more likely to raise his child than A"]]}
{"original": ["auditor(A,B), so More(monitor auditory activity(A), monitor auditory activity(B))", ["A is B'sauditor, so A is more likely to monitor auditory activity than B"]], "negated": ["auditor(A,B), so not Less(monitor auditory activity(A), monitor auditory activity(B))", ["A is B'sauditor, so A is not less likely to monitor auditory activity than B"]], "asymmetric_premise": ["auditor(B,A), so Less(monitor auditory activity(A), monitor auditory activity(B))", ["B is A'sauditor, so A is less likely to monitor auditory activity than B"]], "asymmetric_conclusion": ["auditor(A,B), so Less(monitor auditory activity(B), monitor auditory activity(A))", ["A is B'sauditor, so B is less likely to monitor auditory activity than A"]], "negated_asymmetric_premise": ["auditor(B,A), so not More(monitor auditory activity(A), monitor auditory activity(B))", ["B is the auditor, A is not, so A is not more likely to monitor auditory activity than B"]], "negated_asymmetric_conclusion": ["auditor(A,B), so not More(monitor auditory activity(B), monitor auditory activity(A))", ["A is not B'sauditor, so B is not more likely to monitor auditory activity than A"]]}
{"original": ["scientist(A,B), so More(research(A), research(B))", ["A is ascientist, B is a scientist, so A is more likely to research than B"]], "negated": ["scientist(A,B), so not Less(research(A), research(B))", ["A is a scientist, B is not, so A is not less likely to research than B"]], "asymmetric_premise": ["scientist(B,A), so Less(research(A), research(B))", ["B is a scientist, A is not, so A does less research than B"]], "asymmetric_conclusion": ["scientist(A,B), so Less(research(B), research(A))", ["A is ascientist, B is not, so B does less research than A"]], "negated_asymmetric_premise": ["scientist(B,A), so not More(research(A), research(B))", ["B is a scientist, A is not, so A is not more likely to research than B"]], "negated_asymmetric_conclusion": ["scientist(A,B), so not More(research(B), research(A))", ["A is ascientist, B is not, so B is not more likely to research than A"]]}
{"original": ["singer(A,B), so More(perform performance(A), perform performance(B))", ["A is a singer, B is a rapper, so A is more likely to perform performance than B"]], "negated": ["singer(A,B), so not Less(perform performance(A), perform performance(B))", ["A is a singer, B is not, so A is not less likely to perform than B"]], "asymmetric_premise": ["singer(B,A), so Less(perform performance(A), perform performance(B))", ["B is a singer, A is not, so A is less likely to perform performance than B"]], "asymmetric_conclusion": ["singer(A,B), so Less(perform performance(B), perform performance(A))", ["A is a singer, B is not, so B is less likely to perform performance than A"]], "negated_asymmetric_premise": ["singer(B,A), so not More(perform performance(A), perform performance(B))", ["B is a singer, A is not, so A is not more likely to perform than B"]], "negated_asymmetric_conclusion": ["singer(A,B), so not More(perform performance(B), perform performance(A))", ["A is a singer, B is not, so B is not more likely to perform performance than A"]]}
{"original": ["chief(A,B), so More(head team(A), head team(B))", ["A is B's boss, so A is more likely to be in the head team than B"]], "negated": ["chief(A,B), so not Less(head team(A), head team(B))", ["A is the team chief, B is not, so A is not less head team than B"]], "asymmetric_premise": ["chief(B,A), so Less(head team(A), head team(B))", ["B is A's boss, so A is less likely to be in the head team than B"]], "asymmetric_conclusion": ["chief(A,B), so Less(head team(B), head team(A))", ["A is B's boss, so B is less likely to be head of the team than A"]], "negated_asymmetric_premise": ["chief(B,A), so not More(head team(A), head team(B))", ["B is the team's chief, A is not, so A is not more head team than B"]], "negated_asymmetric_conclusion": ["chief(A,B), so not More(head team(B), head team(A))", ["A is the team chief, B is not, so B is not more head team than A"]]}
{"original": ["chef(A,B), so More(bread chicken(A), bread chicken(B))", ["A is the chef, B is the bread chicken, so A is more bread chicken than B"]], "negated": ["chef(A,B), so not Less(bread chicken(A), bread chicken(B))", ["A is a chef, B is a bread chicken, so A is not less bread chicken than B"]], "asymmetric_premise": ["chef(B,A), so Less(bread chicken(A), bread chicken(B))", ["B is A's chef, so A is less likely to bread chicken than B"]], "asymmetric_conclusion": ["chef(A,B), so Less(bread chicken(B), bread chicken(A))", ["A is the chef, B is the bread chicken, so B is less likely to bread chicken than A"]], "negated_asymmetric_premise": ["chef(B,A), so not More(bread chicken(A), bread chicken(B))", ["B is a chef, A is not, so A is not more bread chicken than B"]], "negated_asymmetric_conclusion": ["chef(A,B), so not More(bread chicken(B), bread chicken(A))", ["A is a chef, B is not, so B is not more bread chicken than A"]]}
{"original": ["carpenter(A,B), so More(fix window(A), fix window(B))", ["A is a carpenter, B is not, so A is more likely to fix window than B"]], "negated": ["carpenter(A,B), so not Less(fix window(A), fix window(B))", ["A is a carpenter, B is not, so A is not less likely to fix window than B"]], "asymmetric_premise": ["carpenter(B,A), so Less(fix window(A), fix window(B))", ["B is a carpenter, A is not, so A is less likely to fix window than B"]], "asymmetric_conclusion": ["carpenter(A,B), so Less(fix window(B), fix window(A))", ["A is a carpenter, B is not, so B is less likely to fix window than A"]], "negated_asymmetric_premise": ["carpenter(B,A), so not More(fix window(A), fix window(B))", ["B is a carpenter, A is not, so A is not more likely to fix window than B"]], "negated_asymmetric_conclusion": ["carpenter(A,B), so not More(fix window(B), fix window(A))", ["A is a carpenter, B is not, so B is not more likely to fix window than A"]]}
{"original": ["chief(A,B), so More(govern city(A), govern city(B))", ["A is the mayor, B is the mayor, so A is more likely to govern city than B"]], "negated": ["chief(A,B), so not Less(govern city(A), govern city(B))", ["A is the city's chief, B is not, so A is not less likely to govern city than B"]], "asymmetric_premise": ["chief(B,A), so Less(govern city(A), govern city(B))", ["B is A's chief, so A is less likely to govern city than B"]], "asymmetric_conclusion": ["chief(A,B), so Less(govern city(B), govern city(A))", ["A is the mayor, B is the mayor, so B is less likely to govern city than A"]], "negated_asymmetric_premise": ["chief(B,A), so not More(govern city(A), govern city(B))", ["B is A's chief, so A is not more likely to govern city than B"]], "negated_asymmetric_conclusion": ["chief(A,B), so not More(govern city(B), govern city(A))", ["A is the city's chief, B is not, so B is not more likely to govern city than A"]]}
{"original": ["designer(A,B), so More(design(A), design(B))", ["A is a designer, B is not, so A is more likely to design than B"]], "negated": ["designer(A,B), so not Less(design(A), design(B))", ["A is a designer, B is not, so A is not less design than B"]], "asymmetric_premise": ["designer(B,A), so Less(design(A), design(B))", ["B is A's designer, so A is less likely to design than B"]], "asymmetric_conclusion": ["designer(A,B), so Less(design(B), design(A))", ["A is B's designer, so B is less likely to design than A"]], "negated_asymmetric_premise": ["designer(B,A), so not More(design(A), design(B))", ["B is a designer, A is not, so A is not more design than B"]], "negated_asymmetric_conclusion": ["designer(A,B), so not More(design(B), design(A))", ["A is a designer, B is not, so B is not more design than A"]]}
{"original": ["barber(A,B), so More(wash window(A), wash window(B))", ["A is B's barber, so A is more likely to wash window than B"]], "negated": ["barber(A,B), so not Less(wash window(A), wash window(B))", ["A is a barber, B is not, so A is not less likely to wash window than B"]], "asymmetric_premise": ["barber(B,A), so Less(wash window(A), wash window(B))", ["B is A's barber, so A is less likely to wash window than B"]], "asymmetric_conclusion": ["barber(A,B), so Less(wash window(B), wash window(A))", ["A is a barber, B is not, so B is less likely to wash window than A"]], "negated_asymmetric_premise": ["barber(B,A), so not More(wash window(A), wash window(B))", ["B is a barber, A is not, so A is not more likely to wash window than B"]], "negated_asymmetric_conclusion": ["barber(A,B), so not More(wash window(B), wash window(A))", ["A is a barber, B is not, so B is not more likely to wash window than A"]]}
{"original": ["writer(A,B), so More(draw(A), draw(B))", ["A is B's writer, so A is more likely to draw than B"]], "negated": ["writer(A,B), so not Less(draw(A), draw(B))", ["A is a writer, B is not, so A is not less likely to draw than B"]], "asymmetric_premise": ["writer(B,A), so Less(draw(A), draw(B))", ["B is A's writer, so A is less likely to draw than B"]], "asymmetric_conclusion": ["writer(A,B), so Less(draw(B), draw(A))", ["A is B's writer, so B is less likely to draw than A"]], "negated_asymmetric_premise": ["writer(B,A), so not More(draw(A), draw(B))", ["B is a writer, A is not, so A is not more likely to draw than B"]], "negated_asymmetric_conclusion": ["writer(A,B), so not More(draw(B), draw(A))", ["A is a writer, B is not, so B is not more likely to draw than A"]]}
{"original": ["illustrator(A,B), so More(create picture(A), create picture(B))", ["A is a illustrator, B is a photographer, so A is more likely to create picture than B"]], "negated": ["illustrator(A,B), so not Less(create picture(A), create picture(B))", ["A is a illustrator, B is not, so A is not less likely to create picture than B"]], "asymmetric_premise": ["illustrator(B,A), so Less(create picture(A), create picture(B))", ["B is A's illustrator, so A is less likely to create picture than B"]], "asymmetric_conclusion": ["illustrator(A,B), so Less(create picture(B), create picture(A))", ["A is a better illustrator than B, so B is less likely to create picture than A"]], "negated_asymmetric_premise": ["illustrator(B,A), so not More(create picture(A), create picture(B))", ["B is a illustrator, A is not, so A is not more likely to create picture than B"]], "negated_asymmetric_conclusion": ["illustrator(A,B), so not More(create picture(B), create picture(A))", ["A is a illustrator, B is not, so B is not more likely to create picture than A"]]}
{"original": ["broker(A,B), so More(meet business deal(A), meet business deal(B))", ["A is a broker, B is a lawyer, so A is more likely to meet business deal than B"]], "negated": ["broker(A,B), so not Less(meet business deal(A), meet business deal(B))", ["A is a broker, B is not, so A is not less likely to meet business deal than B"]], "asymmetric_premise": ["broker(B,A), so Less(meet business deal(A), meet business deal(B))", ["B is A's broker, so A is less likely to meet business deal than B"]], "asymmetric_conclusion": ["broker(A,B), so Less(meet business deal(B), meet business deal(A))", ["A is a broker, B is a lawyer, so B is less likely to meet business deal than A"]], "negated_asymmetric_premise": ["broker(B,A), so not More(meet business deal(A), meet business deal(B))", ["B is a broker, A is not, so A is not more likely to meet business deal than B"]], "negated_asymmetric_conclusion": ["broker(A,B), so not More(meet business deal(B), meet business deal(A))", ["A is a broker, B is not, so B is not more likely to meet business deal than A"]]}
{"original": ["photographer(A,B), so More(pose for photographer(A), pose for photographer(B))", ["A is able to pose for photographer more than B, so A is more likely to pose for photographer than B"]], "negated": ["photographer(A,B), so not Less(pose for photographer(A), pose for photographer(B))", ["A is the photographer, B is not, so A is not less likely to pose for photographer than B"]], "asymmetric_premise": ["photographer(B,A), so Less(pose for photographer(A), pose for photographer(B))", ["B is less likely to pose for photographer than A, so A is less likely to pose for B"]], "asymmetric_conclusion": ["photographer(A,B), so Less(pose for photographer(B), pose for photographer(A))", ["A is less likely to pose for the photographer than B, so B is less likely to pose for A"]], "negated_asymmetric_premise": ["photographer(B,A), so not More(pose for photographer(A), pose for photographer(B))", ["B is not A's photographer, so A is not more likely to pose for photographer than B"]], "negated_asymmetric_conclusion": ["photographer(A,B), so not More(pose for photographer(B), pose for photographer(A))", ["A is not B's photographer, so B is not more likely to pose for photographer than A"]]}
{"original": ["performing_artist(A,B), so More(use pen(A), use pen(B))", ["A is a performing artist, B is not, so A is more likely to use pen than B"]], "negated": ["performing_artist(A,B), so not Less(use pen(A), use pen(B))", ["A is a performing artist, B is not, so A is not less likely to use pen than B"]], "asymmetric_premise": ["performing_artist(B,A), so Less(use pen(A), use pen(B))", ["B is a performing artist, A is not, so A is less likely to use pen than B"]], "asymmetric_conclusion": ["performing_artist(A,B), so Less(use pen(B), use pen(A))", ["A is a performing artist, B is not, so B is less likely to use pen than A"]], "negated_asymmetric_premise": ["performing_artist(B,A), so not More(use pen(A), use pen(B))", ["B is a performing artist, A is not, so A is not more likely to use pen than B"]], "negated_asymmetric_conclusion": ["performing_artist(A,B), so not More(use pen(B), use pen(A))", ["A is a performing artist, B is not, so B is not more likely to use pen than A"]]}
{"original": ["journalist(A,B), so More(question suspect(A), question suspect(B))", ["A is a journalist, B is a lawyer, so A is more likely to question suspect than B"]], "negated": ["journalist(A,B), so not Less(question suspect(A), question suspect(B))", ["A is a journalist, B is not, so A is not less likely to question suspect than B"]], "asymmetric_premise": ["journalist(B,A), so Less(question suspect(A), question suspect(B))", ["B is a journalist, A is a lawyer, so A is less likely to question B than B"]], "asymmetric_conclusion": ["journalist(A,B), so Less(question suspect(B), question suspect(A))", ["A is a journalist, B is a lawyer, so B is less likely to question A than A"]], "negated_asymmetric_premise": ["journalist(B,A), so not More(question suspect(A), question suspect(B))", ["B is a journalist, A is not, so A is not more likely to question suspect than B"]], "negated_asymmetric_conclusion": ["journalist(A,B), so not More(question suspect(B), question suspect(A))", ["A is a journalist, B is not, so B is not more likely to question suspect than A"]]}
{"original": ["librarian(A,B), so More(book book(A), book book(B))", ["A is a librarian, B is not, so A is more likely to book book than B"]], "negated": ["librarian(A,B), so not Less(book book(A), book book(B))", ["A is a librarian, B is not, so A is not less likely to book book than B"]], "asymmetric_premise": ["librarian(B,A), so Less(book book(A), book book(B))", ["B is A's librarian, so A is less likely to book book than B"]], "asymmetric_conclusion": ["librarian(A,B), so Less(book book(B), book book(A))", ["A is a librarian, B is not, so B is less likely to book book than A"]], "negated_asymmetric_premise": ["librarian(B,A), so not More(book book(A), book book(B))", ["B is a librarian, A is not, so A is not more likely to book book than B"]], "negated_asymmetric_conclusion": ["librarian(A,B), so not More(book book(B), book book(A))", ["A is a librarian, B is not, so B is not more likely to book book than A"]]}
{"original": ["doctor(A,B), so More(diagnose(A), diagnose(B))", ["A is a doctor, B is a doctor, so A is more likely to diagnose than B"]], "negated": ["doctor(A,B), so not Less(diagnose(A), diagnose(B))", ["A is a doctor, B is not, so A is not less likely to diagnose than B"]], "asymmetric_premise": ["doctor(B,A), so Less(diagnose(A), diagnose(B))", ["B is A's doctor, so A is less likely to diagnose than B"]], "asymmetric_conclusion": ["doctor(A,B), so Less(diagnose(B), diagnose(A))", ["A is B's doctor, so B is less likely to diagnose than A"]], "negated_asymmetric_premise": ["doctor(B,A), so not More(diagnose(A), diagnose(B))", ["B is a doctor, A is not, so A is not more likely to diagnose than B"]], "negated_asymmetric_conclusion": ["doctor(A,B), so not More(diagnose(B), diagnose(A))", ["A is a doctor, B is not, so B is not more likely to diagnose than A"]]}
{"original": ["handball_player(A,B), so More(win game(A), win game(B))", ["A is a better handball player than B, so A is more likely to win game than B"]], "negated": ["handball_player(A,B), so not Less(win game(A), win game(B))", ["A is a handball player, B is not, so A is not less likely to win game than B"]], "asymmetric_premise": ["handball_player(B,A), so Less(win game(A), win game(B))", ["B is a handball player, A is not, so A is less likely to win game than B"]], "asymmetric_conclusion": ["handball_player(A,B), so Less(win game(B), win game(A))", ["A is a handball player, B is a tennis player, so B is less likely to win game than A"]], "negated_asymmetric_premise": ["handball_player(B,A), so not More(win game(A), win game(B))", ["B is a handball player, A is not, so A is not more likely to win game than B"]], "negated_asymmetric_conclusion": ["handball_player(A,B), so not More(win game(B), win game(A))", ["A is a handball player, B is not, so B is not more likely to win game than A"]]}
{"original": ["mover(A,B), so More(box carpet(A), box carpet(B))", ["A is a moving carpet, B is not, so A is more likely to box carpet than B"]], "negated": ["mover(A,B), so not Less(box carpet(A), box carpet(B))", ["A is a MOVER, B is not, so A is not less likely to box carpet than B"]], "asymmetric_premise": ["mover(B,A), so Less(box carpet(A), box carpet(B))", ["B is a move, A is not, so A is less likely to box carpet than B"]], "asymmetric_conclusion": ["mover(A,B), so Less(box carpet(B), box carpet(A))", ["A is a slower move than B, so B is less likely to box carpet than A"]], "negated_asymmetric_premise": ["mover(B,A), so not More(box carpet(A), box carpet(B))", ["B is a MOVER, A is not, so A is not more likely to box carpet than B"]], "negated_asymmetric_conclusion": ["mover(A,B), so not More(box carpet(B), box carpet(A))", ["A is a MOVER, B is not, so B is not more likely to box carpet than A"]]}
{"original": ["waiter(A,B), so More(clear table(A), clear table(B))", ["A is the waiter, B is the waiter, so A is more likely to clear table than B"]], "negated": ["waiter(A,B), so not Less(clear table(A), clear table(B))", ["A is the waiter, B is the waiter, so A is not less clear than B"]], "asymmetric_premise": ["waiter(B,A), so Less(clear table(A), clear table(B))", ["B is the waiter, A is the waiter, so A is less likely to clear table than B"]], "asymmetric_conclusion": ["waiter(A,B), so Less(clear table(B), clear table(A))", ["A is the waiter, B is the waiter, so B is less likely to clear table than A"]], "negated_asymmetric_premise": ["waiter(B,A), so not More(clear table(A), clear table(B))", ["B is the waiter, A is the waiter, so A is not more clear than B"]], "negated_asymmetric_conclusion": ["waiter(A,B), so not More(clear table(B), clear table(A))", ["A is a waiter, B is a waiter, so B is not more likely to clear table than A"]]}
{"original": ["cashier(A,B), so More(price sale(A), price sale(B))", ["A is B's cashier, so A is more likely to price sale than B"]], "negated": ["cashier(A,B), so not Less(price sale(A), price sale(B))", ["A is B's cashier, so A is not less likely to price sale than B"]], "asymmetric_premise": ["cashier(B,A), so Less(price sale(A), price sale(B))", ["B is A's cashier, so A is less likely to price sale than B"]], "asymmetric_conclusion": ["cashier(A,B), so Less(price sale(B), price sale(A))", ["A is B's cashier, so B is less likely to price sale than A"]], "negated_asymmetric_premise": ["cashier(B,A), so not More(price sale(A), price sale(B))", ["B is a cashier, A is not, so A is not more likely to price sale than B"]], "negated_asymmetric_conclusion": ["cashier(A,B), so not More(price sale(B), price sale(A))", ["A is a cashier, B is not, so B is not more likely to price sale than A"]]}
{"original": ["mathematician(A,B), so More(add number(A), add number(B))", ["A is a mathematician, B is a mathematician, so A is more likely to add number than B"]], "negated": ["mathematician(A,B), so not Less(add number(A), add number(B))", ["A is a mathematician, B is not, so A is not less likely to add number than B"]], "asymmetric_premise": ["mathematician(B,A), so Less(add number(A), add number(B))", ["B is A's teacher, so A is less likely to add number than B"]], "asymmetric_conclusion": ["mathematician(A,B), so Less(add number(B), add number(A))", ["A is a mathematician, B is not, so B is less likely to add number than A"]], "negated_asymmetric_premise": ["mathematician(B,A), so not More(add number(A), add number(B))", ["B is a mathematician, A is not, so A is not more likely to add number than B"]], "negated_asymmetric_conclusion": ["mathematician(A,B), so not More(add number(B), add number(A))", ["A is a mathematician, B is not, so B is not more likely to add number than A"]]}
{"original": ["maid(A,B), so More(be maid(A), be maid(B))", ["A is B's maid, so A is more likely to be a maid than B"]], "negated": ["maid(A,B), so not Less(be maid(A), be maid(B))", ["A is a maid, B is not, so A is not less likely to be maid than B"]], "asymmetric_premise": ["maid(B,A), so Less(be maid(A), be maid(B))", ["B is A's maid, so A is less likely to be a maid than B"]], "asymmetric_conclusion": ["maid(A,B), so Less(be maid(B), be maid(A))", ["A is a maid, B is not, so B is less likely to be maid than A"]], "negated_asymmetric_premise": ["maid(B,A), so not More(be maid(A), be maid(B))", ["B is not A's maid, so A is not more likely to be a maid than B"]], "negated_asymmetric_conclusion": ["maid(A,B), so not More(be maid(B), be maid(A))", ["A is not B's maid, so B is not more likely to be a maid than A"]]}
{"original": ["policeman(A,B), so More(be arrest for possession of illegal substance(A), be arrest for possession of illegal substance(B))", ["A is a policeman, B is not, so A will be more likely to be arrest for possession of illegal substance than B"]], "negated": ["policeman(A,B), so not Less(be arrest for possession of illegal substance(A), be arrest for possession of illegal substance(B))", ["A is a police officer, B is not, so A is not less likely to be arrest for possession of illegal substance than B"]], "asymmetric_premise": ["policeman(B,A), so Less(be arrest for possession of illegal substance(A), be arrest for possession of illegal substance(B))", ["B is a police officer, A is not, so A will be less likely to be arrest for possession of illegal substance than B"]], "asymmetric_conclusion": ["policeman(A,B), so Less(be arrest for possession of illegal substance(B), be arrest for possession of illegal substance(A))", ["A is a police officer, B is not, so B will be less likely to be arrest for possession of illegal substance than A"]], "negated_asymmetric_premise": ["policeman(B,A), so not More(be arrest for possession of illegal substance(A), be arrest for possession of illegal substance(B))", ["B is a policeman, A is not, so A is not more likely to be arrest for possession of illegal substance than B"]], "negated_asymmetric_conclusion": ["policeman(A,B), so not More(be arrest for possession of illegal substance(B), be arrest for possession of illegal substance(A))", ["A is a police officer, B is not, so B is not more likely to be arrest for possession of illegal substance than A"]]}
{"original": ["tennis_player(A,B), so More(need good tennis player(A), need good tennis player(B))", ["A is a tennis player, B is a tennis player, so A is more likely to be a tennis player than B"]], "negated": ["tennis_player(A,B), so not Less(need good tennis player(A), need good tennis player(B))", ["A is a tennis player, B is not, so A is not less likely to be a good tennis player than B"]], "asymmetric_premise": ["tennis_player(B,A), so Less(need good tennis player(A), need good tennis player(B))", ["B is a tennis player, A is a tennis player, so A is less likely to be a good tennis player than B"]], "asymmetric_conclusion": ["tennis_player(A,B), so Less(need good tennis player(B), need good tennis player(A))", ["A is a tennis player, B is a tennis player, so B is less likely to be a good tennis player than A"]], "negated_asymmetric_premise": ["tennis_player(B,A), so not More(need good tennis player(A), need good tennis player(B))", ["B is a tennis player, A is not, so A is not more likely to be a tennis player than B"]], "negated_asymmetric_conclusion": ["tennis_player(A,B), so not More(need good tennis player(B), need good tennis player(A))", ["A is a tennis player, B is not, so B is not more likely to be a good tennis player than A"]]}
{"original": ["mechanic(A,B), so More(clean engine(A), clean engine(B))", ["A is more mechanical than B, so A has a more clean engine than B"]], "negated": ["mechanic(A,B), so not Less(clean engine(A), clean engine(B))", ["A is more mechanical than B, so A is not less clean engine than B"]], "asymmetric_premise": ["mechanic(B,A), so Less(clean engine(A), clean engine(B))", ["B is more mechanical than A, so A has a less clean engine than B"]], "asymmetric_conclusion": ["mechanic(A,B), so Less(clean engine(B), clean engine(A))", ["A is more mechanical than B, so B has a less clean engine than A"]], "negated_asymmetric_premise": ["mechanic(B,A), so not More(clean engine(A), clean engine(B))", ["B is more mechanical than A, so A is not more clean engine than B"]], "negated_asymmetric_conclusion": ["mechanic(A,B), so not More(clean engine(B), clean engine(A))", ["A is more mechanical than B, so B is not more clean engine than A"]]}
{"original": ["clerk(A,B), so More(book counter(A), book counter(B))", ["A is a clerk, B is a book counter, so A is more book counter than B"]], "negated": ["clerk(A,B), so not Less(book counter(A), book counter(B))", ["A is a clerk, B is a book counter, so A is not less book counter than B"]], "asymmetric_premise": ["clerk(B,A), so Less(book counter(A), book counter(B))", ["B is A's book counter, so A is less book counter than B"]], "asymmetric_conclusion": ["clerk(A,B), so Less(book counter(B), book counter(A))", ["A is a clerk, B is a book counter, so B is less book counter than A"]], "negated_asymmetric_premise": ["clerk(B,A), so not More(book counter(A), book counter(B))", ["B is a book counter, A is not, so A is not more book counter than B"]], "negated_asymmetric_conclusion": ["clerk(A,B), so not More(book counter(B), book counter(A))", ["A is a book counter, B is not, so B is not more book counter than A"]]}
{"original": ["person_a tilts person_b's head up(A, B), so More(aggressive(A), aggressive(B))", ["A tilts B's head up, so A is more aggressive than B"]], "negated": ["person_a tilts person_b's head up(A, B), so not Less(aggressive(A), aggressive(B))", ["A tilts B's head up, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b tilts person_a's head up(B, A), so Less(aggressive(A), aggressive(B))", ["B tilts A's head up, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a tilts person_b's head up(A, B), so Less(aggressive(B), aggressive(A))", ["A tilts B's head up, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b tilts person_a's head up(B, A), so not More(aggressive(A), aggressive(B))", ["B tilts A's head up, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a tilts person_b's head up(A, B), so not More(aggressive(B), aggressive(A))", ["A tilts B's head up, so B is not more aggressive than A"]]}
{"original": ["person_a shoves person_b away(A, B), so More(harmful(A), harmful(B))", ["A shoves B away, so A is more harmful than B"]], "negated": ["person_a shoves person_b away(A, B), so not Less(harmful(A), harmful(B))", ["A shoves B away, so A is not less harmful than B"]], "asymmetric_premise": ["person_b shoves person_a away(B, A), so Less(harmful(A), harmful(B))", ["B shoves A away, so A is less harmful than B"]], "asymmetric_conclusion": ["person_a shoves person_b away(A, B), so Less(harmful(B), harmful(A))", ["A shoves B away, so B is less harmful than A"]], "negated_asymmetric_premise": ["person_b shoves person_a away(B, A), so not More(harmful(A), harmful(B))", ["B shoves A away, so A is not more harmful than B"]], "negated_asymmetric_conclusion": ["person_a shoves person_b away(A, B), so not More(harmful(B), harmful(A))", ["A shoves B away, so B is not more harmful than A"]]}
{"original": ["person_a meets person_b halfway(A, B), so More(caring(A), caring(B))", ["A meets B halfway, so A is more caring than B"]], "negated": ["person_a meets person_b halfway(A, B), so not Less(caring(A), caring(B))", ["A meets B halfway, so A is not less caring than B"]], "asymmetric_premise": ["person_b meets person_a halfway(B, A), so Less(caring(A), caring(B))", ["B meets A halfway, so A is less caring than B"]], "asymmetric_conclusion": ["person_a meets person_b halfway(A, B), so Less(caring(B), caring(A))", ["A meets B halfway, so B is less caring than A"]], "negated_asymmetric_premise": ["person_b meets person_a halfway(B, A), so not More(caring(A), caring(B))", ["B meets A halfway, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["person_a meets person_b halfway(A, B), so not More(caring(B), caring(A))", ["A meets B halfway, so B is not more caring than A"]]}
{"original": ["person_a makes person_b deposit every time(A, B), so More(responsible(A), responsible(B))", ["A makes B deposit every time, so A is more responsible than B"]], "negated": ["person_a makes person_b deposit every time(A, B), so not Less(responsible(A), responsible(B))", ["A makes B deposit every time, so A is not less responsible than B"]], "asymmetric_premise": ["person_b makes person_a deposit every time(B, A), so Less(responsible(A), responsible(B))", ["B makes A deposit every time, so A is less responsible than B"]], "asymmetric_conclusion": ["person_a makes person_b deposit every time(A, B), so Less(responsible(B), responsible(A))", ["A makes B deposit every time, so B is less responsible than A"]], "negated_asymmetric_premise": ["person_b makes person_a deposit every time(B, A), so not More(responsible(A), responsible(B))", ["B makes A deposit every time, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b deposit every time(A, B), so not More(responsible(B), responsible(A))", ["A makes B deposit every time, so B is not more responsible than A"]]}
{"original": ["person_a rides person_b's skateboard(A, B), so More(coordinated(A), coordinated(B))", ["A rides B's skateboard, so A is more coordinated than B"]], "negated": ["person_a rides person_b's skateboard(A, B), so not Less(coordinated(A), coordinated(B))", ["A rides B's skateboard, so A is not less coordinated than B"]], "asymmetric_premise": ["person_b rides person_a's skateboard(B, A), so Less(coordinated(A), coordinated(B))", ["B rides A's skateboard, so A is less coordinated than B"]], "asymmetric_conclusion": ["person_a rides person_b's skateboard(A, B), so Less(coordinated(B), coordinated(A))", ["A rides B's skateboard, so B is less coordinated than A"]], "negated_asymmetric_premise": ["person_b rides person_a's skateboard(B, A), so not More(coordinated(A), coordinated(B))", ["B rides A's skateboard, so A is not more coordinated than B"]], "negated_asymmetric_conclusion": ["person_a rides person_b's skateboard(A, B), so not More(coordinated(B), coordinated(A))", ["A rides B's skateboard, so B is not more coordinated than A"]]}
{"original": ["person_a packs person_b's stuff(A, B), so More(considerate(A), considerate(B))", ["A packs B's stuff more than B, so A is more considerate than B"]], "negated": ["person_a packs person_b's stuff(A, B), so not Less(considerate(A), considerate(B))", ["A packs B's stuff, so A is not less considerate than B"]], "asymmetric_premise": ["person_b packs person_a's stuff(B, A), so Less(considerate(A), considerate(B))", ["B packs A's stuff, so A is less considerate than B"]], "asymmetric_conclusion": ["person_a packs person_b's stuff(A, B), so Less(considerate(B), considerate(A))", ["A packs B's stuff more than B, so B is less considerate than A"]], "negated_asymmetric_premise": ["person_b packs person_a's stuff(B, A), so not More(considerate(A), considerate(B))", ["B packs A's stuff more than A, so A is not more considerate than B"]], "negated_asymmetric_conclusion": ["person_a packs person_b's stuff(A, B), so not More(considerate(B), considerate(A))", ["A packs B's stuff more than B, so B is not more considerate than A"]]}
{"original": ["person_a uses person_b number(A, B), so More(eager(A), eager(B))", ["A uses B's number, so A is more eager than B"]], "negated": ["person_a uses person_b number(A, B), so not Less(eager(A), eager(B))", ["A uses B's number, so A is not less eager than B"]], "asymmetric_premise": ["person_b uses person_a number(B, A), so Less(eager(A), eager(B))", ["B uses A's number, so A is less eager than B"]], "asymmetric_conclusion": ["person_a uses person_b number(A, B), so Less(eager(B), eager(A))", ["A uses B's number, so B is less eager than A"]], "negated_asymmetric_premise": ["person_b uses person_a number(B, A), so not More(eager(A), eager(B))", ["B uses A's number, so A is not more eager than B"]], "negated_asymmetric_conclusion": ["person_a uses person_b number(A, B), so not More(eager(B), eager(A))", ["A uses B's number, so B is not more eager than A"]]}
{"original": ["person_a pulls person_b's leg(A, B), so More(aggressive(A), aggressive(B))", ["A pulls B's leg, so A is more aggressive than B"]], "negated": ["person_a pulls person_b's leg(A, B), so not Less(aggressive(A), aggressive(B))", ["A pulls B's leg, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b pulls person_a's leg(B, A), so Less(aggressive(A), aggressive(B))", ["B pulls A's leg, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a pulls person_b's leg(A, B), so Less(aggressive(B), aggressive(A))", ["A pulls B's leg, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b pulls person_a's leg(B, A), so not More(aggressive(A), aggressive(B))", ["B pulls A's leg, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a pulls person_b's leg(A, B), so not More(aggressive(B), aggressive(A))", ["A pulls B's leg, so B is not more aggressive than A"]]}
{"original": ["person_a meets person_b's obligations(A, B), so More(kind(A), kind(B))", ["A meets B's obligations, so A is more kind than B"]], "negated": ["person_a meets person_b's obligations(A, B), so not Less(kind(A), kind(B))", ["A meets B's obligations, so A is not less kind than B"]], "asymmetric_premise": ["person_b meets person_a's obligations(B, A), so Less(kind(A), kind(B))", ["B meets A's obligations, so A is less kind than B"]], "asymmetric_conclusion": ["person_a meets person_b's obligations(A, B), so Less(kind(B), kind(A))", ["A meets B's obligations more than B, so B is less kind than A"]], "negated_asymmetric_premise": ["person_b meets person_a's obligations(B, A), so not More(kind(A), kind(B))", ["B meets A's obligations, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["person_a meets person_b's obligations(A, B), so not More(kind(B), kind(A))", ["A meets B's obligations more than B, so B is not more kind than A"]]}
{"original": ["person_a catches person_b with person_a's hand in the cookie jar(A, B), so More(faithful(A), faithful(B))", ["A catches B with his hand in the cookie jar, so A is more faithful than B"]], "negated": ["person_a catches person_b with person_a's hand in the cookie jar(A, B), so not Less(faithful(A), faithful(B))", ["A catches B with his hand in the cookie jar, so A is not less faithful than B"]], "asymmetric_premise": ["person_b catches person_a with person_a's hand in the cookie jar(B, A), so Less(faithful(A), faithful(B))", ["B catches A with his hand in the cookie jar, so A is less faithful than B"]], "asymmetric_conclusion": ["person_a catches person_b with person_a's hand in the cookie jar(A, B), so Less(faithful(B), faithful(A))", ["A catches B with his hand in the cookie jar, so B is less faithful than A"]], "negated_asymmetric_premise": ["person_b catches person_a with person_a's hand in the cookie jar(B, A), so not More(faithful(A), faithful(B))", ["B catches A with his hand in the cookie jar, so A is not more faithful than B"]], "negated_asymmetric_conclusion": ["person_a catches person_b with person_a's hand in the cookie jar(A, B), so not More(faithful(B), faithful(A))", ["A catches B with his hand in the cookie jar, so B is not more faithful than A"]]}
{"original": ["person_a waits person_b hour(A, B), so More(patient(A), patient(B))", ["A waits for B more than B, so A is more patient than B"]], "negated": ["person_a waits person_b hour(A, B), so not Less(patient(A), patient(B))", ["A waits for B, so A is not less patient than B"]], "asymmetric_premise": ["person_b waits person_a hour(B, A), so Less(patient(A), patient(B))", ["B waits for A, so A is less patient than B"]], "asymmetric_conclusion": ["person_a waits person_b hour(A, B), so Less(patient(B), patient(A))", ["A waits for B, so B is less patient than A"]], "negated_asymmetric_premise": ["person_b waits person_a hour(B, A), so not More(patient(A), patient(B))", ["B waits for A, so A is not more patient than B"]], "negated_asymmetric_conclusion": ["person_a waits person_b hour(A, B), so not More(patient(B), patient(A))", ["A waits for B, so B is not more patient than A"]]}
{"original": ["person_a becomes like person_b(A, B), so More(crafty.(A), crafty.(B))", ["A is more crafty than B, so A is more crafty than B"]], "negated": ["person_a becomes like person_b(A, B), so not Less(crafty.(A), crafty.(B))", ["A becomes like B, so A is not less crafty than B"]], "asymmetric_premise": ["person_b becomes like person_a(B, A), so Less(crafty.(A), crafty.(B))", ["B becomes like A, so A is less crafty than B"]], "asymmetric_conclusion": ["person_a becomes like person_b(A, B), so Less(crafty.(B), crafty.(A))", ["A becomes like B, so B is less crafty than A"]], "negated_asymmetric_premise": ["person_b becomes like person_a(B, A), so not More(crafty.(A), crafty.(B))", ["B is not more crafty than A, so A is not more crafty than B"]], "negated_asymmetric_conclusion": ["person_a becomes like person_b(A, B), so not More(crafty.(B), crafty.(A))", ["A is not more crafty than B, so B is not more crafty than A"]]}
{"original": ["person_a plays person_b's game(A, B), so More(ambitious(A), ambitious(B))", ["A plays B's game, so A is more ambitious than B"]], "negated": ["person_a plays person_b's game(A, B), so not Less(ambitious(A), ambitious(B))", ["A plays B's game, so A is not less ambitious than B"]], "asymmetric_premise": ["person_b plays person_a's game(B, A), so Less(ambitious(A), ambitious(B))", ["B plays A's game, so A is less ambitious than B"]], "asymmetric_conclusion": ["person_a plays person_b's game(A, B), so Less(ambitious(B), ambitious(A))", ["A plays B's game, so B is less ambitious than A"]], "negated_asymmetric_premise": ["person_b plays person_a's game(B, A), so not More(ambitious(A), ambitious(B))", ["B plays A's game, so A is not more ambitious than B"]], "negated_asymmetric_conclusion": ["person_a plays person_b's game(A, B), so not More(ambitious(B), ambitious(A))", ["A plays B's game more than B, so B is not more ambitious than A"]]}
{"original": ["person_a takes person_b all day(A, B), so More(slow(A), slow(B))", ["A takes B all day, so A is more slow than B"]], "negated": ["person_a takes person_b all day(A, B), so not Less(slow(A), slow(B))", ["A takes more time than B, so A is not less slow than B"]], "asymmetric_premise": ["person_b takes person_a all day(B, A), so Less(slow(A), slow(B))", ["B takes A all day, so A is less slow than B"]], "asymmetric_conclusion": ["person_a takes person_b all day(A, B), so Less(slow(B), slow(A))", ["A takes B all day, so B is less slow than A"]], "negated_asymmetric_premise": ["person_b takes person_a all day(B, A), so not More(slow(A), slow(B))", ["B takes A all day, so A is not more slow than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b all day(A, B), so not More(slow(B), slow(A))", ["A takes B all day, so B is not more slow than A"]]}
{"original": ["person_a challenges person_b's friends(A, B), so More(suspicious(A), suspicious(B))", ["A challenges B's friends, so A is more suspicious than B"]], "negated": ["person_a challenges person_b's friends(A, B), so not Less(suspicious(A), suspicious(B))", ["A challenges B's friends, so A is not less suspicious than B"]], "asymmetric_premise": ["person_b challenges person_a's friends(B, A), so Less(suspicious(A), suspicious(B))", ["B challenges A's friends, so A is less suspicious than B"]], "asymmetric_conclusion": ["person_a challenges person_b's friends(A, B), so Less(suspicious(B), suspicious(A))", ["A challenges B's friends, so B is less suspicious than A"]], "negated_asymmetric_premise": ["person_b challenges person_a's friends(B, A), so not More(suspicious(A), suspicious(B))", ["B challenges A's friends, so A is not more suspicious than B"]], "negated_asymmetric_conclusion": ["person_a challenges person_b's friends(A, B), so not More(suspicious(B), suspicious(A))", ["A challenges B's friends while B does not, so B is not more suspicious than A"]]}
{"original": ["person_a takes hold of person_b(A, B), so More(aggressive(A), aggressive(B))", ["A takes hold of B, so A is more aggressive than B"]], "negated": ["person_a takes hold of person_b(A, B), so not Less(aggressive(A), aggressive(B))", ["A takes hold of B, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b takes hold of person_a(B, A), so Less(aggressive(A), aggressive(B))", ["B takes hold of A, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a takes hold of person_b(A, B), so Less(aggressive(B), aggressive(A))", ["A takes hold of B, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b takes hold of person_a(B, A), so not More(aggressive(A), aggressive(B))", ["B takes hold of A, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a takes hold of person_b(A, B), so not More(aggressive(B), aggressive(A))", ["A takes hold of B, so B is not more aggressive than A"]]}
{"original": ["person_a denies person_b access(A, B), so More(controlling(A), controlling(B))", ["A denies B access, so A is more controlling than B"]], "negated": ["person_a denies person_b access(A, B), so not Less(controlling(A), controlling(B))", ["A denies B access, so A is not less controlling than B"]], "asymmetric_premise": ["person_b denies person_a access(B, A), so Less(controlling(A), controlling(B))", ["B denies A access, so A is less controlling than B"]], "asymmetric_conclusion": ["person_a denies person_b access(A, B), so Less(controlling(B), controlling(A))", ["A denies B access, so B is less controlling than A"]], "negated_asymmetric_premise": ["person_b denies person_a access(B, A), so not More(controlling(A), controlling(B))", ["B denies A access, so A is not more controlling than B"]], "negated_asymmetric_conclusion": ["person_a denies person_b access(A, B), so not More(controlling(B), controlling(A))", ["A denies B access, so B is not more controlling than A"]]}
{"original": ["person_a retraces person_b's steps(A, B), so More(educated(A), educated(B))", ["A retraces B's steps, so A is more educated than B"]], "negated": ["person_a retraces person_b's steps(A, B), so not Less(educated(A), educated(B))", ["A is not less educated than B, so A is not less educated than B"]], "asymmetric_premise": ["person_b retraces person_a's steps(B, A), so Less(educated(A), educated(B))", ["B retraces A's steps, so A is less educated than B"]], "asymmetric_conclusion": ["person_a retraces person_b's steps(A, B), so Less(educated(B), educated(A))", ["A retraces B's steps, so B is less educated than A"]], "negated_asymmetric_premise": ["person_b retraces person_a's steps(B, A), so not More(educated(A), educated(B))", ["B is not more educated than A, so A is not more educated than B"]], "negated_asymmetric_conclusion": ["person_a retraces person_b's steps(A, B), so not More(educated(B), educated(A))", ["A is not more educated than B, so B is not more educated than A"]]}
{"original": ["person_a makes person_b answer(A, B), so More(controlling(A), controlling(B))", ["A makes B answer, so A is more controlling than B"]], "negated": ["person_a makes person_b answer(A, B), so not Less(controlling(A), controlling(B))", ["A makes B answer, so A is not less controlling than B"]], "asymmetric_premise": ["person_b makes person_a answer(B, A), so Less(controlling(A), controlling(B))", ["B makes A answer, so A is less controlling than B"]], "asymmetric_conclusion": ["person_a makes person_b answer(A, B), so Less(controlling(B), controlling(A))", ["A makes B answer, so B is less controlling than A"]], "negated_asymmetric_premise": ["person_b makes person_a answer(B, A), so not More(controlling(A), controlling(B))", ["B makes A answer, so A is not more controlling than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b answer(A, B), so not More(controlling(B), controlling(A))", ["A makes B answer, so B is not more controlling than A"]]}
{"original": ["person_a knows what person_b wanted(A, B), so More(smart(A), smart(B))", ["A knows what B wanted, so A is more smart than B"]], "negated": ["person_a knows what person_b wanted(A, B), so not Less(smart(A), smart(B))", ["A knows what B wanted, so A is not less smart than B"]], "asymmetric_premise": ["person_b knows what person_a wanted(B, A), so Less(smart(A), smart(B))", ["B knows what A wanted, so A is less smart than B"]], "asymmetric_conclusion": ["person_a knows what person_b wanted(A, B), so Less(smart(B), smart(A))", ["A knows what B wanted, so B is less smart than A"]], "negated_asymmetric_premise": ["person_b knows what person_a wanted(B, A), so not More(smart(A), smart(B))", ["B knows what A wanted, so A is not more smart than B"]], "negated_asymmetric_conclusion": ["person_a knows what person_b wanted(A, B), so not More(smart(B), smart(A))", ["A knows what B wanted, so B is not more smart than A"]]}
{"original": ["person_a checks on person_b's son(A, B), so More(generous(A), generous(B))", ["A checks on B's son, so A is more generous than B"]], "negated": ["person_a checks on person_b's son(A, B), so not Less(generous(A), generous(B))", ["A checks on B's son, so A is not less generous than B"]], "asymmetric_premise": ["person_b checks on person_a's son(B, A), so Less(generous(A), generous(B))", ["B checks on A's son, so A is less generous than B"]], "asymmetric_conclusion": ["person_a checks on person_b's son(A, B), so Less(generous(B), generous(A))", ["A checks on B's son, so B is less generous than A"]], "negated_asymmetric_premise": ["person_b checks on person_a's son(B, A), so not More(generous(A), generous(B))", ["B checks on A's son, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["person_a checks on person_b's son(A, B), so not More(generous(B), generous(A))", ["A checks on B's son, so B is not more generous than A"]]}
{"original": ["person_a pays no attention to person_b(A, B), so More(independent(A), independent(B))", ["A pays no attention to B, so A is more independent than B"]], "negated": ["person_a pays no attention to person_b(A, B), so not Less(independent(A), independent(B))", ["A pays no attention to B, so A is not less independent than B"]], "asymmetric_premise": ["person_b pays no attention to person_a(B, A), so Less(independent(A), independent(B))", ["B pays no attention to A, so A is less independent than B"]], "asymmetric_conclusion": ["person_a pays no attention to person_b(A, B), so Less(independent(B), independent(A))", ["A pays no attention to B, so B is less independent than A"]], "negated_asymmetric_premise": ["person_b pays no attention to person_a(B, A), so not More(independent(A), independent(B))", ["B pays no attention to A, so A is not more independent than B"]], "negated_asymmetric_conclusion": ["person_a pays no attention to person_b(A, B), so not More(independent(B), independent(A))", ["A pays no attention to B, so B is not more independent than A"]]}
{"original": ["person_a gives person_b some advice(A, B), so More(pushy(A), pushy(B))", ["A gives B some advice, so A is more pushy than B"]], "negated": ["person_a gives person_b some advice(A, B), so not Less(pushy(A), pushy(B))", ["A gives B some advice, so A is not less pushy than B"]], "asymmetric_premise": ["person_b gives person_a some advice(B, A), so Less(pushy(A), pushy(B))", ["B gives A some advice, so A is less pushy than B"]], "asymmetric_conclusion": ["person_a gives person_b some advice(A, B), so Less(pushy(B), pushy(A))", ["A gives B some advice, so B is less pushy than A"]], "negated_asymmetric_premise": ["person_b gives person_a some advice(B, A), so not More(pushy(A), pushy(B))", ["B gives A some advice, so A is not more pushy than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b some advice(A, B), so not More(pushy(B), pushy(A))", ["A gives B some advice, so B is not more pushy than A"]]}
{"original": ["person_a meets person_b's mother(A, B), so More(scared(A), scared(B))", ["A meets B's mother, so A is more scared than B"]], "negated": ["person_a meets person_b's mother(A, B), so not Less(scared(A), scared(B))", ["A meets B's mother, so A is not less scared than B"]], "asymmetric_premise": ["person_b meets person_a's mother(B, A), so Less(scared(A), scared(B))", ["B meets A's mother, so A is less scared than B"]], "asymmetric_conclusion": ["person_a meets person_b's mother(A, B), so Less(scared(B), scared(A))", ["A meets B's mother, so B is less scared than A"]], "negated_asymmetric_premise": ["person_b meets person_a's mother(B, A), so not More(scared(A), scared(B))", ["B meets A's mother, so A is not more scared than B"]], "negated_asymmetric_conclusion": ["person_a meets person_b's mother(A, B), so not More(scared(B), scared(A))", ["A meets B's mother, so B is not more scared than A"]]}
{"original": ["person_a tells person_b to shut up(A, B), so More(commanding(A), commanding(B))", ["A tells B to shut up, so A is more commanding than B"]], "negated": ["person_a tells person_b to shut up(A, B), so not Less(commanding(A), commanding(B))", ["A tells B to shut up, so A is not less commanding than B"]], "asymmetric_premise": ["person_b tells person_a to shut up(B, A), so Less(commanding(A), commanding(B))", ["B tells A to shut up, so A is less commanding than B"]], "asymmetric_conclusion": ["person_a tells person_b to shut up(A, B), so Less(commanding(B), commanding(A))", ["A tells B to shut up, so B is less commanding than A"]], "negated_asymmetric_premise": ["person_b tells person_a to shut up(B, A), so not More(commanding(A), commanding(B))", ["B tells A to shut up, so A is not more commanding than B"]], "negated_asymmetric_conclusion": ["person_a tells person_b to shut up(A, B), so not More(commanding(B), commanding(A))", ["A tells B to shut up, so B is not more commanding than A"]]}
{"original": ["person_a mounts person_b attack(A, B), so More(hostile(A), hostile(B))", ["A mounts B's attack, so A is more hostile than B"]], "negated": ["person_a mounts person_b attack(A, B), so not Less(hostile(A), hostile(B))", ["A mounts B's attack, so A is not less hostile than B"]], "asymmetric_premise": ["person_b mounts person_a attack(B, A), so Less(hostile(A), hostile(B))", ["B mounts A's attack, so A is less hostile than B"]], "asymmetric_conclusion": ["person_a mounts person_b attack(A, B), so Less(hostile(B), hostile(A))", ["A mounts a attack on B, so B is less hostile than A"]], "negated_asymmetric_premise": ["person_b mounts person_a attack(B, A), so not More(hostile(A), hostile(B))", ["B mounts A's attack, so A is not more hostile than B"]], "negated_asymmetric_conclusion": ["person_a mounts person_b attack(A, B), so not More(hostile(B), hostile(A))", ["A mounts a attack on B, so B is not more hostile than A"]]}
{"original": ["person_a takes hold of person_b(A, B), so More(helping(A), helping(B))", ["A takes hold of B, so A is more likely to be helping than B"]], "negated": ["person_a takes hold of person_b(A, B), so not Less(helping(A), helping(B))", ["A takes hold of B, so A is not less likely to be helping than B"]], "asymmetric_premise": ["person_b takes hold of person_a(B, A), so Less(helping(A), helping(B))", ["B takes hold of A, so A is less likely to helping than B"]], "asymmetric_conclusion": ["person_a takes hold of person_b(A, B), so Less(helping(B), helping(A))", ["A takes hold of B, so B is less likely to helping than A"]], "negated_asymmetric_premise": ["person_b takes hold of person_a(B, A), so not More(helping(A), helping(B))", ["B takes hold of A, so A is not more likely to helping than B"]], "negated_asymmetric_conclusion": ["person_a takes hold of person_b(A, B), so not More(helping(B), helping(A))", ["A takes hold of B, so B is not more likely to helping than A"]]}
{"original": ["person_a makes person_b's way(A, B), so More(helpful(A), helpful(B))", ["A makes B's way, so A is more helpful than B"]], "negated": ["person_a makes person_b's way(A, B), so not Less(helpful(A), helpful(B))", ["A makes B's way, so A is not less helpful than B"]], "asymmetric_premise": ["person_b makes person_a's way(B, A), so Less(helpful(A), helpful(B))", ["B makes A's way, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a makes person_b's way(A, B), so Less(helpful(B), helpful(A))", ["A makes B's way, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b makes person_a's way(B, A), so not More(helpful(A), helpful(B))", ["B makes A's way, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b's way(A, B), so not More(helpful(B), helpful(A))", ["A makes B's way, so B is not more helpful than A"]]}
{"original": ["person_a leads to person_b's death(A, B), so More(terminal(A), terminal(B))", ["A leads to B's death, so A is more terminal than B"]], "negated": ["person_a leads to person_b's death(A, B), so not Less(terminal(A), terminal(B))", ["A leads to B's death, so A is not less terminal than B"]], "asymmetric_premise": ["person_b leads to person_a's death(B, A), so Less(terminal(A), terminal(B))", ["B leads to A's death, so A is less terminal than B"]], "asymmetric_conclusion": ["person_a leads to person_b's death(A, B), so Less(terminal(B), terminal(A))", ["A leads to B's death, so B is less terminal than A"]], "negated_asymmetric_premise": ["person_b leads to person_a's death(B, A), so not More(terminal(A), terminal(B))", ["B leads to A's death, so A is not more terminal than B"]], "negated_asymmetric_conclusion": ["person_a leads to person_b's death(A, B), so not More(terminal(B), terminal(A))", ["A leads to B's death, so B is not more terminal than A"]]}
{"original": ["person_a takes person_b's money(A, B), so More(greedy(A), greedy(B))", ["A takes B's money, so A is more greedy than B"]], "negated": ["person_a takes person_b's money(A, B), so not Less(greedy(A), greedy(B))", ["A takes B's money, so A is not less greedy than B"]], "asymmetric_premise": ["person_b takes person_a's money(B, A), so Less(greedy(A), greedy(B))", ["B takes A's money, so A is less greedy than B"]], "asymmetric_conclusion": ["person_a takes person_b's money(A, B), so Less(greedy(B), greedy(A))", ["A takes B's money, so B is less greedy than A"]], "negated_asymmetric_premise": ["person_b takes person_a's money(B, A), so not More(greedy(A), greedy(B))", ["B takes A's money, so A is not more greedy than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b's money(A, B), so not More(greedy(B), greedy(A))", ["A takes B's money, so B is not more greedy than A"]]}
{"original": ["person_a requires person_b understanding(A, B), so More(stringent(A), stringent(B))", ["A requires B understanding, so A is more stringent than B"]], "negated": ["person_a requires person_b understanding(A, B), so not Less(stringent(A), stringent(B))", ["A requires B understanding, so A is not less stringent than B"]], "asymmetric_premise": ["person_b requires person_a understanding(B, A), so Less(stringent(A), stringent(B))", ["B requires A understanding, so A is less stringent than B"]], "asymmetric_conclusion": ["person_a requires person_b understanding(A, B), so Less(stringent(B), stringent(A))", ["A requires B understanding, so B is less stringent than A"]], "negated_asymmetric_premise": ["person_b requires person_a understanding(B, A), so not More(stringent(A), stringent(B))", ["B requires A understanding, so A is not more stringent than B"]], "negated_asymmetric_conclusion": ["person_a requires person_b understanding(A, B), so not More(stringent(B), stringent(A))", ["A requires B understanding, so B is not more stringent than A"]]}
{"original": ["person_a has tears in person_b's eyes(A, B), so More(sympathetic(A), sympathetic(B))", ["A has tears in B's eyes, so A is more sympathetic than B"]], "negated": ["person_a has tears in person_b's eyes(A, B), so not Less(sympathetic(A), sympathetic(B))", ["A has tears in B's eyes, so A is not less sympathetic than B"]], "asymmetric_premise": ["person_b has tears in person_a's eyes(B, A), so Less(sympathetic(A), sympathetic(B))", ["B has tears in A's eyes, so A is less sympathetic than B"]], "asymmetric_conclusion": ["person_a has tears in person_b's eyes(A, B), so Less(sympathetic(B), sympathetic(A))", ["A has tears in B's eyes, so B is less sympathetic than A"]], "negated_asymmetric_premise": ["person_b has tears in person_a's eyes(B, A), so not More(sympathetic(A), sympathetic(B))", ["B has tears in A's eyes, so A is not more sympathetic than B"]], "negated_asymmetric_conclusion": ["person_a has tears in person_b's eyes(A, B), so not More(sympathetic(B), sympathetic(A))", ["A has tears in B's eyes, so B is not more sympathetic than A"]]}
{"original": ["person_a offered person_b one(A, B), so More(generous(A), generous(B))", ["A offered B a gift, so A is more generous than B"]], "negated": ["person_a offered person_b one(A, B), so not Less(generous(A), generous(B))", ["A offered B a gift, so A is not less generous than B"]], "asymmetric_premise": ["person_b offered person_a one(B, A), so Less(generous(A), generous(B))", ["B offered A a gift, so A is less generous than B"]], "asymmetric_conclusion": ["person_a offered person_b one(A, B), so Less(generous(B), generous(A))", ["A offered B a gift, so B is less generous than A"]], "negated_asymmetric_premise": ["person_b offered person_a one(B, A), so not More(generous(A), generous(B))", ["B offered A a gift, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["person_a offered person_b one(A, B), so not More(generous(B), generous(A))", ["A offered B a gift, so B is not more generous than A"]]}
{"original": ["person_a gets along with person_b(A, B), so More(agreeble(A), agreeble(B))", ["A gets along with B more than B, so A is more agreeble than B"]], "negated": ["person_a gets along with person_b(A, B), so not Less(agreeble(A), agreeble(B))", ["A gets along with B, so A is not less agreeble than B"]], "asymmetric_premise": ["person_b gets along with person_a(B, A), so Less(agreeble(A), agreeble(B))", ["B gets along with A more than B, so A is less agreeble than B"]], "asymmetric_conclusion": ["person_a gets along with person_b(A, B), so Less(agreeble(B), agreeble(A))", ["A gets along with B more than B, so B is less agreeble than A"]], "negated_asymmetric_premise": ["person_b gets along with person_a(B, A), so not More(agreeble(A), agreeble(B))", ["B gets along with A more than B, so A is not more agreeble than B"]], "negated_asymmetric_conclusion": ["person_a gets along with person_b(A, B), so not More(agreeble(B), agreeble(A))", ["A gets along with B more than B, so B is not more agreeble than A"]]}
{"original": ["person_a gives person_b idea(A, B), so More(convincing(A), convincing(B))", ["A gives B an idea, so A is more convincing than B"]], "negated": ["person_a gives person_b idea(A, B), so not Less(convincing(A), convincing(B))", ["A gives B an idea, so A is not less convincing than B"]], "asymmetric_premise": ["person_b gives person_a idea(B, A), so Less(convincing(A), convincing(B))", ["B gives A an idea, so A is less convincing than B"]], "asymmetric_conclusion": ["person_a gives person_b idea(A, B), so Less(convincing(B), convincing(A))", ["A gives B an idea, so B is less convincing than A"]], "negated_asymmetric_premise": ["person_b gives person_a idea(B, A), so not More(convincing(A), convincing(B))", ["B gives A an idea, so A is not more convincing than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b idea(A, B), so not More(convincing(B), convincing(A))", ["A gives B an idea, so B is not more convincing than A"]]}
{"original": ["person_a attends to person_b's duties(A, B), so More(helpful(A), helpful(B))", ["A attends to B's duties more than B, so A is more helpful than B"]], "negated": ["person_a attends to person_b's duties(A, B), so not Less(helpful(A), helpful(B))", ["A attends to B's duties more than B, so A is not less helpful than B"]], "asymmetric_premise": ["person_b attends to person_a's duties(B, A), so Less(helpful(A), helpful(B))", ["B attends to A's duties more than B, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a attends to person_b's duties(A, B), so Less(helpful(B), helpful(A))", ["A attends to B's duties more than B, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b attends to person_a's duties(B, A), so not More(helpful(A), helpful(B))", ["B attends to A's duties more than A, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a attends to person_b's duties(A, B), so not More(helpful(B), helpful(A))", ["A attends to B's duties more than B, so B is not more helpful than A"]]}
{"original": ["person_a goes to person_b's house(A, B), so More(sociable(A), sociable(B))", ["A goes to B's house, so A is more sociable than B"]], "negated": ["person_a goes to person_b's house(A, B), so not Less(sociable(A), sociable(B))", ["A goes to B's house, so A is not less sociable than B"]], "asymmetric_premise": ["person_b goes to person_a's house(B, A), so Less(sociable(A), sociable(B))", ["B goes to A's house, so A is less sociable than B"]], "asymmetric_conclusion": ["person_a goes to person_b's house(A, B), so Less(sociable(B), sociable(A))", ["A goes to B's house, so B is less sociable than A"]], "negated_asymmetric_premise": ["person_b goes to person_a's house(B, A), so not More(sociable(A), sociable(B))", ["B goes to A's house, so A is not more sociable than B"]], "negated_asymmetric_conclusion": ["person_a goes to person_b's house(A, B), so not More(sociable(B), sociable(A))", ["A goes to B's house, so B is not more sociable than A"]]}
{"original": ["person_a takes person_b at personz's word(A, B), so More(optimistic(A), optimistic(B))", ["A is more optimistic than B, so A is more optimistic than B"]], "negated": ["person_a takes person_b at personz's word(A, B), so not Less(optimistic(A), optimistic(B))", ["A is not less optimistic than B, so A is not less optimistic than B"]], "asymmetric_premise": ["person_b takes person_a at personz's word(B, A), so Less(optimistic(A), optimistic(B))", ["B takes A's word more than B, so A is less optimistic than B"]], "asymmetric_conclusion": ["person_a takes person_b at personz's word(A, B), so Less(optimistic(B), optimistic(A))", ["A takes B's word more than B, so B is less optimistic than A"]], "negated_asymmetric_premise": ["person_b takes person_a at personz's word(B, A), so not More(optimistic(A), optimistic(B))", ["B takes A's word more than B, so A is not more optimistic than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b at personz's word(A, B), so not More(optimistic(B), optimistic(A))", ["A is not more optimistic than B, so B is not more optimistic than A"]]}
{"original": ["person_a gives person_b's orders(A, B), so More(powerful(A), powerful(B))", ["A gives B orders, so A is more powerful than B"]], "negated": ["person_a gives person_b's orders(A, B), so not Less(powerful(A), powerful(B))", ["A gives B orders, so A is not less powerful than B"]], "asymmetric_premise": ["person_b gives person_a's orders(B, A), so Less(powerful(A), powerful(B))", ["B gives A's orders, so A is less powerful than B"]], "asymmetric_conclusion": ["person_a gives person_b's orders(A, B), so Less(powerful(B), powerful(A))", ["A gives B orders, so B is less powerful than A"]], "negated_asymmetric_premise": ["person_b gives person_a's orders(B, A), so not More(powerful(A), powerful(B))", ["B gives A's orders, so A is not more powerful than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b's orders(A, B), so not More(powerful(B), powerful(A))", ["A gives B orders, so B is not more powerful than A"]]}
{"original": ["person_a invites person_b to go(A, B), so More(inclusive(A), inclusive(B))", ["A invites B to go on a trip, so A is more inclusive than B"]], "negated": ["person_a invites person_b to go(A, B), so not Less(inclusive(A), inclusive(B))", ["A invites B to go, so A is not less inclusive than B"]], "asymmetric_premise": ["person_b invites person_a to go(B, A), so Less(inclusive(A), inclusive(B))", ["B invites A to go to a party, so A is less inclusive than B"]], "asymmetric_conclusion": ["person_a invites person_b to go(A, B), so Less(inclusive(B), inclusive(A))", ["A invites B to go to a party, so B is less inclusive than A"]], "negated_asymmetric_premise": ["person_b invites person_a to go(B, A), so not More(inclusive(A), inclusive(B))", ["B invites A to go on a trip, so A is not more inclusive than B"]], "negated_asymmetric_conclusion": ["person_a invites person_b to go(A, B), so not More(inclusive(B), inclusive(A))", ["A invites B to go, so B is not more inclusive than A"]]}
{"original": ["person_a buys person_b's son(A, B), so More(giving(A), giving(B))", ["A buys B's son, so A is more likely to be giving than B"]], "negated": ["person_a buys person_b's son(A, B), so not Less(giving(A), giving(B))", ["A buys B's son, so A is not less giving than B"]], "asymmetric_premise": ["person_b buys person_a's son(B, A), so Less(giving(A), giving(B))", ["B buys A's son, so A is less likely to giving than B"]], "asymmetric_conclusion": ["person_a buys person_b's son(A, B), so Less(giving(B), giving(A))", ["A buys B's son, so B is less likely to giving than A"]], "negated_asymmetric_premise": ["person_b buys person_a's son(B, A), so not More(giving(A), giving(B))", ["B buys A's son, so A is not more giving than B"]], "negated_asymmetric_conclusion": ["person_a buys person_b's son(A, B), so not More(giving(B), giving(A))", ["A buys B's son, so B is not more giving than A"]]}
{"original": ["person_a bites person_b's head off(A, B), so More(hostile(A), hostile(B))", ["A bites B's head off, so A is more hostile than B"]], "negated": ["person_a bites person_b's head off(A, B), so not Less(hostile(A), hostile(B))", ["A bites B's head off, so A is not less hostile than B"]], "asymmetric_premise": ["person_b bites person_a's head off(B, A), so Less(hostile(A), hostile(B))", ["B bites A's head off, so A is less hostile than B"]], "asymmetric_conclusion": ["person_a bites person_b's head off(A, B), so Less(hostile(B), hostile(A))", ["A bites B's head off, so B is less hostile than A"]], "negated_asymmetric_premise": ["person_b bites person_a's head off(B, A), so not More(hostile(A), hostile(B))", ["B bites A's head off, so A is not more hostile than B"]], "negated_asymmetric_conclusion": ["person_a bites person_b's head off(A, B), so not More(hostile(B), hostile(A))", ["A bites B's head off, so B is not more hostile than A"]]}
{"original": ["person_a finishes person_b's food(A, B), so More(healthy(A), healthy(B))", ["A finishes B's food, so A is more healthy than B"]], "negated": ["person_a finishes person_b's food(A, B), so not Less(healthy(A), healthy(B))", ["A finishes B's food, so A is not less healthy than B"]], "asymmetric_premise": ["person_b finishes person_a's food(B, A), so Less(healthy(A), healthy(B))", ["B finishes A's food, so A is less healthy than B"]], "asymmetric_conclusion": ["person_a finishes person_b's food(A, B), so Less(healthy(B), healthy(A))", ["A finishes B's food, so B is less healthy than A"]], "negated_asymmetric_premise": ["person_b finishes person_a's food(B, A), so not More(healthy(A), healthy(B))", ["B finishes A's food, so A is not more healthy than B"]], "negated_asymmetric_conclusion": ["person_a finishes person_b's food(A, B), so not More(healthy(B), healthy(A))", ["A finishes B's food, so B is not more healthy than A"]]}
{"original": ["person_a sees person_b's way(A, B), so More(responsive(A), responsive(B))", ["A sees B's way, so A is more responsive than B"]], "negated": ["person_a sees person_b's way(A, B), so not Less(responsive(A), responsive(B))", ["A sees B's way, so A is not less responsive than B"]], "asymmetric_premise": ["person_b sees person_a's way(B, A), so Less(responsive(A), responsive(B))", ["B sees A's way, so A is less responsive than B"]], "asymmetric_conclusion": ["person_a sees person_b's way(A, B), so Less(responsive(B), responsive(A))", ["A sees B's way, so B is less responsive than A"]], "negated_asymmetric_premise": ["person_b sees person_a's way(B, A), so not More(responsive(A), responsive(B))", ["B sees A's way, so A is not more responsive than B"]], "negated_asymmetric_conclusion": ["person_a sees person_b's way(A, B), so not More(responsive(B), responsive(A))", ["A sees B's way, so B is not more responsive than A"]]}
{"original": ["person_a blows person_b away(A, B), so More(superior(A), superior(B))", ["A blows B away, so A is more superior than B"]], "negated": ["person_a blows person_b away(A, B), so not Less(superior(A), superior(B))", ["A blows B away, so A is not less superior than B"]], "asymmetric_premise": ["person_b blows person_a away(B, A), so Less(superior(A), superior(B))", ["B blows A away, so A is less superior than B"]], "asymmetric_conclusion": ["person_a blows person_b away(A, B), so Less(superior(B), superior(A))", ["A blows B away, so B is less superior than A"]], "negated_asymmetric_premise": ["person_b blows person_a away(B, A), so not More(superior(A), superior(B))", ["B blows A away, so A is not more superior than B"]], "negated_asymmetric_conclusion": ["person_a blows person_b away(A, B), so not More(superior(B), superior(A))", ["A blows B away, so B is not more superior than A"]]}
{"original": ["person_a puts person_b in a vase(A, B), so More(thoughtless(A), thoughtless(B))", ["A puts B in a vase, so A is more thoughtless than B"]], "negated": ["person_a puts person_b in a vase(A, B), so not Less(thoughtless(A), thoughtless(B))", ["A puts B in a vase, so A is not less thoughtless than B"]], "asymmetric_premise": ["person_b puts person_a in a vase(B, A), so Less(thoughtless(A), thoughtless(B))", ["B puts A in a vase, so A is less thoughtless than B"]], "asymmetric_conclusion": ["person_a puts person_b in a vase(A, B), so Less(thoughtless(B), thoughtless(A))", ["A puts B in a vase, so B is less thoughtless than A"]], "negated_asymmetric_premise": ["person_b puts person_a in a vase(B, A), so not More(thoughtless(A), thoughtless(B))", ["B puts A in a vase, so A is not more thoughtless than B"]], "negated_asymmetric_conclusion": ["person_a puts person_b in a vase(A, B), so not More(thoughtless(B), thoughtless(A))", ["A puts B in a vase, so B is not more thoughtless than A"]]}
{"original": ["person_a sits in front of person_b(A, B), so More(thoughtless(A), thoughtless(B))", ["A sits in front of B, so A is more thoughtless than B"]], "negated": ["person_a sits in front of person_b(A, B), so not Less(thoughtless(A), thoughtless(B))", ["A sits in front of B, so A is not less thoughtless than B"]], "asymmetric_premise": ["person_b sits in front of person_a(B, A), so Less(thoughtless(A), thoughtless(B))", ["B sits in front of A, so A is less thoughtless than B"]], "asymmetric_conclusion": ["person_a sits in front of person_b(A, B), so Less(thoughtless(B), thoughtless(A))", ["A sits in front of B, so B is less thoughtless than A"]], "negated_asymmetric_premise": ["person_b sits in front of person_a(B, A), so not More(thoughtless(A), thoughtless(B))", ["B sits in front of A, so A is not more thoughtless than B"]], "negated_asymmetric_conclusion": ["person_a sits in front of person_b(A, B), so not More(thoughtless(B), thoughtless(A))", ["A sits in front of B, so B is not more thoughtless than A"]]}
{"original": ["person_a makes person_b's breakfast in bed(A, B), so More(thoughtful(A), thoughtful(B))", ["A makes B's breakfast in bed, so A is more thoughtful than B"]], "negated": ["person_a makes person_b's breakfast in bed(A, B), so not Less(thoughtful(A), thoughtful(B))", ["A makes B's breakfast in bed, so A is not less thoughtful than B"]], "asymmetric_premise": ["person_b makes person_a's breakfast in bed(B, A), so Less(thoughtful(A), thoughtful(B))", ["B makes A's breakfast in bed, so A is less thoughtful than B"]], "asymmetric_conclusion": ["person_a makes person_b's breakfast in bed(A, B), so Less(thoughtful(B), thoughtful(A))", ["A makes B breakfast in bed, so B is less thoughtful than A"]], "negated_asymmetric_premise": ["person_b makes person_a's breakfast in bed(B, A), so not More(thoughtful(A), thoughtful(B))", ["B makes A's breakfast in bed, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b's breakfast in bed(A, B), so not More(thoughtful(B), thoughtful(A))", ["A makes B's breakfast in bed, so B is not more thoughtful than A"]]}
{"original": ["person_a drops person_b's laptop(A, B), so More(impatient(A), impatient(B))", ["A drops B's laptop, so A is more impatient than B"]], "negated": ["person_a drops person_b's laptop(A, B), so not Less(impatient(A), impatient(B))", ["A drops B's laptop, so A is not less impatient than B"]], "asymmetric_premise": ["person_b drops person_a's laptop(B, A), so Less(impatient(A), impatient(B))", ["B drops A's laptop, so A is less impatient than B"]], "asymmetric_conclusion": ["person_a drops person_b's laptop(A, B), so Less(impatient(B), impatient(A))", ["A drops B's laptop, so B is less impatient than A"]], "negated_asymmetric_premise": ["person_b drops person_a's laptop(B, A), so not More(impatient(A), impatient(B))", ["B drops A's laptop, so A is not more impatient than B"]], "negated_asymmetric_conclusion": ["person_a drops person_b's laptop(A, B), so not More(impatient(B), impatient(A))", ["A drops B's laptop, so B is not more impatient than A"]]}
{"original": ["person_a gives person_b protection(A, B), so More(protective(A), protective(B))", ["A gives B protection, so A is more protective than B"]], "negated": ["person_a gives person_b protection(A, B), so not Less(protective(A), protective(B))", ["A gives B protection, so A is not less protective than B"]], "asymmetric_premise": ["person_b gives person_a protection(B, A), so Less(protective(A), protective(B))", ["B gives A protection, so A is less protective than B"]], "asymmetric_conclusion": ["person_a gives person_b protection(A, B), so Less(protective(B), protective(A))", ["A gives B protection, so B is less protective than A"]], "negated_asymmetric_premise": ["person_b gives person_a protection(B, A), so not More(protective(A), protective(B))", ["B gives A protection, so A is not more protective than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b protection(A, B), so not More(protective(B), protective(A))", ["A gives B protection, so B is not more protective than A"]]}
{"original": ["person_a changes person_b's way(A, B), so More(critical(A), critical(B))", ["A changes B's way, so A is more critical than B"]], "negated": ["person_a changes person_b's way(A, B), so not Less(critical(A), critical(B))", ["A changes B's way, so A is not less critical than B"]], "asymmetric_premise": ["person_b changes person_a's way(B, A), so Less(critical(A), critical(B))", ["B changes A's way more than B, so A is less critical than B"]], "asymmetric_conclusion": ["person_a changes person_b's way(A, B), so Less(critical(B), critical(A))", ["A changes B's way, so B is less critical than A"]], "negated_asymmetric_premise": ["person_b changes person_a's way(B, A), so not More(critical(A), critical(B))", ["B changes A's way more than B, so A is not more critical than B"]], "negated_asymmetric_conclusion": ["person_a changes person_b's way(A, B), so not More(critical(B), critical(A))", ["A changes B's way, so B is not more critical than A"]]}
{"original": ["person_a takes person_b's seat(A, B), so More(rude(A), rude(B))", ["A takes B's seat, so A is more rude than B"]], "negated": ["person_a takes person_b's seat(A, B), so not Less(rude(A), rude(B))", ["A takes B's seat, so A is not less rude than B"]], "asymmetric_premise": ["person_b takes person_a's seat(B, A), so Less(rude(A), rude(B))", ["B takes A's seat, so A is less rude than B"]], "asymmetric_conclusion": ["person_a takes person_b's seat(A, B), so Less(rude(B), rude(A))", ["A takes B's seat, so B is less rude than A"]], "negated_asymmetric_premise": ["person_b takes person_a's seat(B, A), so not More(rude(A), rude(B))", ["B takes A's seat, so A is not more rude than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b's seat(A, B), so not More(rude(B), rude(A))", ["A takes B's seat, so B is not more rude than A"]]}
{"original": ["person_a gives person_b utterance(A, B), so More(kind(A), kind(B))", ["A gives B utterance, so A is more kind than B"]], "negated": ["person_a gives person_b utterance(A, B), so not Less(kind(A), kind(B))", ["A gives B utterance, so A is not less kind than B"]], "asymmetric_premise": ["person_b gives person_a utterance(B, A), so Less(kind(A), kind(B))", ["B gives A a utterance, so A is less kind than B"]], "asymmetric_conclusion": ["person_a gives person_b utterance(A, B), so Less(kind(B), kind(A))", ["A gives B utterance, so B is less kind than A"]], "negated_asymmetric_premise": ["person_b gives person_a utterance(B, A), so not More(kind(A), kind(B))", ["B gives A utterance, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b utterance(A, B), so not More(kind(B), kind(A))", ["A gives B utterance, so B is not more kind than A"]]}
{"original": ["person_a tells person_b yesterday(A, B), so More(talkative(A), talkative(B))", ["A tells B yesterday, so A is more talkative than B"]], "negated": ["person_a tells person_b yesterday(A, B), so not Less(talkative(A), talkative(B))", ["A tells B yesterday, so A is not less talkative than B"]], "asymmetric_premise": ["person_b tells person_a yesterday(B, A), so Less(talkative(A), talkative(B))", ["B tells A yesterday, so A is less talkative than B"]], "asymmetric_conclusion": ["person_a tells person_b yesterday(A, B), so Less(talkative(B), talkative(A))", ["A tells B yesterday, so B is less talkative than A"]], "negated_asymmetric_premise": ["person_b tells person_a yesterday(B, A), so not More(talkative(A), talkative(B))", ["B tells A yesterday, so A is not more talkative than B"]], "negated_asymmetric_conclusion": ["person_a tells person_b yesterday(A, B), so not More(talkative(B), talkative(A))", ["A tells B yesterday, so B is not more talkative than A"]]}
{"original": ["person_a sells person_b's products(A, B), so More(optimistic(A), optimistic(B))", ["A sells B's products, so A is more optimistic than B"]], "negated": ["person_a sells person_b's products(A, B), so not Less(optimistic(A), optimistic(B))", ["A sells B's products, so A is not less optimistic than B"]], "asymmetric_premise": ["person_b sells person_a's products(B, A), so Less(optimistic(A), optimistic(B))", ["B sells A's products, so A is less optimistic than B"]], "asymmetric_conclusion": ["person_a sells person_b's products(A, B), so Less(optimistic(B), optimistic(A))", ["A sells B's products, so B is less optimistic than A"]], "negated_asymmetric_premise": ["person_b sells person_a's products(B, A), so not More(optimistic(A), optimistic(B))", ["B sells A's products, so A is not more optimistic than B"]], "negated_asymmetric_conclusion": ["person_a sells person_b's products(A, B), so not More(optimistic(B), optimistic(A))", ["A sells B's products, so B is not more optimistic than A"]]}
{"original": ["person_a drives person_b's home(A, B), so More(good(A), good(B))", ["A drives B's home, so A is more good than B"]], "negated": ["person_a drives person_b's home(A, B), so not Less(good(A), good(B))", ["A drives B's home, so A is not less good than B"]], "asymmetric_premise": ["person_b drives person_a's home(B, A), so Less(good(A), good(B))", ["B drives A's home, so A is less good than B"]], "asymmetric_conclusion": ["person_a drives person_b's home(A, B), so Less(good(B), good(A))", ["A drives B's home, so B is less good than A"]], "negated_asymmetric_premise": ["person_b drives person_a's home(B, A), so not More(good(A), good(B))", ["B drives A's home, so A is not more good than B"]], "negated_asymmetric_conclusion": ["person_a drives person_b's home(A, B), so not More(good(B), good(A))", ["A drives B's home, so B is not more good than A"]]}
{"original": ["person_a walks in person_b's neighborhood(A, B), so More(brave(A), brave(B))", ["A walks in B's neighborhood, so A is more brave than B"]], "negated": ["person_a walks in person_b's neighborhood(A, B), so not Less(brave(A), brave(B))", ["A walks in B's neighborhood, so A is not less brave than B"]], "asymmetric_premise": ["person_b walks in person_a's neighborhood(B, A), so Less(brave(A), brave(B))", ["B walks in A's neighborhood, so A is less brave than B"]], "asymmetric_conclusion": ["person_a walks in person_b's neighborhood(A, B), so Less(brave(B), brave(A))", ["A walks in B's neighborhood, so B is less brave than A"]], "negated_asymmetric_premise": ["person_b walks in person_a's neighborhood(B, A), so not More(brave(A), brave(B))", ["B walks in A's neighborhood, so A is not more brave than B"]], "negated_asymmetric_conclusion": ["person_a walks in person_b's neighborhood(A, B), so not More(brave(B), brave(A))", ["A walks in B's neighborhood, so B is not more brave than A"]]}
{"original": ["person_a brings person_b's home(A, B), so More(agreeable(A), agreeable(B))", ["A brings B's home, so A is more agreeable than B"]], "negated": ["person_a brings person_b's home(A, B), so not Less(agreeable(A), agreeable(B))", ["A brings B's home, so A is not less agreeable than B"]], "asymmetric_premise": ["person_b brings person_a's home(B, A), so Less(agreeable(A), agreeable(B))", ["B brings A's home, so A is less agreeable than B"]], "asymmetric_conclusion": ["person_a brings person_b's home(A, B), so Less(agreeable(B), agreeable(A))", ["A brings B's home, so B is less agreeable than A"]], "negated_asymmetric_premise": ["person_b brings person_a's home(B, A), so not More(agreeable(A), agreeable(B))", ["B brings A's home, so A is not more agreeable than B"]], "negated_asymmetric_conclusion": ["person_a brings person_b's home(A, B), so not More(agreeable(B), agreeable(A))", ["A brings B's home, so B is not more agreeable than A"]]}
{"original": ["person_a learns person_b's lesson(A, B), so More(ashamed(A), ashamed(B))", ["A learns B's lesson, so A is more ashamed than B"]], "negated": ["person_a learns person_b's lesson(A, B), so not Less(ashamed(A), ashamed(B))", ["A learns B's lesson, so A is not less ashamed than B"]], "asymmetric_premise": ["person_b learns person_a's lesson(B, A), so Less(ashamed(A), ashamed(B))", ["B learns A's lesson, so A is less ashamed than B"]], "asymmetric_conclusion": ["person_a learns person_b's lesson(A, B), so Less(ashamed(B), ashamed(A))", ["A learns B's lesson, so B is less ashamed than A"]], "negated_asymmetric_premise": ["person_b learns person_a's lesson(B, A), so not More(ashamed(A), ashamed(B))", ["B learns A's lesson, so A is not more ashamed than B"]], "negated_asymmetric_conclusion": ["person_a learns person_b's lesson(A, B), so not More(ashamed(B), ashamed(A))", ["A learns B's lesson, so B is not more ashamed than A"]]}
{"original": ["person_a rolls onto person_b's side(A, B), so More(awkward(A), awkward(B))", ["A rolls onto B's side, so A is more awkward than B"]], "negated": ["person_a rolls onto person_b's side(A, B), so not Less(awkward(A), awkward(B))", ["A rolls onto B's side, so A is not less awkward than B"]], "asymmetric_premise": ["person_b rolls onto person_a's side(B, A), so Less(awkward(A), awkward(B))", ["B rolls onto A's side, so A is less awkward than B"]], "asymmetric_conclusion": ["person_a rolls onto person_b's side(A, B), so Less(awkward(B), awkward(A))", ["A rolls onto B's side, so B is less awkward than A"]], "negated_asymmetric_premise": ["person_b rolls onto person_a's side(B, A), so not More(awkward(A), awkward(B))", ["B rolls onto A's side, so A is not more awkward than B"]], "negated_asymmetric_conclusion": ["person_a rolls onto person_b's side(A, B), so not More(awkward(B), awkward(A))", ["A rolls onto B's side, so B is not more awkward than A"]]}
{"original": ["person_a makes person_b order(A, B), so More(charming(A), charming(B))", ["A makes B order, so A is more charming than B"]], "negated": ["person_a makes person_b order(A, B), so not Less(charming(A), charming(B))", ["A makes B order, so A is not less charming than B"]], "asymmetric_premise": ["person_b makes person_a order(B, A), so Less(charming(A), charming(B))", ["B makes A order, so A is less charming than B"]], "asymmetric_conclusion": ["person_a makes person_b order(A, B), so Less(charming(B), charming(A))", ["A makes B order, so B is less charming than A"]], "negated_asymmetric_premise": ["person_b makes person_a order(B, A), so not More(charming(A), charming(B))", ["B makes A order, so A is not more charming than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b order(A, B), so not More(charming(B), charming(A))", ["A makes B order, so B is not more charming than A"]]}
{"original": ["person_a shuffles person_b's feet(A, B), so More(disorienting(A), disorienting(B))", ["A shuffles B's feet, so A is more disorienting than B"]], "negated": ["person_a shuffles person_b's feet(A, B), so not Less(disorienting(A), disorienting(B))", ["A shuffles B's feet, so A is not less disorienting than B"]], "asymmetric_premise": ["person_b shuffles person_a's feet(B, A), so Less(disorienting(A), disorienting(B))", ["B shuffles A's feet, so A is less disorienting than B"]], "asymmetric_conclusion": ["person_a shuffles person_b's feet(A, B), so Less(disorienting(B), disorienting(A))", ["A shuffles B's feet, so B is less disorienting than A"]], "negated_asymmetric_premise": ["person_b shuffles person_a's feet(B, A), so not More(disorienting(A), disorienting(B))", ["B shuffles A's feet, so A is not more disorienting than B"]], "negated_asymmetric_conclusion": ["person_a shuffles person_b's feet(A, B), so not More(disorienting(B), disorienting(A))", ["A shuffles B's feet, so B is not more disorienting than A"]]}
{"original": ["person_a treats person_b well(A, B), so More(gentle(A), gentle(B))", ["A treats B well, so A is more gentle than B"]], "negated": ["person_a treats person_b well(A, B), so not Less(gentle(A), gentle(B))", ["A treats B well, so A is not less gentle than B"]], "asymmetric_premise": ["person_b treats person_a well(B, A), so Less(gentle(A), gentle(B))", ["B treats A well, so A is less gentle than B"]], "asymmetric_conclusion": ["person_a treats person_b well(A, B), so Less(gentle(B), gentle(A))", ["A treats B well, so B is less gentle than A"]], "negated_asymmetric_premise": ["person_b treats person_a well(B, A), so not More(gentle(A), gentle(B))", ["B treats A well, so A is not more gentle than B"]], "negated_asymmetric_conclusion": ["person_a treats person_b well(A, B), so not More(gentle(B), gentle(A))", ["A treats B well, so B is not more gentle than A"]]}
{"original": ["person_a asks person_b was going(A, B), so More(curious(A), curious(B))", ["A was going where B was going, so A is more curious than B"]], "negated": ["person_a asks person_b was going(A, B), so not Less(curious(A), curious(B))", ["A was going where B was going, so A is not less curious than B"]], "asymmetric_premise": ["person_b asks person_a was going(B, A), so Less(curious(A), curious(B))", ["B asks A where he was going, so A is less curious than B"]], "asymmetric_conclusion": ["person_a asks person_b was going(A, B), so Less(curious(B), curious(A))", ["A asks B where B was going, so B is less curious than A"]], "negated_asymmetric_premise": ["person_b asks person_a was going(B, A), so not More(curious(A), curious(B))", ["B was going where A was going, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b was going(A, B), so not More(curious(B), curious(A))", ["A was going where B was going, so B is not more curious than A"]]}
{"original": ["person_a changes person_b's diet(A, B), so More(motivated(A), motivated(B))", ["A changes B's diet, so A is more motivated than B"]], "negated": ["person_a changes person_b's diet(A, B), so not Less(motivated(A), motivated(B))", ["A changes B's diet, so A is not less motivated than B"]], "asymmetric_premise": ["person_b changes person_a's diet(B, A), so Less(motivated(A), motivated(B))", ["B changes A's diet, so A is less motivated than B"]], "asymmetric_conclusion": ["person_a changes person_b's diet(A, B), so Less(motivated(B), motivated(A))", ["A changes B's diet, so B is less motivated than A"]], "negated_asymmetric_premise": ["person_b changes person_a's diet(B, A), so not More(motivated(A), motivated(B))", ["B changes A's diet, so A is not more motivated than B"]], "negated_asymmetric_conclusion": ["person_a changes person_b's diet(A, B), so not More(motivated(B), motivated(A))", ["A changes B's diet, so B is not more motivated than A"]]}
{"original": ["person_a meets a girl named person_b(A, B), so More(friendly(A), friendly(B))", ["A meets a girl named B, so A is more friendly than B"]], "negated": ["person_a meets a girl named person_b(A, B), so not Less(friendly(A), friendly(B))", ["A meets a girl named B, so A is not less friendly than B"]], "asymmetric_premise": ["person_b meets a girl named person_a(B, A), so Less(friendly(A), friendly(B))", ["B meets A, so A is less friendly than B"]], "asymmetric_conclusion": ["person_a meets a girl named person_b(A, B), so Less(friendly(B), friendly(A))", ["A meets a girl named B, so B is less friendly than A"]], "negated_asymmetric_premise": ["person_b meets a girl named person_a(B, A), so not More(friendly(A), friendly(B))", ["B meets A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["person_a meets a girl named person_b(A, B), so not More(friendly(B), friendly(A))", ["A meets a girl named B, so B is not more friendly than A"]]}
{"original": ["person_a lets personz's stay with person_b(A, B), so More(open(A), open(B))", ["A lets B stay with him, so A is more open than B"]], "negated": ["person_a lets personz's stay with person_b(A, B), so not Less(open(A), open(B))", ["A lets B stay with him, so A is not less open than B"]], "asymmetric_premise": ["person_b lets personz's stay with person_a(B, A), so Less(open(A), open(B))", ["B lets A stay with him, so A is less open than B"]], "asymmetric_conclusion": ["person_a lets personz's stay with person_b(A, B), so Less(open(B), open(A))", ["A lets B stay with him, so B is less open than A"]], "negated_asymmetric_premise": ["person_b lets personz's stay with person_a(B, A), so not More(open(A), open(B))", ["B lets A stay with him, so A is not more open than B"]], "negated_asymmetric_conclusion": ["person_a lets personz's stay with person_b(A, B), so not More(open(B), open(A))", ["A lets B stay with him, so B is not more open than A"]]}
{"original": ["person_a requires person_b's attention(A, B), so More(aggressive(A), aggressive(B))", ["A requires B's attention, so A is more aggressive than B"]], "negated": ["person_a requires person_b's attention(A, B), so not Less(aggressive(A), aggressive(B))", ["A requires B's attention, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b requires person_a's attention(B, A), so Less(aggressive(A), aggressive(B))", ["B requires A's attention, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a requires person_b's attention(A, B), so Less(aggressive(B), aggressive(A))", ["A requires B's attention, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b requires person_a's attention(B, A), so not More(aggressive(A), aggressive(B))", ["B requires A's attention, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a requires person_b's attention(A, B), so not More(aggressive(B), aggressive(A))", ["A requires B's attention, so B is not more aggressive than A"]]}
{"original": ["person_a suits person_b's purpose(A, B), so More(competent(A), competent(B))", ["A suits B's purpose more than B, so A is more competent than B"]], "negated": ["person_a suits person_b's purpose(A, B), so not Less(competent(A), competent(B))", ["A suits B's purpose, so A is not less competent than B"]], "asymmetric_premise": ["person_b suits person_a's purpose(B, A), so Less(competent(A), competent(B))", ["B suits A's purpose, so A is less competent than B"]], "asymmetric_conclusion": ["person_a suits person_b's purpose(A, B), so Less(competent(B), competent(A))", ["A suits B's purpose, so B is less competent than A"]], "negated_asymmetric_premise": ["person_b suits person_a's purpose(B, A), so not More(competent(A), competent(B))", ["B suits A's purpose, so A is not more competent than B"]], "negated_asymmetric_conclusion": ["person_a suits person_b's purpose(A, B), so not More(competent(B), competent(A))", ["A suits B's purpose, so B is not more competent than A"]]}
{"original": ["person_a distinguishes person_b from others(A, B), so More(intelligent(A), intelligent(B))", ["A distinguishes B from others from others, so A is more intelligent than B"]], "negated": ["person_a distinguishes person_b from others(A, B), so not Less(intelligent(A), intelligent(B))", ["A distinguishes B from others, so A is not less intelligent than B"]], "asymmetric_premise": ["person_b distinguishes person_a from others(B, A), so Less(intelligent(A), intelligent(B))", ["B distinguishes A from others from others, so A is less intelligent than B"]], "asymmetric_conclusion": ["person_a distinguishes person_b from others(A, B), so Less(intelligent(B), intelligent(A))", ["A distinguishes B from others from others, so B is less intelligent than A"]], "negated_asymmetric_premise": ["person_b distinguishes person_a from others(B, A), so not More(intelligent(A), intelligent(B))", ["B is not more intelligent than A, so A is not more intelligent than B"]], "negated_asymmetric_conclusion": ["person_a distinguishes person_b from others(A, B), so not More(intelligent(B), intelligent(A))", ["A distinguishes B from others, so B is not more intelligent than A"]]}
{"original": ["person_a wants to tell person_b(A, B), so More(worried(A), worried(B))", ["A wants to tell B, so A is more worried than B"]], "negated": ["person_a wants to tell person_b(A, B), so not Less(worried(A), worried(B))", ["A wants to tell B, so A is not less worried than B"]], "asymmetric_premise": ["person_b wants to tell person_a(B, A), so Less(worried(A), worried(B))", ["B wants to tell A, so A is less worried than B"]], "asymmetric_conclusion": ["person_a wants to tell person_b(A, B), so Less(worried(B), worried(A))", ["A wants to tell B, so B is less worried than A"]], "negated_asymmetric_premise": ["person_b wants to tell person_a(B, A), so not More(worried(A), worried(B))", ["B wants to tell A, so A is not more worried than B"]], "negated_asymmetric_conclusion": ["person_a wants to tell person_b(A, B), so not More(worried(B), worried(A))", ["A wants to tell B, so B is not more worried than A"]]}
{"original": ["person_a wraps my arms around person_b(A, B), so More(passionate(A), passionate(B))", ["A wraps my arms around B, so A is more passionate than B"]], "negated": ["person_a wraps my arms around person_b(A, B), so not Less(passionate(A), passionate(B))", ["A wraps my arms around B, so A is not less passionate than B"]], "asymmetric_premise": ["person_b wraps my arms around person_a(B, A), so Less(passionate(A), passionate(B))", ["B wraps my arms around A, so A is less passionate than B"]], "asymmetric_conclusion": ["person_a wraps my arms around person_b(A, B), so Less(passionate(B), passionate(A))", ["A wraps my arms around B, so B is less passionate than A"]], "negated_asymmetric_premise": ["person_b wraps my arms around person_a(B, A), so not More(passionate(A), passionate(B))", ["B wraps my arms around A, so A is not more passionate than B"]], "negated_asymmetric_conclusion": ["person_a wraps my arms around person_b(A, B), so not More(passionate(B), passionate(A))", ["A wraps my arms around B, so B is not more passionate than A"]]}
{"original": ["person_a goes near person_b(A, B), so More(bold(A), bold(B))", ["A goes near B, so A is more bold than B"]], "negated": ["person_a goes near person_b(A, B), so not Less(bold(A), bold(B))", ["A goes near B, so A is not less bold than B"]], "asymmetric_premise": ["person_b goes near person_a(B, A), so Less(bold(A), bold(B))", ["B goes near A, so A is less bold than B"]], "asymmetric_conclusion": ["person_a goes near person_b(A, B), so Less(bold(B), bold(A))", ["A goes near B, so B is less bold than A"]], "negated_asymmetric_premise": ["person_b goes near person_a(B, A), so not More(bold(A), bold(B))", ["B goes near A, so A is not more bold than B"]], "negated_asymmetric_conclusion": ["person_a goes near person_b(A, B), so not More(bold(B), bold(A))", ["A goes near B, so B is not more bold than A"]]}
{"original": ["person_a knows person_b very well(A, B), so More(friendly(A), friendly(B))", ["A knows B very well, so A is more friendly than B"]], "negated": ["person_a knows person_b very well(A, B), so not Less(friendly(A), friendly(B))", ["A knows B very well, so A is not less friendly than B"]], "asymmetric_premise": ["person_b knows person_a very well(B, A), so Less(friendly(A), friendly(B))", ["B knows A very well, so A is less friendly than B"]], "asymmetric_conclusion": ["person_a knows person_b very well(A, B), so Less(friendly(B), friendly(A))", ["A knows B very well, so B is less friendly than A"]], "negated_asymmetric_premise": ["person_b knows person_a very well(B, A), so not More(friendly(A), friendly(B))", ["B knows A very well, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["person_a knows person_b very well(A, B), so not More(friendly(B), friendly(A))", ["A knows B very well, so B is not more friendly than A"]]}
{"original": ["person_a looks back at person_b(A, B), so More(curious(A), curious(B))", ["A looks back at B, so A is more curious than B"]], "negated": ["person_a looks back at person_b(A, B), so not Less(curious(A), curious(B))", ["A looks back at B, so A is not less curious than B"]], "asymmetric_premise": ["person_b looks back at person_a(B, A), so Less(curious(A), curious(B))", ["B looks back at A, so A is less curious than B"]], "asymmetric_conclusion": ["person_a looks back at person_b(A, B), so Less(curious(B), curious(A))", ["A looks back at B, so B is less curious than A"]], "negated_asymmetric_premise": ["person_b looks back at person_a(B, A), so not More(curious(A), curious(B))", ["B looks back at A, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["person_a looks back at person_b(A, B), so not More(curious(B), curious(A))", ["A looks back at B, so B is not more curious than A"]]}
{"original": ["person_a grabs person_b's arms(A, B), so More(forceful(A), forceful(B))", ["A grabs B's arms, so A is more forceful than B"]], "negated": ["person_a grabs person_b's arms(A, B), so not Less(forceful(A), forceful(B))", ["A grabs B's arms, so A is not less forceful than B"]], "asymmetric_premise": ["person_b grabs person_a's arms(B, A), so Less(forceful(A), forceful(B))", ["B grabs A's arms, so A is less forceful than B"]], "asymmetric_conclusion": ["person_a grabs person_b's arms(A, B), so Less(forceful(B), forceful(A))", ["A grabs B's arms, so B is less forceful than A"]], "negated_asymmetric_premise": ["person_b grabs person_a's arms(B, A), so not More(forceful(A), forceful(B))", ["B grabs A's arms, so A is not more forceful than B"]], "negated_asymmetric_conclusion": ["person_a grabs person_b's arms(A, B), so not More(forceful(B), forceful(A))", ["A grabs B's arms, so B is not more forceful than A"]]}
{"original": ["person_a creates person_b illusion(A, B), so More(imaginitive(A), imaginitive(B))", ["A creates illusion while B does not, so A is more imaginitive than B"]], "negated": ["person_a creates person_b illusion(A, B), so not Less(imaginitive(A), imaginitive(B))", ["A creates illusion while B does not, so A is not less imaginitive than B"]], "asymmetric_premise": ["person_b creates person_a illusion(B, A), so Less(imaginitive(A), imaginitive(B))", ["B creates illusion while A does not, so A is less imaginitive than B"]], "asymmetric_conclusion": ["person_a creates person_b illusion(A, B), so Less(imaginitive(B), imaginitive(A))", ["A creates illusion while B does not, so B is less imaginitive than A"]], "negated_asymmetric_premise": ["person_b creates person_a illusion(B, A), so not More(imaginitive(A), imaginitive(B))", ["B creates illusion while A does not, so A is not more imaginitive than B"]], "negated_asymmetric_conclusion": ["person_a creates person_b illusion(A, B), so not More(imaginitive(B), imaginitive(A))", ["A creates illusion while B does not, so B is not more imaginitive than A"]]}
{"original": ["person_a approaches person_b's crush(A, B), so More(hopeful(A), hopeful(B))", ["A approaches B's crush, so A is more hopeful than B"]], "negated": ["person_a approaches person_b's crush(A, B), so not Less(hopeful(A), hopeful(B))", ["A approaches B's crush, so A is not less hopeful than B"]], "asymmetric_premise": ["person_b approaches person_a's crush(B, A), so Less(hopeful(A), hopeful(B))", ["B approaches A's crush, so A is less hopeful than B"]], "asymmetric_conclusion": ["person_a approaches person_b's crush(A, B), so Less(hopeful(B), hopeful(A))", ["A approaches B's crush, so B is less hopeful than A"]], "negated_asymmetric_premise": ["person_b approaches person_a's crush(B, A), so not More(hopeful(A), hopeful(B))", ["B approaches A's crush, so A is not more hopeful than B"]], "negated_asymmetric_conclusion": ["person_a approaches person_b's crush(A, B), so not More(hopeful(B), hopeful(A))", ["A approaches B's crush, so B is not more hopeful than A"]]}
{"original": ["person_a hears person_b's words(A, B), so More(patient(A), patient(B))", ["A hears B's words more than B, so A is more patient than B"]], "negated": ["person_a hears person_b's words(A, B), so not Less(patient(A), patient(B))", ["A hears B's words, so A is not less patient than B"]], "asymmetric_premise": ["person_b hears person_a's words(B, A), so Less(patient(A), patient(B))", ["B hears A's words, so A is less patient than B"]], "asymmetric_conclusion": ["person_a hears person_b's words(A, B), so Less(patient(B), patient(A))", ["A hears B's words, so B is less patient than A"]], "negated_asymmetric_premise": ["person_b hears person_a's words(B, A), so not More(patient(A), patient(B))", ["B hears A's words, so A is not more patient than B"]], "negated_asymmetric_conclusion": ["person_a hears person_b's words(A, B), so not More(patient(B), patient(A))", ["A hears B's words, so B is not more patient than A"]]}
{"original": ["person_a uses person_b's cell phone(A, B), so More(friendly(A), friendly(B))", ["A uses B's cell phone, so A is more friendly than B"]], "negated": ["person_a uses person_b's cell phone(A, B), so not Less(friendly(A), friendly(B))", ["A uses B's cell phone, so A is not less friendly than B"]], "asymmetric_premise": ["person_b uses person_a's cell phone(B, A), so Less(friendly(A), friendly(B))", ["B uses A's cell phone, so A is less friendly than B"]], "asymmetric_conclusion": ["person_a uses person_b's cell phone(A, B), so Less(friendly(B), friendly(A))", ["A uses B's cell phone, so B is less friendly than A"]], "negated_asymmetric_premise": ["person_b uses person_a's cell phone(B, A), so not More(friendly(A), friendly(B))", ["B uses A's cell phone, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["person_a uses person_b's cell phone(A, B), so not More(friendly(B), friendly(A))", ["A uses B's cell phone, so B is not more friendly than A"]]}
{"original": ["person_a continues person_b's search(A, B), so More(determined(A), determined(B))", ["A continues to search for B, so A is more determined than B"]], "negated": ["person_a continues person_b's search(A, B), so not Less(determined(A), determined(B))", ["A continues the search while B does not, so A is not less determined than B"]], "asymmetric_premise": ["person_b continues person_a's search(B, A), so Less(determined(A), determined(B))", ["B continues to search for A, so A is less determined than B"]], "asymmetric_conclusion": ["person_a continues person_b's search(A, B), so Less(determined(B), determined(A))", ["A continues the search while B does not, so B is less determined than A"]], "negated_asymmetric_premise": ["person_b continues person_a's search(B, A), so not More(determined(A), determined(B))", ["B is not more determined than A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["person_a continues person_b's search(A, B), so not More(determined(B), determined(A))", ["A is not more determined than B, so B is not more determined than A"]]}
{"original": ["person_a cooks dinner for person_b's family(A, B), so More(responsible(A), responsible(B))", ["A cooks dinner for B's family, so A is more responsible than B"]], "negated": ["person_a cooks dinner for person_b's family(A, B), so not Less(responsible(A), responsible(B))", ["A cooks dinner for B's family, so A is not less responsible than B"]], "asymmetric_premise": ["person_b cooks dinner for person_a's family(B, A), so Less(responsible(A), responsible(B))", ["B cooks dinner for A's family, so A is less responsible than B"]], "asymmetric_conclusion": ["person_a cooks dinner for person_b's family(A, B), so Less(responsible(B), responsible(A))", ["A cooks dinner for B's family, so B is less responsible than A"]], "negated_asymmetric_premise": ["person_b cooks dinner for person_a's family(B, A), so not More(responsible(A), responsible(B))", ["B cooks dinner for A's family, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["person_a cooks dinner for person_b's family(A, B), so not More(responsible(B), responsible(A))", ["A cooks dinner for B's family, so B is not more responsible than A"]]}
{"original": ["person_a shoves person_b away(A, B), so More(stubborn(A), stubborn(B))", ["A shoves B away, so A is more stubborn than B"]], "negated": ["person_a shoves person_b away(A, B), so not Less(stubborn(A), stubborn(B))", ["A shoves B away, so A is not less stubborn than B"]], "asymmetric_premise": ["person_b shoves person_a away(B, A), so Less(stubborn(A), stubborn(B))", ["B shoves A away, so A is less stubborn than B"]], "asymmetric_conclusion": ["person_a shoves person_b away(A, B), so Less(stubborn(B), stubborn(A))", ["A shoves B away, so B is less stubborn than A"]], "negated_asymmetric_premise": ["person_b shoves person_a away(B, A), so not More(stubborn(A), stubborn(B))", ["B shoves A away, so A is not more stubborn than B"]], "negated_asymmetric_conclusion": ["person_a shoves person_b away(A, B), so not More(stubborn(B), stubborn(A))", ["A shoves B away, so B is not more stubborn than A"]]}
{"original": ["person_a obtains person_b understanding(A, B), so More(adaptable(A), adaptable(B))", ["A is able to comprehend more than B, so A is more adaptable than B"]], "negated": ["person_a obtains person_b understanding(A, B), so not Less(adaptable(A), adaptable(B))", ["A obtains understanding while B does not, so A is not less adaptable than B"]], "asymmetric_premise": ["person_b obtains person_a understanding(B, A), so Less(adaptable(A), adaptable(B))", ["B obtains understanding while A does not, so A is less adaptable than B"]], "asymmetric_conclusion": ["person_a obtains person_b understanding(A, B), so Less(adaptable(B), adaptable(A))", ["A obtains understanding while B does not, so B is less adaptable than A"]], "negated_asymmetric_premise": ["person_b obtains person_a understanding(B, A), so not More(adaptable(A), adaptable(B))", ["B is not more adaptable than A, so A is not more adaptable than B"]], "negated_asymmetric_conclusion": ["person_a obtains person_b understanding(A, B), so not More(adaptable(B), adaptable(A))", ["A is not more adaptable than B, so B is not more adaptable than A"]]}
{"original": ["person_a asks person_b to send(A, B), so More(codependent(A), codependent(B))", ["A asks B to send a message, so A is more codependent than B"]], "negated": ["person_a asks person_b to send(A, B), so not Less(codependent(A), codependent(B))", ["A asks B to send messages, so A is not less codependent than B"]], "asymmetric_premise": ["person_b asks person_a to send(B, A), so Less(codependent(A), codependent(B))", ["B asks A to send a message, so A is less codependent than B"]], "asymmetric_conclusion": ["person_a asks person_b to send(A, B), so Less(codependent(B), codependent(A))", ["A asks B to send messages, so B is less codependent than A"]], "negated_asymmetric_premise": ["person_b asks person_a to send(B, A), so not More(codependent(A), codependent(B))", ["B asks A to send messages, so A is not more codependent than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b to send(A, B), so not More(codependent(B), codependent(A))", ["A asks B to send messages, so B is not more codependent than A"]]}
{"original": ["person_a returns person_b's phone(A, B), so More(helpful(A), helpful(B))", ["A returns B's phone, so A is more helpful than B"]], "negated": ["person_a returns person_b's phone(A, B), so not Less(helpful(A), helpful(B))", ["A returns B's phone, so A is not less helpful than B"]], "asymmetric_premise": ["person_b returns person_a's phone(B, A), so Less(helpful(A), helpful(B))", ["B returns A's phone, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a returns person_b's phone(A, B), so Less(helpful(B), helpful(A))", ["A returns B's phone, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b returns person_a's phone(B, A), so not More(helpful(A), helpful(B))", ["B returns A's phone, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a returns person_b's phone(A, B), so not More(helpful(B), helpful(A))", ["A returns B's phone, so B is not more helpful than A"]]}
{"original": ["person_a takes person_b's family to the beach(A, B), so More(adventourous(A), adventourous(B))", ["A takes B's family to the beach, so A is more adventourous than B"]], "negated": ["person_a takes person_b's family to the beach(A, B), so not Less(adventourous(A), adventourous(B))", ["A takes B's family to the beach, so A is not less adventourous than B"]], "asymmetric_premise": ["person_b takes person_a's family to the beach(B, A), so Less(adventourous(A), adventourous(B))", ["B takes A's family to the beach, so A is less adventourous than B"]], "asymmetric_conclusion": ["person_a takes person_b's family to the beach(A, B), so Less(adventourous(B), adventourous(A))", ["A takes B's family to the beach, so B is less adventourous than A"]], "negated_asymmetric_premise": ["person_b takes person_a's family to the beach(B, A), so not More(adventourous(A), adventourous(B))", ["B takes A's family to the beach, so A is not more adventourous than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b's family to the beach(A, B), so not More(adventourous(B), adventourous(A))", ["A takes B's family to the beach, so B is not more adventourous than A"]]}
{"original": ["person_a looks at person_b's friend(A, B), so More(caring(A), caring(B))", ["A looks at B's friend more than B, so A is more caring than B"]], "negated": ["person_a looks at person_b's friend(A, B), so not Less(caring(A), caring(B))", ["A looks at B's friend more than B, so A is not less caring than B"]], "asymmetric_premise": ["person_b looks at person_a's friend(B, A), so Less(caring(A), caring(B))", ["B looks at A's friend, so A is less caring than B"]], "asymmetric_conclusion": ["person_a looks at person_b's friend(A, B), so Less(caring(B), caring(A))", ["A looks at B's friend more than B, so B is less caring than A"]], "negated_asymmetric_premise": ["person_b looks at person_a's friend(B, A), so not More(caring(A), caring(B))", ["B looks at A's friend more than B, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["person_a looks at person_b's friend(A, B), so not More(caring(B), caring(A))", ["A looks at B's friend while B does not, so B is not more caring than A"]]}
{"original": ["person_a lends person_b a hand(A, B), so More(kind(A), kind(B))", ["A lends B a hand, so A is more kind than B"]], "negated": ["person_a lends person_b a hand(A, B), so not Less(kind(A), kind(B))", ["A lends B a hand, so A is not less kind than B"]], "asymmetric_premise": ["person_b lends person_a a hand(B, A), so Less(kind(A), kind(B))", ["B lends A a hand, so A is less kind than B"]], "asymmetric_conclusion": ["person_a lends person_b a hand(A, B), so Less(kind(B), kind(A))", ["A lends B a hand, so B is less kind than A"]], "negated_asymmetric_premise": ["person_b lends person_a a hand(B, A), so not More(kind(A), kind(B))", ["B lends A a hand, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["person_a lends person_b a hand(A, B), so not More(kind(B), kind(A))", ["A lends B a hand, so B is not more kind than A"]]}
{"original": ["person_a floats person_b's boat(A, B), so More(excited(A), excited(B))", ["A floats B's boat, so A is more excited than B"]], "negated": ["person_a floats person_b's boat(A, B), so not Less(excited(A), excited(B))", ["A floats B's boat, so A is not less excited than B"]], "asymmetric_premise": ["person_b floats person_a's boat(B, A), so Less(excited(A), excited(B))", ["B floats A's boat, so A is less excited than B"]], "asymmetric_conclusion": ["person_a floats person_b's boat(A, B), so Less(excited(B), excited(A))", ["A floats B's boat, so B is less excited than A"]], "negated_asymmetric_premise": ["person_b floats person_a's boat(B, A), so not More(excited(A), excited(B))", ["B floats A's boat, so A is not more excited than B"]], "negated_asymmetric_conclusion": ["person_a floats person_b's boat(A, B), so not More(excited(B), excited(A))", ["A floats B's boat, so B is not more excited than A"]]}
{"original": ["person_a becomes person_b adult(A, B), so More(confused(A), confused(B))", ["A is a child, B is a teenager, so A is more confused than B"]], "negated": ["person_a becomes person_b adult(A, B), so not Less(confused(A), confused(B))", ["A becomes an adult, so A is not less confused than B"]], "asymmetric_premise": ["person_b becomes person_a adult(B, A), so Less(confused(A), confused(B))", ["B becomes adult, A does not, so A is less confused than B"]], "asymmetric_conclusion": ["person_a becomes person_b adult(A, B), so Less(confused(B), confused(A))", ["A becomes B's parent, so B is less confused than A"]], "negated_asymmetric_premise": ["person_b becomes person_a adult(B, A), so not More(confused(A), confused(B))", ["B becomes adult, A is not, so A is not more confused than B"]], "negated_asymmetric_conclusion": ["person_a becomes person_b adult(A, B), so not More(confused(B), confused(A))", ["A becomes B's adult, so B is not more confused than A"]]}
{"original": ["person_a teaches person_b to play(A, B), so More(informative(A), informative(B))", ["A teaches B to play tennis, so A is more informative than B"]], "negated": ["person_a teaches person_b to play(A, B), so not Less(informative(A), informative(B))", ["A teaches B to play tennis, so A is not less informative than B"]], "asymmetric_premise": ["person_b teaches person_a to play(B, A), so Less(informative(A), informative(B))", ["B teaches A to play tennis, so A is less informative than B"]], "asymmetric_conclusion": ["person_a teaches person_b to play(A, B), so Less(informative(B), informative(A))", ["A teaches B to play tennis, so B is less informative than A"]], "negated_asymmetric_premise": ["person_b teaches person_a to play(B, A), so not More(informative(A), informative(B))", ["B teaches A to play tennis, so A is not more informative than B"]], "negated_asymmetric_conclusion": ["person_a teaches person_b to play(A, B), so not More(informative(B), informative(A))", ["A teaches B to play tennis, so B is not more informative than A"]]}
{"original": ["person_a tows person_b's car(A, B), so More(caring(A), caring(B))", ["A tows B's car, so A is more caring than B"]], "negated": ["person_a tows person_b's car(A, B), so not Less(caring(A), caring(B))", ["A tows B's car, so A is not less caring than B"]], "asymmetric_premise": ["person_b tows person_a's car(B, A), so Less(caring(A), caring(B))", ["B tows A's car, so A is less caring than B"]], "asymmetric_conclusion": ["person_a tows person_b's car(A, B), so Less(caring(B), caring(A))", ["A tows B's car, so B is less caring than A"]], "negated_asymmetric_premise": ["person_b tows person_a's car(B, A), so not More(caring(A), caring(B))", ["B tows A's car, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["person_a tows person_b's car(A, B), so not More(caring(B), caring(A))", ["A tows B's car, so B is not more caring than A"]]}
{"original": ["person_a has person_b's birthday party(A, B), so More(kind(A), kind(B))", ["A has a birthday party, B does not, so A is more kind than B"]], "negated": ["person_a has person_b's birthday party(A, B), so not Less(kind(A), kind(B))", ["A has a birthday party, B does not, so A is not less kind than B"]], "asymmetric_premise": ["person_b has person_a's birthday party(B, A), so Less(kind(A), kind(B))", ["B has a birthday party, A does not, so A is less kind than B"]], "asymmetric_conclusion": ["person_a has person_b's birthday party(A, B), so Less(kind(B), kind(A))", ["A has a birthday party, B does not, so B is less kind than A"]], "negated_asymmetric_premise": ["person_b has person_a's birthday party(B, A), so not More(kind(A), kind(B))", ["B has a birthday party, A does not, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["person_a has person_b's birthday party(A, B), so not More(kind(B), kind(A))", ["A has a birthday party, B does not, so B is not more kind than A"]]}
{"original": ["person_a makes person_b laugh(A, B), so More(silly(A), silly(B))", ["A makes B laugh, so A is more silly than B"]], "negated": ["person_a makes person_b laugh(A, B), so not Less(silly(A), silly(B))", ["A makes B laugh, so A is not less silly than B"]], "asymmetric_premise": ["person_b makes person_a laugh(B, A), so Less(silly(A), silly(B))", ["B makes A laugh, so A is less silly than B"]], "asymmetric_conclusion": ["person_a makes person_b laugh(A, B), so Less(silly(B), silly(A))", ["A makes B laugh, so B is less silly than A"]], "negated_asymmetric_premise": ["person_b makes person_a laugh(B, A), so not More(silly(A), silly(B))", ["B makes A laugh, so A is not more silly than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b laugh(A, B), so not More(silly(B), silly(A))", ["A makes B laugh, so B is not more silly than A"]]}
{"original": ["person_a makes person_b sleepy(A, B), so More(exhaustive(A), exhaustive(B))", ["A makes B sleepy, so A is more exhaustive than B"]], "negated": ["person_a makes person_b sleepy(A, B), so not Less(exhaustive(A), exhaustive(B))", ["A makes B sleepy, so A is not less exhaustive than B"]], "asymmetric_premise": ["person_b makes person_a sleepy(B, A), so Less(exhaustive(A), exhaustive(B))", ["B makes A sleepy, so A is less exhaustive than B"]], "asymmetric_conclusion": ["person_a makes person_b sleepy(A, B), so Less(exhaustive(B), exhaustive(A))", ["A makes B sleepy, so B is less exhaustive than A"]], "negated_asymmetric_premise": ["person_b makes person_a sleepy(B, A), so not More(exhaustive(A), exhaustive(B))", ["B makes A sleepy, so A is not more exhaustive than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b sleepy(A, B), so not More(exhaustive(B), exhaustive(A))", ["A makes B sleepy, so B is not more exhaustive than A"]]}
{"original": ["person_a clenches person_b's teeth(A, B), so More(annoyed(A), annoyed(B))", ["A clenches B's teeth, so A is more annoyed than B"]], "negated": ["person_a clenches person_b's teeth(A, B), so not Less(annoyed(A), annoyed(B))", ["A clenches B's teeth, so A is not less annoyed than B"]], "asymmetric_premise": ["person_b clenches person_a's teeth(B, A), so Less(annoyed(A), annoyed(B))", ["B clenches A's teeth, so A is less annoyed than B"]], "asymmetric_conclusion": ["person_a clenches person_b's teeth(A, B), so Less(annoyed(B), annoyed(A))", ["A clenches B's teeth, so B is less annoyed than A"]], "negated_asymmetric_premise": ["person_b clenches person_a's teeth(B, A), so not More(annoyed(A), annoyed(B))", ["B clenches A's teeth, so A is not more annoyed than B"]], "negated_asymmetric_conclusion": ["person_a clenches person_b's teeth(A, B), so not More(annoyed(B), annoyed(A))", ["A clenches B's teeth, so B is not more annoyed than A"]]}
{"original": ["person_a becomes friends with person_b(A, B), so More(friendly(A), friendly(B))", ["A becomes friends with B, so A is more friendly than B"]], "negated": ["person_a becomes friends with person_b(A, B), so not Less(friendly(A), friendly(B))", ["A becomes friends with B, so A is not less friendly than B"]], "asymmetric_premise": ["person_b becomes friends with person_a(B, A), so Less(friendly(A), friendly(B))", ["B becomes friends with A, so A is less friendly than B"]], "asymmetric_conclusion": ["person_a becomes friends with person_b(A, B), so Less(friendly(B), friendly(A))", ["A becomes friends with B, so B is less friendly than A"]], "negated_asymmetric_premise": ["person_b becomes friends with person_a(B, A), so not More(friendly(A), friendly(B))", ["B becomes friends with A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["person_a becomes friends with person_b(A, B), so not More(friendly(B), friendly(A))", ["A becomes friends with B, so B is not more friendly than A"]]}
{"original": ["person_a comes within person_b's reach(A, B), so More(nearby(A), nearby(B))", ["A is within B's reach, so A is more nearby than B"]], "negated": ["person_a comes within person_b's reach(A, B), so not Less(nearby(A), nearby(B))", ["A is within B's reach, so A is not less nearby than B"]], "asymmetric_premise": ["person_b comes within person_a's reach(B, A), so Less(nearby(A), nearby(B))", ["B is within A's reach, so A is less nearby than B"]], "asymmetric_conclusion": ["person_a comes within person_b's reach(A, B), so Less(nearby(B), nearby(A))", ["A comes within B's reach, so B is less nearby than A"]], "negated_asymmetric_premise": ["person_b comes within person_a's reach(B, A), so not More(nearby(A), nearby(B))", ["B comes within A's reach, so A is not more nearby than B"]], "negated_asymmetric_conclusion": ["person_a comes within person_b's reach(A, B), so not More(nearby(B), nearby(A))", ["A comes within B's reach, so B is not more nearby than A"]]}
{"original": ["person_a never see person_b(A, B), so More(careless(A), careless(B))", ["A never sees B, so A is more careless than B"]], "negated": ["person_a never see person_b(A, B), so not Less(careless(A), careless(B))", ["A and B never see each other, so A is not less careless than B"]], "asymmetric_premise": ["person_b never see person_a(B, A), so Less(careless(A), careless(B))", ["B and A never see each other, so A is less careless than B"]], "asymmetric_conclusion": ["person_a never see person_b(A, B), so Less(careless(B), careless(A))", ["A and B never see each other, so B is less careless than A"]], "negated_asymmetric_premise": ["person_b never see person_a(B, A), so not More(careless(A), careless(B))", ["B never sees A, so A is not more careless than B"]], "negated_asymmetric_conclusion": ["person_a never see person_b(A, B), so not More(careless(B), careless(A))", ["A never sees B, so B is not more careless than A"]]}
{"original": ["person_a gathers person_b's things(A, B), so More(helpful(A), helpful(B))", ["A gathers B's things, so A is more helpful than B"]], "negated": ["person_a gathers person_b's things(A, B), so not Less(helpful(A), helpful(B))", ["A gathers B's things, so A is not less helpful than B"]], "asymmetric_premise": ["person_b gathers person_a's things(B, A), so Less(helpful(A), helpful(B))", ["B gathers A's things, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a gathers person_b's things(A, B), so Less(helpful(B), helpful(A))", ["A gathers B's things, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b gathers person_a's things(B, A), so not More(helpful(A), helpful(B))", ["B gathers A's things, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a gathers person_b's things(A, B), so not More(helpful(B), helpful(A))", ["A gathers B's things, so B is not more helpful than A"]]}
{"original": ["person_a hits person_b on the head(A, B), so More(assertive(A), assertive(B))", ["A hits B on the head, so A is more assertive than B"]], "negated": ["person_a hits person_b on the head(A, B), so not Less(assertive(A), assertive(B))", ["A hits B on the head, so A is not less assertive than B"]], "asymmetric_premise": ["person_b hits person_a on the head(B, A), so Less(assertive(A), assertive(B))", ["B hits A on the head, so A is less assertive than B"]], "asymmetric_conclusion": ["person_a hits person_b on the head(A, B), so Less(assertive(B), assertive(A))", ["A hits B on the head, so B is less assertive than A"]], "negated_asymmetric_premise": ["person_b hits person_a on the head(B, A), so not More(assertive(A), assertive(B))", ["B hits A on the head, so A is not more assertive than B"]], "negated_asymmetric_conclusion": ["person_a hits person_b on the head(A, B), so not More(assertive(B), assertive(A))", ["A hits B on the head, so B is not more assertive than A"]]}
{"original": ["person_a lives happily person_b after(A, B), so More(romantic(A), romantic(B))", ["A lives happily after B, so A is more romantic than B"]], "negated": ["person_a lives happily person_b after(A, B), so not Less(romantic(A), romantic(B))", ["A lives happily after B, so A is not less romantic than B"]], "asymmetric_premise": ["person_b lives happily person_a after(B, A), so Less(romantic(A), romantic(B))", ["B lives happily after A, so A is less romantic than B"]], "asymmetric_conclusion": ["person_a lives happily person_b after(A, B), so Less(romantic(B), romantic(A))", ["A lives happily after B, so B is less romantic than A"]], "negated_asymmetric_premise": ["person_b lives happily person_a after(B, A), so not More(romantic(A), romantic(B))", ["B lives happily after A, so A is not more romantic than B"]], "negated_asymmetric_conclusion": ["person_a lives happily person_b after(A, B), so not More(romantic(B), romantic(A))", ["A lives happily after B, so B is not more romantic than A"]]}
{"original": ["person_a divides among person_b(A, B), so More(caring(A), caring(B))", ["A divides among people more than B, so A is more caring than B"]], "negated": ["person_a divides among person_b(A, B), so not Less(caring(A), caring(B))", ["A divides among B, so A is not less caring than B"]], "asymmetric_premise": ["person_b divides among person_a(B, A), so Less(caring(A), caring(B))", ["B divides among A, so A is less caring than B"]], "asymmetric_conclusion": ["person_a divides among person_b(A, B), so Less(caring(B), caring(A))", ["A divides among B, so B is less caring than A"]], "negated_asymmetric_premise": ["person_b divides among person_a(B, A), so not More(caring(A), caring(B))", ["B divides among A, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["person_a divides among person_b(A, B), so not More(caring(B), caring(A))", ["A divides among B, so B is not more caring than A"]]}
{"original": ["person_a treats person_b differently(A, B), so More(unfair(A), unfair(B))", ["A treats B differently, so A is more unfair than B"]], "negated": ["person_a treats person_b differently(A, B), so not Less(unfair(A), unfair(B))", ["A treats B differently than B, so A is not less unfair than B"]], "asymmetric_premise": ["person_b treats person_a differently(B, A), so Less(unfair(A), unfair(B))", ["B treats A differently than A, so A is less unfair than B"]], "asymmetric_conclusion": ["person_a treats person_b differently(A, B), so Less(unfair(B), unfair(A))", ["A treats B differently than B, so B is less unfair than A"]], "negated_asymmetric_premise": ["person_b treats person_a differently(B, A), so not More(unfair(A), unfair(B))", ["B treats A differently than A, so A is not more unfair than B"]], "negated_asymmetric_conclusion": ["person_a treats person_b differently(A, B), so not More(unfair(B), unfair(A))", ["A treats B differently than B, so B is not more unfair than A"]]}
{"original": ["person_a pays all of person_b's bills(A, B), so More(helpful(A), helpful(B))", ["A pays all of B's bills, so A is more helpful than B"]], "negated": ["person_a pays all of person_b's bills(A, B), so not Less(helpful(A), helpful(B))", ["A pays all of B's bills, so A is not less helpful than B"]], "asymmetric_premise": ["person_b pays all of person_a's bills(B, A), so Less(helpful(A), helpful(B))", ["B pays all of A's bills, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a pays all of person_b's bills(A, B), so Less(helpful(B), helpful(A))", ["A pays all of B's bills, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b pays all of person_a's bills(B, A), so not More(helpful(A), helpful(B))", ["B pays all of A's bills, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a pays all of person_b's bills(A, B), so not More(helpful(B), helpful(A))", ["A pays all of B's bills, so B is not more helpful than A"]]}
{"original": ["person_a grabs person_b's arms(A, B), so More(forceful(A), forceful(B))", ["A grabs B's arms, so A is more forceful than B"]], "negated": ["person_a grabs person_b's arms(A, B), so not Less(forceful(A), forceful(B))", ["A grabs B's arms, so A is not less forceful than B"]], "asymmetric_premise": ["person_b grabs person_a's arms(B, A), so Less(forceful(A), forceful(B))", ["B grabs A's arms, so A is less forceful than B"]], "asymmetric_conclusion": ["person_a grabs person_b's arms(A, B), so Less(forceful(B), forceful(A))", ["A grabs B's arms, so B is less forceful than A"]], "negated_asymmetric_premise": ["person_b grabs person_a's arms(B, A), so not More(forceful(A), forceful(B))", ["B grabs A's arms, so A is not more forceful than B"]], "negated_asymmetric_conclusion": ["person_a grabs person_b's arms(A, B), so not More(forceful(B), forceful(A))", ["A grabs B's arms, so B is not more forceful than A"]]}
{"original": ["person_a shakes hands with person_b(A, B), so More(responsive(A), responsive(B))", ["A shakes hands with B, so A is more responsive than B"]], "negated": ["person_a shakes hands with person_b(A, B), so not Less(responsive(A), responsive(B))", ["A shakes hands with B, so A is not less responsive than B"]], "asymmetric_premise": ["person_b shakes hands with person_a(B, A), so Less(responsive(A), responsive(B))", ["B shakes hands with A, so A is less responsive than B"]], "asymmetric_conclusion": ["person_a shakes hands with person_b(A, B), so Less(responsive(B), responsive(A))", ["A shakes hands with B, so B is less responsive than A"]], "negated_asymmetric_premise": ["person_b shakes hands with person_a(B, A), so not More(responsive(A), responsive(B))", ["B shakes hands with A, so A is not more responsive than B"]], "negated_asymmetric_conclusion": ["person_a shakes hands with person_b(A, B), so not More(responsive(B), responsive(A))", ["A shakes hands with B, so B is not more responsive than A"]]}
{"original": ["person_a kneels down beside person_b(A, B), so More(comforting(A), comforting(B))", ["A kneels down beside B, so A is more comforting than B"]], "negated": ["person_a kneels down beside person_b(A, B), so not Less(comforting(A), comforting(B))", ["A kneels down beside B, so A is not less comforting than B"]], "asymmetric_premise": ["person_b kneels down beside person_a(B, A), so Less(comforting(A), comforting(B))", ["B kneels down beside A, so A is less comforting than B"]], "asymmetric_conclusion": ["person_a kneels down beside person_b(A, B), so Less(comforting(B), comforting(A))", ["A kneels down beside B, so B is less comforting than A"]], "negated_asymmetric_premise": ["person_b kneels down beside person_a(B, A), so not More(comforting(A), comforting(B))", ["B kneels down beside A, so A is not more comforting than B"]], "negated_asymmetric_conclusion": ["person_a kneels down beside person_b(A, B), so not More(comforting(B), comforting(A))", ["A kneels down beside B, so B is not more comforting than A"]]}
{"original": ["person_a slides person_b's fingers(A, B), so More(social(A), social(B))", ["A slides B's fingers, so A is more social than B"]], "negated": ["person_a slides person_b's fingers(A, B), so not Less(social(A), social(B))", ["A slides B's fingers, so A is not less social than B"]], "asymmetric_premise": ["person_b slides person_a's fingers(B, A), so Less(social(A), social(B))", ["B slides A's fingers, so A is less social than B"]], "asymmetric_conclusion": ["person_a slides person_b's fingers(A, B), so Less(social(B), social(A))", ["A slides B's fingers, so B is less social than A"]], "negated_asymmetric_premise": ["person_b slides person_a's fingers(B, A), so not More(social(A), social(B))", ["B slides A's fingers, so A is not more social than B"]], "negated_asymmetric_conclusion": ["person_a slides person_b's fingers(A, B), so not More(social(B), social(A))", ["A slides B's fingers, so B is not more social than A"]]}
{"original": ["person_a helps person_b's team win(A, B), so More(ambitious(A), ambitious(B))", ["A helps the team win more than B, so A is more ambitious than B"]], "negated": ["person_a helps person_b's team win(A, B), so not Less(ambitious(A), ambitious(B))", ["A helps B's team win, so A is not less ambitious than B"]], "asymmetric_premise": ["person_b helps person_a's team win(B, A), so Less(ambitious(A), ambitious(B))", ["B helps A's team win, so A is less ambitious than B"]], "asymmetric_conclusion": ["person_a helps person_b's team win(A, B), so Less(ambitious(B), ambitious(A))", ["A helps B's team win more than A, so B is less ambitious than A"]], "negated_asymmetric_premise": ["person_b helps person_a's team win(B, A), so not More(ambitious(A), ambitious(B))", ["B helps A's team win more than B, so A is not more ambitious than B"]], "negated_asymmetric_conclusion": ["person_a helps person_b's team win(A, B), so not More(ambitious(B), ambitious(A))", ["A helps B's team win, so B is not more ambitious than A"]]}
{"original": ["person_a sees person_b's aunt(A, B), so More(familiar(A), familiar(B))", ["A sees B's aunt, so A is more familiar than B"]], "negated": ["person_a sees person_b's aunt(A, B), so not Less(familiar(A), familiar(B))", ["A sees B's aunt, so A is not less familiar than B"]], "asymmetric_premise": ["person_b sees person_a's aunt(B, A), so Less(familiar(A), familiar(B))", ["B sees A's aunt, so A is less familiar than B"]], "asymmetric_conclusion": ["person_a sees person_b's aunt(A, B), so Less(familiar(B), familiar(A))", ["A sees B's aunt, so B is less familiar than A"]], "negated_asymmetric_premise": ["person_b sees person_a's aunt(B, A), so not More(familiar(A), familiar(B))", ["B sees A's aunt, so A is not more familiar than B"]], "negated_asymmetric_conclusion": ["person_a sees person_b's aunt(A, B), so not More(familiar(B), familiar(A))", ["A sees B's aunt, so B is not more familiar than A"]]}
{"original": ["person_a gives person_b the address(A, B), so More(helpful(A), helpful(B))", ["A gives B the address, so A is more helpful than B"]], "negated": ["person_a gives person_b the address(A, B), so not Less(helpful(A), helpful(B))", ["A gives B the address, so A is not less helpful than B"]], "asymmetric_premise": ["person_b gives person_a the address(B, A), so Less(helpful(A), helpful(B))", ["B gives A the address, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a gives person_b the address(A, B), so Less(helpful(B), helpful(A))", ["A gives B the address, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b gives person_a the address(B, A), so not More(helpful(A), helpful(B))", ["B gives A the address, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b the address(A, B), so not More(helpful(B), helpful(A))", ["A gives B the address, so B is not more helpful than A"]]}
{"original": ["person_a never saw person_b(A, B), so More(longing(A), longing(B))", ["A never saw B, so A is more longing than B"]], "negated": ["person_a never saw person_b(A, B), so not Less(longing(A), longing(B))", ["A never saw B, so A is not less longing than B"]], "asymmetric_premise": ["person_b never saw person_a(B, A), so Less(longing(A), longing(B))", ["B never saw A, so A is less longing than B"]], "asymmetric_conclusion": ["person_a never saw person_b(A, B), so Less(longing(B), longing(A))", ["A never saw B, so B is less longing than A"]], "negated_asymmetric_premise": ["person_b never saw person_a(B, A), so not More(longing(A), longing(B))", ["B never saw A, so A is not more longing than B"]], "negated_asymmetric_conclusion": ["person_a never saw person_b(A, B), so not More(longing(B), longing(A))", ["A never saw B, so B is not more longing than A"]]}
{"original": ["person_a wants to join person_b(A, B), so More(bored(A), bored(B))", ["A wants to join B, so A is more bored than B"]], "negated": ["person_a wants to join person_b(A, B), so not Less(bored(A), bored(B))", ["A wants to join B, so A is not less bored than B"]], "asymmetric_premise": ["person_b wants to join person_a(B, A), so Less(bored(A), bored(B))", ["B wants to join A, so A is less bored than B"]], "asymmetric_conclusion": ["person_a wants to join person_b(A, B), so Less(bored(B), bored(A))", ["A wants to join B, so B is less bored than A"]], "negated_asymmetric_premise": ["person_b wants to join person_a(B, A), so not More(bored(A), bored(B))", ["B wants to join A, so A is not more bored than B"]], "negated_asymmetric_conclusion": ["person_a wants to join person_b(A, B), so not More(bored(B), bored(A))", ["A wants to join B, so B is not more bored than A"]]}
{"original": ["person_a urges person_b to accept(A, B), so More(persuasive(A), persuasive(B))", ["A urges B to accept, so A is more persuasive than B"]], "negated": ["person_a urges person_b to accept(A, B), so not Less(persuasive(A), persuasive(B))", ["A is not less persuasive than B, so A is not less persuasive than B"]], "asymmetric_premise": ["person_b urges person_a to accept(B, A), so Less(persuasive(A), persuasive(B))", ["B urges A to accept, so A is less persuasive than B"]], "asymmetric_conclusion": ["person_a urges person_b to accept(A, B), so Less(persuasive(B), persuasive(A))", ["A urges B to accept, so B is less persuasive than A"]], "negated_asymmetric_premise": ["person_b urges person_a to accept(B, A), so not More(persuasive(A), persuasive(B))", ["B urges A to accept, so A is not more persuasive than B"]], "negated_asymmetric_conclusion": ["person_a urges person_b to accept(A, B), so not More(persuasive(B), persuasive(A))", ["A is not more persuasive than B, so B is not more persuasive than A"]]}
{"original": ["person_a rubs person_b's hands together(A, B), so More(mean(A), mean(B))", ["A rubs B's hands together, so A is more mean than B"]], "negated": ["person_a rubs person_b's hands together(A, B), so not Less(mean(A), mean(B))", ["A rubs B's hands together, so A is not less mean than B"]], "asymmetric_premise": ["person_b rubs person_a's hands together(B, A), so Less(mean(A), mean(B))", ["B rubs A's hands together, so A is less mean than B"]], "asymmetric_conclusion": ["person_a rubs person_b's hands together(A, B), so Less(mean(B), mean(A))", ["A rubs B's hands together, so B is less mean than A"]], "negated_asymmetric_premise": ["person_b rubs person_a's hands together(B, A), so not More(mean(A), mean(B))", ["B rubs A's hands together, so A is not more mean than B"]], "negated_asymmetric_conclusion": ["person_a rubs person_b's hands together(A, B), so not More(mean(B), mean(A))", ["A rubs B's hands together, so B is not more mean than A"]]}
{"original": ["person_a reads person_b book(A, B), so More(occupied(A), occupied(B))", ["A reads a book more than B, so A is more occupied than B"]], "negated": ["person_a reads person_b book(A, B), so not Less(occupied(A), occupied(B))", ["A reads B's book, so A is not less occupied than B"]], "asymmetric_premise": ["person_b reads person_a book(B, A), so Less(occupied(A), occupied(B))", ["B reads A's book, so A is less occupied than B"]], "asymmetric_conclusion": ["person_a reads person_b book(A, B), so Less(occupied(B), occupied(A))", ["A reads a book more than B, so B is less occupied than A"]], "negated_asymmetric_premise": ["person_b reads person_a book(B, A), so not More(occupied(A), occupied(B))", ["B reads A's book, so A is not more occupied than B"]], "negated_asymmetric_conclusion": ["person_a reads person_b book(A, B), so not More(occupied(B), occupied(A))", ["A reads B's book, so B is not more occupied than A"]]}
{"original": ["person_a reproduces in person_b manner(A, B), so More(dutiful(A), dutiful(B))", ["A is reproduces in a more dutiful manner than B, so A is more dutiful than B"]], "negated": ["person_a reproduces in person_b manner(A, B), so not Less(dutiful(A), dutiful(B))", ["A is reproduces in a less dutiful manner than B, so A is not less dutiful than B"]], "asymmetric_premise": ["person_b reproduces in person_a manner(B, A), so Less(dutiful(A), dutiful(B))", ["B reproduces in a less dutiful manner than A, so A is less dutiful than B"]], "asymmetric_conclusion": ["person_a reproduces in person_b manner(A, B), so Less(dutiful(B), dutiful(A))", ["A reproduces in a less dutiful manner than B, so B is less dutiful than A"]], "negated_asymmetric_premise": ["person_b reproduces in person_a manner(B, A), so not More(dutiful(A), dutiful(B))", ["B is not more dutiful than A, so A is not more dutiful than B"]], "negated_asymmetric_conclusion": ["person_a reproduces in person_b manner(A, B), so not More(dutiful(B), dutiful(A))", ["A reproduces in a more dutiful manner than B, so B is not more dutiful than A"]]}
{"original": ["person_a kneels in front of person_b(A, B), so More(polite(A), polite(B))", ["A kneels in front of B, so A is more polite than B"]], "negated": ["person_a kneels in front of person_b(A, B), so not Less(polite(A), polite(B))", ["A kneels in front of B, so A is not less polite than B"]], "asymmetric_premise": ["person_b kneels in front of person_a(B, A), so Less(polite(A), polite(B))", ["B kneels in front of A, so A is less polite than B"]], "asymmetric_conclusion": ["person_a kneels in front of person_b(A, B), so Less(polite(B), polite(A))", ["A kneels in front of B, so B is less polite than A"]], "negated_asymmetric_premise": ["person_b kneels in front of person_a(B, A), so not More(polite(A), polite(B))", ["B kneels in front of A, so A is not more polite than B"]], "negated_asymmetric_conclusion": ["person_a kneels in front of person_b(A, B), so not More(polite(B), polite(A))", ["A kneels in front of B, so B is not more polite than A"]]}
{"original": ["person_a blows person_b's engine(A, B), so More(risky(A), risky(B))", ["A blows B's engine, so A is more risky than B"]], "negated": ["person_a blows person_b's engine(A, B), so not Less(risky(A), risky(B))", ["A blows B's engine, so A is not less risky than B"]], "asymmetric_premise": ["person_b blows person_a's engine(B, A), so Less(risky(A), risky(B))", ["B blows A's engine, so A is less risky than B"]], "asymmetric_conclusion": ["person_a blows person_b's engine(A, B), so Less(risky(B), risky(A))", ["A blows B's engine, so B is less risky than A"]], "negated_asymmetric_premise": ["person_b blows person_a's engine(B, A), so not More(risky(A), risky(B))", ["B blows A's engine, so A is not more risky than B"]], "negated_asymmetric_conclusion": ["person_a blows person_b's engine(A, B), so not More(risky(B), risky(A))", ["A blows B's engine, so B is not more risky than A"]]}
{"original": ["person_a brings person_b back(A, B), so More(helpful(A), helpful(B))", ["A brings B back, so A is more helpful than B"]], "negated": ["person_a brings person_b back(A, B), so not Less(helpful(A), helpful(B))", ["A brings B back, so A is not less helpful than B"]], "asymmetric_premise": ["person_b brings person_a back(B, A), so Less(helpful(A), helpful(B))", ["B brings A back, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a brings person_b back(A, B), so Less(helpful(B), helpful(A))", ["A brings B back, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b brings person_a back(B, A), so not More(helpful(A), helpful(B))", ["B brings A back, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a brings person_b back(A, B), so not More(helpful(B), helpful(A))", ["A brings B back, so B is not more helpful than A"]]}
{"original": ["person_a starts flirting with person_b(A, B), so More(interested(A), interested(B))", ["A starts flirting with B, so A is more interested than B"]], "negated": ["person_a starts flirting with person_b(A, B), so not Less(interested(A), interested(B))", ["A starts flirting with B, so A is not less interested than B"]], "asymmetric_premise": ["person_b starts flirting with person_a(B, A), so Less(interested(A), interested(B))", ["B starts flirting with A, so A is less interested than B"]], "asymmetric_conclusion": ["person_a starts flirting with person_b(A, B), so Less(interested(B), interested(A))", ["A starts flirting with B, so B is less interested than A"]], "negated_asymmetric_premise": ["person_b starts flirting with person_a(B, A), so not More(interested(A), interested(B))", ["B starts flirting with A, so A is not more interested than B"]], "negated_asymmetric_conclusion": ["person_a starts flirting with person_b(A, B), so not More(interested(B), interested(A))", ["A starts flirting with B, so B is not more interested than A"]]}
{"original": ["person_a nuzzles person_b's face(A, B), so More(brisk(A), brisk(B))", ["A nuzzles B's face, so A is more brisk than B"]], "negated": ["person_a nuzzles person_b's face(A, B), so not Less(brisk(A), brisk(B))", ["A nuzzles B's face, so A is not less brisk than B"]], "asymmetric_premise": ["person_b nuzzles person_a's face(B, A), so Less(brisk(A), brisk(B))", ["B nuzzles A's face, so A is less brisk than B"]], "asymmetric_conclusion": ["person_a nuzzles person_b's face(A, B), so Less(brisk(B), brisk(A))", ["A nuzzles B's face, so B is less brisk than A"]], "negated_asymmetric_premise": ["person_b nuzzles person_a's face(B, A), so not More(brisk(A), brisk(B))", ["B nuzzles A's face, so A is not more brisk than B"]], "negated_asymmetric_conclusion": ["person_a nuzzles person_b's face(A, B), so not More(brisk(B), brisk(A))", ["A nuzzles B's face, so B is not more brisk than A"]]}
{"original": ["person_a makes person_b angry(A, B), so More(irritating(A), irritating(B))", ["A makes B angry, so A is more irritating than B"]], "negated": ["person_a makes person_b angry(A, B), so not Less(irritating(A), irritating(B))", ["A makes B angry, so A is not less irritating than B"]], "asymmetric_premise": ["person_b makes person_a angry(B, A), so Less(irritating(A), irritating(B))", ["B makes A angry, so A is less irritating than B"]], "asymmetric_conclusion": ["person_a makes person_b angry(A, B), so Less(irritating(B), irritating(A))", ["A makes B angry, so B is less irritating than A"]], "negated_asymmetric_premise": ["person_b makes person_a angry(B, A), so not More(irritating(A), irritating(B))", ["B makes A angry, so A is not more irritating than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b angry(A, B), so not More(irritating(B), irritating(A))", ["A makes B angry, so B is not more irritating than A"]]}
{"original": ["person_a pats person_b on the shoulder(A, B), so More(conversating(A), conversating(B))", ["A pats B on the shoulder, so A is more likely to be conversating than B"]], "negated": ["person_a pats person_b on the shoulder(A, B), so not Less(conversating(A), conversating(B))", ["A pats B on the shoulder, so A is not less conversating than B"]], "asymmetric_premise": ["person_b pats person_a on the shoulder(B, A), so Less(conversating(A), conversating(B))", ["B pats A on the shoulder, so A is less likely to be conversating than B"]], "asymmetric_conclusion": ["person_a pats person_b on the shoulder(A, B), so Less(conversating(B), conversating(A))", ["A pats B on the shoulder, so B is less likely to be conversating than A"]], "negated_asymmetric_premise": ["person_b pats person_a on the shoulder(B, A), so not More(conversating(A), conversating(B))", ["B pats A on the shoulder, so A is not more conversating than B"]], "negated_asymmetric_conclusion": ["person_a pats person_b on the shoulder(A, B), so not More(conversating(B), conversating(A))", ["A pats B on the shoulder, so B is not more conversating than A"]]}
{"original": ["person_a puts person_b back(A, B), so More(supportive(A), supportive(B))", ["A puts B back, so A is more supportive than B"]], "negated": ["person_a puts person_b back(A, B), so not Less(supportive(A), supportive(B))", ["A puts B back, so A is not less supportive than B"]], "asymmetric_premise": ["person_b puts person_a back(B, A), so Less(supportive(A), supportive(B))", ["B puts A back, so A is less supportive than B"]], "asymmetric_conclusion": ["person_a puts person_b back(A, B), so Less(supportive(B), supportive(A))", ["A puts B back, so B is less supportive than A"]], "negated_asymmetric_premise": ["person_b puts person_a back(B, A), so not More(supportive(A), supportive(B))", ["B puts A back, so A is not more supportive than B"]], "negated_asymmetric_conclusion": ["person_a puts person_b back(A, B), so not More(supportive(B), supportive(A))", ["A puts B back, so B is not more supportive than A"]]}
{"original": ["person_a takes person_b responsibility(A, B), so More(helpful(A), helpful(B))", ["A takes responsibility for B, so A is more helpful than B"]], "negated": ["person_a takes person_b responsibility(A, B), so not Less(helpful(A), helpful(B))", ["A takes responsibility for B, so A is not less helpful than B"]], "asymmetric_premise": ["person_b takes person_a responsibility(B, A), so Less(helpful(A), helpful(B))", ["B takes A's responsibility, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a takes person_b responsibility(A, B), so Less(helpful(B), helpful(A))", ["A takes B's responsibility, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b takes person_a responsibility(B, A), so not More(helpful(A), helpful(B))", ["B takes A's responsibility, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b responsibility(A, B), so not More(helpful(B), helpful(A))", ["A takes responsibility for B, so B is not more helpful than A"]]}
{"original": ["person_a rushes towards person_b(A, B), so More(aggressive(A), aggressive(B))", ["A rushes towards B, so A is more aggressive than B"]], "negated": ["person_a rushes towards person_b(A, B), so not Less(aggressive(A), aggressive(B))", ["A rushes towards B, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b rushes towards person_a(B, A), so Less(aggressive(A), aggressive(B))", ["B rushes towards A, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a rushes towards person_b(A, B), so Less(aggressive(B), aggressive(A))", ["A rushes towards B, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b rushes towards person_a(B, A), so not More(aggressive(A), aggressive(B))", ["B rushes towards A, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a rushes towards person_b(A, B), so not More(aggressive(B), aggressive(A))", ["A rushes towards B, so B is not more aggressive than A"]]}
{"original": ["person_a is so happy to see person_b(A, B), so More(overjoyed(A), overjoyed(B))", ["A is so happy to see B, so A is more overjoyed than B"]], "negated": ["person_a is so happy to see person_b(A, B), so not Less(overjoyed(A), overjoyed(B))", ["A is so happy to see B, so A is not less overjoyed than B"]], "asymmetric_premise": ["person_b is so happy to see person_a(B, A), so Less(overjoyed(A), overjoyed(B))", ["B is so happy to see A, so A is less overjoyed than B"]], "asymmetric_conclusion": ["person_a is so happy to see person_b(A, B), so Less(overjoyed(B), overjoyed(A))", ["A is so happy to see B, so B is less overjoyed than A"]], "negated_asymmetric_premise": ["person_b is so happy to see person_a(B, A), so not More(overjoyed(A), overjoyed(B))", ["B is so happy to see A, so A is not more overjoyed than B"]], "negated_asymmetric_conclusion": ["person_a is so happy to see person_b(A, B), so not More(overjoyed(B), overjoyed(A))", ["A is so happy to see B, so B is not more overjoyed than A"]]}
{"original": ["person_a asks person_b's friend for advice(A, B), so More(confused(A), confused(B))", ["A asks B for advice, so A is more confused than B"]], "negated": ["person_a asks person_b's friend for advice(A, B), so not Less(confused(A), confused(B))", ["A asks B's friend for advice, so A is not less confused than B"]], "asymmetric_premise": ["person_b asks person_a's friend for advice(B, A), so Less(confused(A), confused(B))", ["B asks A's friend for advice, so A is less confused than B"]], "asymmetric_conclusion": ["person_a asks person_b's friend for advice(A, B), so Less(confused(B), confused(A))", ["A asks B's friend for advice, so B is less confused than A"]], "negated_asymmetric_premise": ["person_b asks person_a's friend for advice(B, A), so not More(confused(A), confused(B))", ["B asks A's friend for advice, so A is not more confused than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b's friend for advice(A, B), so not More(confused(B), confused(A))", ["A asks B's friend for advice, so B is not more confused than A"]]}
{"original": ["person_a asks person_b's family(A, B), so More(loyal(A), loyal(B))", ["A asks B's family for money, so A is more loyal than B"]], "negated": ["person_a asks person_b's family(A, B), so not Less(loyal(A), loyal(B))", ["A asks B's family for money, so A is not less loyal than B"]], "asymmetric_premise": ["person_b asks person_a's family(B, A), so Less(loyal(A), loyal(B))", ["B asks A's family to marry him, so A is less loyal than B"]], "asymmetric_conclusion": ["person_a asks person_b's family(A, B), so Less(loyal(B), loyal(A))", ["A asks B's family for money, so B is less loyal than A"]], "negated_asymmetric_premise": ["person_b asks person_a's family(B, A), so not More(loyal(A), loyal(B))", ["B asks A's family to marry him, so A is not more loyal than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b's family(A, B), so not More(loyal(B), loyal(A))", ["A asks B's family for money, so B is not more loyal than A"]]}
{"original": ["person_a supports person_b's views(A, B), so More(cooperative(A), cooperative(B))", ["A supports B's views, so A is more cooperative than B"]], "negated": ["person_a supports person_b's views(A, B), so not Less(cooperative(A), cooperative(B))", ["A supports B's views, so A is not less cooperative than B"]], "asymmetric_premise": ["person_b supports person_a's views(B, A), so Less(cooperative(A), cooperative(B))", ["B supports A's views, so A is less cooperative than B"]], "asymmetric_conclusion": ["person_a supports person_b's views(A, B), so Less(cooperative(B), cooperative(A))", ["A supports B's views, so B is less cooperative than A"]], "negated_asymmetric_premise": ["person_b supports person_a's views(B, A), so not More(cooperative(A), cooperative(B))", ["B supports A's views, so A is not more cooperative than B"]], "negated_asymmetric_conclusion": ["person_a supports person_b's views(A, B), so not More(cooperative(B), cooperative(A))", ["A supports B's views, so B is not more cooperative than A"]]}
{"original": ["person_a walks person_b back(A, B), so More(protective(A), protective(B))", ["A walks B back, so A is more protective than B"]], "negated": ["person_a walks person_b back(A, B), so not Less(protective(A), protective(B))", ["A walks B back, so A is not less protective than B"]], "asymmetric_premise": ["person_b walks person_a back(B, A), so Less(protective(A), protective(B))", ["B walks A back, so A is less protective than B"]], "asymmetric_conclusion": ["person_a walks person_b back(A, B), so Less(protective(B), protective(A))", ["A walks B back, so B is less protective than A"]], "negated_asymmetric_premise": ["person_b walks person_a back(B, A), so not More(protective(A), protective(B))", ["B walks A back, so A is not more protective than B"]], "negated_asymmetric_conclusion": ["person_a walks person_b back(A, B), so not More(protective(B), protective(A))", ["A walks B back, so B is not more protective than A"]]}
{"original": ["person_a mentions person_b's name(A, B), so More(interested(A), interested(B))", ["A mentions B's name, so A is more interested than B"]], "negated": ["person_a mentions person_b's name(A, B), so not Less(interested(A), interested(B))", ["A mentions B's name, so A is not less interested than B"]], "asymmetric_premise": ["person_b mentions person_a's name(B, A), so Less(interested(A), interested(B))", ["B mentions A's name, so A is less interested than B"]], "asymmetric_conclusion": ["person_a mentions person_b's name(A, B), so Less(interested(B), interested(A))", ["A mentions B's name, so B is less interested than A"]], "negated_asymmetric_premise": ["person_b mentions person_a's name(B, A), so not More(interested(A), interested(B))", ["B mentions A's name, so A is not more interested than B"]], "negated_asymmetric_conclusion": ["person_a mentions person_b's name(A, B), so not More(interested(B), interested(A))", ["A mentions B's name, so B is not more interested than A"]]}
{"original": ["person_a slings over person_b's shoulder(A, B), so More(playful(A), playful(B))", ["A slings over B's shoulder, so A is more playful than B"]], "negated": ["person_a slings over person_b's shoulder(A, B), so not Less(playful(A), playful(B))", ["A slings over B's shoulder, so A is not less playful than B"]], "asymmetric_premise": ["person_b slings over person_a's shoulder(B, A), so Less(playful(A), playful(B))", ["B slings over A's shoulder, so A is less playful than B"]], "asymmetric_conclusion": ["person_a slings over person_b's shoulder(A, B), so Less(playful(B), playful(A))", ["A slings over B's shoulder, so B is less playful than A"]], "negated_asymmetric_premise": ["person_b slings over person_a's shoulder(B, A), so not More(playful(A), playful(B))", ["B slings over A's shoulder, so A is not more playful than B"]], "negated_asymmetric_conclusion": ["person_a slings over person_b's shoulder(A, B), so not More(playful(B), playful(A))", ["A slings over B's shoulder, so B is not more playful than A"]]}
{"original": ["person_a mounts person_b horse(A, B), so More(using(A), using(B))", ["A mounts a horse, B does not, so A is more likely to be using the horse than B"]], "negated": ["person_a mounts person_b horse(A, B), so not Less(using(A), using(B))", ["A mounts a horse, B does not, so A is not less using than B"]], "asymmetric_premise": ["person_b mounts person_a horse(B, A), so Less(using(A), using(B))", ["B mounts a horse, A does not, so A is less likely to be on a horse than B"]], "asymmetric_conclusion": ["person_a mounts person_b horse(A, B), so Less(using(B), using(A))", ["A mounts a horse, B does not, so B is less likely to be used than A"]], "negated_asymmetric_premise": ["person_b mounts person_a horse(B, A), so not More(using(A), using(B))", ["B mounts a horse, A does not, so A is not more using than B"]], "negated_asymmetric_conclusion": ["person_a mounts person_b horse(A, B), so not More(using(B), using(A))", ["A mounts a horse, B does not, so B is not more likely to be using A than A"]]}
{"original": ["person_a resumes person_b's work(A, B), so More(interested(A), interested(B))", ["A resumes B's work, so A is more interested than B"]], "negated": ["person_a resumes person_b's work(A, B), so not Less(interested(A), interested(B))", ["A resumes B's work, so A is not less interested than B"]], "asymmetric_premise": ["person_b resumes person_a's work(B, A), so Less(interested(A), interested(B))", ["B resumes A's work, so A is less interested than B"]], "asymmetric_conclusion": ["person_a resumes person_b's work(A, B), so Less(interested(B), interested(A))", ["A resumes B's work, so B is less interested than A"]], "negated_asymmetric_premise": ["person_b resumes person_a's work(B, A), so not More(interested(A), interested(B))", ["B resumes A's work, so A is not more interested than B"]], "negated_asymmetric_conclusion": ["person_a resumes person_b's work(A, B), so not More(interested(B), interested(A))", ["A resumes B's work, so B is not more interested than A"]]}
{"original": ["person_a never saw person_b(A, B), so More(antisocial(A), antisocial(B))", ["A never saw B, so A is more antisocial than B"]], "negated": ["person_a never saw person_b(A, B), so not Less(antisocial(A), antisocial(B))", ["A never saw B, so A is not less antisocial than B"]], "asymmetric_premise": ["person_b never saw person_a(B, A), so Less(antisocial(A), antisocial(B))", ["B never saw A, so A is less antisocial than B"]], "asymmetric_conclusion": ["person_a never saw person_b(A, B), so Less(antisocial(B), antisocial(A))", ["A never saw B, so B is less antisocial than A"]], "negated_asymmetric_premise": ["person_b never saw person_a(B, A), so not More(antisocial(A), antisocial(B))", ["B never saw A, so A is not more antisocial than B"]], "negated_asymmetric_conclusion": ["person_a never saw person_b(A, B), so not More(antisocial(B), antisocial(A))", ["A never saw B, so B is not more antisocial than A"]]}
{"original": ["person_a shows person_b's appreciation(A, B), so More(appreciative(A), appreciative(B))", ["A shows B's appreciation, so A is more appreciative than B"]], "negated": ["person_a shows person_b's appreciation(A, B), so not Less(appreciative(A), appreciative(B))", ["A shows B's appreciation, so A is not less appreciative than B"]], "asymmetric_premise": ["person_b shows person_a's appreciation(B, A), so Less(appreciative(A), appreciative(B))", ["B shows A's appreciation, so A is less appreciative than B"]], "asymmetric_conclusion": ["person_a shows person_b's appreciation(A, B), so Less(appreciative(B), appreciative(A))", ["A shows B's appreciation, so B is less appreciative than A"]], "negated_asymmetric_premise": ["person_b shows person_a's appreciation(B, A), so not More(appreciative(A), appreciative(B))", ["B shows A's appreciation, so A is not more appreciative than B"]], "negated_asymmetric_conclusion": ["person_a shows person_b's appreciation(A, B), so not More(appreciative(B), appreciative(A))", ["A shows B's appreciation, so B is not more appreciative than A"]]}
{"original": ["person_a wants person_b to say(A, B), so More(demanding(A), demanding(B))", ["A wants B to say something, so A is more demanding than B"]], "negated": ["person_a wants person_b to say(A, B), so not Less(demanding(A), demanding(B))", ["A wants B to say something, so A is not less demanding than B"]], "asymmetric_premise": ["person_b wants person_a to say(B, A), so Less(demanding(A), demanding(B))", ["B wants A to say something, so A is less demanding than B"]], "asymmetric_conclusion": ["person_a wants person_b to say(A, B), so Less(demanding(B), demanding(A))", ["A wants B to say something, so B is less demanding than A"]], "negated_asymmetric_premise": ["person_b wants person_a to say(B, A), so not More(demanding(A), demanding(B))", ["B wants A to say something, so A is not more demanding than B"]], "negated_asymmetric_conclusion": ["person_a wants person_b to say(A, B), so not More(demanding(B), demanding(A))", ["A wants B to say something, so B is not more demanding than A"]]}
{"original": ["person_a keeps person_b afloat(A, B), so More(strong(A), strong(B))", ["A keeps B afloat, so A is more strong than B"]], "negated": ["person_a keeps person_b afloat(A, B), so not Less(strong(A), strong(B))", ["A keeps B afloat, so A is not less strong than B"]], "asymmetric_premise": ["person_b keeps person_a afloat(B, A), so Less(strong(A), strong(B))", ["B keeps A afloat, so A is less strong than B"]], "asymmetric_conclusion": ["person_a keeps person_b afloat(A, B), so Less(strong(B), strong(A))", ["A keeps B afloat, so B is less strong than A"]], "negated_asymmetric_premise": ["person_b keeps person_a afloat(B, A), so not More(strong(A), strong(B))", ["B keeps A afloat, so A is not more strong than B"]], "negated_asymmetric_conclusion": ["person_a keeps person_b afloat(A, B), so not More(strong(B), strong(A))", ["A keeps B afloat, so B is not more strong than A"]]}
{"original": ["person_a asks person_b to find(A, B), so More(blind(A), blind(B))", ["A is blind, B is not, so A is more blind than B"]], "negated": ["person_a asks person_b to find(A, B), so not Less(blind(A), blind(B))", ["A asks B to find something, so A is not less blind than B"]], "asymmetric_premise": ["person_b asks person_a to find(B, A), so Less(blind(A), blind(B))", ["B asks A to find something, so A is less blind than B"]], "asymmetric_conclusion": ["person_a asks person_b to find(A, B), so Less(blind(B), blind(A))", ["A asks B to find A, so B is less blind than A"]], "negated_asymmetric_premise": ["person_b asks person_a to find(B, A), so not More(blind(A), blind(B))", ["B asks A to find something, so A is not more blind than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b to find(A, B), so not More(blind(B), blind(A))", ["A asks B to find something, so B is not more blind than A"]]}
{"original": ["person_a holds person_b close(A, B), so More(loving(A), loving(B))", ["A holds B close, so A is more loving than B"]], "negated": ["person_a holds person_b close(A, B), so not Less(loving(A), loving(B))", ["A holds B close, so A is not less loving than B"]], "asymmetric_premise": ["person_b holds person_a close(B, A), so Less(loving(A), loving(B))", ["B holds A close, so A is less loving than B"]], "asymmetric_conclusion": ["person_a holds person_b close(A, B), so Less(loving(B), loving(A))", ["A holds B close, so B is less loving than A"]], "negated_asymmetric_premise": ["person_b holds person_a close(B, A), so not More(loving(A), loving(B))", ["B holds A close, so A is not more loving than B"]], "negated_asymmetric_conclusion": ["person_a holds person_b close(A, B), so not More(loving(B), loving(A))", ["A holds B close, so B is not more loving than A"]]}
{"original": ["person_a finds person_b's cat(A, B), so More(lucky(A), lucky(B))", ["A finds B's cat, so A is more lucky than B"]], "negated": ["person_a finds person_b's cat(A, B), so not Less(lucky(A), lucky(B))", ["A finds B's cat, so A is not less lucky than B"]], "asymmetric_premise": ["person_b finds person_a's cat(B, A), so Less(lucky(A), lucky(B))", ["B finds A's cat, so A is less lucky than B"]], "asymmetric_conclusion": ["person_a finds person_b's cat(A, B), so Less(lucky(B), lucky(A))", ["A finds B's cat, so B is less lucky than A"]], "negated_asymmetric_premise": ["person_b finds person_a's cat(B, A), so not More(lucky(A), lucky(B))", ["B finds A's cat, so A is not more lucky than B"]], "negated_asymmetric_conclusion": ["person_a finds person_b's cat(A, B), so not More(lucky(B), lucky(A))", ["A finds B's cat, so B is not more lucky than A"]]}
{"original": ["person_a takes person_b to court(A, B), so More(lawful(A), lawful(B))", ["A takes B to court, so A is more lawful than B"]], "negated": ["person_a takes person_b to court(A, B), so not Less(lawful(A), lawful(B))", ["A takes B to court, so A is not less lawful than B"]], "asymmetric_premise": ["person_b takes person_a to court(B, A), so Less(lawful(A), lawful(B))", ["B takes A to court, so A is less lawful than B"]], "asymmetric_conclusion": ["person_a takes person_b to court(A, B), so Less(lawful(B), lawful(A))", ["A takes B to court, so B is less lawful than A"]], "negated_asymmetric_premise": ["person_b takes person_a to court(B, A), so not More(lawful(A), lawful(B))", ["B takes A to court, so A is not more lawful than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b to court(A, B), so not More(lawful(B), lawful(A))", ["A takes B to court, so B is not more lawful than A"]]}
{"original": ["person_a gives person_b notice(A, B), so More(strong(A), strong(B))", ["A gives B notice, so A is more strong than B"]], "negated": ["person_a gives person_b notice(A, B), so not Less(strong(A), strong(B))", ["A gives B notice, so A is not less strong than B"]], "asymmetric_premise": ["person_b gives person_a notice(B, A), so Less(strong(A), strong(B))", ["B gives A notice, so A is less strong than B"]], "asymmetric_conclusion": ["person_a gives person_b notice(A, B), so Less(strong(B), strong(A))", ["A gives B notice, so B is less strong than A"]], "negated_asymmetric_premise": ["person_b gives person_a notice(B, A), so not More(strong(A), strong(B))", ["B gives A a notice, so A is not more strong than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b notice(A, B), so not More(strong(B), strong(A))", ["A gives B notice, so B is not more strong than A"]]}
{"original": ["person_a lifts person_b's hands(A, B), so More(helpful(A), helpful(B))", ["A lifts B's hands, so A is more helpful than B"]], "negated": ["person_a lifts person_b's hands(A, B), so not Less(helpful(A), helpful(B))", ["A lifts B's hands, so A is not less helpful than B"]], "asymmetric_premise": ["person_b lifts person_a's hands(B, A), so Less(helpful(A), helpful(B))", ["B lifts A's hands, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a lifts person_b's hands(A, B), so Less(helpful(B), helpful(A))", ["A lifts B's hands, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b lifts person_a's hands(B, A), so not More(helpful(A), helpful(B))", ["B lifts A's hands, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a lifts person_b's hands(A, B), so not More(helpful(B), helpful(A))", ["A lifts B's hands, so B is not more helpful than A"]]}
{"original": ["person_a tells person_b to stop(A, B), so More(a father(A), a father(B))", ["A tells B to stop, so A is more of a father than B"]], "negated": ["person_a tells person_b to stop(A, B), so not Less(a father(A), a father(B))", ["A tells B to stop, so A is not less a father than B"]], "asymmetric_premise": ["person_b tells person_a to stop(B, A), so Less(a father(A), a father(B))", ["B tells A to stop, so A is less of a father than B"]], "asymmetric_conclusion": ["person_a tells person_b to stop(A, B), so Less(a father(B), a father(A))", ["A tells B to stop, so B is less of a father than A"]], "negated_asymmetric_premise": ["person_b tells person_a to stop(B, A), so not More(a father(A), a father(B))", ["B tells A to stop, so A is not more a father than B"]], "negated_asymmetric_conclusion": ["person_a tells person_b to stop(A, B), so not More(a father(B), a father(A))", ["A tells B to stop, so B is not more of a father than A"]]}
{"original": ["person_a stops kissing person_b(A, B), so More(furious(A), furious(B))", ["A stops kissing B, so A is more furious than B"]], "negated": ["person_a stops kissing person_b(A, B), so not Less(furious(A), furious(B))", ["A stops kissing B, so A is not less furious than B"]], "asymmetric_premise": ["person_b stops kissing person_a(B, A), so Less(furious(A), furious(B))", ["B stops kissing A, so A is less furious than B"]], "asymmetric_conclusion": ["person_a stops kissing person_b(A, B), so Less(furious(B), furious(A))", ["A stops kissing B, so B is less furious than A"]], "negated_asymmetric_premise": ["person_b stops kissing person_a(B, A), so not More(furious(A), furious(B))", ["B stops kissing A, so A is not more furious than B"]], "negated_asymmetric_conclusion": ["person_a stops kissing person_b(A, B), so not More(furious(B), furious(A))", ["A stops kissing B, so B is not more furious than A"]]}
{"original": ["person_a tells person_b to tell(A, B), so More(insisting(A), insisting(B))", ["A tells B what to tell people, so A is more insisting than B"]], "negated": ["person_a tells person_b to tell(A, B), so not Less(insisting(A), insisting(B))", ["A tells B to tell people, so A is not less insisting than B"]], "asymmetric_premise": ["person_b tells person_a to tell(B, A), so Less(insisting(A), insisting(B))", ["B tells A to tell people, so A is less likely to tell people than B"]], "asymmetric_conclusion": ["person_a tells person_b to tell(A, B), so Less(insisting(B), insisting(A))", ["A tells B to tell people something, so B is less insisting than A"]], "negated_asymmetric_premise": ["person_b tells person_a to tell(B, A), so not More(insisting(A), insisting(B))", ["B tells A to tell people something, so A is not more insisting than B"]], "negated_asymmetric_conclusion": ["person_a tells person_b to tell(A, B), so not More(insisting(B), insisting(A))", ["A tells B to tell people something, so B is not more insisting than A"]]}
{"original": ["person_a punches person_b in the face(A, B), so More(hurtful(A), hurtful(B))", ["A punches B in the face, so A is more hurtful than B"]], "negated": ["person_a punches person_b in the face(A, B), so not Less(hurtful(A), hurtful(B))", ["A punches B in the face, so A is not less hurtful than B"]], "asymmetric_premise": ["person_b punches person_a in the face(B, A), so Less(hurtful(A), hurtful(B))", ["B punches A in the face, so A is less hurtful than B"]], "asymmetric_conclusion": ["person_a punches person_b in the face(A, B), so Less(hurtful(B), hurtful(A))", ["A punches B in the face, so B is less hurtful than A"]], "negated_asymmetric_premise": ["person_b punches person_a in the face(B, A), so not More(hurtful(A), hurtful(B))", ["B punches A in the face, so A is not more hurtful than B"]], "negated_asymmetric_conclusion": ["person_a punches person_b in the face(A, B), so not More(hurtful(B), hurtful(A))", ["A punches B in the face, so B is not more hurtful than A"]]}
{"original": ["person_a bores person_b's name(A, B), so More(proud(A), proud(B))", ["A bores B's name, so A is more proud than B"]], "negated": ["person_a bores person_b's name(A, B), so not Less(proud(A), proud(B))", ["A bores B's name, so A is not less proud than B"]], "asymmetric_premise": ["person_b bores person_a's name(B, A), so Less(proud(A), proud(B))", ["B bores A's name, so A is less proud than B"]], "asymmetric_conclusion": ["person_a bores person_b's name(A, B), so Less(proud(B), proud(A))", ["A bores B's name, so B is less proud than A"]], "negated_asymmetric_premise": ["person_b bores person_a's name(B, A), so not More(proud(A), proud(B))", ["B bores A's name, so A is not more proud than B"]], "negated_asymmetric_conclusion": ["person_a bores person_b's name(A, B), so not More(proud(B), proud(A))", ["A bores B's name, so B is not more proud than A"]]}
{"original": ["person_a begs person_b's pardon(A, B), so More(remorseful(A), remorseful(B))", ["A begs B's pardon, so A is more remorseful than B"]], "negated": ["person_a begs person_b's pardon(A, B), so not Less(remorseful(A), remorseful(B))", ["A begs B's pardon, so A is not less remorseful than B"]], "asymmetric_premise": ["person_b begs person_a's pardon(B, A), so Less(remorseful(A), remorseful(B))", ["B begs A's pardon, so A is less remorseful than B"]], "asymmetric_conclusion": ["person_a begs person_b's pardon(A, B), so Less(remorseful(B), remorseful(A))", ["A begs B's pardon, so B is less remorseful than A"]], "negated_asymmetric_premise": ["person_b begs person_a's pardon(B, A), so not More(remorseful(A), remorseful(B))", ["B begs A's pardon, so A is not more remorseful than B"]], "negated_asymmetric_conclusion": ["person_a begs person_b's pardon(A, B), so not More(remorseful(B), remorseful(A))", ["A begs B's pardon, so B is not more remorseful than A"]]}
{"original": ["person_a finds person_b one(A, B), so More(determined(A), determined(B))", ["A finds B, so A is more determined than B"]], "negated": ["person_a finds person_b one(A, B), so not Less(determined(A), determined(B))", ["A finds B, so A is not less determined than B"]], "asymmetric_premise": ["person_b finds person_a one(B, A), so Less(determined(A), determined(B))", ["B finds A, so A is less determined than B"]], "asymmetric_conclusion": ["person_a finds person_b one(A, B), so Less(determined(B), determined(A))", ["A finds B, so B is less determined than A"]], "negated_asymmetric_premise": ["person_b finds person_a one(B, A), so not More(determined(A), determined(B))", ["B finds A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["person_a finds person_b one(A, B), so not More(determined(B), determined(A))", ["A finds B, so B is not more determined than A"]]}
{"original": ["person_a drives person_b home(A, B), so More(careful(A), careful(B))", ["A drives B home, so A is more careful than B"]], "negated": ["person_a drives person_b home(A, B), so not Less(careful(A), careful(B))", ["A drives B home, so A is not less careful than B"]], "asymmetric_premise": ["person_b drives person_a home(B, A), so Less(careful(A), careful(B))", ["B drives A home, so A is less careful than B"]], "asymmetric_conclusion": ["person_a drives person_b home(A, B), so Less(careful(B), careful(A))", ["A drives B home, so B is less careful than A"]], "negated_asymmetric_premise": ["person_b drives person_a home(B, A), so not More(careful(A), careful(B))", ["B drives A home, so A is not more careful than B"]], "negated_asymmetric_conclusion": ["person_a drives person_b home(A, B), so not More(careful(B), careful(A))", ["A drives B home, so B is not more careful than A"]]}
{"original": ["person_a finishes person_b's food(A, B), so More(inconsiderate(A), inconsiderate(B))", ["A finishes B's food, so A is more inconsiderate than B"]], "negated": ["person_a finishes person_b's food(A, B), so not Less(inconsiderate(A), inconsiderate(B))", ["A finishes B's food, so A is not less inconsiderate than B"]], "asymmetric_premise": ["person_b finishes person_a's food(B, A), so Less(inconsiderate(A), inconsiderate(B))", ["B finishes A's food, so A is less inconsiderate than B"]], "asymmetric_conclusion": ["person_a finishes person_b's food(A, B), so Less(inconsiderate(B), inconsiderate(A))", ["A finishes B's food, so B is less inconsiderate than A"]], "negated_asymmetric_premise": ["person_b finishes person_a's food(B, A), so not More(inconsiderate(A), inconsiderate(B))", ["B finishes A's food, so A is not more inconsiderate than B"]], "negated_asymmetric_conclusion": ["person_a finishes person_b's food(A, B), so not More(inconsiderate(B), inconsiderate(A))", ["A finishes B's food, so B is not more inconsiderate than A"]]}
{"original": ["person_a gives person_b a letter(A, B), so More(giving(A), giving(B))", ["A gives B a letter, so A is more likely to giving than B"]], "negated": ["person_a gives person_b a letter(A, B), so not Less(giving(A), giving(B))", ["A gives B a letter, so A is not less giving than B"]], "asymmetric_premise": ["person_b gives person_a a letter(B, A), so Less(giving(A), giving(B))", ["B gives A a letter, so A is less giving than B"]], "asymmetric_conclusion": ["person_a gives person_b a letter(A, B), so Less(giving(B), giving(A))", ["A gives B a letter, so B is less giving than A"]], "negated_asymmetric_premise": ["person_b gives person_a a letter(B, A), so not More(giving(A), giving(B))", ["B gives A a letter, so A is not more giving than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b a letter(A, B), so not More(giving(B), giving(A))", ["A gives B a letter, so B is not more giving than A"]]}
{"original": ["person_a helps person_b much(A, B), so More(considerate(A), considerate(B))", ["A helps B much more than B, so A is more considerate than B"]], "negated": ["person_a helps person_b much(A, B), so not Less(considerate(A), considerate(B))", ["A helps B much more than B, so A is not less considerate than B"]], "asymmetric_premise": ["person_b helps person_a much(B, A), so Less(considerate(A), considerate(B))", ["B helps A more than A, so A is less considerate than B"]], "asymmetric_conclusion": ["person_a helps person_b much(A, B), so Less(considerate(B), considerate(A))", ["A helps B much more than B, so B is less considerate than A"]], "negated_asymmetric_premise": ["person_b helps person_a much(B, A), so not More(considerate(A), considerate(B))", ["B helps A more than A, so A is not more considerate than B"]], "negated_asymmetric_conclusion": ["person_a helps person_b much(A, B), so not More(considerate(B), considerate(A))", ["A helps B more than B, so B is not more considerate than A"]]}
{"original": ["person_a rolls person_b's shoulders(A, B), so More(forceful(A), forceful(B))", ["A rolls B's shoulders, so A is more forceful than B"]], "negated": ["person_a rolls person_b's shoulders(A, B), so not Less(forceful(A), forceful(B))", ["A rolls B's shoulders, so A is not less forceful than B"]], "asymmetric_premise": ["person_b rolls person_a's shoulders(B, A), so Less(forceful(A), forceful(B))", ["B rolls A's shoulders, so A is less forceful than B"]], "asymmetric_conclusion": ["person_a rolls person_b's shoulders(A, B), so Less(forceful(B), forceful(A))", ["A rolls B's shoulders, so B is less forceful than A"]], "negated_asymmetric_premise": ["person_b rolls person_a's shoulders(B, A), so not More(forceful(A), forceful(B))", ["B rolls A's shoulders, so A is not more forceful than B"]], "negated_asymmetric_conclusion": ["person_a rolls person_b's shoulders(A, B), so not More(forceful(B), forceful(A))", ["A rolls B's shoulders, so B is not more forceful than A"]]}
{"original": ["person_a wants nothing to do with person_b(A, B), so More(unfriendly(A), unfriendly(B))", ["A wants nothing to do with B, so A is more unfriendly than B"]], "negated": ["person_a wants nothing to do with person_b(A, B), so not Less(unfriendly(A), unfriendly(B))", ["A wants nothing to do with B, so A is not less unfriendly than B"]], "asymmetric_premise": ["person_b wants nothing to do with person_a(B, A), so Less(unfriendly(A), unfriendly(B))", ["B wants nothing to do with A, so A is less unfriendly than B"]], "asymmetric_conclusion": ["person_a wants nothing to do with person_b(A, B), so Less(unfriendly(B), unfriendly(A))", ["A wants nothing to do with B, so B is less unfriendly than A"]], "negated_asymmetric_premise": ["person_b wants nothing to do with person_a(B, A), so not More(unfriendly(A), unfriendly(B))", ["B wants nothing to do with A, so A is not more unfriendly than B"]], "negated_asymmetric_conclusion": ["person_a wants nothing to do with person_b(A, B), so not More(unfriendly(B), unfriendly(A))", ["A wants nothing to do with B, so B is not more unfriendly than A"]]}
{"original": ["person_a gives person_b's names(A, B), so More(informed(A), informed(B))", ["A gives B's names, so A is more informed than B"]], "negated": ["person_a gives person_b's names(A, B), so not Less(informed(A), informed(B))", ["A gives B's names, so A is not less informed than B"]], "asymmetric_premise": ["person_b gives person_a's names(B, A), so Less(informed(A), informed(B))", ["B gives A's names, so A is less informed than B"]], "asymmetric_conclusion": ["person_a gives person_b's names(A, B), so Less(informed(B), informed(A))", ["A gives B's names, so B is less informed than A"]], "negated_asymmetric_premise": ["person_b gives person_a's names(B, A), so not More(informed(A), informed(B))", ["B gives A's names, so A is not more informed than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b's names(A, B), so not More(informed(B), informed(A))", ["A gives B's names, so B is not more informed than A"]]}
{"original": ["person_a takes person_b back(A, B), so More(forgiving(A), forgiving(B))", ["A takes B back, so A is more forgiving than B"]], "negated": ["person_a takes person_b back(A, B), so not Less(forgiving(A), forgiving(B))", ["A takes B back, so A is not less forgiving than B"]], "asymmetric_premise": ["person_b takes person_a back(B, A), so Less(forgiving(A), forgiving(B))", ["B takes A back, so A is less forgiving than B"]], "asymmetric_conclusion": ["person_a takes person_b back(A, B), so Less(forgiving(B), forgiving(A))", ["A takes B back, so B is less forgiving than A"]], "negated_asymmetric_premise": ["person_b takes person_a back(B, A), so not More(forgiving(A), forgiving(B))", ["B takes A back, so A is not more forgiving than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b back(A, B), so not More(forgiving(B), forgiving(A))", ["A takes B back, so B is not more forgiving than A"]]}
{"original": ["person_a uses as person_b instrument(A, B), so More(determined(A), determined(B))", ["A is used as a instrument, B is not, so A is more determined than B"]], "negated": ["person_a uses as person_b instrument(A, B), so not Less(determined(A), determined(B))", ["A is used as B's instrument, so A is not less determined than B"]], "asymmetric_premise": ["person_b uses as person_a instrument(B, A), so Less(determined(A), determined(B))", ["B uses A as an instrument, so A is less determined than B"]], "asymmetric_conclusion": ["person_a uses as person_b instrument(A, B), so Less(determined(B), determined(A))", ["A uses as B's instrument, so B is less likely to be determined than A"]], "negated_asymmetric_premise": ["person_b uses as person_a instrument(B, A), so not More(determined(A), determined(B))", ["B uses A as an instrument, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["person_a uses as person_b instrument(A, B), so not More(determined(B), determined(A))", ["A uses as B's instrument, so B is not more determined than A"]]}
{"original": ["person_a provides person_b service(A, B), so More(competent(A), competent(B))", ["A provides B a service, so A is more competent than B"]], "negated": ["person_a provides person_b service(A, B), so not Less(competent(A), competent(B))", ["A provides B service, so A is not less competent than B"]], "asymmetric_premise": ["person_b provides person_a service(B, A), so Less(competent(A), competent(B))", ["B provides A a service, so A is less competent than B"]], "asymmetric_conclusion": ["person_a provides person_b service(A, B), so Less(competent(B), competent(A))", ["A provides B a service, so B is less competent than A"]], "negated_asymmetric_premise": ["person_b provides person_a service(B, A), so not More(competent(A), competent(B))", ["B provides A a service, so A is not more competent than B"]], "negated_asymmetric_conclusion": ["person_a provides person_b service(A, B), so not More(competent(B), competent(A))", ["A provides B service, so B is not more competent than A"]]}
{"original": ["person_a gets person_b's hair cut(A, B), so More(helpful(A), helpful(B))", ["A gets B's hair cut, so A is more helpful than B"]], "negated": ["person_a gets person_b's hair cut(A, B), so not Less(helpful(A), helpful(B))", ["A gets his hair cut, so A is not less helpful than B"]], "asymmetric_premise": ["person_b gets person_a's hair cut(B, A), so Less(helpful(A), helpful(B))", ["B gets his hair cut, A does not, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a gets person_b's hair cut(A, B), so Less(helpful(B), helpful(A))", ["A gets his hair cut, B does not, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b gets person_a's hair cut(B, A), so not More(helpful(A), helpful(B))", ["B gets A's hair cut, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a gets person_b's hair cut(A, B), so not More(helpful(B), helpful(A))", ["A gets his hair cut, B does not, so B is not more helpful than A"]]}
{"original": ["person_a stars into person_b's eyes(A, B), so More(understanding(A), understanding(B))", ["A stars into B's eyes, so A is more understanding than B"]], "negated": ["person_a stars into person_b's eyes(A, B), so not Less(understanding(A), understanding(B))", ["A stars into B's eyes, so A is not less understanding than B"]], "asymmetric_premise": ["person_b stars into person_a's eyes(B, A), so Less(understanding(A), understanding(B))", ["B stars into A's eyes, so A is less understanding than B"]], "asymmetric_conclusion": ["person_a stars into person_b's eyes(A, B), so Less(understanding(B), understanding(A))", ["A stars into B's eyes, so B is less understanding than A"]], "negated_asymmetric_premise": ["person_b stars into person_a's eyes(B, A), so not More(understanding(A), understanding(B))", ["B stars into A's eyes, so A is not more understanding than B"]], "negated_asymmetric_conclusion": ["person_a stars into person_b's eyes(A, B), so not More(understanding(B), understanding(A))", ["A stars into B's eyes, so B is not more understanding than A"]]}
{"original": ["person_a takes off person_b's hat(A, B), so More(bold(A), bold(B))", ["A takes off B's hat, so A is more bold than B"]], "negated": ["person_a takes off person_b's hat(A, B), so not Less(bold(A), bold(B))", ["A takes off B's hat, so A is not less bold than B"]], "asymmetric_premise": ["person_b takes off person_a's hat(B, A), so Less(bold(A), bold(B))", ["B takes off A's hat, so A is less bold than B"]], "asymmetric_conclusion": ["person_a takes off person_b's hat(A, B), so Less(bold(B), bold(A))", ["A takes off B's hat, so B is less bold than A"]], "negated_asymmetric_premise": ["person_b takes off person_a's hat(B, A), so not More(bold(A), bold(B))", ["B takes off A's hat, so A is not more bold than B"]], "negated_asymmetric_conclusion": ["person_a takes off person_b's hat(A, B), so not More(bold(B), bold(A))", ["A takes off B's hat, so B is not more bold than A"]]}
{"original": ["person_a takes person_b case(A, B), so More(professional(A), professional(B))", ["A takes the B case, so A is more professional than B"]], "negated": ["person_a takes person_b case(A, B), so not Less(professional(A), professional(B))", ["A takes the B case, so A is not less professional than B"]], "asymmetric_premise": ["person_b takes person_a case(B, A), so Less(professional(A), professional(B))", ["B takes A's case, so A is less professional than B"]], "asymmetric_conclusion": ["person_a takes person_b case(A, B), so Less(professional(B), professional(A))", ["A takes B's case, so B is less professional than A"]], "negated_asymmetric_premise": ["person_b takes person_a case(B, A), so not More(professional(A), professional(B))", ["B takes A's case, so A is not more professional than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b case(A, B), so not More(professional(B), professional(A))", ["A takes the B case, so B is not more professional than A"]]}
{"original": ["person_a talks to person_b's husband(A, B), so More(responsible(A), responsible(B))", ["A talks to B's husband, so A is more responsible than B"]], "negated": ["person_a talks to person_b's husband(A, B), so not Less(responsible(A), responsible(B))", ["A talks to B's husband, so A is not less responsible than B"]], "asymmetric_premise": ["person_b talks to person_a's husband(B, A), so Less(responsible(A), responsible(B))", ["B talks to A's husband, so A is less responsible than B"]], "asymmetric_conclusion": ["person_a talks to person_b's husband(A, B), so Less(responsible(B), responsible(A))", ["A talks to B's husband more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["person_b talks to person_a's husband(B, A), so not More(responsible(A), responsible(B))", ["B talks to A's husband, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["person_a talks to person_b's husband(A, B), so not More(responsible(B), responsible(A))", ["A talks to B's husband, so B is not more responsible than A"]]}
{"original": ["person_a grinds person_b for a month(A, B), so More(aggressive(A), aggressive(B))", ["A grinds B for a month, so A is more aggressive than B"]], "negated": ["person_a grinds person_b for a month(A, B), so not Less(aggressive(A), aggressive(B))", ["A grinds B for a month, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b grinds person_a for a month(B, A), so Less(aggressive(A), aggressive(B))", ["B grinds A for a month, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a grinds person_b for a month(A, B), so Less(aggressive(B), aggressive(A))", ["A grinds B for a month, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b grinds person_a for a month(B, A), so not More(aggressive(A), aggressive(B))", ["B grinds A for a month, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a grinds person_b for a month(A, B), so not More(aggressive(B), aggressive(A))", ["A grinds B for a month, so B is not more aggressive than A"]]}
{"original": ["person_a stops loving person_b(A, B), so More(fickle(A), fickle(B))", ["A stops loving B, so A is more fickle than B"]], "negated": ["person_a stops loving person_b(A, B), so not Less(fickle(A), fickle(B))", ["A stops loving B, so A is not less fickle than B"]], "asymmetric_premise": ["person_b stops loving person_a(B, A), so Less(fickle(A), fickle(B))", ["B stops loving A, so A is less fickle than B"]], "asymmetric_conclusion": ["person_a stops loving person_b(A, B), so Less(fickle(B), fickle(A))", ["A stops loving B, so B is less fickle than A"]], "negated_asymmetric_premise": ["person_b stops loving person_a(B, A), so not More(fickle(A), fickle(B))", ["B stops loving A, so A is not more fickle than B"]], "negated_asymmetric_conclusion": ["person_a stops loving person_b(A, B), so not More(fickle(B), fickle(A))", ["A stops loving B, so B is not more fickle than A"]]}
{"original": ["person_a builds person_b's nest(A, B), so More(caring(A), caring(B))", ["A builds B's nest, so A is more caring than B"]], "negated": ["person_a builds person_b's nest(A, B), so not Less(caring(A), caring(B))", ["A builds B's nest, so A is not less caring than B"]], "asymmetric_premise": ["person_b builds person_a's nest(B, A), so Less(caring(A), caring(B))", ["B builds A's nest, so A is less caring than B"]], "asymmetric_conclusion": ["person_a builds person_b's nest(A, B), so Less(caring(B), caring(A))", ["A builds B's nest, so B is less caring than A"]], "negated_asymmetric_premise": ["person_b builds person_a's nest(B, A), so not More(caring(A), caring(B))", ["B builds A's nest, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["person_a builds person_b's nest(A, B), so not More(caring(B), caring(A))", ["A builds B's nest, so B is not more caring than A"]]}
{"original": ["person_a pulls person_b toward personz(A, B), so More(aroused(A), aroused(B))", ["A pulls B toward personz, so A is more aroused than B"]], "negated": ["person_a pulls person_b toward personz(A, B), so not Less(aroused(A), aroused(B))", ["A pulls B toward personz, so A is not less aroused than B"]], "asymmetric_premise": ["person_b pulls person_a toward personz(B, A), so Less(aroused(A), aroused(B))", ["B pulls A toward personz, so A is less aroused than B"]], "asymmetric_conclusion": ["person_a pulls person_b toward personz(A, B), so Less(aroused(B), aroused(A))", ["A pulls B toward personz, so B is less aroused than A"]], "negated_asymmetric_premise": ["person_b pulls person_a toward personz(B, A), so not More(aroused(A), aroused(B))", ["B is not more aroused than A, so A is not more aroused than B"]], "negated_asymmetric_conclusion": ["person_a pulls person_b toward personz(A, B), so not More(aroused(B), aroused(A))", ["A is not more aroused than B, so B is not more aroused than A"]]}
{"original": ["person_a sounds like person_b(A, B), so More(imitative(A), imitative(B))", ["A sounds like B, so A is more imitative than B"]], "negated": ["person_a sounds like person_b(A, B), so not Less(imitative(A), imitative(B))", ["A sounds like B, so A is not less imitative than B"]], "asymmetric_premise": ["person_b sounds like person_a(B, A), so Less(imitative(A), imitative(B))", ["B sounds like A, so A is less imitative than B"]], "asymmetric_conclusion": ["person_a sounds like person_b(A, B), so Less(imitative(B), imitative(A))", ["A is more imitative than B, so B is less imitative than A"]], "negated_asymmetric_premise": ["person_b sounds like person_a(B, A), so not More(imitative(A), imitative(B))", ["B sounds like A, so A is not more imitative than B"]], "negated_asymmetric_conclusion": ["person_a sounds like person_b(A, B), so not More(imitative(B), imitative(A))", ["A sounds like B, so B is not more imitative than A"]]}
{"original": ["person_a makes person_b sick(A, B), so More(contagious(A), contagious(B))", ["A makes B sick, so A is more contagious than B"]], "negated": ["person_a makes person_b sick(A, B), so not Less(contagious(A), contagious(B))", ["A makes B sick, so A is not less contagious than B"]], "asymmetric_premise": ["person_b makes person_a sick(B, A), so Less(contagious(A), contagious(B))", ["B makes A sick, so A is less contagious than B"]], "asymmetric_conclusion": ["person_a makes person_b sick(A, B), so Less(contagious(B), contagious(A))", ["A makes B sick, so B is less contagious than A"]], "negated_asymmetric_premise": ["person_b makes person_a sick(B, A), so not More(contagious(A), contagious(B))", ["B makes A sick, so A is not more contagious than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b sick(A, B), so not More(contagious(B), contagious(A))", ["A makes B sick, so B is not more contagious than A"]]}
{"original": ["person_a gets near person_b(A, B), so More(approachable(A), approachable(B))", ["A gets near B, so A is more approachable than B"]], "negated": ["person_a gets near person_b(A, B), so not Less(approachable(A), approachable(B))", ["A gets near B, so A is not less approachable than B"]], "asymmetric_premise": ["person_b gets near person_a(B, A), so Less(approachable(A), approachable(B))", ["B gets near A, so A is less approachable than B"]], "asymmetric_conclusion": ["person_a gets near person_b(A, B), so Less(approachable(B), approachable(A))", ["A gets near B, so B is less approachable than A"]], "negated_asymmetric_premise": ["person_b gets near person_a(B, A), so not More(approachable(A), approachable(B))", ["B gets near A, so A is not more approachable than B"]], "negated_asymmetric_conclusion": ["person_a gets near person_b(A, B), so not More(approachable(B), approachable(A))", ["A gets near B, so B is not more approachable than A"]]}
{"original": ["person_a is cleaning out person_b's garage(A, B), so More(cleanly(A), cleanly(B))", ["A is cleaning out B's garage, so A does it more cleanly than B"]], "negated": ["person_a is cleaning out person_b's garage(A, B), so not Less(cleanly(A), cleanly(B))", ["A is cleaning out B's garage, so A is not less clean than B"]], "asymmetric_premise": ["person_b is cleaning out person_a's garage(B, A), so Less(cleanly(A), cleanly(B))", ["B is cleaning out A's garage, so A is cleaning out B's garage less than B"]], "asymmetric_conclusion": ["person_a is cleaning out person_b's garage(A, B), so Less(cleanly(B), cleanly(A))", ["A is cleaning out B's garage, so B is cleaning out A's garage less than A"]], "negated_asymmetric_premise": ["person_b is cleaning out person_a's garage(B, A), so not More(cleanly(A), cleanly(B))", ["B is cleaning out A's garage, so A is not cleaning out B's garage more than B"]], "negated_asymmetric_conclusion": ["person_a is cleaning out person_b's garage(A, B), so not More(cleanly(B), cleanly(A))", ["A is cleaning out B's garage, so B is not cleaning out A's garage more than A"]]}
{"original": ["person_a talks about person_b's relationship(A, B), so More(open(A), open(B))", ["A talks about B's relationship more than B, so A is more open than B"]], "negated": ["person_a talks about person_b's relationship(A, B), so not Less(open(A), open(B))", ["A talks about B's relationship more than B, so A is not less open than B"]], "asymmetric_premise": ["person_b talks about person_a's relationship(B, A), so Less(open(A), open(B))", ["B talks about A's relationship more than A, so A is less open than B"]], "asymmetric_conclusion": ["person_a talks about person_b's relationship(A, B), so Less(open(B), open(A))", ["A talks about B's relationship more than B, so B is less open than A"]], "negated_asymmetric_premise": ["person_b talks about person_a's relationship(B, A), so not More(open(A), open(B))", ["B talks about A's relationship while A does not, so A is not more open than B"]], "negated_asymmetric_conclusion": ["person_a talks about person_b's relationship(A, B), so not More(open(B), open(A))", ["A talks about B's relationship while B does not, so B is not more open than A"]]}
{"original": ["person_a tells person_b the things(A, B), so More(understanding(A), understanding(B))", ["A tells B things, so A is more understanding than B"]], "negated": ["person_a tells person_b the things(A, B), so not Less(understanding(A), understanding(B))", ["A tells B things, so A is not less understanding than B"]], "asymmetric_premise": ["person_b tells person_a the things(B, A), so Less(understanding(A), understanding(B))", ["B tells A things, so A is less understanding than B"]], "asymmetric_conclusion": ["person_a tells person_b the things(A, B), so Less(understanding(B), understanding(A))", ["A tells B a lot of things, so B is less understanding than A"]], "negated_asymmetric_premise": ["person_b tells person_a the things(B, A), so not More(understanding(A), understanding(B))", ["B tells A things, so A is not more understanding than B"]], "negated_asymmetric_conclusion": ["person_a tells person_b the things(A, B), so not More(understanding(B), understanding(A))", ["A tells B a lot of things, so B is not more understanding than A"]]}
{"original": ["person_a develops person_b understanding(A, B), so More(explanative(A), explanative(B))", ["A develops understanding more than B, so A is more explanative than B"]], "negated": ["person_a develops person_b understanding(A, B), so not Less(explanative(A), explanative(B))", ["A develops understanding more than B, so A is not less explanative than B"]], "asymmetric_premise": ["person_b develops person_a understanding(B, A), so Less(explanative(A), explanative(B))", ["B develops understanding more than A, so A is less explanative than B"]], "asymmetric_conclusion": ["person_a develops person_b understanding(A, B), so Less(explanative(B), explanative(A))", ["A develops understanding more than B, so B is less explanative than A"]], "negated_asymmetric_premise": ["person_b develops person_a understanding(B, A), so not More(explanative(A), explanative(B))", ["B develops understanding more than A, so A is not more explanative than B"]], "negated_asymmetric_conclusion": ["person_a develops person_b understanding(A, B), so not More(explanative(B), explanative(A))", ["A develops understanding more than B, so B is not more explanative than A"]]}
{"original": ["person_a goes get person_b(A, B), so More(helpful(A), helpful(B))", ["A goes get B, so A is more helpful than B"]], "negated": ["person_a goes get person_b(A, B), so not Less(helpful(A), helpful(B))", ["A goes get B, so A is not less helpful than B"]], "asymmetric_premise": ["person_b goes get person_a(B, A), so Less(helpful(A), helpful(B))", ["B goes to get A, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a goes get person_b(A, B), so Less(helpful(B), helpful(A))", ["A goes get B, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b goes get person_a(B, A), so not More(helpful(A), helpful(B))", ["B goes get A, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a goes get person_b(A, B), so not More(helpful(B), helpful(A))", ["A goes get B, so B is not more helpful than A"]]}
{"original": ["person_a kisses person_b on the lips(A, B), so More(romantic(A), romantic(B))", ["A kisses B on the lips, so A is more romantic than B"]], "negated": ["person_a kisses person_b on the lips(A, B), so not Less(romantic(A), romantic(B))", ["A kisses B on the lips, so A is not less romantic than B"]], "asymmetric_premise": ["person_b kisses person_a on the lips(B, A), so Less(romantic(A), romantic(B))", ["B kisses A on the lips, so A is less romantic than B"]], "asymmetric_conclusion": ["person_a kisses person_b on the lips(A, B), so Less(romantic(B), romantic(A))", ["A kisses B on the lips, so B is less romantic than A"]], "negated_asymmetric_premise": ["person_b kisses person_a on the lips(B, A), so not More(romantic(A), romantic(B))", ["B kisses A on the lips, so A is not more romantic than B"]], "negated_asymmetric_conclusion": ["person_a kisses person_b on the lips(A, B), so not More(romantic(B), romantic(A))", ["A kisses B on the lips, so B is not more romantic than A"]]}
{"original": ["person_a impresses person_b's boyfriend(A, B), so More(talented(A), talented(B))", ["A impresses B's boyfriend, so A is more talented than B"]], "negated": ["person_a impresses person_b's boyfriend(A, B), so not Less(talented(A), talented(B))", ["A impresses B's boyfriend, so A is not less talented than B"]], "asymmetric_premise": ["person_b impresses person_a's boyfriend(B, A), so Less(talented(A), talented(B))", ["B impresses A's boyfriend, so A is less talented than B"]], "asymmetric_conclusion": ["person_a impresses person_b's boyfriend(A, B), so Less(talented(B), talented(A))", ["A impresses B's boyfriend, so B is less talented than A"]], "negated_asymmetric_premise": ["person_b impresses person_a's boyfriend(B, A), so not More(talented(A), talented(B))", ["B impresses A's boyfriend, so A is not more talented than B"]], "negated_asymmetric_conclusion": ["person_a impresses person_b's boyfriend(A, B), so not More(talented(B), talented(A))", ["A impresses B's boyfriend, so B is not more talented than A"]]}
{"original": ["person_a shows person_b example(A, B), so More(skilled(A), skilled(B))", ["A shows B an example, so A is more skilled than B"]], "negated": ["person_a shows person_b example(A, B), so not Less(skilled(A), skilled(B))", ["A shows B example, so A is not less skilled than B"]], "asymmetric_premise": ["person_b shows person_a example(B, A), so Less(skilled(A), skilled(B))", ["B shows A example, so A is less skilled than B"]], "asymmetric_conclusion": ["person_a shows person_b example(A, B), so Less(skilled(B), skilled(A))", ["A shows B an example, so B is less skilled than A"]], "negated_asymmetric_premise": ["person_b shows person_a example(B, A), so not More(skilled(A), skilled(B))", ["B shows A example, so A is not more skilled than B"]], "negated_asymmetric_conclusion": ["person_a shows person_b example(A, B), so not More(skilled(B), skilled(A))", ["A shows B an example, so B is not more skilled than A"]]}
{"original": ["person_a kisses person_b quickly(A, B), so More(busy(A), busy(B))", ["A kisses B quickly, so A is more busy than B"]], "negated": ["person_a kisses person_b quickly(A, B), so not Less(busy(A), busy(B))", ["A kisses B quickly, so A is not less busy than B"]], "asymmetric_premise": ["person_b kisses person_a quickly(B, A), so Less(busy(A), busy(B))", ["B kisses A quickly, so A is less busy than B"]], "asymmetric_conclusion": ["person_a kisses person_b quickly(A, B), so Less(busy(B), busy(A))", ["A kisses B quickly, so B is less busy than A"]], "negated_asymmetric_premise": ["person_b kisses person_a quickly(B, A), so not More(busy(A), busy(B))", ["B kisses A quickly, so A is not more busy than B"]], "negated_asymmetric_conclusion": ["person_a kisses person_b quickly(A, B), so not More(busy(B), busy(A))", ["A kisses B quickly, so B is not more busy than A"]]}
{"original": ["person_a loses person_b balance(A, B), so More(nervous(A), nervous(B))", ["A loses balance while B does not, so A is more nervous than B"]], "negated": ["person_a loses person_b balance(A, B), so not Less(nervous(A), nervous(B))", ["A loses balance while B does not, so A is not less nervous than B"]], "asymmetric_premise": ["person_b loses person_a balance(B, A), so Less(nervous(A), nervous(B))", ["B loses A's balance, so A is less nervous than B"]], "asymmetric_conclusion": ["person_a loses person_b balance(A, B), so Less(nervous(B), nervous(A))", ["A loses balance while B does not, so B is less nervous than A"]], "negated_asymmetric_premise": ["person_b loses person_a balance(B, A), so not More(nervous(A), nervous(B))", ["B loses person_a balance, so A is not more nervous than B"]], "negated_asymmetric_conclusion": ["person_a loses person_b balance(A, B), so not More(nervous(B), nervous(A))", ["A loses balance while B does not, so B is not more nervous than A"]]}
{"original": ["person_a kisses person_b softly(A, B), so More(sweet(A), sweet(B))", ["A kisses B softly, so A is more sweet than B"]], "negated": ["person_a kisses person_b softly(A, B), so not Less(sweet(A), sweet(B))", ["A kisses B softly, so A is not less sweet than B"]], "asymmetric_premise": ["person_b kisses person_a softly(B, A), so Less(sweet(A), sweet(B))", ["B kisses A softly, so A is less sweet than B"]], "asymmetric_conclusion": ["person_a kisses person_b softly(A, B), so Less(sweet(B), sweet(A))", ["A kisses B softly, so B is less sweet than A"]], "negated_asymmetric_premise": ["person_b kisses person_a softly(B, A), so not More(sweet(A), sweet(B))", ["B kisses A softly, so A is not more sweet than B"]], "negated_asymmetric_conclusion": ["person_a kisses person_b softly(A, B), so not More(sweet(B), sweet(A))", ["A kisses B softly, so B is not more sweet than A"]]}
{"original": ["person_a conveys person_b idea(A, B), so More(helpful(A), helpful(B))", ["A conveys B an idea, so A is more helpful than B"]], "negated": ["person_a conveys person_b idea(A, B), so not Less(helpful(A), helpful(B))", ["A conveys B an idea, so A is not less helpful than B"]], "asymmetric_premise": ["person_b conveys person_a idea(B, A), so Less(helpful(A), helpful(B))", ["B conveys A a idea, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a conveys person_b idea(A, B), so Less(helpful(B), helpful(A))", ["A conveys B an idea, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b conveys person_a idea(B, A), so not More(helpful(A), helpful(B))", ["B conveys A a idea, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a conveys person_b idea(A, B), so not More(helpful(B), helpful(A))", ["A conveys B an idea, so B is not more helpful than A"]]}
{"original": ["person_a gives person_b a way(A, B), so More(sharing(A), sharing(B))", ["A gives B a way of sharing, so A is more likely to be sharing than B"]], "negated": ["person_a gives person_b a way(A, B), so not Less(sharing(A), sharing(B))", ["A gives B a way of sharing, so A is not less sharing than B"]], "asymmetric_premise": ["person_b gives person_a a way(B, A), so Less(sharing(A), sharing(B))", ["B gives A a way of sharing, so A is less likely to sharing than B"]], "asymmetric_conclusion": ["person_a gives person_b a way(A, B), so Less(sharing(B), sharing(A))", ["A gives B a way of sharing, so B is less likely to sharing than A"]], "negated_asymmetric_premise": ["person_b gives person_a a way(B, A), so not More(sharing(A), sharing(B))", ["B gives A a way of sharing, so A is not more sharing than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b a way(A, B), so not More(sharing(B), sharing(A))", ["A gives B a way of sharing, so B is not more sharing than A"]]}
{"original": ["person_a tells all person_b's friends(A, B), so More(big mouth(A), big mouth(B))", ["A tells all B's friends, so A is more likely to have a big mouth than B"]], "negated": ["person_a tells all person_b's friends(A, B), so not Less(big mouth(A), big mouth(B))", ["A tells all B's friends, so A is not less big mouth than B"]], "asymmetric_premise": ["person_b tells all person_a's friends(B, A), so Less(big mouth(A), big mouth(B))", ["B tells all A's friends, so A is less likely to have a big mouth than B"]], "asymmetric_conclusion": ["person_a tells all person_b's friends(A, B), so Less(big mouth(B), big mouth(A))", ["A tells all B's friends, so B is less likely to have a big mouth than A"]], "negated_asymmetric_premise": ["person_b tells all person_a's friends(B, A), so not More(big mouth(A), big mouth(B))", ["B tells all A's friends, so A is not more big mouth than B"]], "negated_asymmetric_conclusion": ["person_a tells all person_b's friends(A, B), so not More(big mouth(B), big mouth(A))", ["A tells all B's friends, so B is not more likely to have a big mouth than A"]]}
{"original": ["person_a feels person_b's eyes on person_b(A, B), so More(curious(A), curious(B))", ["A feels B's eyes on him, so A is more curious than B"]], "negated": ["person_a feels person_b's eyes on person_b(A, B), so not Less(curious(A), curious(B))", ["A feels B's eyes on him, so A is not less curious than B"]], "asymmetric_premise": ["person_b feels person_a's eyes on , so Less(curious(A), curious(B))", ["B feels A's eyes on, so A is less curious than B"]], "asymmetric_conclusion": ["person_a feels person_b's eyes on person_b(A, B), so Less(curious(B), curious(A))", ["A feels B's eyes on him, so B is less curious than A"]], "negated_asymmetric_premise": ["person_b feels person_a's eyes on , so not More(curious(A), curious(B))", ["B feels A's eyes on, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["person_a feels person_b's eyes on person_b(A, B), so not More(curious(B), curious(A))", ["A feels B's eyes on him, so B is not more curious than A"]]}
{"original": ["person_a associates with person_b's name(A, B), so More(opinionated(A), opinionated(B))", ["A associates with B's name, so A is more opinionated than B"]], "negated": ["person_a associates with person_b's name(A, B), so not Less(opinionated(A), opinionated(B))", ["A associates with B's name, so A is not less opinionated than B"]], "asymmetric_premise": ["person_b associates with person_a's name(B, A), so Less(opinionated(A), opinionated(B))", ["B associates with A's name, so A is less opinionated than B"]], "asymmetric_conclusion": ["person_a associates with person_b's name(A, B), so Less(opinionated(B), opinionated(A))", ["A associates with B's name, so B is less opinionated than A"]], "negated_asymmetric_premise": ["person_b associates with person_a's name(B, A), so not More(opinionated(A), opinionated(B))", ["B associates with A's name, so A is not more opinionated than B"]], "negated_asymmetric_conclusion": ["person_a associates with person_b's name(A, B), so not More(opinionated(B), opinionated(A))", ["A associates with B's name, so B is not more opinionated than A"]]}
{"original": ["person_a lays hands on person_b(A, B), so More(tough(A), tough(B))", ["A lays hands on B, so A is more tough than B"]], "negated": ["person_a lays hands on person_b(A, B), so not Less(tough(A), tough(B))", ["A lays hands on B, so A is not less tough than B"]], "asymmetric_premise": ["person_b lays hands on person_a(B, A), so Less(tough(A), tough(B))", ["B lays hands on A, so A is less tough than B"]], "asymmetric_conclusion": ["person_a lays hands on person_b(A, B), so Less(tough(B), tough(A))", ["A lays hands on B, so B is less tough than A"]], "negated_asymmetric_premise": ["person_b lays hands on person_a(B, A), so not More(tough(A), tough(B))", ["B lays hands on A, so A is not more tough than B"]], "negated_asymmetric_conclusion": ["person_a lays hands on person_b(A, B), so not More(tough(B), tough(A))", ["A lays hands on B, so B is not more tough than A"]]}
{"original": ["person_a makes person_b plans(A, B), so More(knowledgeable(A), knowledgeable(B))", ["A makes plans, B does not, so A is more knowledgeable than B"]], "negated": ["person_a makes person_b plans(A, B), so not Less(knowledgeable(A), knowledgeable(B))", ["A makes plans while B does not, so A is not less knowledgeable than B"]], "asymmetric_premise": ["person_b makes person_a plans(B, A), so Less(knowledgeable(A), knowledgeable(B))", ["B makes plans, A does not, so A is less knowledgeable than B"]], "asymmetric_conclusion": ["person_a makes person_b plans(A, B), so Less(knowledgeable(B), knowledgeable(A))", ["A makes plans, B does not, so B is less knowledgeable than A"]], "negated_asymmetric_premise": ["person_b makes person_a plans(B, A), so not More(knowledgeable(A), knowledgeable(B))", ["B makes plans while A does not, so A is not more knowledgeable than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b plans(A, B), so not More(knowledgeable(B), knowledgeable(A))", ["A makes plans, B does not, so B is not more knowledgeable than A"]]}
{"original": ["person_a directs toward person_b(A, B), so More(teaming(A), teaming(B))", ["A directs toward B, so A is more teaming than B"]], "negated": ["person_a directs toward person_b(A, B), so not Less(teaming(A), teaming(B))", ["A directs toward B, so A is not less teaming than B"]], "asymmetric_premise": ["person_b directs toward person_a(B, A), so Less(teaming(A), teaming(B))", ["B directs toward A, so A is less teaming than B"]], "asymmetric_conclusion": ["person_a directs toward person_b(A, B), so Less(teaming(B), teaming(A))", ["A directs toward B, so B is less teaming than A"]], "negated_asymmetric_premise": ["person_b directs toward person_a(B, A), so not More(teaming(A), teaming(B))", ["B directs toward A, so A is not more teaming than B"]], "negated_asymmetric_conclusion": ["person_a directs toward person_b(A, B), so not More(teaming(B), teaming(A))", ["A directs toward B, so B is not more teaming than A"]]}
{"original": ["person_a requires person_b's attention(A, B), so More(social(A), social(B))", ["A requires B's attention, so A is more social than B"]], "negated": ["person_a requires person_b's attention(A, B), so not Less(social(A), social(B))", ["A requires B's attention, so A is not less social than B"]], "asymmetric_premise": ["person_b requires person_a's attention(B, A), so Less(social(A), social(B))", ["B requires A's attention, so A is less social than B"]], "asymmetric_conclusion": ["person_a requires person_b's attention(A, B), so Less(social(B), social(A))", ["A requires B's attention, so B is less social than A"]], "negated_asymmetric_premise": ["person_b requires person_a's attention(B, A), so not More(social(A), social(B))", ["B requires A's attention, so A is not more social than B"]], "negated_asymmetric_conclusion": ["person_a requires person_b's attention(A, B), so not More(social(B), social(A))", ["A requires B's attention, so B is not more social than A"]]}
{"original": ["person_a writes person_b letter(A, B), so More(writer(A), writer(B))", ["A writes B a letter, so A is more likely to be a writer than B"]], "negated": ["person_a writes person_b letter(A, B), so not Less(writer(A), writer(B))", ["A writes a letter, B does not, so A is not less writer than B"]], "asymmetric_premise": ["person_b writes person_a letter(B, A), so Less(writer(A), writer(B))", ["B writes A a letter, so A is a less writer than B"]], "asymmetric_conclusion": ["person_a writes person_b letter(A, B), so Less(writer(B), writer(A))", ["A writes B a letter, so B is less likely to be a writer than A"]], "negated_asymmetric_premise": ["person_b writes person_a letter(B, A), so not More(writer(A), writer(B))", ["B writes a letter, A does not, so A is not more writer than B"]], "negated_asymmetric_conclusion": ["person_a writes person_b letter(A, B), so not More(writer(B), writer(A))", ["A writes a letter, B does not, so B is not more writer than A"]]}
{"original": ["person_a rides person_b's skateboard(A, B), so More(active(A), active(B))", ["A rides B's skateboard, so A is more active than B"]], "negated": ["person_a rides person_b's skateboard(A, B), so not Less(active(A), active(B))", ["A rides B's skateboard, so A is not less active than B"]], "asymmetric_premise": ["person_b rides person_a's skateboard(B, A), so Less(active(A), active(B))", ["B rides A's skateboard, so A is less active than B"]], "asymmetric_conclusion": ["person_a rides person_b's skateboard(A, B), so Less(active(B), active(A))", ["A rides B's skateboard, so B is less active than A"]], "negated_asymmetric_premise": ["person_b rides person_a's skateboard(B, A), so not More(active(A), active(B))", ["B rides A's skateboard, so A is not more active than B"]], "negated_asymmetric_conclusion": ["person_a rides person_b's skateboard(A, B), so not More(active(B), active(A))", ["A rides B's skateboard, so B is not more active than A"]]}
{"original": ["person_a stops person_b in his tracks(A, B), so More(capable(A), capable(B))", ["A stops B in his tracks, so A is more capable than B"]], "negated": ["person_a stops person_b in his tracks(A, B), so not Less(capable(A), capable(B))", ["A stops B in his tracks, so A is not less capable than B"]], "asymmetric_premise": ["person_b stops person_a in his tracks(B, A), so Less(capable(A), capable(B))", ["B stops A in his tracks, so A is less capable than B"]], "asymmetric_conclusion": ["person_a stops person_b in his tracks(A, B), so Less(capable(B), capable(A))", ["A stops B in his tracks, so B is less capable than A"]], "negated_asymmetric_premise": ["person_b stops person_a in his tracks(B, A), so not More(capable(A), capable(B))", ["B stops A in his tracks, so A is not more capable than B"]], "negated_asymmetric_conclusion": ["person_a stops person_b in his tracks(A, B), so not More(capable(B), capable(A))", ["A stops B in his tracks, so B is not more capable than A"]]}
{"original": ["person_a limits person_b's use(A, B), so More(unethical(A), unethical(B))", ["A limits B's use, so A is more unethical than B"]], "negated": ["person_a limits person_b's use(A, B), so not Less(unethical(A), unethical(B))", ["A limits B's use, so A is not less unethical than B"]], "asymmetric_premise": ["person_b limits person_a's use(B, A), so Less(unethical(A), unethical(B))", ["B limits A's use, so A is less unethical than B"]], "asymmetric_conclusion": ["person_a limits person_b's use(A, B), so Less(unethical(B), unethical(A))", ["A limits B's use, so B is less unethical than A"]], "negated_asymmetric_premise": ["person_b limits person_a's use(B, A), so not More(unethical(A), unethical(B))", ["B limits A's use, so A is not more unethical than B"]], "negated_asymmetric_conclusion": ["person_a limits person_b's use(A, B), so not More(unethical(B), unethical(A))", ["A limits B's use, so B is not more unethical than A"]]}
{"original": ["person_a contributes to person_b understanding(A, B), so More(teaching(A), teaching(B))", ["A contributes to B understanding more than B, so A is more likely to be teaching than B"]], "negated": ["person_a contributes to person_b understanding(A, B), so not Less(teaching(A), teaching(B))", ["A contributes to B understanding more than B, so A is not less teaching than B"]], "asymmetric_premise": ["person_b contributes to person_a understanding(B, A), so Less(teaching(A), teaching(B))", ["B contributes to A understanding more than A, so A is less likely to be teaching than B"]], "asymmetric_conclusion": ["person_a contributes to person_b understanding(A, B), so Less(teaching(B), teaching(A))", ["A contributes to B's understanding, so B is less likely to be teaching than A"]], "negated_asymmetric_premise": ["person_b contributes to person_a understanding(B, A), so not More(teaching(A), teaching(B))", ["B contributes to A understanding more than A, so A is not more likely to be teaching than B"]], "negated_asymmetric_conclusion": ["person_a contributes to person_b understanding(A, B), so not More(teaching(B), teaching(A))", ["A contributes to B understanding more than B, so B is not more likely to be teaching than A"]]}
{"original": ["person_a ruins person_b's life(A, B), so More(vindictive(A), vindictive(B))", ["A ruins B's life, so A is more vindictive than B"]], "negated": ["person_a ruins person_b's life(A, B), so not Less(vindictive(A), vindictive(B))", ["A ruins B's life, so A is not less vindictive than B"]], "asymmetric_premise": ["person_b ruins person_a's life(B, A), so Less(vindictive(A), vindictive(B))", ["B ruins A's life, so A is less vindictive than B"]], "asymmetric_conclusion": ["person_a ruins person_b's life(A, B), so Less(vindictive(B), vindictive(A))", ["A ruins B's life, so B is less vindictive than A"]], "negated_asymmetric_premise": ["person_b ruins person_a's life(B, A), so not More(vindictive(A), vindictive(B))", ["B ruins A's life, so A is not more vindictive than B"]], "negated_asymmetric_conclusion": ["person_a ruins person_b's life(A, B), so not More(vindictive(B), vindictive(A))", ["A ruins B's life, so B is not more vindictive than A"]]}
{"original": ["person_a is celebrating person_b's birthday(A, B), so More(kind(A), kind(B))", ["A is celebrating B's birthday, so A is more kind than B"]], "negated": ["person_a is celebrating person_b's birthday(A, B), so not Less(kind(A), kind(B))", ["A is celebrating B's birthday, so A is not less kind than B"]], "asymmetric_premise": ["person_b is celebrating person_a's birthday(B, A), so Less(kind(A), kind(B))", ["B is celebrating A's birthday, so A is less kind than B"]], "asymmetric_conclusion": ["person_a is celebrating person_b's birthday(A, B), so Less(kind(B), kind(A))", ["A is celebrating B's birthday, so B is less kind than A"]], "negated_asymmetric_premise": ["person_b is celebrating person_a's birthday(B, A), so not More(kind(A), kind(B))", ["B is celebrating A's birthday, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["person_a is celebrating person_b's birthday(A, B), so not More(kind(B), kind(A))", ["A is celebrating B's birthday, so B is not more kind than A"]]}
{"original": ["person_a tells person_b would do(A, B), so More(intelligent(A), intelligent(B))", ["A tells B what he would do, so A is more intelligent than B"]], "negated": ["person_a tells person_b would do(A, B), so not Less(intelligent(A), intelligent(B))", ["A tells B what he would do, so A is not less intelligent than B"]], "asymmetric_premise": ["person_b tells person_a would do(B, A), so Less(intelligent(A), intelligent(B))", ["B tells A what he would do, so A is less intelligent than B"]], "asymmetric_conclusion": ["person_a tells person_b would do(A, B), so Less(intelligent(B), intelligent(A))", ["A tells B what he would do, so B is less intelligent than A"]], "negated_asymmetric_premise": ["person_b tells person_a would do(B, A), so not More(intelligent(A), intelligent(B))", ["B is not more intelligent than A, so A is not more intelligent than B"]], "negated_asymmetric_conclusion": ["person_a tells person_b would do(A, B), so not More(intelligent(B), intelligent(A))", ["A tells B what he would do, so B is not more intelligent than A"]]}
{"original": ["person_a enforces person_b's rights(A, B), so More(supportive(A), supportive(B))", ["A enforces B's rights, so A is more supportive than B"]], "negated": ["person_a enforces person_b's rights(A, B), so not Less(supportive(A), supportive(B))", ["A enforces B's rights, so A is not less supportive than B"]], "asymmetric_premise": ["person_b enforces person_a's rights(B, A), so Less(supportive(A), supportive(B))", ["B enforces A's rights, so A is less supportive than B"]], "asymmetric_conclusion": ["person_a enforces person_b's rights(A, B), so Less(supportive(B), supportive(A))", ["A enforces B's rights, so B is less supportive than A"]], "negated_asymmetric_premise": ["person_b enforces person_a's rights(B, A), so not More(supportive(A), supportive(B))", ["B enforces A's rights, so A is not more supportive than B"]], "negated_asymmetric_conclusion": ["person_a enforces person_b's rights(A, B), so not More(supportive(B), supportive(A))", ["A enforces B's rights more than B, so B is not more supportive than A"]]}
{"original": ["person_a clears person_b's name(A, B), so More(rescuing(A), rescuing(B))", ["A clears B's name, so A is more likely to be rescuing than B"]], "negated": ["person_a clears person_b's name(A, B), so not Less(rescuing(A), rescuing(B))", ["A clears B's name, so A is not less rescuing than B"]], "asymmetric_premise": ["person_b clears person_a's name(B, A), so Less(rescuing(A), rescuing(B))", ["B clears A's name, so A is less likely to be rescuing than B"]], "asymmetric_conclusion": ["person_a clears person_b's name(A, B), so Less(rescuing(B), rescuing(A))", ["A clears B's name, so B is less likely to be rescuing than A"]], "negated_asymmetric_premise": ["person_b clears person_a's name(B, A), so not More(rescuing(A), rescuing(B))", ["B clears A's name, so A is not more rescuing than B"]], "negated_asymmetric_conclusion": ["person_a clears person_b's name(A, B), so not More(rescuing(B), rescuing(A))", ["A clears B's name, so B is not more rescuing than A"]]}
{"original": ["person_a grabs person_b's shoulders(A, B), so More(forceful(A), forceful(B))", ["A grabs B's shoulders, so A is more forceful than B"]], "negated": ["person_a grabs person_b's shoulders(A, B), so not Less(forceful(A), forceful(B))", ["A grabs B's shoulders, so A is not less forceful than B"]], "asymmetric_premise": ["person_b grabs person_a's shoulders(B, A), so Less(forceful(A), forceful(B))", ["B grabs A's shoulders, so A is less forceful than B"]], "asymmetric_conclusion": ["person_a grabs person_b's shoulders(A, B), so Less(forceful(B), forceful(A))", ["A grabs B's shoulders, so B is less forceful than A"]], "negated_asymmetric_premise": ["person_b grabs person_a's shoulders(B, A), so not More(forceful(A), forceful(B))", ["B grabs A's shoulders, so A is not more forceful than B"]], "negated_asymmetric_conclusion": ["person_a grabs person_b's shoulders(A, B), so not More(forceful(B), forceful(A))", ["A grabs B's shoulders, so B is not more forceful than A"]]}
{"original": ["person_a stands on person_b's legs(A, B), so More(rude(A), rude(B))", ["A stands on B's legs, so A is more rude than B"]], "negated": ["person_a stands on person_b's legs(A, B), so not Less(rude(A), rude(B))", ["A stands on B's legs, so A is not less rude than B"]], "asymmetric_premise": ["person_b stands on person_a's legs(B, A), so Less(rude(A), rude(B))", ["B stands on A's legs, so A is less rude than B"]], "asymmetric_conclusion": ["person_a stands on person_b's legs(A, B), so Less(rude(B), rude(A))", ["A stands on B's legs, so B is less rude than A"]], "negated_asymmetric_premise": ["person_b stands on person_a's legs(B, A), so not More(rude(A), rude(B))", ["B stands on A's legs, so A is not more rude than B"]], "negated_asymmetric_conclusion": ["person_a stands on person_b's legs(A, B), so not More(rude(B), rude(A))", ["A stands on B's legs, so B is not more rude than A"]]}
{"original": ["person_a gives person_b money(A, B), so More(giving(A), giving(B))", ["A gives B money, so A is more likely to be giving than B"]], "negated": ["person_a gives person_b money(A, B), so not Less(giving(A), giving(B))", ["A gives B money, so A is not less giving than B"]], "asymmetric_premise": ["person_b gives person_a money(B, A), so Less(giving(A), giving(B))", ["B gives A money, so A is less giving than B"]], "asymmetric_conclusion": ["person_a gives person_b money(A, B), so Less(giving(B), giving(A))", ["A gives B money, so B is less giving than A"]], "negated_asymmetric_premise": ["person_b gives person_a money(B, A), so not More(giving(A), giving(B))", ["B gives A money, so A is not more giving than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b money(A, B), so not More(giving(B), giving(A))", ["A gives B money, so B is not more giving than A"]]}
{"original": ["person_a gets person_b's friends(A, B), so More(powerful(A), powerful(B))", ["A gets B's friends more than B, so A is more powerful than B"]], "negated": ["person_a gets person_b's friends(A, B), so not Less(powerful(A), powerful(B))", ["A gets B's friends, so A is not less powerful than B"]], "asymmetric_premise": ["person_b gets person_a's friends(B, A), so Less(powerful(A), powerful(B))", ["B gets A's friends, so A is less powerful than B"]], "asymmetric_conclusion": ["person_a gets person_b's friends(A, B), so Less(powerful(B), powerful(A))", ["A gets B's friends, so B is less powerful than A"]], "negated_asymmetric_premise": ["person_b gets person_a's friends(B, A), so not More(powerful(A), powerful(B))", ["B gets A's friends, so A is not more powerful than B"]], "negated_asymmetric_conclusion": ["person_a gets person_b's friends(A, B), so not More(powerful(B), powerful(A))", ["A gets more friends than B, so B is not more powerful than A"]]}
{"original": ["person_a sinks person_b's teeth(A, B), so More(strong(A), strong(B))", ["A sinks B's teeth, so A is more strong than B"]], "negated": ["person_a sinks person_b's teeth(A, B), so not Less(strong(A), strong(B))", ["A sinks B's teeth, so A is not less strong than B"]], "asymmetric_premise": ["person_b sinks person_a's teeth(B, A), so Less(strong(A), strong(B))", ["B sinks A's teeth, so A is less strong than B"]], "asymmetric_conclusion": ["person_a sinks person_b's teeth(A, B), so Less(strong(B), strong(A))", ["A sinks B's teeth, so B is less strong than A"]], "negated_asymmetric_premise": ["person_b sinks person_a's teeth(B, A), so not More(strong(A), strong(B))", ["B sinks A's teeth, so A is not more strong than B"]], "negated_asymmetric_conclusion": ["person_a sinks person_b's teeth(A, B), so not More(strong(B), strong(A))", ["A sinks B's teeth, so B is not more strong than A"]]}
{"original": ["person_a asks person_b something(A, B), so More(inquisitve(A), inquisitve(B))", ["A asks B something, so A is more inquisitve than B"]], "negated": ["person_a asks person_b something(A, B), so not Less(inquisitve(A), inquisitve(B))", ["A asks B something, so A is not less inquisitve than B"]], "asymmetric_premise": ["person_b asks person_a something(B, A), so Less(inquisitve(A), inquisitve(B))", ["B asks A something, so A is less inquisitve than B"]], "asymmetric_conclusion": ["person_a asks person_b something(A, B), so Less(inquisitve(B), inquisitve(A))", ["A asks B something, so B is less inquisitve than A"]], "negated_asymmetric_premise": ["person_b asks person_a something(B, A), so not More(inquisitve(A), inquisitve(B))", ["B asks A something, so A is not more inquisitve than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b something(A, B), so not More(inquisitve(B), inquisitve(A))", ["A asks B something, so B is not more inquisitve than A"]]}
{"original": ["person_a gives person_b a understanding(A, B), so More(knowledgeable(A), knowledgeable(B))", ["A gives B a understanding, so A is more knowledgeable than B"]], "negated": ["person_a gives person_b a understanding(A, B), so not Less(knowledgeable(A), knowledgeable(B))", ["A gives B a understanding, so A is not less knowledgeable than B"]], "asymmetric_premise": ["person_b gives person_a a understanding(B, A), so Less(knowledgeable(A), knowledgeable(B))", ["B gives A a understanding, so A is less knowledgeable than B"]], "asymmetric_conclusion": ["person_a gives person_b a understanding(A, B), so Less(knowledgeable(B), knowledgeable(A))", ["A gives B a understanding, so B is less knowledgeable than A"]], "negated_asymmetric_premise": ["person_b gives person_a a understanding(B, A), so not More(knowledgeable(A), knowledgeable(B))", ["B gives A a understanding, so A is not more knowledgeable than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b a understanding(A, B), so not More(knowledgeable(B), knowledgeable(A))", ["A gives B a understanding, so B is not more knowledgeable than A"]]}
{"original": ["person_a pulls person_b closer to person_b(A, B), so More(grumpy(A), grumpy(B))", ["A pulls B closer, so A is more grumpy than B"]], "negated": ["person_a pulls person_b closer to person_b(A, B), so not Less(grumpy(A), grumpy(B))", ["A pulls B closer than B, so A is not less grumpy than B"]], "asymmetric_premise": ["person_b pulls person_a closer to , so Less(grumpy(A), grumpy(B))", ["A pulls B closer, so A is less grumpy than B"]], "asymmetric_conclusion": ["person_a pulls person_b closer to person_b(A, B), so Less(grumpy(B), grumpy(A))", ["A pulls B closer than B, so B is less grumpy than A"]], "negated_asymmetric_premise": ["person_b pulls person_a closer to , so not More(grumpy(A), grumpy(B))", ["A pulls B closer, so A is not more grumpy than B"]], "negated_asymmetric_conclusion": ["person_a pulls person_b closer to person_b(A, B), so not More(grumpy(B), grumpy(A))", ["A pulls B closer than B, so B is not more grumpy than A"]]}
{"original": ["person_a gives person_b appearance(A, B), so More(obliging(A), obliging(B))", ["A gives B appearance, so A is more obliging than B"]], "negated": ["person_a gives person_b appearance(A, B), so not Less(obliging(A), obliging(B))", ["A gives B appearance, so A is not less obliging than B"]], "asymmetric_premise": ["person_b gives person_a appearance(B, A), so Less(obliging(A), obliging(B))", ["B gives A an appearance, so A is less obliging than B"]], "asymmetric_conclusion": ["person_a gives person_b appearance(A, B), so Less(obliging(B), obliging(A))", ["A gives B appearance, so B is less obliging than A"]], "negated_asymmetric_premise": ["person_b gives person_a appearance(B, A), so not More(obliging(A), obliging(B))", ["B gives A an appearance, so A is not more obliging than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b appearance(A, B), so not More(obliging(B), obliging(A))", ["A gives B appearance, so B is not more obliging than A"]]}
{"original": ["person_a passes person_b law(A, B), so More(intellectual(A), intellectual(B))", ["A passes the law more than B, so A is more intellectual than B"]], "negated": ["person_a passes person_b law(A, B), so not Less(intellectual(A), intellectual(B))", ["A passes the law while B does not, so A is not less intellectual than B"]], "asymmetric_premise": ["person_b passes person_a law(B, A), so Less(intellectual(A), intellectual(B))", ["B passes the law, A does not, so A is less intellectual than B"]], "asymmetric_conclusion": ["person_a passes person_b law(A, B), so Less(intellectual(B), intellectual(A))", ["A passes the law, B does not, so B is less intellectual than A"]], "negated_asymmetric_premise": ["person_b passes person_a law(B, A), so not More(intellectual(A), intellectual(B))", ["B passes the law while A does not, so A is not more intellectual than B"]], "negated_asymmetric_conclusion": ["person_a passes person_b law(A, B), so not More(intellectual(B), intellectual(A))", ["A passes the law, B does not, so B is not more intellectual than A"]]}
{"original": ["person_a sees person_b tomorrow(A, B), so More(excitable(A), excitable(B))", ["A is going to see B tomorrow, so A is more excitable than B"]], "negated": ["person_a sees person_b tomorrow(A, B), so not Less(excitable(A), excitable(B))", ["A sees B tomorrow, so A is not less excitable than B"]], "asymmetric_premise": ["person_b sees person_a tomorrow(B, A), so Less(excitable(A), excitable(B))", ["B sees A tomorrow, so A is less excitable than B"]], "asymmetric_conclusion": ["person_a sees person_b tomorrow(A, B), so Less(excitable(B), excitable(A))", ["A sees B tomorrow, so B is less excitable than A"]], "negated_asymmetric_premise": ["person_b sees person_a tomorrow(B, A), so not More(excitable(A), excitable(B))", ["B sees A tomorrow, so A is not more excitable than B"]], "negated_asymmetric_conclusion": ["person_a sees person_b tomorrow(A, B), so not More(excitable(B), excitable(A))", ["A sees B tomorrow, so B is not more excitable than A"]]}
{"original": ["person_a assumes person_b form(A, B), so More(creepy(A), creepy(B))", ["A assumes B's form, so A is more creepy than B"]], "negated": ["person_a assumes person_b form(A, B), so not Less(creepy(A), creepy(B))", ["A assumes B's form, so A is not less creepy than B"]], "asymmetric_premise": ["person_b assumes person_a form(B, A), so Less(creepy(A), creepy(B))", ["B assumes A's form, so A is less creepy than B"]], "asymmetric_conclusion": ["person_a assumes person_b form(A, B), so Less(creepy(B), creepy(A))", ["A assumes B's form, so B is less creepy than A"]], "negated_asymmetric_premise": ["person_b assumes person_a form(B, A), so not More(creepy(A), creepy(B))", ["B assumes A's form, so A is not more creepy than B"]], "negated_asymmetric_conclusion": ["person_a assumes person_b form(A, B), so not More(creepy(B), creepy(A))", ["A assumes B's form, so B is not more creepy than A"]]}
{"original": ["person_a gives person_b a lot(A, B), so More(generous(A), generous(B))", ["A gives B a lot, so A is more generous than B"]], "negated": ["person_a gives person_b a lot(A, B), so not Less(generous(A), generous(B))", ["A gives B a lot, so A is not less generous than B"]], "asymmetric_premise": ["person_b gives person_a a lot(B, A), so Less(generous(A), generous(B))", ["B gives A a lot of money, so A is less generous than B"]], "asymmetric_conclusion": ["person_a gives person_b a lot(A, B), so Less(generous(B), generous(A))", ["A gives B a lot, so B is less generous than A"]], "negated_asymmetric_premise": ["person_b gives person_a a lot(B, A), so not More(generous(A), generous(B))", ["B gives A a lot, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b a lot(A, B), so not More(generous(B), generous(A))", ["A gives B a lot, so B is not more generous than A"]]}
{"original": ["person_a develops person_b approach(A, B), so More(forward-thinking(A), forward-thinking(B))", ["A develops the approach, B does not, so A is more forward-thinking than B"]], "negated": ["person_a develops person_b approach(A, B), so not Less(forward-thinking(A), forward-thinking(B))", ["A develops the approach, B does not, so A is not less forward-thinking than B"]], "asymmetric_premise": ["person_b develops person_a approach(B, A), so Less(forward-thinking(A), forward-thinking(B))", ["B develops A's approach, so A is less forward-thinking than B"]], "asymmetric_conclusion": ["person_a develops person_b approach(A, B), so Less(forward-thinking(B), forward-thinking(A))", ["A develops B's approach, so B is less forward-thinking than A"]], "negated_asymmetric_premise": ["person_b develops person_a approach(B, A), so not More(forward-thinking(A), forward-thinking(B))", ["B develops A's approach, so A is not more forward-thinking than B"]], "negated_asymmetric_conclusion": ["person_a develops person_b approach(A, B), so not More(forward-thinking(B), forward-thinking(A))", ["A develops the approach, B does not, so B is not more forward-thinking than A"]]}
{"original": ["person_a suits person_b's needs(A, B), so More(competent(A), competent(B))", ["A suits B's needs more than B, so A is more competent than B"]], "negated": ["person_a suits person_b's needs(A, B), so not Less(competent(A), competent(B))", ["A suits B's needs, so A is not less competent than B"]], "asymmetric_premise": ["person_b suits person_a's needs(B, A), so Less(competent(A), competent(B))", ["B suits A's needs, so A is less competent than B"]], "asymmetric_conclusion": ["person_a suits person_b's needs(A, B), so Less(competent(B), competent(A))", ["A suits B's needs more than B, so B is less competent than A"]], "negated_asymmetric_premise": ["person_b suits person_a's needs(B, A), so not More(competent(A), competent(B))", ["B suits A's needs, so A is not more competent than B"]], "negated_asymmetric_conclusion": ["person_a suits person_b's needs(A, B), so not More(competent(B), competent(A))", ["A suits B's needs, so B is not more competent than A"]]}
{"original": ["person_a places person_b's hands(A, B), so More(open(A), open(B))", ["A places B's hands, so A is more open than B"]], "negated": ["person_a places person_b's hands(A, B), so not Less(open(A), open(B))", ["A places B's hands, so A is not less open than B"]], "asymmetric_premise": ["person_b places person_a's hands(B, A), so Less(open(A), open(B))", ["B places A's hands, so A is less open than B"]], "asymmetric_conclusion": ["person_a places person_b's hands(A, B), so Less(open(B), open(A))", ["A places B's hands, so B's hands are less open than A"]], "negated_asymmetric_premise": ["person_b places person_a's hands(B, A), so not More(open(A), open(B))", ["B places A's hands, so A is not more open than B"]], "negated_asymmetric_conclusion": ["person_a places person_b's hands(A, B), so not More(open(B), open(A))", ["A places B's hands, so B is not more open than A"]]}
{"original": ["person_a publishes person_b's work(A, B), so More(powerful(A), powerful(B))", ["A publishes B's work, so A is more powerful than B"]], "negated": ["person_a publishes person_b's work(A, B), so not Less(powerful(A), powerful(B))", ["A publishes B's work, so A is not less powerful than B"]], "asymmetric_premise": ["person_b publishes person_a's work(B, A), so Less(powerful(A), powerful(B))", ["B publishes A's work, so A is less powerful than B"]], "asymmetric_conclusion": ["person_a publishes person_b's work(A, B), so Less(powerful(B), powerful(A))", ["A publishes B's work, so B is less powerful than A"]], "negated_asymmetric_premise": ["person_b publishes person_a's work(B, A), so not More(powerful(A), powerful(B))", ["B publishes A's work, so A is not more powerful than B"]], "negated_asymmetric_conclusion": ["person_a publishes person_b's work(A, B), so not More(powerful(B), powerful(A))", ["A publishes B's work, so B is not more powerful than A"]]}
{"original": ["person_a makes person_b choice(A, B), so More(mean(A), mean(B))", ["A makes B's choice, so A is more mean than B"]], "negated": ["person_a makes person_b choice(A, B), so not Less(mean(A), mean(B))", ["A makes B's choice, so A is not less mean than B"]], "asymmetric_premise": ["person_b makes person_a choice(B, A), so Less(mean(A), mean(B))", ["B makes A's choice, so A is less mean than B"]], "asymmetric_conclusion": ["person_a makes person_b choice(A, B), so Less(mean(B), mean(A))", ["A makes the choice, B does not, so B is less mean than A"]], "negated_asymmetric_premise": ["person_b makes person_a choice(B, A), so not More(mean(A), mean(B))", ["B makes A's choice, so A is not more mean than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b choice(A, B), so not More(mean(B), mean(A))", ["A makes B's choice, so B is not more mean than A"]]}
{"original": ["person_a knows person_b was in trouble(A, B), so More(all knowing(A), all knowing(B))", ["A knows B was in trouble, so A is more all knowing than B"]], "negated": ["person_a knows person_b was in trouble(A, B), so not Less(all knowing(A), all knowing(B))", ["A knows B was in trouble, so A is not less all knowing than B"]], "asymmetric_premise": ["person_b knows person_a was in trouble(B, A), so Less(all knowing(A), all knowing(B))", ["B knows A was in trouble, so A is less knowing than B"]], "asymmetric_conclusion": ["person_a knows person_b was in trouble(A, B), so Less(all knowing(B), all knowing(A))", ["A knows B was in trouble, so B is less knowing than A"]], "negated_asymmetric_premise": ["person_b knows person_a was in trouble(B, A), so not More(all knowing(A), all knowing(B))", ["B knows A was in trouble, so A is not more knowing than B"]], "negated_asymmetric_conclusion": ["person_a knows person_b was in trouble(A, B), so not More(all knowing(B), all knowing(A))", ["A knows B was in trouble, so B is not more knowing than A"]]}
{"original": ["person_a stings person_b's eyes(A, B), so More(clumsy(A), clumsy(B))", ["A stings B's eyes, so A is more clumsy than B"]], "negated": ["person_a stings person_b's eyes(A, B), so not Less(clumsy(A), clumsy(B))", ["A stings B's eyes, so A is not less clumsy than B"]], "asymmetric_premise": ["person_b stings person_a's eyes(B, A), so Less(clumsy(A), clumsy(B))", ["B stings A's eyes, so A is less clumsy than B"]], "asymmetric_conclusion": ["person_a stings person_b's eyes(A, B), so Less(clumsy(B), clumsy(A))", ["A stings B's eyes, so B is less clumsy than A"]], "negated_asymmetric_premise": ["person_b stings person_a's eyes(B, A), so not More(clumsy(A), clumsy(B))", ["B stings A's eyes, so A is not more clumsy than B"]], "negated_asymmetric_conclusion": ["person_a stings person_b's eyes(A, B), so not More(clumsy(B), clumsy(A))", ["A stings B's eyes, so B is not more clumsy than A"]]}
{"original": ["person_a is cleaning person_b's house(A, B), so More(hardworking(A), hardworking(B))", ["A is cleaning B's house, so A is more hardworking than B"]], "negated": ["person_a is cleaning person_b's house(A, B), so not Less(hardworking(A), hardworking(B))", ["A is cleaning B's house, so A is not less hardworking than B"]], "asymmetric_premise": ["person_b is cleaning person_a's house(B, A), so Less(hardworking(A), hardworking(B))", ["B is cleaning A's house, so A is less hardworking than B"]], "asymmetric_conclusion": ["person_a is cleaning person_b's house(A, B), so Less(hardworking(B), hardworking(A))", ["A is cleaning B's house, so B is less hardworking than A"]], "negated_asymmetric_premise": ["person_b is cleaning person_a's house(B, A), so not More(hardworking(A), hardworking(B))", ["B is cleaning A's house, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": ["person_a is cleaning person_b's house(A, B), so not More(hardworking(B), hardworking(A))", ["A is cleaning B's house, so B is not more hardworking than A"]]}
{"original": ["person_a tells person_b's stories(A, B), so More(misrepresenting(A), misrepresenting(B))", ["A tells B's stories, so A is more likely to be misrepresenting than B"]], "negated": ["person_a tells person_b's stories(A, B), so not Less(misrepresenting(A), misrepresenting(B))", ["A tells B's stories, so A is not less misrepresenting than B"]], "asymmetric_premise": ["person_b tells person_a's stories(B, A), so Less(misrepresenting(A), misrepresenting(B))", ["B tells A's stories, so A is less likely to be misrepresenting B"]], "asymmetric_conclusion": ["person_a tells person_b's stories(A, B), so Less(misrepresenting(B), misrepresenting(A))", ["A tells B's stories, so B is less likely to be misrepresenting A"]], "negated_asymmetric_premise": ["person_b tells person_a's stories(B, A), so not More(misrepresenting(A), misrepresenting(B))", ["B tells A's stories, so A is not more misrepresenting than B"]], "negated_asymmetric_conclusion": ["person_a tells person_b's stories(A, B), so not More(misrepresenting(B), misrepresenting(A))", ["A tells B's stories, so B is not more misrepresenting than A"]]}
{"original": ["person_a agrees to help person_b(A, B), so More(generous(A), generous(B))", ["A agrees to help B, so A is more generous than B"]], "negated": ["person_a agrees to help person_b(A, B), so not Less(generous(A), generous(B))", ["A agrees to help B, so A is not less generous than B"]], "asymmetric_premise": ["person_b agrees to help person_a(B, A), so Less(generous(A), generous(B))", ["B agrees to help A, so A is less generous than B"]], "asymmetric_conclusion": ["person_a agrees to help person_b(A, B), so Less(generous(B), generous(A))", ["A agrees to help B, so B is less generous than A"]], "negated_asymmetric_premise": ["person_b agrees to help person_a(B, A), so not More(generous(A), generous(B))", ["B agrees to help A, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["person_a agrees to help person_b(A, B), so not More(generous(B), generous(A))", ["A agrees to help B, so B is not more generous than A"]]}
{"original": ["person_a brings person_b into contact(A, B), so More(sociable(A), sociable(B))", ["A brings B into contact, so A is more sociable than B"]], "negated": ["person_a brings person_b into contact(A, B), so not Less(sociable(A), sociable(B))", ["A brings B into contact, so A is not less sociable than B"]], "asymmetric_premise": ["person_b brings person_a into contact(B, A), so Less(sociable(A), sociable(B))", ["B brings A into contact, so A is less sociable than B"]], "asymmetric_conclusion": ["person_a brings person_b into contact(A, B), so Less(sociable(B), sociable(A))", ["A brings B into contact, so B is less sociable than A"]], "negated_asymmetric_premise": ["person_b brings person_a into contact(B, A), so not More(sociable(A), sociable(B))", ["B brings A into contact, so A is not more sociable than B"]], "negated_asymmetric_conclusion": ["person_a brings person_b into contact(A, B), so not More(sociable(B), sociable(A))", ["A brings B into contact, so B is not more sociable than A"]]}
{"original": ["person_a looks directly at person_b(A, B), so More(curious(A), curious(B))", ["A looks directly at B, so A is more curious than B"]], "negated": ["person_a looks directly at person_b(A, B), so not Less(curious(A), curious(B))", ["A looks directly at B, so A is not less curious than B"]], "asymmetric_premise": ["person_b looks directly at person_a(B, A), so Less(curious(A), curious(B))", ["B looks directly at A, so A is less curious than B"]], "asymmetric_conclusion": ["person_a looks directly at person_b(A, B), so Less(curious(B), curious(A))", ["A looks directly at B, so B is less curious than A"]], "negated_asymmetric_premise": ["person_b looks directly at person_a(B, A), so not More(curious(A), curious(B))", ["B looks directly at A, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["person_a looks directly at person_b(A, B), so not More(curious(B), curious(A))", ["A looks directly at B, so B is not more curious than A"]]}
{"original": ["person_a tries to bite person_b(A, B), so More(unhinged(A), unhinged(B))", ["A tries to bite B, so A is more unhinged than B"]], "negated": ["person_a tries to bite person_b(A, B), so not Less(unhinged(A), unhinged(B))", ["A tries to bite B, so A is not less unhinged than B"]], "asymmetric_premise": ["person_b tries to bite person_a(B, A), so Less(unhinged(A), unhinged(B))", ["B tries to bite A, so A is less unhinged than B"]], "asymmetric_conclusion": ["person_a tries to bite person_b(A, B), so Less(unhinged(B), unhinged(A))", ["A tries to bite B, so B is less unhinged than A"]], "negated_asymmetric_premise": ["person_b tries to bite person_a(B, A), so not More(unhinged(A), unhinged(B))", ["B tries to bite A, so A is not more unhinged than B"]], "negated_asymmetric_conclusion": ["person_a tries to bite person_b(A, B), so not More(unhinged(B), unhinged(A))", ["A tries to bite B, so B is not more unhinged than A"]]}
{"original": ["person_a gives person_b a reward(A, B), so More(congratulatory(A), congratulatory(B))", ["A gives B a reward, so A is more congratulatory than B"]], "negated": ["person_a gives person_b a reward(A, B), so not Less(congratulatory(A), congratulatory(B))", ["A gives B a reward, so A is not less congratulatory than B"]], "asymmetric_premise": ["person_b gives person_a a reward(B, A), so Less(congratulatory(A), congratulatory(B))", ["B gives A a reward, so A is less congratulatory than B"]], "asymmetric_conclusion": ["person_a gives person_b a reward(A, B), so Less(congratulatory(B), congratulatory(A))", ["A gives B a reward, so B is less congratulatory than A"]], "negated_asymmetric_premise": ["person_b gives person_a a reward(B, A), so not More(congratulatory(A), congratulatory(B))", ["B gives A a reward, so A is not more congratulatory than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b a reward(A, B), so not More(congratulatory(B), congratulatory(A))", ["A gives B a reward, so B is not more congratulatory than A"]]}
{"original": ["person_a waits for person_b's return(A, B), so More(patient(A), patient(B))", ["A waits for B's return, so A is more patient than B"]], "negated": ["person_a waits for person_b's return(A, B), so not Less(patient(A), patient(B))", ["A waits for B's return while B does not, so A is not less patient than B"]], "asymmetric_premise": ["person_b waits for person_a's return(B, A), so Less(patient(A), patient(B))", ["B waits for A's return, so A is less patient than B"]], "asymmetric_conclusion": ["person_a waits for person_b's return(A, B), so Less(patient(B), patient(A))", ["A waits for B's return while B does not, so B is less patient than A"]], "negated_asymmetric_premise": ["person_b waits for person_a's return(B, A), so not More(patient(A), patient(B))", ["B waits for A's return, so A is not more patient than B"]], "negated_asymmetric_conclusion": ["person_a waits for person_b's return(A, B), so not More(patient(B), patient(A))", ["A waits for B's return while B does not, so B is not more patient than A"]]}
{"original": ["person_a knows person_b would(A, B), so More(hopeful(A), hopeful(B))", ["A is B's parent, so A is more hopeful than B"]], "negated": ["person_a knows person_b would(A, B), so not Less(hopeful(A), hopeful(B))", ["A knows B would, so A is not less hopeful than B"]], "asymmetric_premise": ["person_b knows person_a would(B, A), so Less(hopeful(A), hopeful(B))", ["B knows A wouldn't, so A is less hopeful than B"]], "asymmetric_conclusion": ["person_a knows person_b would(A, B), so Less(hopeful(B), hopeful(A))", ["A knows B would be sick, so B is less hopeful than A"]], "negated_asymmetric_premise": ["person_b knows person_a would(B, A), so not More(hopeful(A), hopeful(B))", ["B knows A wouldn't, so A is not more hopeful than B"]], "negated_asymmetric_conclusion": ["person_a knows person_b would(A, B), so not More(hopeful(B), hopeful(A))", ["A knows B wouldn't, so B is not more hopeful than A"]]}
{"original": ["person_a strikes person_b a blow(A, B), so More(aggressive(A), aggressive(B))", ["A strikes B a blow, so A is more aggressive than B"]], "negated": ["person_a strikes person_b a blow(A, B), so not Less(aggressive(A), aggressive(B))", ["A strikes B a blow, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b strikes person_a a blow(B, A), so Less(aggressive(A), aggressive(B))", ["B strikes A a blow, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a strikes person_b a blow(A, B), so Less(aggressive(B), aggressive(A))", ["A strikes B a blow, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b strikes person_a a blow(B, A), so not More(aggressive(A), aggressive(B))", ["B strikes A a blow, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a strikes person_b a blow(A, B), so not More(aggressive(B), aggressive(A))", ["A strikes B a blow, so B is not more aggressive than A"]]}
{"original": ["person_a takes up person_b's cross(A, B), so More(selfless(A), selfless(B))", ["A takes up B's cross, so A is more selfless than B"]], "negated": ["person_a takes up person_b's cross(A, B), so not Less(selfless(A), selfless(B))", ["A takes up B's cross, so A is not less selfless than B"]], "asymmetric_premise": ["person_b takes up person_a's cross(B, A), so Less(selfless(A), selfless(B))", ["B takes up A's cross, so A is less selfless than B"]], "asymmetric_conclusion": ["person_a takes up person_b's cross(A, B), so Less(selfless(B), selfless(A))", ["A takes up B's cross, so B is less selfless than A"]], "negated_asymmetric_premise": ["person_b takes up person_a's cross(B, A), so not More(selfless(A), selfless(B))", ["B takes up A's cross, so A is not more selfless than B"]], "negated_asymmetric_conclusion": ["person_a takes up person_b's cross(A, B), so not More(selfless(B), selfless(A))", ["A takes up B's cross, so B is not more selfless than A"]]}
{"original": ["person_a is driving person_b crazy(A, B), so More(erratic(A), erratic(B))", ["A is driving B crazy, so A is more erratic than B"]], "negated": ["person_a is driving person_b crazy(A, B), so not Less(erratic(A), erratic(B))", ["A is driving B crazy, so A is not less erratic than B"]], "asymmetric_premise": ["person_b is driving person_a crazy(B, A), so Less(erratic(A), erratic(B))", ["B is driving A crazy, so A is less erratic than B"]], "asymmetric_conclusion": ["person_a is driving person_b crazy(A, B), so Less(erratic(B), erratic(A))", ["A is driving B crazy, so B is less erratic than A"]], "negated_asymmetric_premise": ["person_b is driving person_a crazy(B, A), so not More(erratic(A), erratic(B))", ["B is driving A crazy, so A is not more erratic than B"]], "negated_asymmetric_conclusion": ["person_a is driving person_b crazy(A, B), so not More(erratic(B), erratic(A))", ["A is driving B crazy, so B is not more erratic than A"]]}
{"original": ["person_a gets to know person_b(A, B), so More(smart(A), smart(B))", ["A gets to know B more than B, so A is more smart than B"]], "negated": ["person_a gets to know person_b(A, B), so not Less(smart(A), smart(B))", ["A gets to know B, so A is not less smart than B"]], "asymmetric_premise": ["person_b gets to know person_a(B, A), so Less(smart(A), smart(B))", ["B gets to know A, so A is less smart than B"]], "asymmetric_conclusion": ["person_a gets to know person_b(A, B), so Less(smart(B), smart(A))", ["A gets to know B, so B is less smart than A"]], "negated_asymmetric_premise": ["person_b gets to know person_a(B, A), so not More(smart(A), smart(B))", ["B gets to know A, so A is not more smart than B"]], "negated_asymmetric_conclusion": ["person_a gets to know person_b(A, B), so not More(smart(B), smart(A))", ["A gets to know B, so B is not more smart than A"]]}
{"original": ["person_a saves person_b the trouble(A, B), so More(able(A), able(B))", ["A saves B a lot of trouble, so A is more able than B"]], "negated": ["person_a saves person_b the trouble(A, B), so not Less(able(A), able(B))", ["A saves B the trouble, so A is not less able than B"]], "asymmetric_premise": ["person_b saves person_a the trouble(B, A), so Less(able(A), able(B))", ["B saves A the trouble, so A is less able than B"]], "asymmetric_conclusion": ["person_a saves person_b the trouble(A, B), so Less(able(B), able(A))", ["A saves B a lot of trouble, so B is less able than A"]], "negated_asymmetric_premise": ["person_b saves person_a the trouble(B, A), so not More(able(A), able(B))", ["B saves A the trouble, so A is not more able than B"]], "negated_asymmetric_conclusion": ["person_a saves person_b the trouble(A, B), so not More(able(B), able(A))", ["A saves B the trouble, so B is not more able than A"]]}
{"original": ["person_a rubs person_b's back(A, B), so More(compassionate(A), compassionate(B))", ["A rubs B's back, so A is more compassionate than B"]], "negated": ["person_a rubs person_b's back(A, B), so not Less(compassionate(A), compassionate(B))", ["A rubs B's back, so A is not less compassionate than B"]], "asymmetric_premise": ["person_b rubs person_a's back(B, A), so Less(compassionate(A), compassionate(B))", ["B rubs A's back, so A is less compassionate than B"]], "asymmetric_conclusion": ["person_a rubs person_b's back(A, B), so Less(compassionate(B), compassionate(A))", ["A rubs B's back, so B is less compassionate than A"]], "negated_asymmetric_premise": ["person_b rubs person_a's back(B, A), so not More(compassionate(A), compassionate(B))", ["B rubs A's back, so A is not more compassionate than B"]], "negated_asymmetric_conclusion": ["person_a rubs person_b's back(A, B), so not More(compassionate(B), compassionate(A))", ["A rubs B's back, so B is not more compassionate than A"]]}
{"original": ["person_a commands person_b view(A, B), so More(vibrant(A), vibrant(B))", ["A commands B's view, so A is more vibrant than B"]], "negated": ["person_a commands person_b view(A, B), so not Less(vibrant(A), vibrant(B))", ["A commands B's view, so A is not less vibrant than B"]], "asymmetric_premise": ["person_b commands person_a view(B, A), so Less(vibrant(A), vibrant(B))", ["B commands A's view, so A is less vibrant than B"]], "asymmetric_conclusion": ["person_a commands person_b view(A, B), so Less(vibrant(B), vibrant(A))", ["A commands B's view, so B is less vibrant than A"]], "negated_asymmetric_premise": ["person_b commands person_a view(B, A), so not More(vibrant(A), vibrant(B))", ["B commands A's view, so A is not more vibrant than B"]], "negated_asymmetric_conclusion": ["person_a commands person_b view(A, B), so not More(vibrant(B), vibrant(A))", ["A commands B's view, so B is not more vibrant than A"]]}
{"original": ["person_a catches person_b in the act(A, B), so More(suspicious(A), suspicious(B))", ["A catches B in the act, so A is more suspicious than B"]], "negated": ["person_a catches person_b in the act(A, B), so not Less(suspicious(A), suspicious(B))", ["A catches B in the act, so A is not less suspicious than B"]], "asymmetric_premise": ["person_b catches person_a in the act(B, A), so Less(suspicious(A), suspicious(B))", ["B catches A in the act, so A is less suspicious than B"]], "asymmetric_conclusion": ["person_a catches person_b in the act(A, B), so Less(suspicious(B), suspicious(A))", ["A catches B in the act, so B is less suspicious than A"]], "negated_asymmetric_premise": ["person_b catches person_a in the act(B, A), so not More(suspicious(A), suspicious(B))", ["B catches A in the act, so A is not more suspicious than B"]], "negated_asymmetric_conclusion": ["person_a catches person_b in the act(A, B), so not More(suspicious(B), suspicious(A))", ["A catches B in the act, so B is not more suspicious than A"]]}
{"original": ["person_a wins person_b's case(A, B), so More(a winner(A), a winner(B))", ["A wins B's case, so A is more likely to be a winner than B"]], "negated": ["person_a wins person_b's case(A, B), so not Less(a winner(A), a winner(B))", ["A wins the case more than B, so A is not less a winner than B"]], "asymmetric_premise": ["person_b wins person_a's case(B, A), so Less(a winner(A), a winner(B))", ["B wins A's case, so A is less a winner than B"]], "asymmetric_conclusion": ["person_a wins person_b's case(A, B), so Less(a winner(B), a winner(A))", ["A wins B's case, so B is less a winner than A"]], "negated_asymmetric_premise": ["person_b wins person_a's case(B, A), so not More(a winner(A), a winner(B))", ["B wins A's case, so A is not more likely to be a winner than B"]], "negated_asymmetric_conclusion": ["person_a wins person_b's case(A, B), so not More(a winner(B), a winner(A))", ["A wins the case more than B, so B is not more a winner than A"]]}
{"original": ["person_a gets to see person_b(A, B), so More(excited(A), excited(B))", ["A gets to see B, so A is more excited than B"]], "negated": ["person_a gets to see person_b(A, B), so not Less(excited(A), excited(B))", ["A gets to see B, so A is not less excited than B"]], "asymmetric_premise": ["person_b gets to see person_a(B, A), so Less(excited(A), excited(B))", ["B gets to see A, so A is less excited than B"]], "asymmetric_conclusion": ["person_a gets to see person_b(A, B), so Less(excited(B), excited(A))", ["A gets to see B, so B is less excited than A"]], "negated_asymmetric_premise": ["person_b gets to see person_a(B, A), so not More(excited(A), excited(B))", ["B gets to see A, so A is not more excited than B"]], "negated_asymmetric_conclusion": ["person_a gets to see person_b(A, B), so not More(excited(B), excited(A))", ["A gets to see B, so B is not more excited than A"]]}
{"original": ["person_a deprives person_b of the power(A, B), so More(powerful(A), powerful(B))", ["A deprives B of the power, so A is more powerful than B"]], "negated": ["person_a deprives person_b of the power(A, B), so not Less(powerful(A), powerful(B))", ["A deprives B of the power, so A is not less powerful than B"]], "asymmetric_premise": ["person_b deprives person_a of the power(B, A), so Less(powerful(A), powerful(B))", ["B deprives A of the power, so A is less powerful than B"]], "asymmetric_conclusion": ["person_a deprives person_b of the power(A, B), so Less(powerful(B), powerful(A))", ["A deprives B of the power, so B is less powerful than A"]], "negated_asymmetric_premise": ["person_b deprives person_a of the power(B, A), so not More(powerful(A), powerful(B))", ["B deprives A of the power, so A is not more powerful than B"]], "negated_asymmetric_conclusion": ["person_a deprives person_b of the power(A, B), so not More(powerful(B), powerful(A))", ["A deprives B of the power, so B is not more powerful than A"]]}
{"original": ["person_a spends all person_b's time(A, B), so More(determined(A), determined(B))", ["A spends all of B's time, so A is more determined than B"]], "negated": ["person_a spends all person_b's time(A, B), so not Less(determined(A), determined(B))", ["A spends all of B's time, so A is not less determined than B"]], "asymmetric_premise": ["person_b spends all person_a's time(B, A), so Less(determined(A), determined(B))", ["B spends all of A's time, so A is less determined than B"]], "asymmetric_conclusion": ["person_a spends all person_b's time(A, B), so Less(determined(B), determined(A))", ["A spends all of B's time, so B is less determined than A"]], "negated_asymmetric_premise": ["person_b spends all person_a's time(B, A), so not More(determined(A), determined(B))", ["B spends all of A's time, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["person_a spends all person_b's time(A, B), so not More(determined(B), determined(A))", ["A spends all of B's time, so B is not more determined than A"]]}
{"original": ["person_a unpacks person_b's things(A, B), so More(friendly(A), friendly(B))", ["A unpacks B's things, so A is more friendly than B"]], "negated": ["person_a unpacks person_b's things(A, B), so not Less(friendly(A), friendly(B))", ["A unpacks B's things, so A is not less friendly than B"]], "asymmetric_premise": ["person_b unpacks person_a's things(B, A), so Less(friendly(A), friendly(B))", ["B unpacks A's things, so A is less friendly than B"]], "asymmetric_conclusion": ["person_a unpacks person_b's things(A, B), so Less(friendly(B), friendly(A))", ["A unpacks B's things, so B is less friendly than A"]], "negated_asymmetric_premise": ["person_b unpacks person_a's things(B, A), so not More(friendly(A), friendly(B))", ["B unpacks A's things, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["person_a unpacks person_b's things(A, B), so not More(friendly(B), friendly(A))", ["A unpacks B's things, so B is not more friendly than A"]]}
{"original": ["person_a couples with person_b interest(A, B), so More(sympathetic(A), sympathetic(B))", ["A couples with B, so A is more sympathetic than B"]], "negated": ["person_a couples with person_b interest(A, B), so not Less(sympathetic(A), sympathetic(B))", ["A couples with B, so A is not less sympathetic than B"]], "asymmetric_premise": ["person_b couples with person_a interest(B, A), so Less(sympathetic(A), sympathetic(B))", ["B couples with A, so A is less sympathetic than B"]], "asymmetric_conclusion": ["person_a couples with person_b interest(A, B), so Less(sympathetic(B), sympathetic(A))", ["A couples with B, so B is less sympathetic than A"]], "negated_asymmetric_premise": ["person_b couples with person_a interest(B, A), so not More(sympathetic(A), sympathetic(B))", ["B couples with A, so A is not more sympathetic than B"]], "negated_asymmetric_conclusion": ["person_a couples with person_b interest(A, B), so not More(sympathetic(B), sympathetic(A))", ["A couples with B, so B is not more sympathetic than A"]]}
{"original": ["person_a tells person_b's grandma(A, B), so More(concerned(A), concerned(B))", ["A tells B's grandma, so A is more concerned than B"]], "negated": ["person_a tells person_b's grandma(A, B), so not Less(concerned(A), concerned(B))", ["A tells B's grandma, so A is not less concerned than B"]], "asymmetric_premise": ["person_b tells person_a's grandma(B, A), so Less(concerned(A), concerned(B))", ["B tells A's grandma, so A is less concerned than B"]], "asymmetric_conclusion": ["person_a tells person_b's grandma(A, B), so Less(concerned(B), concerned(A))", ["A tells B about B's grandma, so B is less concerned than A"]], "negated_asymmetric_premise": ["person_b tells person_a's grandma(B, A), so not More(concerned(A), concerned(B))", ["B tells A's grandma, so A is not more concerned than B"]], "negated_asymmetric_conclusion": ["person_a tells person_b's grandma(A, B), so not More(concerned(B), concerned(A))", ["A tells B's grandma, so B is not more concerned than A"]]}
{"original": ["person_a rides person_b's bike home(A, B), so More(active(A), active(B))", ["A rides B's bike home, so A is more active than B"]], "negated": ["person_a rides person_b's bike home(A, B), so not Less(active(A), active(B))", ["A rides B's bike home, so A is not less active than B"]], "asymmetric_premise": ["person_b rides person_a's bike home(B, A), so Less(active(A), active(B))", ["B rides A's bike home, so A is less active than B"]], "asymmetric_conclusion": ["person_a rides person_b's bike home(A, B), so Less(active(B), active(A))", ["A rides B's bike home, so B is less active than A"]], "negated_asymmetric_premise": ["person_b rides person_a's bike home(B, A), so not More(active(A), active(B))", ["B rides A's bike home, so A is not more active than B"]], "negated_asymmetric_conclusion": ["person_a rides person_b's bike home(A, B), so not More(active(B), active(A))", ["A rides B's bike home, so B is not more active than A"]]}
{"original": ["person_a thrusts upon person_b(A, B), so More(unpleasant(A), unpleasant(B))", ["A is thrust upon B, so A is more unpleasant than B"]], "negated": ["person_a thrusts upon person_b(A, B), so not Less(unpleasant(A), unpleasant(B))", ["A is thrust upon B, so A is not less unpleasant than B"]], "asymmetric_premise": ["person_b thrusts upon person_a(B, A), so Less(unpleasant(A), unpleasant(B))", ["B thrusts upon A, so A is less unpleasant than B"]], "asymmetric_conclusion": ["person_a thrusts upon person_b(A, B), so Less(unpleasant(B), unpleasant(A))", ["A thrusts upon B, so B is less unpleasant than A"]], "negated_asymmetric_premise": ["person_b thrusts upon person_a(B, A), so not More(unpleasant(A), unpleasant(B))", ["B thrusts upon A, so A is not more unpleasant than B"]], "negated_asymmetric_conclusion": ["person_a thrusts upon person_b(A, B), so not More(unpleasant(B), unpleasant(A))", ["A is thrust upon B, so B is not more unpleasant than A"]]}
{"original": ["person_a means person_b harm(A, B), so More(voilent(A), voilent(B))", ["A is likely to do B harm, so A is more voilent than B"]], "negated": ["person_a means person_b harm(A, B), so not Less(voilent(A), voilent(B))", ["A is not less voilent than B, so A is not less voile than B"]], "asymmetric_premise": ["person_b means person_a harm(B, A), so Less(voilent(A), voilent(B))", ["B does A harm, so A is less voilent than B"]], "asymmetric_conclusion": ["person_a means person_b harm(A, B), so Less(voilent(B), voilent(A))", ["A is likely to do B harm, so B is less voilent than A"]], "negated_asymmetric_premise": ["person_b means person_a harm(B, A), so not More(voilent(A), voilent(B))", ["B does A harm, so A is not more voilent than B"]], "negated_asymmetric_conclusion": ["person_a means person_b harm(A, B), so not More(voilent(B), voilent(A))", ["A is not more voilent than B, so B is not more voile than A"]]}
{"original": ["person_a greets person_b with a smile(A, B), so More(friendly(A), friendly(B))", ["A greets B with a smile, so A is more friendly than B"]], "negated": ["person_a greets person_b with a smile(A, B), so not Less(friendly(A), friendly(B))", ["A greets B with a smile, so A is not less friendly than B"]], "asymmetric_premise": ["person_b greets person_a with a smile(B, A), so Less(friendly(A), friendly(B))", ["B greets A with a smile, so A is less friendly than B"]], "asymmetric_conclusion": ["person_a greets person_b with a smile(A, B), so Less(friendly(B), friendly(A))", ["A greets B with a smile, so B is less friendly than A"]], "negated_asymmetric_premise": ["person_b greets person_a with a smile(B, A), so not More(friendly(A), friendly(B))", ["B greets A with a smile, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["person_a greets person_b with a smile(A, B), so not More(friendly(B), friendly(A))", ["A greets B with a smile, so B is not more friendly than A"]]}
{"original": ["person_a discusses in person_b chapter(A, B), so More(friendly(A), friendly(B))", ["A discusses in a chapter more than B, so A is more friendly than B"]], "negated": ["person_a discusses in person_b chapter(A, B), so not Less(friendly(A), friendly(B))", ["A discusses in a chapter more than B, so A is not less friendly than B"]], "asymmetric_premise": ["person_b discusses in person_a chapter(B, A), so Less(friendly(A), friendly(B))", ["B discusses in a chapter more than A, so A is less friendly than B"]], "asymmetric_conclusion": ["person_a discusses in person_b chapter(A, B), so Less(friendly(B), friendly(A))", ["A discusses in a chapter more than B, so B is less friendly than A"]], "negated_asymmetric_premise": ["person_b discusses in person_a chapter(B, A), so not More(friendly(A), friendly(B))", ["B discusses in a chapter more than A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["person_a discusses in person_b chapter(A, B), so not More(friendly(B), friendly(A))", ["A discusses in a chapter more than B, so B is not more friendly than A"]]}
{"original": ["person_a moves person_b's legs(A, B), so More(aggressive(A), aggressive(B))", ["A moves B's legs, so A is more aggressive than B"]], "negated": ["person_a moves person_b's legs(A, B), so not Less(aggressive(A), aggressive(B))", ["A moves B's legs, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b moves person_a's legs(B, A), so Less(aggressive(A), aggressive(B))", ["B moves A's legs, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a moves person_b's legs(A, B), so Less(aggressive(B), aggressive(A))", ["A moves B's legs, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b moves person_a's legs(B, A), so not More(aggressive(A), aggressive(B))", ["B moves A's legs, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a moves person_b's legs(A, B), so not More(aggressive(B), aggressive(A))", ["A moves B's legs, so B is not more aggressive than A"]]}
{"original": ["person_a asks person_b advice(A, B), so More(curious(A), curious(B))", ["A asks B advice, so A is more curious than B"]], "negated": ["person_a asks person_b advice(A, B), so not Less(curious(A), curious(B))", ["A asks B advice, so A is not less curious than B"]], "asymmetric_premise": ["person_b asks person_a advice(B, A), so Less(curious(A), curious(B))", ["B asks A advice, so A is less curious than B"]], "asymmetric_conclusion": ["person_a asks person_b advice(A, B), so Less(curious(B), curious(A))", ["A asks B for advice, so B is less curious than A"]], "negated_asymmetric_premise": ["person_b asks person_a advice(B, A), so not More(curious(A), curious(B))", ["B asks A for advice, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b advice(A, B), so not More(curious(B), curious(A))", ["A asks B for advice, so B is not more curious than A"]]}
{"original": ["person_a throws person_b away(A, B), so More(rude(A), rude(B))", ["A throws B away, so A is more rude than B"]], "negated": ["person_a throws person_b away(A, B), so not Less(rude(A), rude(B))", ["A throws B away, so A is not less rude than B"]], "asymmetric_premise": ["person_b throws person_a away(B, A), so Less(rude(A), rude(B))", ["B throws A away, so A is less rude than B"]], "asymmetric_conclusion": ["person_a throws person_b away(A, B), so Less(rude(B), rude(A))", ["A throws B away, so B is less rude than A"]], "negated_asymmetric_premise": ["person_b throws person_a away(B, A), so not More(rude(A), rude(B))", ["B throws A away, so A is not more rude than B"]], "negated_asymmetric_conclusion": ["person_a throws person_b away(A, B), so not More(rude(B), rude(A))", ["A throws B away, so B is not more rude than A"]]}
{"original": ["person_a buries person_b's dead(A, B), so More(generous(A), generous(B))", ["A buries B's dead, so A is more generous than B"]], "negated": ["person_a buries person_b's dead(A, B), so not Less(generous(A), generous(B))", ["A buries B's dead, so A is not less generous than B"]], "asymmetric_premise": ["person_b buries person_a's dead(B, A), so Less(generous(A), generous(B))", ["B buries A's dead, so A is less generous than B"]], "asymmetric_conclusion": ["person_a buries person_b's dead(A, B), so Less(generous(B), generous(A))", ["A buries B's dead, so B is less generous than A"]], "negated_asymmetric_premise": ["person_b buries person_a's dead(B, A), so not More(generous(A), generous(B))", ["B buries A's dead, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["person_a buries person_b's dead(A, B), so not More(generous(B), generous(A))", ["A buries B's dead, so B is not more generous than A"]]}
{"original": ["person_a lays person_b egg(A, B), so More(helpful(A), helpful(B))", ["A lays a egg, B does not, so A is more helpful than B"]], "negated": ["person_a lays person_b egg(A, B), so not Less(helpful(A), helpful(B))", ["A lays a egg, B does not, so A is not less helpful than B"]], "asymmetric_premise": ["person_b lays person_a egg(B, A), so Less(helpful(A), helpful(B))", ["B lays a egg, A does not, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a lays person_b egg(A, B), so Less(helpful(B), helpful(A))", ["A lays a egg, B does not, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b lays person_a egg(B, A), so not More(helpful(A), helpful(B))", ["B lays a egg, A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a lays person_b egg(A, B), so not More(helpful(B), helpful(A))", ["A lays a egg, B does not, so B is not more helpful than A"]]}
{"original": ["person_a regards person_b as one(A, B), so More(thoughful(A), thoughful(B))", ["A regards B as one, so A is more thoughful than B"]], "negated": ["person_a regards person_b as one(A, B), so not Less(thoughful(A), thoughful(B))", ["A regards B as one, so A is not less thoughful than B"]], "asymmetric_premise": ["person_b regards person_a as one(B, A), so Less(thoughful(A), thoughful(B))", ["B regards A as one, so A is less thoughful than B"]], "asymmetric_conclusion": ["person_a regards person_b as one(A, B), so Less(thoughful(B), thoughful(A))", ["A regards B as one, so B is less thoughful than A"]], "negated_asymmetric_premise": ["person_b regards person_a as one(B, A), so not More(thoughful(A), thoughful(B))", ["B regards A as one, so A is not more thoughful than B"]], "negated_asymmetric_conclusion": ["person_a regards person_b as one(A, B), so not More(thoughful(B), thoughful(A))", ["A regards B as one, so B is not more thoughful than A"]]}
{"original": ["person_a gives person_b's support(A, B), so More(generous(A), generous(B))", ["A gives B support, so A is more generous than B"]], "negated": ["person_a gives person_b's support(A, B), so not Less(generous(A), generous(B))", ["A gives B support, so A is not less generous than B"]], "asymmetric_premise": ["person_b gives person_a's support(B, A), so Less(generous(A), generous(B))", ["B gives A's support, so A is less generous than B"]], "asymmetric_conclusion": ["person_a gives person_b's support(A, B), so Less(generous(B), generous(A))", ["A gives B support, so B is less generous than A"]], "negated_asymmetric_premise": ["person_b gives person_a's support(B, A), so not More(generous(A), generous(B))", ["B gives A's support, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b's support(A, B), so not More(generous(B), generous(A))", ["A gives B support, so B is not more generous than A"]]}
{"original": ["person_a asks person_b's name(A, B), so More(warm(A), warm(B))", ["A asks B's name, so A is more warm than B"]], "negated": ["person_a asks person_b's name(A, B), so not Less(warm(A), warm(B))", ["A asks B's name, so A is not less warm than B"]], "asymmetric_premise": ["person_b asks person_a's name(B, A), so Less(warm(A), warm(B))", ["B asks A's name, so A is less warm than B"]], "asymmetric_conclusion": ["person_a asks person_b's name(A, B), so Less(warm(B), warm(A))", ["A asks B's name, so B is less warm than A"]], "negated_asymmetric_premise": ["person_b asks person_a's name(B, A), so not More(warm(A), warm(B))", ["B asks A's name, so A is not more warm than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b's name(A, B), so not More(warm(B), warm(A))", ["A asks B's name, so B is not more warm than A"]]}
{"original": ["person_a stretches person_b legs(A, B), so More(aggressive(A), aggressive(B))", ["A stretches B's legs, so A is more aggressive than B"]], "negated": ["person_a stretches person_b legs(A, B), so not Less(aggressive(A), aggressive(B))", ["A stretches B's legs, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b stretches person_a legs(B, A), so Less(aggressive(A), aggressive(B))", ["B stretches A's legs, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a stretches person_b legs(A, B), so Less(aggressive(B), aggressive(A))", ["A stretches B's legs, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b stretches person_a legs(B, A), so not More(aggressive(A), aggressive(B))", ["B stretches A's legs, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a stretches person_b legs(A, B), so not More(aggressive(B), aggressive(A))", ["A stretches B's legs, so B is not more aggressive than A"]]}
{"original": ["person_a calls person_b names(A, B), so More(mean(A), mean(B))", ["A calls B names, so A is more mean than B"]], "negated": ["person_a calls person_b names(A, B), so not Less(mean(A), mean(B))", ["A calls B names, so A is not less mean than B"]], "asymmetric_premise": ["person_b calls person_a names(B, A), so Less(mean(A), mean(B))", ["B calls A names, so A is less mean than B"]], "asymmetric_conclusion": ["person_a calls person_b names(A, B), so Less(mean(B), mean(A))", ["A calls B names, so B is less mean than A"]], "negated_asymmetric_premise": ["person_b calls person_a names(B, A), so not More(mean(A), mean(B))", ["B calls A names, so A is not more mean than B"]], "negated_asymmetric_conclusion": ["person_a calls person_b names(A, B), so not More(mean(B), mean(A))", ["A calls B names, so B is not more mean than A"]]}
{"original": ["More( says bye(A),  says bye(B)), so More(sad(A), sad(B))", ["A says bye to B, so A is more sad than B"]], "negated": ["More( says bye(A),  says bye(B)), so not Less(sad(A), sad(B))", ["A says bye more than B, so A is not less sad than B"]], "asymmetric_premise": ["More( says bye(B),  says bye(A)), so Less(sad(A), sad(B))", ["B says bye to A, so A is less sad than B"]], "asymmetric_conclusion": ["More( says bye(A),  says bye(B)), so Less(sad(B), sad(A))", ["A says bye more than B, so B is less sad than A"]], "negated_asymmetric_premise": ["More( says bye(B),  says bye(A)), so not More(sad(A), sad(B))", ["B says bye to A, so A is not more sad than B"]], "negated_asymmetric_conclusion": ["More( says bye(A),  says bye(B)), so not More(sad(B), sad(A))", ["A says bye more than B, so B is not more sad than A"]]}
{"original": ["person_a asks person_b to dine(A, B), so More(commanding(A), commanding(B))", ["A asks B to dine, so A is more commanding than B"]], "negated": ["person_a asks person_b to dine(A, B), so not Less(commanding(A), commanding(B))", ["A asks B to dine, so A is not less commanding than B"]], "asymmetric_premise": ["person_b asks person_a to dine(B, A), so Less(commanding(A), commanding(B))", ["B asks A to dine, so A is less commanding than B"]], "asymmetric_conclusion": ["person_a asks person_b to dine(A, B), so Less(commanding(B), commanding(A))", ["A asks B to dine, so B is less commanding than A"]], "negated_asymmetric_premise": ["person_b asks person_a to dine(B, A), so not More(commanding(A), commanding(B))", ["B asks A to dine, so A is not more commanding than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b to dine(A, B), so not More(commanding(B), commanding(A))", ["A asks B to dine, so B is not more commanding than A"]]}
{"original": ["person_a turns person_b's face away(A, B), so More(aggressive(A), aggressive(B))", ["A turns B's face away, so A is more aggressive than B"]], "negated": ["person_a turns person_b's face away(A, B), so not Less(aggressive(A), aggressive(B))", ["A turns B's face away, so A is not less aggressive than B"]], "asymmetric_premise": ["person_b turns person_a's face away(B, A), so Less(aggressive(A), aggressive(B))", ["B turns A's face away, so A is less aggressive than B"]], "asymmetric_conclusion": ["person_a turns person_b's face away(A, B), so Less(aggressive(B), aggressive(A))", ["A turns B's face away, so B is less aggressive than A"]], "negated_asymmetric_premise": ["person_b turns person_a's face away(B, A), so not More(aggressive(A), aggressive(B))", ["B turns A's face away, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["person_a turns person_b's face away(A, B), so not More(aggressive(B), aggressive(A))", ["A turns B's face away, so B is not more aggressive than A"]]}
{"original": ["person_a throws person_b a shower(A, B), so More(kind(A), kind(B))", ["A throws B a shower, so A is more kind than B"]], "negated": ["person_a throws person_b a shower(A, B), so not Less(kind(A), kind(B))", ["A throws B a shower, so A is not less kind than B"]], "asymmetric_premise": ["person_b throws person_a a shower(B, A), so Less(kind(A), kind(B))", ["B throws A a shower, so A is less kind than B"]], "asymmetric_conclusion": ["person_a throws person_b a shower(A, B), so Less(kind(B), kind(A))", ["A throws B a shower, so B is less kind than A"]], "negated_asymmetric_premise": ["person_b throws person_a a shower(B, A), so not More(kind(A), kind(B))", ["B throws A a shower, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["person_a throws person_b a shower(A, B), so not More(kind(B), kind(A))", ["A throws B a shower, so B is not more kind than A"]]}
{"original": ["person_a does n't want to see person_b again(A, B), so More(fed up(A), fed up(B))", ["A does not want to see B again, so A is more fed up than B"]], "negated": ["person_a does n't want to see person_b again(A, B), so not Less(fed up(A), fed up(B))", ["A does not want to see B again, so A is not less fed up than B"]], "asymmetric_premise": ["person_b does n't want to see person_a again(B, A), so Less(fed up(A), fed up(B))", ["B does not want to see A again, so A is less fed up than B"]], "asymmetric_conclusion": ["person_a does n't want to see person_b again(A, B), so Less(fed up(B), fed up(A))", ["A does not want to see B again, so B is less fed up than A"]], "negated_asymmetric_premise": ["person_b does n't want to see person_a again(B, A), so not More(fed up(A), fed up(B))", ["B does not want to see A again, so A is not more fed up than B"]], "negated_asymmetric_conclusion": ["person_a does n't want to see person_b again(A, B), so not More(fed up(B), fed up(A))", ["A does not want to see B again, so B is not more fed up than A"]]}
{"original": ["person_a eats person_b's homework(A, B), so More(crazy(A), crazy(B))", ["A eats B's homework, so A is more crazy than B"]], "negated": ["person_a eats person_b's homework(A, B), so not Less(crazy(A), crazy(B))", ["A eats B's homework, so A is not less crazy than B"]], "asymmetric_premise": ["person_b eats person_a's homework(B, A), so Less(crazy(A), crazy(B))", ["B eats A's homework, so A is less crazy than B"]], "asymmetric_conclusion": ["person_a eats person_b's homework(A, B), so Less(crazy(B), crazy(A))", ["A eats B's homework, so B is less crazy than A"]], "negated_asymmetric_premise": ["person_b eats person_a's homework(B, A), so not More(crazy(A), crazy(B))", ["B eats A's homework, so A is not more crazy than B"]], "negated_asymmetric_conclusion": ["person_a eats person_b's homework(A, B), so not More(crazy(B), crazy(A))", ["A eats B's homework, so B is not more crazy than A"]]}
{"original": ["person_a makes person_b very angry(A, B), so More(infuriating(A), infuriating(B))", ["A makes B very angry, so A is more infuriating than B"]], "negated": ["person_a makes person_b very angry(A, B), so not Less(infuriating(A), infuriating(B))", ["A makes B very angry, so A is not less infuriating than B"]], "asymmetric_premise": ["person_b makes person_a very angry(B, A), so Less(infuriating(A), infuriating(B))", ["B makes A very angry, so A is less infuriating than B"]], "asymmetric_conclusion": ["person_a makes person_b very angry(A, B), so Less(infuriating(B), infuriating(A))", ["A makes B very angry, so B is less infuriating than A"]], "negated_asymmetric_premise": ["person_b makes person_a very angry(B, A), so not More(infuriating(A), infuriating(B))", ["B makes A very angry, so A is not more infuriating than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b very angry(A, B), so not More(infuriating(B), infuriating(A))", ["A makes B very angry, so B is not more infuriating than A"]]}
{"original": ["person_a collects person_b's thoughts(A, B), so More(curious(A), curious(B))", ["A collects B's thoughts, so A is more curious than B"]], "negated": ["person_a collects person_b's thoughts(A, B), so not Less(curious(A), curious(B))", ["A collects B's thoughts, so A is not less curious than B"]], "asymmetric_premise": ["person_b collects person_a's thoughts(B, A), so Less(curious(A), curious(B))", ["B collects A's thoughts, so A is less curious than B"]], "asymmetric_conclusion": ["person_a collects person_b's thoughts(A, B), so Less(curious(B), curious(A))", ["A collects B's thoughts, so B is less curious than A"]], "negated_asymmetric_premise": ["person_b collects person_a's thoughts(B, A), so not More(curious(A), curious(B))", ["B collects A's thoughts, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["person_a collects person_b's thoughts(A, B), so not More(curious(B), curious(A))", ["A collects B's thoughts, so B is not more curious than A"]]}
{"original": ["person_a takes person_b food(A, B), so More(immoral(A), immoral(B))", ["A takes food, B does not, so A is more immoral than B"]], "negated": ["person_a takes person_b food(A, B), so not Less(immoral(A), immoral(B))", ["A takes food while B does not, so A is not less immoral than B"]], "asymmetric_premise": ["person_b takes person_a food(B, A), so Less(immoral(A), immoral(B))", ["B takes A food, so A is less immoral than B"]], "asymmetric_conclusion": ["person_a takes person_b food(A, B), so Less(immoral(B), immoral(A))", ["A takes food from B, so B is less immoral than A"]], "negated_asymmetric_premise": ["person_b takes person_a food(B, A), so not More(immoral(A), immoral(B))", ["B takes food from A, so A is not more immoral than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b food(A, B), so not More(immoral(B), immoral(A))", ["A takes food from B, so B is not more immoral than A"]]}
{"original": ["person_a drops person_b's hand(A, B), so More(cold(A), cold(B))", ["A drops B's hand, so A is more cold than B"]], "negated": ["person_a drops person_b's hand(A, B), so not Less(cold(A), cold(B))", ["A drops B's hand, so A is not less cold than B"]], "asymmetric_premise": ["person_b drops person_a's hand(B, A), so Less(cold(A), cold(B))", ["B drops A's hand, so A is less cold than B"]], "asymmetric_conclusion": ["person_a drops person_b's hand(A, B), so Less(cold(B), cold(A))", ["A drops B's hand, so B is less cold than A"]], "negated_asymmetric_premise": ["person_b drops person_a's hand(B, A), so not More(cold(A), cold(B))", ["B drops A's hand, so A is not more cold than B"]], "negated_asymmetric_conclusion": ["person_a drops person_b's hand(A, B), so not More(cold(B), cold(A))", ["A drops B's hand, so B is not more cold than A"]]}
{"original": ["person_a tells person_b everything(A, B), so More(open-minded(A), open-minded(B))", ["A tells B everything, so A is more open-minded than B"]], "negated": ["person_a tells person_b everything(A, B), so not Less(open-minded(A), open-minded(B))", ["A tells B everything, so A is not less open-minded than B"]], "asymmetric_premise": ["person_b tells person_a everything(B, A), so Less(open-minded(A), open-minded(B))", ["B tells A everything, so A is less open-minded than B"]], "asymmetric_conclusion": ["person_a tells person_b everything(A, B), so Less(open-minded(B), open-minded(A))", ["A tells B everything, so B is less open-minded than A"]], "negated_asymmetric_premise": ["person_b tells person_a everything(B, A), so not More(open-minded(A), open-minded(B))", ["B tells A everything, so A is not more open-minded than B"]], "negated_asymmetric_conclusion": ["person_a tells person_b everything(A, B), so not More(open-minded(B), open-minded(A))", ["A tells B everything, so B is not more open-minded than A"]]}
{"original": ["person_a puts person_b on hold(A, B), so More(busy(A), busy(B))", ["A puts B on hold, so A is more busy than B"]], "negated": ["person_a puts person_b on hold(A, B), so not Less(busy(A), busy(B))", ["A puts B on hold, so A is not less busy than B"]], "asymmetric_premise": ["person_b puts person_a on hold(B, A), so Less(busy(A), busy(B))", ["B puts A on hold, so A is less busy than B"]], "asymmetric_conclusion": ["person_a puts person_b on hold(A, B), so Less(busy(B), busy(A))", ["A puts B on hold, so B is less busy than A"]], "negated_asymmetric_premise": ["person_b puts person_a on hold(B, A), so not More(busy(A), busy(B))", ["B puts A on hold, so A is not more busy than B"]], "negated_asymmetric_conclusion": ["person_a puts person_b on hold(A, B), so not More(busy(B), busy(A))", ["A puts B on hold, so B is not more busy than A"]]}
{"original": ["person_a tries person_b's best(A, B), so More(hardworking(A), hardworking(B))", ["A tries B's best, so A is more hardworking than B"]], "negated": ["person_a tries person_b's best(A, B), so not Less(hardworking(A), hardworking(B))", ["A tries B's best, so A is not less hardworking than B"]], "asymmetric_premise": ["person_b tries person_a's best(B, A), so Less(hardworking(A), hardworking(B))", ["B tries his best while A does not, so A is less hardworking than B"]], "asymmetric_conclusion": ["person_a tries person_b's best(A, B), so Less(hardworking(B), hardworking(A))", ["A tries B's best, so B is less hardworking than A"]], "negated_asymmetric_premise": ["person_b tries person_a's best(B, A), so not More(hardworking(A), hardworking(B))", ["B tries A's best, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": ["person_a tries person_b's best(A, B), so not More(hardworking(B), hardworking(A))", ["A tries B's best, so B is not more hardworking than A"]]}
{"original": ["person_a cuts person_b 's hair(A, B), so More(detail-oriented(A), detail-oriented(B))", ["A cuts B's hair, so A is more detail-oriented than B"]], "negated": ["person_a cuts person_b 's hair(A, B), so not Less(detail-oriented(A), detail-oriented(B))", ["A cuts B's hair, so A is not less detail-oriented than B"]], "asymmetric_premise": ["person_b cuts person_a 's hair(B, A), so Less(detail-oriented(A), detail-oriented(B))", ["B cuts A's hair, so A is less detail-oriented than B"]], "asymmetric_conclusion": ["person_a cuts person_b 's hair(A, B), so Less(detail-oriented(B), detail-oriented(A))", ["A cuts B's hair, so B is less detail-oriented than A"]], "negated_asymmetric_premise": ["person_b cuts person_a 's hair(B, A), so not More(detail-oriented(A), detail-oriented(B))", ["B cuts A's hair, so A is not more detail-oriented than B"]], "negated_asymmetric_conclusion": ["person_a cuts person_b 's hair(A, B), so not More(detail-oriented(B), detail-oriented(A))", ["A cuts B's hair, so B is not more detail-oriented than A"]]}
{"original": ["person_a gets person_b a great gift(A, B), so More(considerate(A), considerate(B))", ["A gets B a great gift, so A is more considerate than B"]], "negated": ["person_a gets person_b a great gift(A, B), so not Less(considerate(A), considerate(B))", ["A gets B a great gift, so A is not less considerate than B"]], "asymmetric_premise": ["person_b gets person_a a great gift(B, A), so Less(considerate(A), considerate(B))", ["B gets A a great gift, so A is less considerate than B"]], "asymmetric_conclusion": ["person_a gets person_b a great gift(A, B), so Less(considerate(B), considerate(A))", ["A gets B a great gift, so B is less considerate than A"]], "negated_asymmetric_premise": ["person_b gets person_a a great gift(B, A), so not More(considerate(A), considerate(B))", ["B gets A a great gift, so A is not more considerate than B"]], "negated_asymmetric_conclusion": ["person_a gets person_b a great gift(A, B), so not More(considerate(B), considerate(A))", ["A gets B a great gift, so B is not more considerate than A"]]}
{"original": ["person_a comes to person_b understanding(A, B), so More(knowledgeable(A), knowledgeable(B))", ["A comes to B understanding more than B, so A is more knowledgeable than B"]], "negated": ["person_a comes to person_b understanding(A, B), so not Less(knowledgeable(A), knowledgeable(B))", ["A comes to B understanding more than B, so A is not less knowledgeable than B"]], "asymmetric_premise": ["person_b comes to person_a understanding(B, A), so Less(knowledgeable(A), knowledgeable(B))", ["B comes to A understanding more than A, so A is less knowledgeable than B"]], "asymmetric_conclusion": ["person_a comes to person_b understanding(A, B), so Less(knowledgeable(B), knowledgeable(A))", ["A comes to B understanding more than B, so B is less knowledgeable than A"]], "negated_asymmetric_premise": ["person_b comes to person_a understanding(B, A), so not More(knowledgeable(A), knowledgeable(B))", ["B comes to A understanding more than A, so A is not more knowledgeable than B"]], "negated_asymmetric_conclusion": ["person_a comes to person_b understanding(A, B), so not More(knowledgeable(B), knowledgeable(A))", ["A comes to B understanding more than B, so B is not more knowledgeable than A"]]}
{"original": ["person_a gives person_b analysis(A, B), so More(authoritative(A), authoritative(B))", ["A gives B analysis, so A is more authoritative than B"]], "negated": ["person_a gives person_b analysis(A, B), so not Less(authoritative(A), authoritative(B))", ["A gives B analysis, so A is not less authoritative than B"]], "asymmetric_premise": ["person_b gives person_a analysis(B, A), so Less(authoritative(A), authoritative(B))", ["B gives A analysis, so A is less authoritative than B"]], "asymmetric_conclusion": ["person_a gives person_b analysis(A, B), so Less(authoritative(B), authoritative(A))", ["A gives B analysis, so B is less authoritative than A"]], "negated_asymmetric_premise": ["person_b gives person_a analysis(B, A), so not More(authoritative(A), authoritative(B))", ["B gives A analysis, so A is not more authoritative than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b analysis(A, B), so not More(authoritative(B), authoritative(A))", ["A gives B analysis, so B is not more authoritative than A"]]}
{"original": ["person_a shuts person_b eyes(A, B), so More(intolerant(A), intolerant(B))", ["A shuts B's eyes, so A is more intolerant than B"]], "negated": ["person_a shuts person_b eyes(A, B), so not Less(intolerant(A), intolerant(B))", ["A shuts B's eyes, so A is not less intolerant than B"]], "asymmetric_premise": ["person_b shuts person_a eyes(B, A), so Less(intolerant(A), intolerant(B))", ["B shuts A's eyes, so A is less intolerant than B"]], "asymmetric_conclusion": ["person_a shuts person_b eyes(A, B), so Less(intolerant(B), intolerant(A))", ["A shuts B's eyes, so B is less intolerant than A"]], "negated_asymmetric_premise": ["person_b shuts person_a eyes(B, A), so not More(intolerant(A), intolerant(B))", ["B shuts A's eyes, so A is not more intolerant than B"]], "negated_asymmetric_conclusion": ["person_a shuts person_b eyes(A, B), so not More(intolerant(B), intolerant(A))", ["A shuts B's eyes, so B is not more intolerant than A"]]}
{"original": ["person_a draws person_b closer(A, B), so More(wanting(A), wanting(B))", ["A draws B closer than B, so A is more wanting than B"]], "negated": ["person_a draws person_b closer(A, B), so not Less(wanting(A), wanting(B))", ["A draws B closer, so A is not less wanting than B"]], "asymmetric_premise": ["person_b draws person_a closer(B, A), so Less(wanting(A), wanting(B))", ["B draws A closer than A, so A is less wanting than B"]], "asymmetric_conclusion": ["person_a draws person_b closer(A, B), so Less(wanting(B), wanting(A))", ["A draws B closer than B, so B is less wanting than A"]], "negated_asymmetric_premise": ["person_b draws person_a closer(B, A), so not More(wanting(A), wanting(B))", ["B draws A closer than A, so A is not more wanting than B"]], "negated_asymmetric_conclusion": ["person_a draws person_b closer(A, B), so not More(wanting(B), wanting(A))", ["A draws B closer than B, so B is not more wanting than A"]]}
{"original": ["person_a shows it to person_b's parents(A, B), so More(helpful(A), helpful(B))", ["A shows it to B's parents, so A is more helpful than B"]], "negated": ["person_a shows it to person_b's parents(A, B), so not Less(helpful(A), helpful(B))", ["A shows it to B's parents, so A is not less helpful than B"]], "asymmetric_premise": ["person_b shows it to person_a's parents(B, A), so Less(helpful(A), helpful(B))", ["B shows it to A's parents, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a shows it to person_b's parents(A, B), so Less(helpful(B), helpful(A))", ["A shows it to B's parents, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b shows it to person_a's parents(B, A), so not More(helpful(A), helpful(B))", ["B shows it to A's parents, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a shows it to person_b's parents(A, B), so not More(helpful(B), helpful(A))", ["A shows it to B's parents, so B is not more helpful than A"]]}
{"original": ["person_a asks person_b liked(A, B), so More(insecure(A), insecure(B))", ["A asks B if he is liked, so A is more insecure than B"]], "negated": ["person_a asks person_b liked(A, B), so not Less(insecure(A), insecure(B))", ["A asks B if he is liked, so A is not less insecure than B"]], "asymmetric_premise": ["person_b asks person_a liked(B, A), so Less(insecure(A), insecure(B))", ["B asks A to be liked, so A is less insecure than B"]], "asymmetric_conclusion": ["person_a asks person_b liked(A, B), so Less(insecure(B), insecure(A))", ["A asks B if he is liked, so B is less insecure than A"]], "negated_asymmetric_premise": ["person_b asks person_a liked(B, A), so not More(insecure(A), insecure(B))", ["B asks A to be liked, so A is not more insecure than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b liked(A, B), so not More(insecure(B), insecure(A))", ["A asks B if he is more insecure than A, so B is not more insecure than A"]]}
{"original": ["person_a makes person_b appointment(A, B), so More(organized(A), organized(B))", ["A makes B an appointment, so A is more organized than B"]], "negated": ["person_a makes person_b appointment(A, B), so not Less(organized(A), organized(B))", ["A makes B an appointment, so A is not less organized than B"]], "asymmetric_premise": ["person_b makes person_a appointment(B, A), so Less(organized(A), organized(B))", ["B makes A an appointment, so A is less organized than B"]], "asymmetric_conclusion": ["person_a makes person_b appointment(A, B), so Less(organized(B), organized(A))", ["A makes B an appointment, so B is less organized than A"]], "negated_asymmetric_premise": ["person_b makes person_a appointment(B, A), so not More(organized(A), organized(B))", ["B makes A an appointment, so A is not more organized than B"]], "negated_asymmetric_conclusion": ["person_a makes person_b appointment(A, B), so not More(organized(B), organized(A))", ["A makes B an appointment, so B is not more organized than A"]]}
{"original": ["person_a contains within person_b(A, B), so More(eternal(A), eternal(B))", ["A contains within B, so A is more eternal than B"]], "negated": ["person_a contains within person_b(A, B), so not Less(eternal(A), eternal(B))", ["A contains within B, so A is not less eternal than B"]], "asymmetric_premise": ["person_b contains within person_a(B, A), so Less(eternal(A), eternal(B))", ["B contains within A, so A is less eternal than B"]], "asymmetric_conclusion": ["person_a contains within person_b(A, B), so Less(eternal(B), eternal(A))", ["A contains within B, so B is less eternal than A"]], "negated_asymmetric_premise": ["person_b contains within person_a(B, A), so not More(eternal(A), eternal(B))", ["B contains within A, so A is not more eternal than B"]], "negated_asymmetric_conclusion": ["person_a contains within person_b(A, B), so not More(eternal(B), eternal(A))", ["A contains within B, so B is not more eternal than A"]]}
{"original": ["person_a calls person_b's brother(A, B), so More(social(A), social(B))", ["A is B's brother, so A is more social than B"]], "negated": ["person_a calls person_b's brother(A, B), so not Less(social(A), social(B))", ["A is B's brother, so A is not less social than B"]], "asymmetric_premise": ["person_b calls person_a's brother(B, A), so Less(social(A), social(B))", ["B is A's brother, so A is less social than B"]], "asymmetric_conclusion": ["person_a calls person_b's brother(A, B), so Less(social(B), social(A))", ["A calls B's brother, so B is less social than A"]], "negated_asymmetric_premise": ["person_b calls person_a's brother(B, A), so not More(social(A), social(B))", ["B is A's brother, so A is not more social than B"]], "negated_asymmetric_conclusion": ["person_a calls person_b's brother(A, B), so not More(social(B), social(A))", ["A calls B's brother, so B is not more social than A"]]}
{"original": ["person_a gives person_b's names(A, B), so More(helpful(A), helpful(B))", ["A gives B's names, so A is more helpful than B"]], "negated": ["person_a gives person_b's names(A, B), so not Less(helpful(A), helpful(B))", ["A gives B's names, so A is not less helpful than B"]], "asymmetric_premise": ["person_b gives person_a's names(B, A), so Less(helpful(A), helpful(B))", ["B gives A's names, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a gives person_b's names(A, B), so Less(helpful(B), helpful(A))", ["A gives B's names, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b gives person_a's names(B, A), so not More(helpful(A), helpful(B))", ["B gives A's names, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b's names(A, B), so not More(helpful(B), helpful(A))", ["A gives B's names, so B is not more helpful than A"]]}
{"original": ["person_a hits person_b's face(A, B), so More(aggresive(A), aggresive(B))", ["A hits B's face, so A is more aggresive than B"]], "negated": ["person_a hits person_b's face(A, B), so not Less(aggresive(A), aggresive(B))", ["A hits B's face, so A is not less aggresive than B"]], "asymmetric_premise": ["person_b hits person_a's face(B, A), so Less(aggresive(A), aggresive(B))", ["B hits A's face, so A is less aggresive than B"]], "asymmetric_conclusion": ["person_a hits person_b's face(A, B), so Less(aggresive(B), aggresive(A))", ["A hits B's face, so B is less aggresive than A"]], "negated_asymmetric_premise": ["person_b hits person_a's face(B, A), so not More(aggresive(A), aggresive(B))", ["B hits A's face, so A is not more aggresive than B"]], "negated_asymmetric_conclusion": ["person_a hits person_b's face(A, B), so not More(aggresive(B), aggresive(A))", ["A hits B's face, so B is not more aggresive than A"]]}
{"original": ["person_a improves person_b's health(A, B), so More(kind(A), kind(B))", ["A improves B's health more than B, so A is more kind than B"]], "negated": ["person_a improves person_b's health(A, B), so not Less(kind(A), kind(B))", ["A improves B's health more than B, so A is not less kind than B"]], "asymmetric_premise": ["person_b improves person_a's health(B, A), so Less(kind(A), kind(B))", ["B improves A's health more than A, so A is less kind than B"]], "asymmetric_conclusion": ["person_a improves person_b's health(A, B), so Less(kind(B), kind(A))", ["A improves B's health more than B, so B is less kind than A"]], "negated_asymmetric_premise": ["person_b improves person_a's health(B, A), so not More(kind(A), kind(B))", ["B improves A's health more than A, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["person_a improves person_b's health(A, B), so not More(kind(B), kind(A))", ["A improves B's health more than B, so B is not more kind than A"]]}
{"original": ["person_a takes person_b's part(A, B), so More(untrustworthy(A), untrustworthy(B))", ["A takes B's part, so A is more untrustworthy than B"]], "negated": ["person_a takes person_b's part(A, B), so not Less(untrustworthy(A), untrustworthy(B))", ["A takes B's part, so A is not less untrustworthy than B"]], "asymmetric_premise": ["person_b takes person_a's part(B, A), so Less(untrustworthy(A), untrustworthy(B))", ["B takes A's part, so A is less untrustworthy than B"]], "asymmetric_conclusion": ["person_a takes person_b's part(A, B), so Less(untrustworthy(B), untrustworthy(A))", ["A takes B's part, so B is less untrustworthy than A"]], "negated_asymmetric_premise": ["person_b takes person_a's part(B, A), so not More(untrustworthy(A), untrustworthy(B))", ["B takes A's part, so A is not more untrustworthy than B"]], "negated_asymmetric_conclusion": ["person_a takes person_b's part(A, B), so not More(untrustworthy(B), untrustworthy(A))", ["A takes B's part, so B is not more untrustworthy than A"]]}
{"original": ["person_a plants a tree in person_b's backyard(A, B), so More(kind(A), kind(B))", ["A plants a tree in B's backyard, so A is more kind than B"]], "negated": ["person_a plants a tree in person_b's backyard(A, B), so not Less(kind(A), kind(B))", ["A plants a tree in B's backyard, so A is not less kind than B"]], "asymmetric_premise": ["person_b plants a tree in person_a's backyard(B, A), so Less(kind(A), kind(B))", ["B plants a tree in A's backyard, so A is less kind than B"]], "asymmetric_conclusion": ["person_a plants a tree in person_b's backyard(A, B), so Less(kind(B), kind(A))", ["A plants a tree in B's backyard, so B is less kind than A"]], "negated_asymmetric_premise": ["person_b plants a tree in person_a's backyard(B, A), so not More(kind(A), kind(B))", ["B plants a tree in A's backyard, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["person_a plants a tree in person_b's backyard(A, B), so not More(kind(B), kind(A))", ["A plants a tree in B's backyard, so B is not more kind than A"]]}
{"original": ["person_a minds person_b business(A, B), so More(caring(A), caring(B))", ["A minds business more than B, so A is more caring than B"]], "negated": ["person_a minds person_b business(A, B), so not Less(caring(A), caring(B))", ["A minds B's business, so A is not less caring than B"]], "asymmetric_premise": ["person_b minds person_a business(B, A), so Less(caring(A), caring(B))", ["B minds A's business, so A is less caring than B"]], "asymmetric_conclusion": ["person_a minds person_b business(A, B), so Less(caring(B), caring(A))", ["A minds B's business, so B is less caring than A"]], "negated_asymmetric_premise": ["person_b minds person_a business(B, A), so not More(caring(A), caring(B))", ["B minds A's business, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["person_a minds person_b business(A, B), so not More(caring(B), caring(A))", ["A minds B's business, so B is not more caring than A"]]}
{"original": ["person_a declines person_b's invitation(A, B), so More(pride(A), pride(B))", ["A declines B's invitation, so A has more pride than B"]], "negated": ["person_a declines person_b's invitation(A, B), so not Less(pride(A), pride(B))", ["A declines B's invitation, so A is not less pride than B"]], "asymmetric_premise": ["person_b declines person_a's invitation(B, A), so Less(pride(A), pride(B))", ["B declines A's invitation, so A has less pride than B"]], "asymmetric_conclusion": ["person_a declines person_b's invitation(A, B), so Less(pride(B), pride(A))", ["A declines B's invitation, so B has less pride than A"]], "negated_asymmetric_premise": ["person_b declines person_a's invitation(B, A), so not More(pride(A), pride(B))", ["B declines A's invitation, so A is not more pride than B"]], "negated_asymmetric_conclusion": ["person_a declines person_b's invitation(A, B), so not More(pride(B), pride(A))", ["A declines B's invitation, so B is not more pride than A"]]}
{"original": ["person_a gives person_b a drink(A, B), so More(caring(A), caring(B))", ["A gives B a drink, so A is more caring than B"]], "negated": ["person_a gives person_b a drink(A, B), so not Less(caring(A), caring(B))", ["A gives B a drink, so A is not less caring than B"]], "asymmetric_premise": ["person_b gives person_a a drink(B, A), so Less(caring(A), caring(B))", ["B gives A a drink, so A is less caring than B"]], "asymmetric_conclusion": ["person_a gives person_b a drink(A, B), so Less(caring(B), caring(A))", ["A gives B a drink, so B is less caring than A"]], "negated_asymmetric_premise": ["person_b gives person_a a drink(B, A), so not More(caring(A), caring(B))", ["B gives A a drink, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b a drink(A, B), so not More(caring(B), caring(A))", ["A gives B a drink, so B is not more caring than A"]]}
{"original": ["person_a thinks person_b would win(A, B), so More(realistic(A), realistic(B))", ["A thinks B would win in a tennis match, so A is more realistic than B"]], "negated": ["person_a thinks person_b would win(A, B), so not Less(realistic(A), realistic(B))", ["A thinks B would win in a tennis match, so A is not less realistic than B"]], "asymmetric_premise": ["person_b thinks person_a would win(B, A), so Less(realistic(A), realistic(B))", ["B thinks A would win more than B, so A is less realistic than B"]], "asymmetric_conclusion": ["person_a thinks person_b would win(A, B), so Less(realistic(B), realistic(A))", ["A thinks B would win in a tennis match, so B is less realistic than A"]], "negated_asymmetric_premise": ["person_b thinks person_a would win(B, A), so not More(realistic(A), realistic(B))", ["B thinks A would win more than B, so A is not more realistic than B"]], "negated_asymmetric_conclusion": ["person_a thinks person_b would win(A, B), so not More(realistic(B), realistic(A))", ["A thinks B would win more than A, so B is not more realistic than A"]]}
{"original": ["person_a forms person_b estimate(A, B), so More(logical(A), logical(B))", ["A is able to estimate people more than B, so A is more logical than B"]], "negated": ["person_a forms person_b estimate(A, B), so not Less(logical(A), logical(B))", ["A is able to estimate more than B, so A is not less logical than B"]], "asymmetric_premise": ["person_b forms person_a estimate(B, A), so Less(logical(A), logical(B))", ["B forms A's estimate, so A is less logical than B"]], "asymmetric_conclusion": ["person_a forms person_b estimate(A, B), so Less(logical(B), logical(A))", ["A is able to estimate more than B, so B is less logical than A"]], "negated_asymmetric_premise": ["person_b forms person_a estimate(B, A), so not More(logical(A), logical(B))", ["B is not more logical than A, so A is not more logical than B"]], "negated_asymmetric_conclusion": ["person_a forms person_b estimate(A, B), so not More(logical(B), logical(A))", ["A is not more logical than B, so B is not more logical than A"]]}
{"original": ["person_a challenges person_b's brother(A, B), so More(competitive(A), competitive(B))", ["A challenges B's brother, so A is more competitive than B"]], "negated": ["person_a challenges person_b's brother(A, B), so not Less(competitive(A), competitive(B))", ["A challenges B's brother, so A is not less competitive than B"]], "asymmetric_premise": ["person_b challenges person_a's brother(B, A), so Less(competitive(A), competitive(B))", ["B challenges A's brother, so A is less competitive than B"]], "asymmetric_conclusion": ["person_a challenges person_b's brother(A, B), so Less(competitive(B), competitive(A))", ["A challenges B's brother, so B is less competitive than A"]], "negated_asymmetric_premise": ["person_b challenges person_a's brother(B, A), so not More(competitive(A), competitive(B))", ["B challenges A's brother, so A is not more competitive than B"]], "negated_asymmetric_conclusion": ["person_a challenges person_b's brother(A, B), so not More(competitive(B), competitive(A))", ["A challenges B's brother, so B is not more competitive than A"]]}
{"original": ["person_a raises person_b's eyebrows(A, B), so More(daring(A), daring(B))", ["A raises B's eyebrows, so A is more daring than B"]], "negated": ["person_a raises person_b's eyebrows(A, B), so not Less(daring(A), daring(B))", ["A raises B's eyebrows, so A is not less daring than B"]], "asymmetric_premise": ["person_b raises person_a's eyebrows(B, A), so Less(daring(A), daring(B))", ["B raises A's eyebrows, so A is less daring than B"]], "asymmetric_conclusion": ["person_a raises person_b's eyebrows(A, B), so Less(daring(B), daring(A))", ["A raises B's eyebrows, so B is less daring than A"]], "negated_asymmetric_premise": ["person_b raises person_a's eyebrows(B, A), so not More(daring(A), daring(B))", ["B raises A's eyebrows, so A is not more daring than B"]], "negated_asymmetric_conclusion": ["person_a raises person_b's eyebrows(A, B), so not More(daring(B), daring(A))", ["A raises B's eyebrows, so B is not more daring than A"]]}
{"original": ["person_a pays all person_b's bills(A, B), so More(helpful(A), helpful(B))", ["A pays all B's bills, so A is more helpful than B"]], "negated": ["person_a pays all person_b's bills(A, B), so not Less(helpful(A), helpful(B))", ["A pays all B's bills, so A is not less helpful than B"]], "asymmetric_premise": ["person_b pays all person_a's bills(B, A), so Less(helpful(A), helpful(B))", ["B pays all A's bills, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a pays all person_b's bills(A, B), so Less(helpful(B), helpful(A))", ["A pays all B's bills, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b pays all person_a's bills(B, A), so not More(helpful(A), helpful(B))", ["B pays all A's bills, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a pays all person_b's bills(A, B), so not More(helpful(B), helpful(A))", ["A pays all B's bills, so B is not more helpful than A"]]}
{"original": ["person_a paints person_b's bedroom(A, B), so More(creative(A), creative(B))", ["A paints B's bedroom, so A is more creative than B"]], "negated": ["person_a paints person_b's bedroom(A, B), so not Less(creative(A), creative(B))", ["A paints B's bedroom, so A is not less creative than B"]], "asymmetric_premise": ["person_b paints person_a's bedroom(B, A), so Less(creative(A), creative(B))", ["B paints A's bedroom, so A is less creative than B"]], "asymmetric_conclusion": ["person_a paints person_b's bedroom(A, B), so Less(creative(B), creative(A))", ["A paints B's bedroom, so B is less creative than A"]], "negated_asymmetric_premise": ["person_b paints person_a's bedroom(B, A), so not More(creative(A), creative(B))", ["B paints A's bedroom, so A is not more creative than B"]], "negated_asymmetric_conclusion": ["person_a paints person_b's bedroom(A, B), so not More(creative(B), creative(A))", ["A paints B's bedroom, so B is not more creative than A"]]}
{"original": ["person_a opens person_b's eyes(A, B), so More(leader(A), leader(B))", ["A opens B's eyes, so A is a more leader than B"]], "negated": ["person_a opens person_b's eyes(A, B), so not Less(leader(A), leader(B))", ["A opens B's eyes, so A is not less leader than B"]], "asymmetric_premise": ["person_b opens person_a's eyes(B, A), so Less(leader(A), leader(B))", ["B opens A's eyes, so A is a less leader than B"]], "asymmetric_conclusion": ["person_a opens person_b's eyes(A, B), so Less(leader(B), leader(A))", ["A opens B's eyes, so B is a less leader than A"]], "negated_asymmetric_premise": ["person_b opens person_a's eyes(B, A), so not More(leader(A), leader(B))", ["B opens A's eyes, so A is not more leader than B"]], "negated_asymmetric_conclusion": ["person_a opens person_b's eyes(A, B), so not More(leader(B), leader(A))", ["A opens B's eyes, so B is not more leader than A"]]}
{"original": ["person_a asks person_b to get(A, B), so More(lazy(A), lazy(B))", ["A asks B to get something, so A is more lazy than B"]], "negated": ["person_a asks person_b to get(A, B), so not Less(lazy(A), lazy(B))", ["A asks B to get something, so A is not less lazy than B"]], "asymmetric_premise": ["person_b asks person_a to get(B, A), so Less(lazy(A), lazy(B))", ["B asks A to get something, so A is less lazy than B"]], "asymmetric_conclusion": ["person_a asks person_b to get(A, B), so Less(lazy(B), lazy(A))", ["A asks B to get something, so B is less lazy than A"]], "negated_asymmetric_premise": ["person_b asks person_a to get(B, A), so not More(lazy(A), lazy(B))", ["B asks A to get something, so A is not more lazy than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b to get(A, B), so not More(lazy(B), lazy(A))", ["A asks B to get something, so B is not more lazy than A"]]}
{"original": ["person_a takes person_a's hand in person_b's(A, B), so More(caring(A), caring(B))", ["A takes B's hand, so A is more caring than B"]], "negated": ["person_a takes person_a's hand in person_b's(A, B), so not Less(caring(A), caring(B))", ["A takes B's hand, so A is not less caring than B"]], "asymmetric_premise": ["person_b takes person_b's hand in person_a's(B, A), so Less(caring(A), caring(B))", ["B takes A's hand, so A is less caring than B"]], "asymmetric_conclusion": ["person_a takes person_a's hand in person_b's(A, B), so Less(caring(B), caring(A))", ["A takes B's hand, so B is less caring than A"]], "negated_asymmetric_premise": ["person_b takes person_b's hand in person_a's(B, A), so not More(caring(A), caring(B))", ["B takes A's hand, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["person_a takes person_a's hand in person_b's(A, B), so not More(caring(B), caring(A))", ["A takes B's hand, so B is not more caring than A"]]}
{"original": ["person_a attends to person_b's business(A, B), so More(affable(A), affable(B))", ["A attends to B's business more than B, so A is more affable than B"]], "negated": ["person_a attends to person_b's business(A, B), so not Less(affable(A), affable(B))", ["A attends to B's business while B does not, so A is not less affable than B"]], "asymmetric_premise": ["person_b attends to person_a's business(B, A), so Less(affable(A), affable(B))", ["B attends to A's business more than B, so A is less affable than B"]], "asymmetric_conclusion": ["person_a attends to person_b's business(A, B), so Less(affable(B), affable(A))", ["A attends to B's business more than B, so B is less affable than A"]], "negated_asymmetric_premise": ["person_b attends to person_a's business(B, A), so not More(affable(A), affable(B))", ["B attends to A's business while A does not, so A is not more affable than B"]], "negated_asymmetric_conclusion": ["person_a attends to person_b's business(A, B), so not More(affable(B), affable(A))", ["A attends to B's business while B does not, so B is not more affable than A"]]}
{"original": ["person_a thinks person_b was cute(A, B), so More(adoring(A), adoring(B))", ["A thinks B is cute, so A is more adoring than B"]], "negated": ["person_a thinks person_b was cute(A, B), so not Less(adoring(A), adoring(B))", ["A thinks B was cute, so A is not less adoring than B"]], "asymmetric_premise": ["person_b thinks person_a was cute(B, A), so Less(adoring(A), adoring(B))", ["B thinks A was cute, so A is less adoring than B"]], "asymmetric_conclusion": ["person_a thinks person_b was cute(A, B), so Less(adoring(B), adoring(A))", ["A thinks B was cute, so B is less adoring than A"]], "negated_asymmetric_premise": ["person_b thinks person_a was cute(B, A), so not More(adoring(A), adoring(B))", ["B thinks A was cute, so A is not more adoring than B"]], "negated_asymmetric_conclusion": ["person_a thinks person_b was cute(A, B), so not More(adoring(B), adoring(A))", ["A thinks B is cute, so B is not more adoring than A"]]}
{"original": ["person_a brings person_b in contact(A, B), so More(active(A), active(B))", ["A brings B in contact, so A is more active than B"]], "negated": ["person_a brings person_b in contact(A, B), so not Less(active(A), active(B))", ["A brings B in contact, so A is not less active than B"]], "asymmetric_premise": ["person_b brings person_a in contact(B, A), so Less(active(A), active(B))", ["B brings A in contact, so A is less active than B"]], "asymmetric_conclusion": ["person_a brings person_b in contact(A, B), so Less(active(B), active(A))", ["A brings B in contact, so B is less active than A"]], "negated_asymmetric_premise": ["person_b brings person_a in contact(B, A), so not More(active(A), active(B))", ["B brings A in contact, so A is not more active than B"]], "negated_asymmetric_conclusion": ["person_a brings person_b in contact(A, B), so not More(active(B), active(A))", ["A brings B in contact, so B is not more active than A"]]}
{"original": ["person_a gives person_b his head(A, B), so More(social(A), social(B))", ["A gives B his head, so A is more social than B"]], "negated": ["person_a gives person_b his head(A, B), so not Less(social(A), social(B))", ["A gives B his head, so A is not less social than B"]], "asymmetric_premise": ["person_b gives person_a his head(B, A), so Less(social(A), social(B))", ["B gives A his head, so A is less social than B"]], "asymmetric_conclusion": ["person_a gives person_b his head(A, B), so Less(social(B), social(A))", ["A gives B his head, so B is less social than A"]], "negated_asymmetric_premise": ["person_b gives person_a his head(B, A), so not More(social(A), social(B))", ["B gives A his head, so A is not more social than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b his head(A, B), so not More(social(B), social(A))", ["A gives B his head, so B is not more social than A"]]}
{"original": ["person_a hits person_b in the head(A, B), so More(unfaithful(A), unfaithful(B))", ["A hits B in the head, so A is more unfaithful than B"]], "negated": ["person_a hits person_b in the head(A, B), so not Less(unfaithful(A), unfaithful(B))", ["A hits B in the head, so A is not less unfaithful than B"]], "asymmetric_premise": ["person_b hits person_a in the head(B, A), so Less(unfaithful(A), unfaithful(B))", ["B hits A in the head, so A is less unfaithful than B"]], "asymmetric_conclusion": ["person_a hits person_b in the head(A, B), so Less(unfaithful(B), unfaithful(A))", ["A hits B in the head, so B is less unfaithful than A"]], "negated_asymmetric_premise": ["person_b hits person_a in the head(B, A), so not More(unfaithful(A), unfaithful(B))", ["B hits A in the head, so A is not more unfaithful than B"]], "negated_asymmetric_conclusion": ["person_a hits person_b in the head(A, B), so not More(unfaithful(B), unfaithful(A))", ["A hits B in the head, so B is not more unfaithful than A"]]}
{"original": ["person_a talks to person_b's parents(A, B), so More(honest(A), honest(B))", ["A talks to B's parents, so A is more honest than B"]], "negated": ["person_a talks to person_b's parents(A, B), so not Less(honest(A), honest(B))", ["A talks to B's parents, so A is not less honest than B"]], "asymmetric_premise": ["person_b talks to person_a's parents(B, A), so Less(honest(A), honest(B))", ["B talks to A's parents more than B, so A is less honest than B"]], "asymmetric_conclusion": ["person_a talks to person_b's parents(A, B), so Less(honest(B), honest(A))", ["A talks to B's parents, so B is less honest than A"]], "negated_asymmetric_premise": ["person_b talks to person_a's parents(B, A), so not More(honest(A), honest(B))", ["B talks to A's parents, so A is not more honest than B"]], "negated_asymmetric_conclusion": ["person_a talks to person_b's parents(A, B), so not More(honest(B), honest(A))", ["A talks to B's parents, so B is not more honest than A"]]}
{"original": ["person_a shows person_b sign(A, B), so More(smart(A), smart(B))", ["A shows B the sign, so A is more smart than B"]], "negated": ["person_a shows person_b sign(A, B), so not Less(smart(A), smart(B))", ["A shows B the sign, so A is not less smart than B"]], "asymmetric_premise": ["person_b shows person_a sign(B, A), so Less(smart(A), smart(B))", ["B shows A a sign, so A is less smart than B"]], "asymmetric_conclusion": ["person_a shows person_b sign(A, B), so Less(smart(B), smart(A))", ["A shows B the sign, so B is less smart than A"]], "negated_asymmetric_premise": ["person_b shows person_a sign(B, A), so not More(smart(A), smart(B))", ["B shows A a sign, so A is not more smart than B"]], "negated_asymmetric_conclusion": ["person_a shows person_b sign(A, B), so not More(smart(B), smart(A))", ["A shows B the sign, so B is not more smart than A"]]}
{"original": ["person_a brings person_b into line(A, B), so More(dominant(A), dominant(B))", ["A brings B into line, so A is more dominant than B"]], "negated": ["person_a brings person_b into line(A, B), so not Less(dominant(A), dominant(B))", ["A brings B into line, so A is not less dominant than B"]], "asymmetric_premise": ["person_b brings person_a into line(B, A), so Less(dominant(A), dominant(B))", ["B brings A into the line, so A is less dominant than B"]], "asymmetric_conclusion": ["person_a brings person_b into line(A, B), so Less(dominant(B), dominant(A))", ["A brings B into the line, so B is less dominant than A"]], "negated_asymmetric_premise": ["person_b brings person_a into line(B, A), so not More(dominant(A), dominant(B))", ["B brings A into line, so A is not more dominant than B"]], "negated_asymmetric_conclusion": ["person_a brings person_b into line(A, B), so not More(dominant(B), dominant(A))", ["A brings B into line, so B is not more dominant than A"]]}
{"original": ["person_a listens to person_b's words(A, B), so More(attentive(A), attentive(B))", ["A listens to B's words more than B, so A is more attentive than B"]], "negated": ["person_a listens to person_b's words(A, B), so not Less(attentive(A), attentive(B))", ["A listens to B's words more than B, so A is not less attentive than B"]], "asymmetric_premise": ["person_b listens to person_a's words(B, A), so Less(attentive(A), attentive(B))", ["B listens to A's words more than B, so A is less attentive than B"]], "asymmetric_conclusion": ["person_a listens to person_b's words(A, B), so Less(attentive(B), attentive(A))", ["A listens to B's words more than B, so B is less attentive than A"]], "negated_asymmetric_premise": ["person_b listens to person_a's words(B, A), so not More(attentive(A), attentive(B))", ["B listens to A's words more than A, so A is not more attentive than B"]], "negated_asymmetric_conclusion": ["person_a listens to person_b's words(A, B), so not More(attentive(B), attentive(A))", ["A listens to B's words more than B, so B is not more attentive than A"]]}
{"original": ["person_a runs away with person_b(A, B), so More(romantic(A), romantic(B))", ["A runs away with B, so A is more romantic than B"]], "negated": ["person_a runs away with person_b(A, B), so not Less(romantic(A), romantic(B))", ["A runs away with B, so A is not less romantic than B"]], "asymmetric_premise": ["person_b runs away with person_a(B, A), so Less(romantic(A), romantic(B))", ["B runs away with A, so A is less romantic than B"]], "asymmetric_conclusion": ["person_a runs away with person_b(A, B), so Less(romantic(B), romantic(A))", ["A runs away with B, so B is less romantic than A"]], "negated_asymmetric_premise": ["person_b runs away with person_a(B, A), so not More(romantic(A), romantic(B))", ["B runs away with A, so A is not more romantic than B"]], "negated_asymmetric_conclusion": ["person_a runs away with person_b(A, B), so not More(romantic(B), romantic(A))", ["A runs away with B, so B is not more romantic than A"]]}
{"original": ["person_a brings person_b's hands up(A, B), so More(talented(A), talented(B))", ["A brings B's hands up, so A is more talented than B"]], "negated": ["person_a brings person_b's hands up(A, B), so not Less(talented(A), talented(B))", ["A brings B's hands up, so A is not less talented than B"]], "asymmetric_premise": ["person_b brings person_a's hands up(B, A), so Less(talented(A), talented(B))", ["B brings A's hands up, so A is less talented than B"]], "asymmetric_conclusion": ["person_a brings person_b's hands up(A, B), so Less(talented(B), talented(A))", ["A brings B's hands up, so B is less talented than A"]], "negated_asymmetric_premise": ["person_b brings person_a's hands up(B, A), so not More(talented(A), talented(B))", ["B brings A's hands up, so A is not more talented than B"]], "negated_asymmetric_conclusion": ["person_a brings person_b's hands up(A, B), so not More(talented(B), talented(A))", ["A brings B's hands up, so B is not more talented than A"]]}
{"original": ["person_a attracts person_b's attention(A, B), so More(tall(A), tall(B))", ["A is taller than B, so A is more tall than B"]], "negated": ["person_a attracts person_b's attention(A, B), so not Less(tall(A), tall(B))", ["A attracts B's attention, so A is not less tall than B"]], "asymmetric_premise": ["person_b attracts person_a's attention(B, A), so Less(tall(A), tall(B))", ["B attracts A's attention, so A is less tall than B"]], "asymmetric_conclusion": ["person_a attracts person_b's attention(A, B), so Less(tall(B), tall(A))", ["A attracts B's attention, so B is less tall than A"]], "negated_asymmetric_premise": ["person_b attracts person_a's attention(B, A), so not More(tall(A), tall(B))", ["B attracts A's attention, so A is not more tall than B"]], "negated_asymmetric_conclusion": ["person_a attracts person_b's attention(A, B), so not More(tall(B), tall(A))", ["A attracts B's attention, so B is not more tall than A"]]}
{"original": ["person_a steals person_b's thunder(A, B), so More(cowardly(A), cowardly(B))", ["A steals B's thunder, so A is more cowardly than B"]], "negated": ["person_a steals person_b's thunder(A, B), so not Less(cowardly(A), cowardly(B))", ["A steals B's thunder, so A is not less cowardly than B"]], "asymmetric_premise": ["person_b steals person_a's thunder(B, A), so Less(cowardly(A), cowardly(B))", ["B steals A's thunder, so A is less cowardly than B"]], "asymmetric_conclusion": ["person_a steals person_b's thunder(A, B), so Less(cowardly(B), cowardly(A))", ["A steals B's thunder, so B is less cowardly than A"]], "negated_asymmetric_premise": ["person_b steals person_a's thunder(B, A), so not More(cowardly(A), cowardly(B))", ["B steals A's thunder, so A is not more cowardly than B"]], "negated_asymmetric_conclusion": ["person_a steals person_b's thunder(A, B), so not More(cowardly(B), cowardly(A))", ["A steals B's thunder, so B is not more cowardly than A"]]}
{"original": ["person_a occupies person_b position(A, B), so More(selfish(A), selfish(B))", ["A occupies the A position, B does not, so A is more selfish than B"]], "negated": ["person_a occupies person_b position(A, B), so not Less(selfish(A), selfish(B))", ["A occupies the B position, so A is not less selfish than B"]], "asymmetric_premise": ["person_b occupies person_a position(B, A), so Less(selfish(A), selfish(B))", ["B occupies A's position, so A is less selfish than B"]], "asymmetric_conclusion": ["person_a occupies person_b position(A, B), so Less(selfish(B), selfish(A))", ["A occupies the B position, so B is less selfish than A"]], "negated_asymmetric_premise": ["person_b occupies person_a position(B, A), so not More(selfish(A), selfish(B))", ["B occupies A's position, so A is not more selfish than B"]], "negated_asymmetric_conclusion": ["person_a occupies person_b position(A, B), so not More(selfish(B), selfish(A))", ["A occupies the B position, so B is not more selfish than A"]]}
{"original": ["person_a turns person_b's eyes(A, B), so More(caring(A), caring(B))", ["A turns B's eyes, so A is more caring than B"]], "negated": ["person_a turns person_b's eyes(A, B), so not Less(caring(A), caring(B))", ["A turns B's eyes, so A is not less caring than B"]], "asymmetric_premise": ["person_b turns person_a's eyes(B, A), so Less(caring(A), caring(B))", ["B turns A's eyes, so A is less caring than B"]], "asymmetric_conclusion": ["person_a turns person_b's eyes(A, B), so Less(caring(B), caring(A))", ["A turns B's eyes, so B is less caring than A"]], "negated_asymmetric_premise": ["person_b turns person_a's eyes(B, A), so not More(caring(A), caring(B))", ["B turns A's eyes, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["person_a turns person_b's eyes(A, B), so not More(caring(B), caring(A))", ["A turns B's eyes, so B is not more caring than A"]]}
{"original": ["person_a asks person_b some questions(A, B), so More(curious(A), curious(B))", ["A asks B some questions, so A is more curious than B"]], "negated": ["person_a asks person_b some questions(A, B), so not Less(curious(A), curious(B))", ["A asks B some questions, so A is not less curious than B"]], "asymmetric_premise": ["person_b asks person_a some questions(B, A), so Less(curious(A), curious(B))", ["B asks A some questions, so A is less curious than B"]], "asymmetric_conclusion": ["person_a asks person_b some questions(A, B), so Less(curious(B), curious(A))", ["A asks B some questions, so B is less curious than A"]], "negated_asymmetric_premise": ["person_b asks person_a some questions(B, A), so not More(curious(A), curious(B))", ["B asks A some questions, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b some questions(A, B), so not More(curious(B), curious(A))", ["A asks B some questions, so B is not more curious than A"]]}
{"original": ["person_a teaches person_b a lesson(A, B), so More(vengeful(A), vengeful(B))", ["A teaches B a lesson, so A is more vengeful than B"]], "negated": ["person_a teaches person_b a lesson(A, B), so not Less(vengeful(A), vengeful(B))", ["A teaches B a lesson, so A is not less vengeful than B"]], "asymmetric_premise": ["person_b teaches person_a a lesson(B, A), so Less(vengeful(A), vengeful(B))", ["B teaches A a lesson, so A is less vengeful than B"]], "asymmetric_conclusion": ["person_a teaches person_b a lesson(A, B), so Less(vengeful(B), vengeful(A))", ["A teaches B a lesson, so B is less vengeful than A"]], "negated_asymmetric_premise": ["person_b teaches person_a a lesson(B, A), so not More(vengeful(A), vengeful(B))", ["B teaches A a lesson, so A is not more vengeful than B"]], "negated_asymmetric_conclusion": ["person_a teaches person_b a lesson(A, B), so not More(vengeful(B), vengeful(A))", ["A teaches B a lesson, so B is not more vengeful than A"]]}
{"original": ["person_a provides person_b with opportunities(A, B), so More(generous(A), generous(B))", ["A provides B with opportunities, so A is more generous than B"]], "negated": ["person_a provides person_b with opportunities(A, B), so not Less(generous(A), generous(B))", ["A provides B with opportunities, so A is not less generous than B"]], "asymmetric_premise": ["person_b provides person_a with opportunities(B, A), so Less(generous(A), generous(B))", ["B provides A with opportunities, so A is less generous than B"]], "asymmetric_conclusion": ["person_a provides person_b with opportunities(A, B), so Less(generous(B), generous(A))", ["A provides B with opportunities, so B is less generous than A"]], "negated_asymmetric_premise": ["person_b provides person_a with opportunities(B, A), so not More(generous(A), generous(B))", ["B provides A with opportunities, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["person_a provides person_b with opportunities(A, B), so not More(generous(B), generous(A))", ["A provides B with opportunities, so B is not more generous than A"]]}
{"original": ["person_a asks person_b to sign(A, B), so More(clever(A), clever(B))", ["A asks B to sign, so A is more clever than B"]], "negated": ["person_a asks person_b to sign(A, B), so not Less(clever(A), clever(B))", ["A asks B to sign, so A is not less clever than B"]], "asymmetric_premise": ["person_b asks person_a to sign(B, A), so Less(clever(A), clever(B))", ["B asks A to sign, so A is less clever than B"]], "asymmetric_conclusion": ["person_a asks person_b to sign(A, B), so Less(clever(B), clever(A))", ["A asks B to sign, so B is less clever than A"]], "negated_asymmetric_premise": ["person_b asks person_a to sign(B, A), so not More(clever(A), clever(B))", ["B asks A to sign, so A is not more clever than B"]], "negated_asymmetric_conclusion": ["person_a asks person_b to sign(A, B), so not More(clever(B), clever(A))", ["A asks B to sign, so B is not more clever than A"]]}
{"original": ["person_a lets person_b keep it(A, B), so More(generous(A), generous(B))", ["A lets B keep it, so A is more generous than B"]], "negated": ["person_a lets person_b keep it(A, B), so not Less(generous(A), generous(B))", ["A lets B keep it, so A is not less generous than B"]], "asymmetric_premise": ["person_b lets person_a keep it(B, A), so Less(generous(A), generous(B))", ["B lets A keep it, so A is less generous than B"]], "asymmetric_conclusion": ["person_a lets person_b keep it(A, B), so Less(generous(B), generous(A))", ["A lets B keep it, so B is less generous than A"]], "negated_asymmetric_premise": ["person_b lets person_a keep it(B, A), so not More(generous(A), generous(B))", ["B lets A keep it, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["person_a lets person_b keep it(A, B), so not More(generous(B), generous(A))", ["A lets B keep it, so B is not more generous than A"]]}
{"original": ["person_a loses person_b's hold(A, B), so More(irresponsible(A), irresponsible(B))", ["A loses B's hold, so A is more irresponsible than B"]], "negated": ["person_a loses person_b's hold(A, B), so not Less(irresponsible(A), irresponsible(B))", ["A loses B's hold, so A is not less irresponsible than B"]], "asymmetric_premise": ["person_b loses person_a's hold(B, A), so Less(irresponsible(A), irresponsible(B))", ["B loses A's hold, so A is less irresponsible than B"]], "asymmetric_conclusion": ["person_a loses person_b's hold(A, B), so Less(irresponsible(B), irresponsible(A))", ["A loses B's hold, so B is less irresponsible than A"]], "negated_asymmetric_premise": ["person_b loses person_a's hold(B, A), so not More(irresponsible(A), irresponsible(B))", ["B loses A's hold, so A is not more irresponsible than B"]], "negated_asymmetric_conclusion": ["person_a loses person_b's hold(A, B), so not More(irresponsible(B), irresponsible(A))", ["A loses B's hold, so B is not more irresponsible than A"]]}
{"original": ["person_a goes back to person_b's place(A, B), so More(eager(A), eager(B))", ["A goes back to B's place, so A is more eager than B"]], "negated": ["person_a goes back to person_b's place(A, B), so not Less(eager(A), eager(B))", ["A goes back to B's place, so A is not less eager than B"]], "asymmetric_premise": ["person_b goes back to person_a's place(B, A), so Less(eager(A), eager(B))", ["B goes back to A's place, so A is less eager than B"]], "asymmetric_conclusion": ["person_a goes back to person_b's place(A, B), so Less(eager(B), eager(A))", ["A goes back to B's place, so B is less eager than A"]], "negated_asymmetric_premise": ["person_b goes back to person_a's place(B, A), so not More(eager(A), eager(B))", ["B goes back to A's place, so A is not more eager than B"]], "negated_asymmetric_conclusion": ["person_a goes back to person_b's place(A, B), so not More(eager(B), eager(A))", ["A goes back to B's place, so B is not more eager than A"]]}
{"original": ["person_a gets to know person_b better(A, B), so More(outgoing(A), outgoing(B))", ["A gets to know B better than B, so A is more outgoing than B"]], "negated": ["person_a gets to know person_b better(A, B), so not Less(outgoing(A), outgoing(B))", ["A gets to know B better than B, so A is not less outgoing than B"]], "asymmetric_premise": ["person_b gets to know person_a better(B, A), so Less(outgoing(A), outgoing(B))", ["B gets to know A better than B, so A is less outgoing than B"]], "asymmetric_conclusion": ["person_a gets to know person_b better(A, B), so Less(outgoing(B), outgoing(A))", ["A gets to know B better than B, so B is less outgoing than A"]], "negated_asymmetric_premise": ["person_b gets to know person_a better(B, A), so not More(outgoing(A), outgoing(B))", ["B gets to know A better than B, so A is not more outgoing than B"]], "negated_asymmetric_conclusion": ["person_a gets to know person_b better(A, B), so not More(outgoing(B), outgoing(A))", ["A gets to know B better than B, so B is not more outgoing than A"]]}
{"original": ["person_a takes a photo of person_b(A, B), so More(artistic(A), artistic(B))", ["A takes a photo of B, so A is more artistic than B"]], "negated": ["person_a takes a photo of person_b(A, B), so not Less(artistic(A), artistic(B))", ["A takes a photo of B, so A is not less artistic than B"]], "asymmetric_premise": ["person_b takes a photo of person_a(B, A), so Less(artistic(A), artistic(B))", ["B takes a photo of A, so A is less artistic than B"]], "asymmetric_conclusion": ["person_a takes a photo of person_b(A, B), so Less(artistic(B), artistic(A))", ["A takes a photo of B, so B is less artistic than A"]], "negated_asymmetric_premise": ["person_b takes a photo of person_a(B, A), so not More(artistic(A), artistic(B))", ["B takes a photo of A, so A is not more artistic than B"]], "negated_asymmetric_conclusion": ["person_a takes a photo of person_b(A, B), so not More(artistic(B), artistic(A))", ["A takes a photo of B, so B is not more artistic than A"]]}
{"original": ["person_a gives person_b a refund(A, B), so More(honest(A), honest(B))", ["A gives B a refund, so A is more honest than B"]], "negated": ["person_a gives person_b a refund(A, B), so not Less(honest(A), honest(B))", ["A gives B a refund, so A is not less honest than B"]], "asymmetric_premise": ["person_b gives person_a a refund(B, A), so Less(honest(A), honest(B))", ["B gives A a refund, so A is less honest than B"]], "asymmetric_conclusion": ["person_a gives person_b a refund(A, B), so Less(honest(B), honest(A))", ["A gives B a refund, so B is less honest than A"]], "negated_asymmetric_premise": ["person_b gives person_a a refund(B, A), so not More(honest(A), honest(B))", ["B gives A a refund, so A is not more honest than B"]], "negated_asymmetric_conclusion": ["person_a gives person_b a refund(A, B), so not More(honest(B), honest(A))", ["A gives B a refund, so B is not more honest than A"]]}
{"original": ["person_a comes to person_b's aid(A, B), so More(helpful(A), helpful(B))", ["A comes to B's aid, so A is more helpful than B"]], "negated": ["person_a comes to person_b's aid(A, B), so not Less(helpful(A), helpful(B))", ["A comes to B's aid, so A is not less helpful than B"]], "asymmetric_premise": ["person_b comes to person_a's aid(B, A), so Less(helpful(A), helpful(B))", ["B comes to A's aid, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a comes to person_b's aid(A, B), so Less(helpful(B), helpful(A))", ["A comes to B's aid, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b comes to person_a's aid(B, A), so not More(helpful(A), helpful(B))", ["B comes to A's aid, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a comes to person_b's aid(A, B), so not More(helpful(B), helpful(A))", ["A comes to B's aid, so B is not more helpful than A"]]}
{"original": ["person_a helps person_b find it(A, B), so More(helpful(A), helpful(B))", ["A helps B find it, so A is more helpful than B"]], "negated": ["person_a helps person_b find it(A, B), so not Less(helpful(A), helpful(B))", ["A helps B find it, so A is not less helpful than B"]], "asymmetric_premise": ["person_b helps person_a find it(B, A), so Less(helpful(A), helpful(B))", ["B helps A find it, so A is less helpful than B"]], "asymmetric_conclusion": ["person_a helps person_b find it(A, B), so Less(helpful(B), helpful(A))", ["A helps B find it, so B is less helpful than A"]], "negated_asymmetric_premise": ["person_b helps person_a find it(B, A), so not More(helpful(A), helpful(B))", ["B helps A find it, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["person_a helps person_b find it(A, B), so not More(helpful(B), helpful(A))", ["A helps B find it, so B is not more helpful than A"]]}
{"original": ["person_a invites person_b to share(A, B), so More(unselfish(A), unselfish(B))", ["A invites B to share, so A is more unselfish than B"]], "negated": ["person_a invites person_b to share(A, B), so not Less(unselfish(A), unselfish(B))", ["A invites B to share, so A is not less unselfish than B"]], "asymmetric_premise": ["person_b invites person_a to share(B, A), so Less(unselfish(A), unselfish(B))", ["B invites A to share, so A is less unselfish than B"]], "asymmetric_conclusion": ["person_a invites person_b to share(A, B), so Less(unselfish(B), unselfish(A))", ["A invites B to share, so B is less unselfish than A"]], "negated_asymmetric_premise": ["person_b invites person_a to share(B, A), so not More(unselfish(A), unselfish(B))", ["B invites A to share, so A is not more unselfish than B"]], "negated_asymmetric_conclusion": ["person_a invites person_b to share(A, B), so not More(unselfish(B), unselfish(A))", ["A invites B to share, so B is not more unselfish than A"]]}
{"original": ["person_a transports person_b to an island(A, B), so More(wealthy(A), wealthy(B))", ["A transports B to an island, so A is more wealthy than B"]], "negated": ["person_a transports person_b to an island(A, B), so not Less(wealthy(A), wealthy(B))", ["A transports B to an island, so A is not less wealthy than B"]], "asymmetric_premise": ["person_b transports person_a to an island(B, A), so Less(wealthy(A), wealthy(B))", ["B transports A to an island, so A is less wealthy than B"]], "asymmetric_conclusion": ["person_a transports person_b to an island(A, B), so Less(wealthy(B), wealthy(A))", ["A transports B to an island, so B is less wealthy than A"]], "negated_asymmetric_premise": ["person_b transports person_a to an island(B, A), so not More(wealthy(A), wealthy(B))", ["B transports A to an island, so A is not more wealthy than B"]], "negated_asymmetric_conclusion": ["person_a transports person_b to an island(A, B), so not More(wealthy(B), wealthy(A))", ["A transports B to an island, so B is not more wealthy than A"]]}
{"original": ["person_a gets person_b into trouble(A, B), so More(in charge(A), in charge(B))", ["A gets B into trouble, so A is more in charge than B"]], "negated": ["person_a gets person_b into trouble(A, B), so not Less(in charge(A), in charge(B))", ["A gets into trouble more than B, so A is not less in charge than B"]], "asymmetric_premise": ["person_b gets person_a into trouble(B, A), so Less(in charge(A), in charge(B))", ["B gets A into trouble, so A is less in charge than B"]], "asymmetric_conclusion": ["person_a gets person_b into trouble(A, B), so Less(in charge(B), in charge(A))", ["A gets B into trouble, so B is less in charge than A"]], "negated_asymmetric_premise": ["person_b gets person_a into trouble(B, A), so not More(in charge(A), in charge(B))", ["B gets A into trouble, so A is not more in charge than B"]], "negated_asymmetric_conclusion": ["person_a gets person_b into trouble(A, B), so not More(in charge(B), in charge(A))", ["A gets B into trouble, so B is not more in charge than A"]]}
{"original": ["person_a sends person_b's flowers(A, B), so More(warmhearted(A), warmhearted(B))", ["A sends B flowers, so A is more warmhearted than B"]], "negated": ["person_a sends person_b's flowers(A, B), so not Less(warmhearted(A), warmhearted(B))", ["A sends B flowers, so A is not less warmhearted than B"]], "asymmetric_premise": ["person_b sends person_a's flowers(B, A), so Less(warmhearted(A), warmhearted(B))", ["B sends A flowers, so A is less warmhearted than B"]], "asymmetric_conclusion": ["person_a sends person_b's flowers(A, B), so Less(warmhearted(B), warmhearted(A))", ["A sends B flowers, so B is less warmhearted than A"]], "negated_asymmetric_premise": ["person_b sends person_a's flowers(B, A), so not More(warmhearted(A), warmhearted(B))", ["B sends A flowers, so A is not more warmhearted than B"]], "negated_asymmetric_conclusion": ["person_a sends person_b's flowers(A, B), so not More(warmhearted(B), warmhearted(A))", ["A sends B flowers, so B is not more warmhearted than A"]]}
{"original": ["person_a passes person_b law(A, B), so More(responsible(A), responsible(B))", ["A passes the law, B does not, so A is more responsible than B"]], "negated": ["person_a passes person_b law(A, B), so not Less(responsible(A), responsible(B))", ["A passes the law more than B, so A is not less responsible than B"]], "asymmetric_premise": ["person_b passes person_a law(B, A), so Less(responsible(A), responsible(B))", ["B passes the law, A does not, so A is less responsible than B"]], "asymmetric_conclusion": ["person_a passes person_b law(A, B), so Less(responsible(B), responsible(A))", ["A passes the law, B does not, so B is less responsible than A"]], "negated_asymmetric_premise": ["person_b passes person_a law(B, A), so not More(responsible(A), responsible(B))", ["B passes the law, A does not, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["person_a passes person_b law(A, B), so not More(responsible(B), responsible(A))", ["A passes the law, B does not, so B is not more responsible than A"]]}
{"original": [" takes care of the another person(A) and not  takes care of the another person(B), so More(compassionate(A), compassionate(B))", ["A takes care of the another person while B does not, so A is more compassionate than B"]], "negated": [" takes care of the another person(A) and not  takes care of the another person(B), so not Less(compassionate(A), compassionate(B))", ["A takes care of the another person while B does not, so A is not less compassionate than B"]], "asymmetric_premise": [" takes care of the another person(B) and not  takes care of the another person(A), so Less(compassionate(A), compassionate(B))", ["B takes care of the another person while A does not, so A is less compassionate than B"]], "asymmetric_conclusion": [" takes care of the another person(A) and not  takes care of the another person(B), so Less(compassionate(B), compassionate(A))", ["A takes care of the another person while B does not, so B is less compassionate than A"]], "negated_asymmetric_premise": [" takes care of the another person(B) and not  takes care of the another person(A), so not More(compassionate(A), compassionate(B))", ["B takes care of the another person while A does not, so A is not more compassionate than B"]], "negated_asymmetric_conclusion": [" takes care of the another person(A) and not  takes care of the another person(B), so not More(compassionate(B), compassionate(A))", ["A takes care of the another person while B does not, so B is not more compassionate than A"]]}
{"original": [" finishes another person's hike(A) and not  finishes another person's hike(B), so More(satisfied(A), satisfied(B))", ["A finishes another person's hike while B does not, so A is more satisfied than B"]], "negated": [" finishes another person's hike(A) and not  finishes another person's hike(B), so not Less(satisfied(A), satisfied(B))", ["A finishes another person's hike while B does not, so A is not less satisfied than B"]], "asymmetric_premise": [" finishes another person's hike(B) and not  finishes another person's hike(A), so Less(satisfied(A), satisfied(B))", ["B finishes another person's hike while A does not, so A is less satisfied than B"]], "asymmetric_conclusion": [" finishes another person's hike(A) and not  finishes another person's hike(B), so Less(satisfied(B), satisfied(A))", ["A finishes another person's hike while B does not, so B is less satisfied than A"]], "negated_asymmetric_premise": [" finishes another person's hike(B) and not  finishes another person's hike(A), so not More(satisfied(A), satisfied(B))", ["B finishes another person's hike while A does not, so A is not more satisfied than B"]], "negated_asymmetric_conclusion": [" finishes another person's hike(A) and not  finishes another person's hike(B), so not More(satisfied(B), satisfied(A))", ["A finishes another person's hike while B does not, so B is not more satisfied than A"]]}
{"original": [" plays video games all day(A) and not  plays video games all day(B), so More(lazy(A), lazy(B))", ["A plays video games all day while B does not, so A is more lazy than B"]], "negated": [" plays video games all day(A) and not  plays video games all day(B), so not Less(lazy(A), lazy(B))", ["A plays video games all day while B does not, so A is not less lazy than B"]], "asymmetric_premise": [" plays video games all day(B) and not  plays video games all day(A), so Less(lazy(A), lazy(B))", ["B plays video games all day while A does not, so A is less lazy than B"]], "asymmetric_conclusion": [" plays video games all day(A) and not  plays video games all day(B), so Less(lazy(B), lazy(A))", ["A plays video games all day while B does not, so B is less lazy than A"]], "negated_asymmetric_premise": [" plays video games all day(B) and not  plays video games all day(A), so not More(lazy(A), lazy(B))", ["B plays video games all day while A does not, so A is not more lazy than B"]], "negated_asymmetric_conclusion": [" plays video games all day(A) and not  plays video games all day(B), so not More(lazy(B), lazy(A))", ["A plays video games all day while B does not, so B is not more lazy than A"]]}
{"original": [" takes another person aside(A) and not  takes another person aside(B), so More(giving(A), giving(B))", ["A takes another person aside while B does not, so A is more giving than B"]], "negated": [" takes another person aside(A) and not  takes another person aside(B), so not Less(giving(A), giving(B))", ["A takes another person aside while B does not, so A is not less giving than B"]], "asymmetric_premise": [" takes another person aside(B) and not  takes another person aside(A), so Less(giving(A), giving(B))", ["B takes another person aside while A does not, so A is less giving than B"]], "asymmetric_conclusion": [" takes another person aside(A) and not  takes another person aside(B), so Less(giving(B), giving(A))", ["A takes another person aside while B does not, so B is less giving than A"]], "negated_asymmetric_premise": [" takes another person aside(B) and not  takes another person aside(A), so not More(giving(A), giving(B))", ["B takes another person aside while A does not, so A is not more giving than B"]], "negated_asymmetric_conclusion": [" takes another person aside(A) and not  takes another person aside(B), so not More(giving(B), giving(A))", ["A takes another person aside while B does not, so B is not more giving than A"]]}
{"original": [" pulls their finger out(A) and not  pulls their finger out(B), so More(surprised(A), surprised(B))", ["A pulls their finger out while B does not, so A is more surprised than B"]], "negated": [" pulls their finger out(A) and not  pulls their finger out(B), so not Less(surprised(A), surprised(B))", ["A pulls their finger out while B does not, so A is not less surprised than B"]], "asymmetric_premise": [" pulls their finger out(B) and not  pulls their finger out(A), so Less(surprised(A), surprised(B))", ["B pulls their finger out while A does not, so A is less surprised than B"]], "asymmetric_conclusion": [" pulls their finger out(A) and not  pulls their finger out(B), so Less(surprised(B), surprised(A))", ["A pulls their finger out while B does not, so B is less surprised than A"]], "negated_asymmetric_premise": [" pulls their finger out(B) and not  pulls their finger out(A), so not More(surprised(A), surprised(B))", ["B pulls their finger out while A does not, so A is not more surprised than B"]], "negated_asymmetric_conclusion": [" pulls their finger out(A) and not  pulls their finger out(B), so not More(surprised(B), surprised(A))", ["A pulls their finger out while B does not, so B is not more surprised than A"]]}
{"original": [" picks corners(A) and not  picks corners(B), so More(confident(A), confident(B))", ["A picks corners while B does not, so A is more confident than B"]], "negated": [" picks corners(A) and not  picks corners(B), so not Less(confident(A), confident(B))", ["A picks corners while B does not, so A is not less confident than B"]], "asymmetric_premise": [" picks corners(B) and not  picks corners(A), so Less(confident(A), confident(B))", ["B picks corners while A does not, so A is less confident than B"]], "asymmetric_conclusion": [" picks corners(A) and not  picks corners(B), so Less(confident(B), confident(A))", ["A picks corners while B does not, so B is less confident than A"]], "negated_asymmetric_premise": [" picks corners(B) and not  picks corners(A), so not More(confident(A), confident(B))", ["B picks corners while A does not, so A is not more confident than B"]], "negated_asymmetric_conclusion": [" picks corners(A) and not  picks corners(B), so not More(confident(B), confident(A))", ["A picks corners while B does not, so B is not more confident than A"]]}
{"original": [" is on a business trip(A) and not  is on a business trip(B), so More(prepared(A), prepared(B))", ["A is on a business trip while B is not, so A is more prepared than B"]], "negated": [" is on a business trip(A) and not  is on a business trip(B), so not Less(prepared(A), prepared(B))", ["A is on a business trip while B is not, so A is not less prepared than B"]], "asymmetric_premise": [" is on a business trip(B) and not  is on a business trip(A), so Less(prepared(A), prepared(B))", ["B is on a business trip while A is not, so A is less prepared than B"]], "asymmetric_conclusion": [" is on a business trip(A) and not  is on a business trip(B), so Less(prepared(B), prepared(A))", ["A is on a business trip while B is not, so B is less prepared than A"]], "negated_asymmetric_premise": [" is on a business trip(B) and not  is on a business trip(A), so not More(prepared(A), prepared(B))", ["B is on a business trip while A is not, so A is not more prepared than B"]], "negated_asymmetric_conclusion": [" is on a business trip(A) and not  is on a business trip(B), so not More(prepared(B), prepared(A))", ["A is on a business trip while B is not, so B is not more prepared than A"]]}
{"original": [" brings another person's umbrella(A) and not  brings another person's umbrella(B), so More(considerate(A), considerate(B))", ["A brings another person's umbrella while B does not, so A is more considerate than B"]], "negated": [" brings another person's umbrella(A) and not  brings another person's umbrella(B), so not Less(considerate(A), considerate(B))", ["A brings another person's umbrella while B does not, so A is not less considerate than B"]], "asymmetric_premise": [" brings another person's umbrella(B) and not  brings another person's umbrella(A), so Less(considerate(A), considerate(B))", ["B brings another person's umbrella while A does not, so A is less considerate than B"]], "asymmetric_conclusion": [" brings another person's umbrella(A) and not  brings another person's umbrella(B), so Less(considerate(B), considerate(A))", ["A brings another person's umbrella while B does not, so B is less considerate than A"]], "negated_asymmetric_premise": [" brings another person's umbrella(B) and not  brings another person's umbrella(A), so not More(considerate(A), considerate(B))", ["B brings another person's umbrella while A does not, so A is not more considerate than B"]], "negated_asymmetric_conclusion": [" brings another person's umbrella(A) and not  brings another person's umbrella(B), so not More(considerate(B), considerate(A))", ["A brings another person's umbrella while B does not, so B is not more considerate than A"]]}
{"original": [" gets a bad grade(A) and not  gets a bad grade(B), so More(nervous(A), nervous(B))", ["A gets a bad grade while B does not, so A is more nervous than B"]], "negated": [" gets a bad grade(A) and not  gets a bad grade(B), so not Less(nervous(A), nervous(B))", ["A gets a bad grade while B does not, so A is not less nervous than B"]], "asymmetric_premise": [" gets a bad grade(B) and not  gets a bad grade(A), so Less(nervous(A), nervous(B))", ["B gets a bad grade while A does not, so A is less nervous than B"]], "asymmetric_conclusion": [" gets a bad grade(A) and not  gets a bad grade(B), so Less(nervous(B), nervous(A))", ["A gets a bad grade while B does not, so B is less nervous than A"]], "negated_asymmetric_premise": [" gets a bad grade(B) and not  gets a bad grade(A), so not More(nervous(A), nervous(B))", ["B gets a bad grade while A does not, so A is not more nervous than B"]], "negated_asymmetric_conclusion": [" gets a bad grade(A) and not  gets a bad grade(B), so not More(nervous(B), nervous(A))", ["A gets a bad grade while B does not, so B is not more nervous than A"]]}
{"original": [" likes the sound of their own voice(A) and not  likes the sound of their own voice(B), so More(attentive(A), attentive(B))", ["A likes the sound of their own voice while B does not, so A is more attentive than B"]], "negated": [" likes the sound of their own voice(A) and not  likes the sound of their own voice(B), so not Less(attentive(A), attentive(B))", ["A likes the sound of their own voice while B does not, so A is not less attentive than B"]], "asymmetric_premise": [" likes the sound of their own voice(B) and not  likes the sound of their own voice(A), so Less(attentive(A), attentive(B))", ["B likes the sound of their own voice while A does not, so A is less attentive than B"]], "asymmetric_conclusion": [" likes the sound of their own voice(A) and not  likes the sound of their own voice(B), so Less(attentive(B), attentive(A))", ["A likes the sound of their own voice while B does not, so B is less attentive than A"]], "negated_asymmetric_premise": [" likes the sound of their own voice(B) and not  likes the sound of their own voice(A), so not More(attentive(A), attentive(B))", ["B likes the sound of their own voice while A does not, so A is not more attentive than B"]], "negated_asymmetric_conclusion": [" likes the sound of their own voice(A) and not  likes the sound of their own voice(B), so not More(attentive(B), attentive(A))", ["A likes the sound of their own voice while B does not, so B is not more attentive than A"]]}
{"original": [" waits to get home(A) and not  waits to get home(B), so More(controlling(A), controlling(B))", ["A waits to get home while B does not, so A is more controlling than B"]], "negated": [" waits to get home(A) and not  waits to get home(B), so not Less(controlling(A), controlling(B))", ["A waits to get home while B does not, so A is not less controlling than B"]], "asymmetric_premise": [" waits to get home(B) and not  waits to get home(A), so Less(controlling(A), controlling(B))", ["B waits to get home while A does not, so A is less controlling than B"]], "asymmetric_conclusion": [" waits to get home(A) and not  waits to get home(B), so Less(controlling(B), controlling(A))", ["A waits to get home while B does not, so B is less controlling than A"]], "negated_asymmetric_premise": [" waits to get home(B) and not  waits to get home(A), so not More(controlling(A), controlling(B))", ["B waits to get home while A does not, so A is not more controlling than B"]], "negated_asymmetric_conclusion": [" waits to get home(A) and not  waits to get home(B), so not More(controlling(B), controlling(A))", ["A waits to get home while B does not, so B is not more controlling than A"]]}
{"original": [" quickly turned(A) and not  quickly turned(B), so More(capricious(A), capricious(B))", ["A is able to be turned while B is not, so A is more capricious than B"]], "negated": [" quickly turned(A) and not  quickly turned(B), so not Less(capricious(A), capricious(B))", ["A is able to be quickly turned while B is not, so A is not less capricious than B"]], "asymmetric_premise": [" quickly turned(B) and not  quickly turned(A), so Less(capricious(A), capricious(B))", ["B is able to be turned while A is not, so A is less capricious than B"]], "asymmetric_conclusion": [" quickly turned(A) and not  quickly turned(B), so Less(capricious(B), capricious(A))", ["A is able to be turned while B is not, so B is less capricious than A"]], "negated_asymmetric_premise": [" quickly turned(B) and not  quickly turned(A), so not More(capricious(A), capricious(B))", ["B is able to be turned while A is not, so A is not more capricious than B"]], "negated_asymmetric_conclusion": [" quickly turned(A) and not  quickly turned(B), so not More(capricious(B), capricious(A))", ["A is able to be quickly turned while B is not, so B is not more capricious than A"]]}
{"original": [" turns on another person's heels(A) and not  turns on another person's heels(B), so More(surprised(A), surprised(B))", ["A turns on another person's heels while B does not, so A is more surprised than B"]], "negated": [" turns on another person's heels(A) and not  turns on another person's heels(B), so not Less(surprised(A), surprised(B))", ["A turns on another person's heels while B does not, so A is not less surprised than B"]], "asymmetric_premise": [" turns on another person's heels(B) and not  turns on another person's heels(A), so Less(surprised(A), surprised(B))", ["B turns on another person's heels while A does not, so A is less surprised than B"]], "asymmetric_conclusion": [" turns on another person's heels(A) and not  turns on another person's heels(B), so Less(surprised(B), surprised(A))", ["A turns on another person's heels while B does not, so B is less surprised than A"]], "negated_asymmetric_premise": [" turns on another person's heels(B) and not  turns on another person's heels(A), so not More(surprised(A), surprised(B))", ["B turns on another person's heels while A does not, so A is not more surprised than B"]], "negated_asymmetric_conclusion": [" turns on another person's heels(A) and not  turns on another person's heels(B), so not More(surprised(B), surprised(A))", ["A turns on another person's heels while B does not, so B is not more surprised than A"]]}
{"original": [" makes the coffee(A) and not  makes the coffee(B), so More(skillful(A), skillful(B))", ["A makes the coffee while B does not, so A is more skillful than B"]], "negated": [" makes the coffee(A) and not  makes the coffee(B), so not Less(skillful(A), skillful(B))", ["A makes the coffee while B does not, so A is not less skillful than B"]], "asymmetric_premise": [" makes the coffee(B) and not  makes the coffee(A), so Less(skillful(A), skillful(B))", ["B makes the coffee while A does not, so A is less skillful than B"]], "asymmetric_conclusion": [" makes the coffee(A) and not  makes the coffee(B), so Less(skillful(B), skillful(A))", ["A makes the coffee while B does not, so B is less skillful than A"]], "negated_asymmetric_premise": [" makes the coffee(B) and not  makes the coffee(A), so not More(skillful(A), skillful(B))", ["B makes the coffee while A does not, so A is not more skillful than B"]], "negated_asymmetric_conclusion": [" makes the coffee(A) and not  makes the coffee(B), so not More(skillful(B), skillful(A))", ["A makes the coffee while B does not, so B is not more skillful than A"]]}
{"original": [" uses another person for purposes(A) and not  uses another person for purposes(B), so More(machiavellian(A), machiavellian(B))", ["A uses another person for purposes while B does not, so A is more machiavellian than B"]], "negated": [" uses another person for purposes(A) and not  uses another person for purposes(B), so not Less(machiavellian(A), machiavellian(B))", ["A uses another person for purposes while B does not, so A is not less machiavellian than B"]], "asymmetric_premise": [" uses another person for purposes(B) and not  uses another person for purposes(A), so Less(machiavellian(A), machiavellian(B))", ["B uses another person for purposes while A does not, so A is less machiavellian than B"]], "asymmetric_conclusion": [" uses another person for purposes(A) and not  uses another person for purposes(B), so Less(machiavellian(B), machiavellian(A))", ["A uses another person for purposes while B does not, so B is less machiavellian than A"]], "negated_asymmetric_premise": [" uses another person for purposes(B) and not  uses another person for purposes(A), so not More(machiavellian(A), machiavellian(B))", ["B uses another person for purposes while A does not, so A is not more machiavellian than B"]], "negated_asymmetric_conclusion": [" uses another person for purposes(A) and not  uses another person for purposes(B), so not More(machiavellian(B), machiavellian(A))", ["A uses another person for purposes while B does not, so B is not more machiavellian than A"]]}
{"original": [" walks the rest of the way to school(A) and not  walks the rest of the way to school(B), so More(down-to-earth(A), down-to-earth(B))", ["A walks the rest of the way to school while B does not, so A is more down-to-earth than B"]], "negated": [" walks the rest of the way to school(A) and not  walks the rest of the way to school(B), so not Less(down-to-earth(A), down-to-earth(B))", ["A walks the rest of the way to school while B does not, so A is not less down-to-earth than B"]], "asymmetric_premise": [" walks the rest of the way to school(B) and not  walks the rest of the way to school(A), so Less(down-to-earth(A), down-to-earth(B))", ["B walks the rest of the way to school while A does not, so A is less down-to-earth than B"]], "asymmetric_conclusion": [" walks the rest of the way to school(A) and not  walks the rest of the way to school(B), so Less(down-to-earth(B), down-to-earth(A))", ["A walks the rest of the way to school while B does not, so B is less down-to-earth than A"]], "negated_asymmetric_premise": [" walks the rest of the way to school(B) and not  walks the rest of the way to school(A), so not More(down-to-earth(A), down-to-earth(B))", ["B walks the rest of the way to school while A does not, so A is not more down-to-earth than B"]], "negated_asymmetric_conclusion": [" walks the rest of the way to school(A) and not  walks the rest of the way to school(B), so not More(down-to-earth(B), down-to-earth(A))", ["A walks the rest of the way to school while B does not, so B is not more down-to-earth than A"]]}
{"original": [" works better(A) and not  works better(B), so More(competent(A), competent(B))", ["A works better than B, so A is more competent than B"]], "negated": [" works better(A) and not  works better(B), so not Less(competent(A), competent(B))", ["A works better than B, so A is not less competent than B"]], "asymmetric_premise": [" works better(B) and not  works better(A), so Less(competent(A), competent(B))", ["B works better than A, so A is less competent than B"]], "asymmetric_conclusion": [" works better(A) and not  works better(B), so Less(competent(B), competent(A))", ["A works better than B, so B is less competent than A"]], "negated_asymmetric_premise": [" works better(B) and not  works better(A), so not More(competent(A), competent(B))", ["B works better than A, so A is not more competent than B"]], "negated_asymmetric_conclusion": [" works better(A) and not  works better(B), so not More(competent(B), competent(A))", ["A works better than B, so B is not more competent than A"]]}
{"original": [" takes a closer look(A) and not  takes a closer look(B), so More(attentive(A), attentive(B))", ["A takes a closer look while B does not, so A is more attentive than B"]], "negated": [" takes a closer look(A) and not  takes a closer look(B), so not Less(attentive(A), attentive(B))", ["A takes a closer look while B does not, so A is not less attentive than B"]], "asymmetric_premise": [" takes a closer look(B) and not  takes a closer look(A), so Less(attentive(A), attentive(B))", ["B takes a closer look while A does not, so A is less attentive than B"]], "asymmetric_conclusion": [" takes a closer look(A) and not  takes a closer look(B), so Less(attentive(B), attentive(A))", ["A takes a closer look while B does not, so B is less attentive than A"]], "negated_asymmetric_premise": [" takes a closer look(B) and not  takes a closer look(A), so not More(attentive(A), attentive(B))", ["B takes a closer look while A does not, so A is not more attentive than B"]], "negated_asymmetric_conclusion": [" takes a closer look(A) and not  takes a closer look(B), so not More(attentive(B), attentive(A))", ["A takes a closer look while B does not, so B is not more attentive than A"]]}
{"original": ["More( feels unprepared(A),  feels unprepared(B)), so More(worried(A), worried(B))", ["A feels unprepared while B does not, so A is more worried than B"]], "negated": ["More( feels unprepared(A),  feels unprepared(B)), so not Less(worried(A), worried(B))", ["A feels unprepared more than B, so A is not less worried than B"]], "asymmetric_premise": ["More( feels unprepared(B),  feels unprepared(A)), so Less(worried(A), worried(B))", ["B feels unprepared while A does not, so A is less worried than B"]], "asymmetric_conclusion": ["More( feels unprepared(A),  feels unprepared(B)), so Less(worried(B), worried(A))", ["A feels unprepared while B does not, so B is less worried than A"]], "negated_asymmetric_premise": ["More( feels unprepared(B),  feels unprepared(A)), so not More(worried(A), worried(B))", ["B feels unprepared while A does not, so A is not more worried than B"]], "negated_asymmetric_conclusion": ["More( feels unprepared(A),  feels unprepared(B)), so not More(worried(B), worried(A))", ["A feels unprepared while B does not, so B is not more worried than A"]]}
{"original": [" loses control of the car(A) and not  loses control of the car(B), so More(clumsy(A), clumsy(B))", ["A loses control of the car while B does not, so A is more clumsy than B"]], "negated": [" loses control of the car(A) and not  loses control of the car(B), so not Less(clumsy(A), clumsy(B))", ["A loses control of the car while B does not, so A is not less clumsy than B"]], "asymmetric_premise": [" loses control of the car(B) and not  loses control of the car(A), so Less(clumsy(A), clumsy(B))", ["B loses control of the car while A does not, so A is less clumsy than B"]], "asymmetric_conclusion": [" loses control of the car(A) and not  loses control of the car(B), so Less(clumsy(B), clumsy(A))", ["A loses control of the car while B does not, so B is less clumsy than A"]], "negated_asymmetric_premise": [" loses control of the car(B) and not  loses control of the car(A), so not More(clumsy(A), clumsy(B))", ["B loses control of the car while A does not, so A is not more clumsy than B"]], "negated_asymmetric_conclusion": [" loses control of the car(A) and not  loses control of the car(B), so not More(clumsy(B), clumsy(A))", ["A loses control of the car while B does not, so B is not more clumsy than A"]]}
{"original": [" eats a banana(A) and not  eats a banana(B), so More(hungry(A), hungry(B))", ["A eats a banana while B does not, so A is more hungry than B"]], "negated": [" eats a banana(A) and not  eats a banana(B), so not Less(hungry(A), hungry(B))", ["A eats a banana while B does not, so A is not less hungry than B"]], "asymmetric_premise": [" eats a banana(B) and not  eats a banana(A), so Less(hungry(A), hungry(B))", ["B eats a banana while A does not, so A is less hungry than B"]], "asymmetric_conclusion": [" eats a banana(A) and not  eats a banana(B), so Less(hungry(B), hungry(A))", ["A eats a banana while B does not, so B is less hungry than A"]], "negated_asymmetric_premise": [" eats a banana(B) and not  eats a banana(A), so not More(hungry(A), hungry(B))", ["B eats a banana while A does not, so A is not more hungry than B"]], "negated_asymmetric_conclusion": [" eats a banana(A) and not  eats a banana(B), so not More(hungry(B), hungry(A))", ["A eats a banana while B does not, so B is not more hungry than A"]]}
{"original": [" develops another person model(A) and not  develops another person model(B), so More(productive(A), productive(B))", ["A develops another person model while B does not, so A is more productive than B"]], "negated": [" develops another person model(A) and not  develops another person model(B), so not Less(productive(A), productive(B))", ["A develops another person model while B does not, so A is not less productive than B"]], "asymmetric_premise": [" develops another person model(B) and not  develops another person model(A), so Less(productive(A), productive(B))", ["B develops another person model while A does not, so A is less productive than B"]], "asymmetric_conclusion": [" develops another person model(A) and not  develops another person model(B), so Less(productive(B), productive(A))", ["A develops another person model while B does not, so B is less productive than A"]], "negated_asymmetric_premise": [" develops another person model(B) and not  develops another person model(A), so not More(productive(A), productive(B))", ["B develops another person model while A does not, so A is not more productive than B"]], "negated_asymmetric_conclusion": [" develops another person model(A) and not  develops another person model(B), so not More(productive(B), productive(A))", ["A develops another person model while B does not, so B is not more productive than A"]]}
{"original": [" buys the shoes another person wanted(A) and not  buys the shoes another person wanted(B), so More(loyal(A), loyal(B))", ["A buys the shoes another person wanted while B does not, so A is more loyal than B"]], "negated": [" buys the shoes another person wanted(A) and not  buys the shoes another person wanted(B), so not Less(loyal(A), loyal(B))", ["A buys the shoes another person wanted more than B, so A is not less loyal than B"]], "asymmetric_premise": [" buys the shoes another person wanted(B) and not  buys the shoes another person wanted(A), so Less(loyal(A), loyal(B))", ["B buys the shoes another person wanted while A does not, so A is less loyal than B"]], "asymmetric_conclusion": [" buys the shoes another person wanted(A) and not  buys the shoes another person wanted(B), so Less(loyal(B), loyal(A))", ["A buys the shoes another person wanted while B does not, so B is less loyal than A"]], "negated_asymmetric_premise": [" buys the shoes another person wanted(B) and not  buys the shoes another person wanted(A), so not More(loyal(A), loyal(B))", ["B buys the shoes another person wanted while A does not, so A is not more loyal than B"]], "negated_asymmetric_conclusion": [" buys the shoes another person wanted(A) and not  buys the shoes another person wanted(B), so not More(loyal(B), loyal(A))", ["A buys the shoes another person wanted while B does not, so B is not more loyal than A"]]}
{"original": [" absolutely loved it(A) and not  absolutely loved it(B), so More(appreciative(A), appreciative(B))", ["A absolutely loved it while B did not, so A is more appreciative than B"]], "negated": [" absolutely loved it(A) and not  absolutely loved it(B), so not Less(appreciative(A), appreciative(B))", ["A absolutely loved it while B did not, so A is not less appreciative than B"]], "asymmetric_premise": [" absolutely loved it(B) and not  absolutely loved it(A), so Less(appreciative(A), appreciative(B))", ["B absolutely loved it while A did not, so A is less appreciative than B"]], "asymmetric_conclusion": [" absolutely loved it(A) and not  absolutely loved it(B), so Less(appreciative(B), appreciative(A))", ["A absolutely loved it while B did not, so B is less appreciative than A"]], "negated_asymmetric_premise": [" absolutely loved it(B) and not  absolutely loved it(A), so not More(appreciative(A), appreciative(B))", ["B absolutely loved it while A did not, so A is not more appreciative than B"]], "negated_asymmetric_conclusion": [" absolutely loved it(A) and not  absolutely loved it(B), so not More(appreciative(B), appreciative(A))", ["A absolutely loved it while B did not, so B is not more appreciative than A"]]}
{"original": [" likes it very much(A) and not  likes it very much(B), so More(positive(A), positive(B))", ["A likes it very much while B does not, so A is more positive than B"]], "negated": [" likes it very much(A) and not  likes it very much(B), so not Less(positive(A), positive(B))", ["A likes it very much while B does not, so A is not less positive than B"]], "asymmetric_premise": [" likes it very much(B) and not  likes it very much(A), so Less(positive(A), positive(B))", ["B likes it very much while A does not, so A is less positive than B"]], "asymmetric_conclusion": [" likes it very much(A) and not  likes it very much(B), so Less(positive(B), positive(A))", ["A likes it very much while B does not, so B is less positive than A"]], "negated_asymmetric_premise": [" likes it very much(B) and not  likes it very much(A), so not More(positive(A), positive(B))", ["B likes it very much while A does not, so A is not more positive than B"]], "negated_asymmetric_conclusion": [" likes it very much(A) and not  likes it very much(B), so not More(positive(B), positive(A))", ["A likes it very much while B does not, so B is not more positive than A"]]}
{"original": [" takes part in the discussions(A) and not  takes part in the discussions(B), so More(bright(A), bright(B))", ["A takes part in the discussions while B does not, so A is more bright than B"]], "negated": [" takes part in the discussions(A) and not  takes part in the discussions(B), so not Less(bright(A), bright(B))", ["A takes part in the discussions while B does not, so A is not less bright than B"]], "asymmetric_premise": [" takes part in the discussions(B) and not  takes part in the discussions(A), so Less(bright(A), bright(B))", ["B takes part in the discussions while A does not, so A is less bright than B"]], "asymmetric_conclusion": [" takes part in the discussions(A) and not  takes part in the discussions(B), so Less(bright(B), bright(A))", ["A takes part in the discussions while B does not, so B is less bright than A"]], "negated_asymmetric_premise": [" takes part in the discussions(B) and not  takes part in the discussions(A), so not More(bright(A), bright(B))", ["B takes part in the discussions while A does not, so A is not more bright than B"]], "negated_asymmetric_conclusion": [" takes part in the discussions(A) and not  takes part in the discussions(B), so not More(bright(B), bright(A))", ["A takes part in the discussions while B does not, so B is not more bright than A"]]}
{"original": [" is going to throw up(A) and not  is going to throw up(B), so More(sick(A), sick(B))", ["A is going to throw up more than B, so A is more sick than B"]], "negated": [" is going to throw up(A) and not  is going to throw up(B), so not Less(sick(A), sick(B))", ["A is going to throw up while B is not, so A is not less sick than B"]], "asymmetric_premise": [" is going to throw up(B) and not  is going to throw up(A), so Less(sick(A), sick(B))", ["B is going to throw up while A is not, so A is less sick than B"]], "asymmetric_conclusion": [" is going to throw up(A) and not  is going to throw up(B), so Less(sick(B), sick(A))", ["A is going to throw up while B is not, so B is less sick than A"]], "negated_asymmetric_premise": [" is going to throw up(B) and not  is going to throw up(A), so not More(sick(A), sick(B))", ["B is going to throw up while A is not, so A is not more sick than B"]], "negated_asymmetric_conclusion": [" is going to throw up(A) and not  is going to throw up(B), so not More(sick(B), sick(A))", ["A is going to throw up while B is not, so B is not more sick than A"]]}
{"original": [" keeps an eye on another person(A) and not  keeps an eye on another person(B), so More(wary(A), wary(B))", ["A keeps an eye on another person while B does not, so A is more wary than B"]], "negated": [" keeps an eye on another person(A) and not  keeps an eye on another person(B), so not Less(wary(A), wary(B))", ["A keeps an eye on another person while B does not, so A is not less wary than B"]], "asymmetric_premise": [" keeps an eye on another person(B) and not  keeps an eye on another person(A), so Less(wary(A), wary(B))", ["B keeps an eye on another person while A does not, so A is less wary than B"]], "asymmetric_conclusion": [" keeps an eye on another person(A) and not  keeps an eye on another person(B), so Less(wary(B), wary(A))", ["A keeps an eye on another person while B does not, so B is less wary than A"]], "negated_asymmetric_premise": [" keeps an eye on another person(B) and not  keeps an eye on another person(A), so not More(wary(A), wary(B))", ["B keeps an eye on another person while A does not, so A is not more wary than B"]], "negated_asymmetric_conclusion": [" keeps an eye on another person(A) and not  keeps an eye on another person(B), so not More(wary(B), wary(A))", ["A keeps an eye on another person while B does not, so B is not more wary than A"]]}
{"original": [" cracks the screen(A) and not  cracks the screen(B), so More(irresponsible(A), irresponsible(B))", ["A cracks the screen while B does not, so A is more irresponsible than B"]], "negated": [" cracks the screen(A) and not  cracks the screen(B), so not Less(irresponsible(A), irresponsible(B))", ["A cracks the screen while B does not, so A is not less irresponsible than B"]], "asymmetric_premise": [" cracks the screen(B) and not  cracks the screen(A), so Less(irresponsible(A), irresponsible(B))", ["B cracks the screen while A does not, so A is less irresponsible than B"]], "asymmetric_conclusion": [" cracks the screen(A) and not  cracks the screen(B), so Less(irresponsible(B), irresponsible(A))", ["A cracks the screen while B does not, so B is less irresponsible than A"]], "negated_asymmetric_premise": [" cracks the screen(B) and not  cracks the screen(A), so not More(irresponsible(A), irresponsible(B))", ["B cracks the screen while A does not, so A is not more irresponsible than B"]], "negated_asymmetric_conclusion": [" cracks the screen(A) and not  cracks the screen(B), so not More(irresponsible(B), irresponsible(A))", ["A cracks the screen while B does not, so B is not more irresponsible than A"]]}
{"original": ["More( looks brand new(A),  looks brand new(B)), so More(handsome(A), handsome(B))", ["A looks brand new while B does not, so A is more handsome than B"]], "negated": ["More( looks brand new(A),  looks brand new(B)), so not Less(handsome(A), handsome(B))", ["A looks brand new more than B, so A is not less handsome than B"]], "asymmetric_premise": ["More( looks brand new(B),  looks brand new(A)), so Less(handsome(A), handsome(B))", ["B looks brand new, A does not, so A is less handsome than B"]], "asymmetric_conclusion": ["More( looks brand new(A),  looks brand new(B)), so Less(handsome(B), handsome(A))", ["A looks brand new, B does not, so B is less handsome than A"]], "negated_asymmetric_premise": ["More( looks brand new(B),  looks brand new(A)), so not More(handsome(A), handsome(B))", ["B looks brand new while A does not, so A is not more handsome than B"]], "negated_asymmetric_conclusion": ["More( looks brand new(A),  looks brand new(B)), so not More(handsome(B), handsome(A))", ["A looks brand new while B does not, so B is not more handsome than A"]]}
{"original": [" loves going to the zoo(A) and not  loves going to the zoo(B), so More(curious(A), curious(B))", ["A loves going to the zoo while B does not, so A is more curious than B"]], "negated": [" loves going to the zoo(A) and not  loves going to the zoo(B), so not Less(curious(A), curious(B))", ["A loves going to the zoo more than B, so A is not less curious than B"]], "asymmetric_premise": [" loves going to the zoo(B) and not  loves going to the zoo(A), so Less(curious(A), curious(B))", ["B loves going to the zoo while A does not, so A is less curious than B"]], "asymmetric_conclusion": [" loves going to the zoo(A) and not  loves going to the zoo(B), so Less(curious(B), curious(A))", ["A loves going to the zoo while B does not, so B is less curious than A"]], "negated_asymmetric_premise": [" loves going to the zoo(B) and not  loves going to the zoo(A), so not More(curious(A), curious(B))", ["B loves going to the zoo more than A, so A is not more curious than B"]], "negated_asymmetric_conclusion": [" loves going to the zoo(A) and not  loves going to the zoo(B), so not More(curious(B), curious(A))", ["A loves going to the zoo more than B, so B is not more curious than A"]]}
{"original": [" is really hungry(A) and not  is really hungry(B), so More(uncomfortable(A), uncomfortable(B))", ["A is really hungry while B is not, so A is more uncomfortable than B"]], "negated": [" is really hungry(A) and not  is really hungry(B), so not Less(uncomfortable(A), uncomfortable(B))", ["A is really hungry while B is not, so A is not less uncomfortable than B"]], "asymmetric_premise": [" is really hungry(B) and not  is really hungry(A), so Less(uncomfortable(A), uncomfortable(B))", ["B is really hungry while A is not, so A is less uncomfortable than B"]], "asymmetric_conclusion": [" is really hungry(A) and not  is really hungry(B), so Less(uncomfortable(B), uncomfortable(A))", ["A is really hungry while B is not, so B is less uncomfortable than A"]], "negated_asymmetric_premise": [" is really hungry(B) and not  is really hungry(A), so not More(uncomfortable(A), uncomfortable(B))", ["B is really hungry while A is not, so A is not more uncomfortable than B"]], "negated_asymmetric_conclusion": [" is really hungry(A) and not  is really hungry(B), so not More(uncomfortable(B), uncomfortable(A))", ["A is really hungry while B is not, so B is not more uncomfortable than A"]]}
{"original": [" gets their moneys worth(A) and not  gets their moneys worth(B), so More(thrifty(A), thrifty(B))", ["A gets their moneys worth while B does not, so A is more thrifty than B"]], "negated": [" gets their moneys worth(A) and not  gets their moneys worth(B), so not Less(thrifty(A), thrifty(B))", ["A gets their moneys worth while B does not, so A is not less thrifty than B"]], "asymmetric_premise": [" gets their moneys worth(B) and not  gets their moneys worth(A), so Less(thrifty(A), thrifty(B))", ["B gets their moneys worth while A does not, so A is less thrifty than B"]], "asymmetric_conclusion": [" gets their moneys worth(A) and not  gets their moneys worth(B), so Less(thrifty(B), thrifty(A))", ["A gets their moneys worth while B does not, so B is less thrifty than A"]], "negated_asymmetric_premise": [" gets their moneys worth(B) and not  gets their moneys worth(A), so not More(thrifty(A), thrifty(B))", ["B gets their moneys worth more than A, so A is not more thrifty than B"]], "negated_asymmetric_conclusion": [" gets their moneys worth(A) and not  gets their moneys worth(B), so not More(thrifty(B), thrifty(A))", ["A gets their moneys worth more than B, so B is not more thrifty than A"]]}
{"original": [" collects cans(A) and not  collects cans(B), so More(accountable(A), accountable(B))", ["A collects cans while B does not, so A is more accountable than B"]], "negated": [" collects cans(A) and not  collects cans(B), so not Less(accountable(A), accountable(B))", ["A collects cans while B does not, so A is not less accountable than B"]], "asymmetric_premise": [" collects cans(B) and not  collects cans(A), so Less(accountable(A), accountable(B))", ["B collects cans while A does not, so A is less accountable than B"]], "asymmetric_conclusion": [" collects cans(A) and not  collects cans(B), so Less(accountable(B), accountable(A))", ["A collects cans while B does not, so B is less accountable than A"]], "negated_asymmetric_premise": [" collects cans(B) and not  collects cans(A), so not More(accountable(A), accountable(B))", ["B collects cans while A does not, so A is not more accountable than B"]], "negated_asymmetric_conclusion": [" collects cans(A) and not  collects cans(B), so not More(accountable(B), accountable(A))", ["A collects cans while B does not, so B is not more accountable than A"]]}
{"original": [" wakes up one day(A) and not  wakes up one day(B), so More(ready(A), ready(B))", ["A wakes up one day while B does not, so A is more ready than B"]], "negated": [" wakes up one day(A) and not  wakes up one day(B), so not Less(ready(A), ready(B))", ["A wakes up one day more than B, so A is not less ready than B"]], "asymmetric_premise": [" wakes up one day(B) and not  wakes up one day(A), so Less(ready(A), ready(B))", ["B wakes up one day while A does not, so A is less ready than B"]], "asymmetric_conclusion": [" wakes up one day(A) and not  wakes up one day(B), so Less(ready(B), ready(A))", ["A wakes up one day while B does not, so B is less ready than A"]], "negated_asymmetric_premise": [" wakes up one day(B) and not  wakes up one day(A), so not More(ready(A), ready(B))", ["B wakes up one day while A does not, so A is not more ready than B"]], "negated_asymmetric_conclusion": [" wakes up one day(A) and not  wakes up one day(B), so not More(ready(B), ready(A))", ["A wakes up one day while B does not, so B is not more ready than A"]]}
{"original": [" pays another person back(A) and not  pays another person back(B), so More(dependable(A), dependable(B))", ["A pays another person back while B does not, so A is more dependable than B"]], "negated": [" pays another person back(A) and not  pays another person back(B), so not Less(dependable(A), dependable(B))", ["A pays another person back while B does not, so A is not less dependable than B"]], "asymmetric_premise": [" pays another person back(B) and not  pays another person back(A), so Less(dependable(A), dependable(B))", ["B pays another person back while A does not, so A is less dependable than B"]], "asymmetric_conclusion": [" pays another person back(A) and not  pays another person back(B), so Less(dependable(B), dependable(A))", ["A pays another person back while B does not, so B is less dependable than A"]], "negated_asymmetric_premise": [" pays another person back(B) and not  pays another person back(A), so not More(dependable(A), dependable(B))", ["B pays another person back while A does not, so A is not more dependable than B"]], "negated_asymmetric_conclusion": [" pays another person back(A) and not  pays another person back(B), so not More(dependable(B), dependable(A))", ["A pays another person back while B does not, so B is not more dependable than A"]]}
{"original": [" eats the food(A) and not  eats the food(B), so More(depressed(A), depressed(B))", ["A eats the food while B does not, so A is more depressed than B"]], "negated": [" eats the food(A) and not  eats the food(B), so not Less(depressed(A), depressed(B))", ["A eats the food while B does not, so A is not less depressed than B"]], "asymmetric_premise": [" eats the food(B) and not  eats the food(A), so Less(depressed(A), depressed(B))", ["B eats the food while A does not, so A is less depressed than B"]], "asymmetric_conclusion": [" eats the food(A) and not  eats the food(B), so Less(depressed(B), depressed(A))", ["A eats the food while B does not, so B is less depressed than A"]], "negated_asymmetric_premise": [" eats the food(B) and not  eats the food(A), so not More(depressed(A), depressed(B))", ["B eats the food while A does not, so A is not more depressed than B"]], "negated_asymmetric_conclusion": [" eats the food(A) and not  eats the food(B), so not More(depressed(B), depressed(A))", ["A eats the food while B does not, so B is not more depressed than A"]]}
{"original": [" is very proud of another person's accomplishment(A) and not  is very proud of another person's accomplishment(B), so More(delighted(A), delighted(B))", ["A is very proud of another person's accomplishment while B is not, so A is more delighted than B"]], "negated": [" is very proud of another person's accomplishment(A) and not  is very proud of another person's accomplishment(B), so not Less(delighted(A), delighted(B))", ["A is very proud of another person's accomplishment while B is not, so A is not less delighted than B"]], "asymmetric_premise": [" is very proud of another person's accomplishment(B) and not  is very proud of another person's accomplishment(A), so Less(delighted(A), delighted(B))", ["B is very proud of another person's accomplishment while A is not, so A is less delighted than B"]], "asymmetric_conclusion": [" is very proud of another person's accomplishment(A) and not  is very proud of another person's accomplishment(B), so Less(delighted(B), delighted(A))", ["A is very proud of another person's accomplishment while B is not, so B is less delighted than A"]], "negated_asymmetric_premise": [" is very proud of another person's accomplishment(B) and not  is very proud of another person's accomplishment(A), so not More(delighted(A), delighted(B))", ["B is very proud of another person's accomplishment while A is not, so A is not more delighted than B"]], "negated_asymmetric_conclusion": [" is very proud of another person's accomplishment(A) and not  is very proud of another person's accomplishment(B), so not More(delighted(B), delighted(A))", ["A is very proud of another person's accomplishment while B is not, so B is not more delighted than A"]]}
{"original": [" plays bingo(A) and not  plays bingo(B), so More(playful(A), playful(B))", ["A plays bingo while B does not, so A is more playful than B"]], "negated": [" plays bingo(A) and not  plays bingo(B), so not Less(playful(A), playful(B))", ["A plays bingo while B does not, so A is not less playful than B"]], "asymmetric_premise": [" plays bingo(B) and not  plays bingo(A), so Less(playful(A), playful(B))", ["B plays bingo while A does not, so A is less playful than B"]], "asymmetric_conclusion": [" plays bingo(A) and not  plays bingo(B), so Less(playful(B), playful(A))", ["A plays bingo while B does not, so B is less playful than A"]], "negated_asymmetric_premise": [" plays bingo(B) and not  plays bingo(A), so not More(playful(A), playful(B))", ["B plays bingo while A does not, so A is not more playful than B"]], "negated_asymmetric_conclusion": [" plays bingo(A) and not  plays bingo(B), so not More(playful(B), playful(A))", ["A plays bingo while B does not, so B is not more playful than A"]]}
{"original": ["More( is more careful next time(A),  is more careful next time(B)), so More(cautious(A), cautious(B))", ["A is more careful next time than B, so A is more cautious than B"]], "negated": ["More( is more careful next time(A),  is more careful next time(B)), so not Less(cautious(A), cautious(B))", ["A is more careful next time than B, so A is not less cautious than B"]], "asymmetric_premise": ["More( is more careful next time(B),  is more careful next time(A)), so Less(cautious(A), cautious(B))", ["B is more careful next time than A, so A is less cautious than B"]], "asymmetric_conclusion": ["More( is more careful next time(A),  is more careful next time(B)), so Less(cautious(B), cautious(A))", ["A is more careful next time than B, so B is less cautious than A"]], "negated_asymmetric_premise": ["More( is more careful next time(B),  is more careful next time(A)), so not More(cautious(A), cautious(B))", ["B is more careful next time than A, so A is not more cautious than B"]], "negated_asymmetric_conclusion": ["More( is more careful next time(A),  is more careful next time(B)), so not More(cautious(B), cautious(A))", ["A is more careful next time than B, so B is not more cautious than A"]]}
{"original": [" is scared of the dark(A) and not  is scared of the dark(B), so More(immature(A), immature(B))", ["A is scared of the dark while B is not, so A is more immature than B"]], "negated": [" is scared of the dark(A) and not  is scared of the dark(B), so not Less(immature(A), immature(B))", ["A is scared of the dark while B is not, so A is not less immature than B"]], "asymmetric_premise": [" is scared of the dark(B) and not  is scared of the dark(A), so Less(immature(A), immature(B))", ["B is scared of the dark while A is not, so A is less immature than B"]], "asymmetric_conclusion": [" is scared of the dark(A) and not  is scared of the dark(B), so Less(immature(B), immature(A))", ["A is scared of the dark while B is not, so B is less immature than A"]], "negated_asymmetric_premise": [" is scared of the dark(B) and not  is scared of the dark(A), so not More(immature(A), immature(B))", ["B is scared of the dark while A is not, so A is not more immature than B"]], "negated_asymmetric_conclusion": [" is scared of the dark(A) and not  is scared of the dark(B), so not More(immature(B), immature(A))", ["A is scared of the dark while B is not, so B is not more immature than A"]]}
{"original": [" kills another person's husband(A) and not  kills another person's husband(B), so More(cruel(A), cruel(B))", ["A kills another person's husband while B does not, so A is more cruel than B"]], "negated": [" kills another person's husband(A) and not  kills another person's husband(B), so not Less(cruel(A), cruel(B))", ["A kills another person's husband while B does not, so A is not less cruel than B"]], "asymmetric_premise": [" kills another person's husband(B) and not  kills another person's husband(A), so Less(cruel(A), cruel(B))", ["B kills another person's husband while A does not, so A is less cruel than B"]], "asymmetric_conclusion": [" kills another person's husband(A) and not  kills another person's husband(B), so Less(cruel(B), cruel(A))", ["A kills another person's husband while B does not, so B is less cruel than A"]], "negated_asymmetric_premise": [" kills another person's husband(B) and not  kills another person's husband(A), so not More(cruel(A), cruel(B))", ["B kills another person's husband while A does not, so A is not more cruel than B"]], "negated_asymmetric_conclusion": [" kills another person's husband(A) and not  kills another person's husband(B), so not More(cruel(B), cruel(A))", ["A kills another person's husband while B does not, so B is not more cruel than A"]]}
{"original": [" works for weeks(A) and not  works for weeks(B), so More(hardworking(A), hardworking(B))", ["A works for weeks while B does not, so A is more hardworking than B"]], "negated": [" works for weeks(A) and not  works for weeks(B), so not Less(hardworking(A), hardworking(B))", ["A works for weeks while B does not, so A is not less hardworking than B"]], "asymmetric_premise": [" works for weeks(B) and not  works for weeks(A), so Less(hardworking(A), hardworking(B))", ["B works for weeks while A does not, so A is less hardworking than B"]], "asymmetric_conclusion": [" works for weeks(A) and not  works for weeks(B), so Less(hardworking(B), hardworking(A))", ["A works for weeks while B does not, so B is less hardworking than A"]], "negated_asymmetric_premise": [" works for weeks(B) and not  works for weeks(A), so not More(hardworking(A), hardworking(B))", ["B works for weeks while A does not, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": [" works for weeks(A) and not  works for weeks(B), so not More(hardworking(B), hardworking(A))", ["A works for weeks while B does not, so B is not more hardworking than A"]]}
{"original": [" goes to the store with another person's mother(A) and not  goes to the store with another person's mother(B), so More(helpful(A), helpful(B))", ["A goes to the store with another person's mother while B does not, so A is more helpful than B"]], "negated": [" goes to the store with another person's mother(A) and not  goes to the store with another person's mother(B), so not Less(helpful(A), helpful(B))", ["A goes to the store with another person's mother while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" goes to the store with another person's mother(B) and not  goes to the store with another person's mother(A), so Less(helpful(A), helpful(B))", ["B goes to the store with another person's mother while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" goes to the store with another person's mother(A) and not  goes to the store with another person's mother(B), so Less(helpful(B), helpful(A))", ["A goes to the store with another person's mother while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" goes to the store with another person's mother(B) and not  goes to the store with another person's mother(A), so not More(helpful(A), helpful(B))", ["B goes to the store with another person's mother while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" goes to the store with another person's mother(A) and not  goes to the store with another person's mother(B), so not More(helpful(B), helpful(A))", ["A goes to the store with another person's mother while B does not, so B is not more helpful than A"]]}
{"original": [" has a heart(A) and not  has a heart(B), so More(gentle(A), gentle(B))", ["A has a heart while B does not, so A is more gentle than B"]], "negated": [" has a heart(A) and not  has a heart(B), so not Less(gentle(A), gentle(B))", ["A has a heart while B does not, so A is not less gentle than B"]], "asymmetric_premise": [" has a heart(B) and not  has a heart(A), so Less(gentle(A), gentle(B))", ["B has a heart while A does not, so A is less gentle than B"]], "asymmetric_conclusion": [" has a heart(A) and not  has a heart(B), so Less(gentle(B), gentle(A))", ["A has a heart while B does not, so B is less gentle than A"]], "negated_asymmetric_premise": [" has a heart(B) and not  has a heart(A), so not More(gentle(A), gentle(B))", ["B has a heart while A does not, so A is not more gentle than B"]], "negated_asymmetric_conclusion": [" has a heart(A) and not  has a heart(B), so not More(gentle(B), gentle(A))", ["A has a heart while B does not, so B is not more gentle than A"]]}
{"original": [" keeps their mouth shut(A) and not  keeps their mouth shut(B), so More(agreeable(A), agreeable(B))", ["A keeps their mouth shut while B does not, so A is more agreeable than B"]], "negated": [" keeps their mouth shut(A) and not  keeps their mouth shut(B), so not Less(agreeable(A), agreeable(B))", ["A keeps their mouth shut while B does not, so A is not less agreeable than B"]], "asymmetric_premise": [" keeps their mouth shut(B) and not  keeps their mouth shut(A), so Less(agreeable(A), agreeable(B))", ["B keeps their mouth shut while A does not, so A is less agreeable than B"]], "asymmetric_conclusion": [" keeps their mouth shut(A) and not  keeps their mouth shut(B), so Less(agreeable(B), agreeable(A))", ["A keeps their mouth shut while B does not, so B is less agreeable than A"]], "negated_asymmetric_premise": [" keeps their mouth shut(B) and not  keeps their mouth shut(A), so not More(agreeable(A), agreeable(B))", ["B keeps their mouth shut while A does not, so A is not more agreeable than B"]], "negated_asymmetric_conclusion": [" keeps their mouth shut(A) and not  keeps their mouth shut(B), so not More(agreeable(B), agreeable(A))", ["A keeps their mouth shut while B does not, so B is not more agreeable than A"]]}
{"original": [" finishes another person's work(A) and not  finishes another person's work(B), so More(determined(A), determined(B))", ["A finishes another person's work while B does not, so A is more determined than B"]], "negated": [" finishes another person's work(A) and not  finishes another person's work(B), so not Less(determined(A), determined(B))", ["A finishes another person's work while B does not, so A is not less determined than B"]], "asymmetric_premise": [" finishes another person's work(B) and not  finishes another person's work(A), so Less(determined(A), determined(B))", ["B finishes another person's work while A does not, so A is less determined than B"]], "asymmetric_conclusion": [" finishes another person's work(A) and not  finishes another person's work(B), so Less(determined(B), determined(A))", ["A finishes another person's work while B does not, so B is less determined than A"]], "negated_asymmetric_premise": [" finishes another person's work(B) and not  finishes another person's work(A), so not More(determined(A), determined(B))", ["B finishes another person's work while A does not, so A is not more determined than B"]], "negated_asymmetric_conclusion": [" finishes another person's work(A) and not  finishes another person's work(B), so not More(determined(B), determined(A))", ["A finishes another person's work while B does not, so B is not more determined than A"]]}
{"original": [" needs to find a job(A) and not  needs to find a job(B), so More(in debt(A), in debt(B))", ["A needs to find a job while B does not, so A is more in debt than B"]], "negated": [" needs to find a job(A) and not  needs to find a job(B), so not Less(in debt(A), in debt(B))", ["A needs to find a job while B does not, so A is not less in debt than B"]], "asymmetric_premise": [" needs to find a job(B) and not  needs to find a job(A), so Less(in debt(A), in debt(B))", ["B needs to find a job while A does not, so A is less in debt than B"]], "asymmetric_conclusion": [" needs to find a job(A) and not  needs to find a job(B), so Less(in debt(B), in debt(A))", ["A needs to find a job while B does not, so B is less in debt than A"]], "negated_asymmetric_premise": [" needs to find a job(B) and not  needs to find a job(A), so not More(in debt(A), in debt(B))", ["B needs to find a job more than A, so A is not more in debt than B"]], "negated_asymmetric_conclusion": [" needs to find a job(A) and not  needs to find a job(B), so not More(in debt(B), in debt(A))", ["A needs to find a job more than B, so B is not more in debt than A"]]}
{"original": [" would love another person(A) and not  would love another person(B), so More(amiable(A), amiable(B))", ["A would love another person more than B, so A is more amiable than B"]], "negated": [" would love another person(A) and not  would love another person(B), so not Less(amiable(A), amiable(B))", ["A would love another person more than B, so A is not less amiable than B"]], "asymmetric_premise": [" would love another person(B) and not  would love another person(A), so Less(amiable(A), amiable(B))", ["B would love another person more than A, so A is less amiable than B"]], "asymmetric_conclusion": [" would love another person(A) and not  would love another person(B), so Less(amiable(B), amiable(A))", ["A would love another person more than B, so B is less amiable than A"]], "negated_asymmetric_premise": [" would love another person(B) and not  would love another person(A), so not More(amiable(A), amiable(B))", ["B would love another person more than A, so A is not more amiable than B"]], "negated_asymmetric_conclusion": [" would love another person(A) and not  would love another person(B), so not More(amiable(B), amiable(A))", ["A would love another person more than B, so B is not more amiable than A"]]}
{"original": [" eats too much candy(A) and not  eats too much candy(B), so More(sick(A), sick(B))", ["A eats too much candy while B does not, so A is more sick than B"]], "negated": [" eats too much candy(A) and not  eats too much candy(B), so not Less(sick(A), sick(B))", ["A eats too much candy while B does not, so A is not less sick than B"]], "asymmetric_premise": [" eats too much candy(B) and not  eats too much candy(A), so Less(sick(A), sick(B))", ["B eats too much candy while A does not, so A is less sick than B"]], "asymmetric_conclusion": [" eats too much candy(A) and not  eats too much candy(B), so Less(sick(B), sick(A))", ["A eats too much candy while B does not, so B is less sick than A"]], "negated_asymmetric_premise": [" eats too much candy(B) and not  eats too much candy(A), so not More(sick(A), sick(B))", ["B eats too much candy while A does not, so A is not more sick than B"]], "negated_asymmetric_conclusion": [" eats too much candy(A) and not  eats too much candy(B), so not More(sick(B), sick(A))", ["A eats too much candy while B does not, so B is not more sick than A"]]}
{"original": [" watches their show(A) and not  watches their show(B), so More(entertained(A), entertained(B))", ["A watches their show while B does not, so A is more entertained than B"]], "negated": [" watches their show(A) and not  watches their show(B), so not Less(entertained(A), entertained(B))", ["A watches their show while B does not, so A is not less entertained than B"]], "asymmetric_premise": [" watches their show(B) and not  watches their show(A), so Less(entertained(A), entertained(B))", ["B watches their show while A does not, so A is less entertained than B"]], "asymmetric_conclusion": [" watches their show(A) and not  watches their show(B), so Less(entertained(B), entertained(A))", ["A watches their show while B does not, so B is less entertained than A"]], "negated_asymmetric_premise": [" watches their show(B) and not  watches their show(A), so not More(entertained(A), entertained(B))", ["B watches their show while A does not, so A is not more entertained than B"]], "negated_asymmetric_conclusion": [" watches their show(A) and not  watches their show(B), so not More(entertained(B), entertained(A))", ["A watches their show while B does not, so B is not more entertained than A"]]}
{"original": [" gets an invitation(A) and not  gets an invitation(B), so More(enthusiastic(A), enthusiastic(B))", ["A gets an invitation while B does not, so A is more enthusiastic than B"]], "negated": [" gets an invitation(A) and not  gets an invitation(B), so not Less(enthusiastic(A), enthusiastic(B))", ["A gets an invitation while B does not, so A is not less enthusiastic than B"]], "asymmetric_premise": [" gets an invitation(B) and not  gets an invitation(A), so Less(enthusiastic(A), enthusiastic(B))", ["B gets an invitation while A does not, so A is less enthusiastic than B"]], "asymmetric_conclusion": [" gets an invitation(A) and not  gets an invitation(B), so Less(enthusiastic(B), enthusiastic(A))", ["A gets an invitation while B does not, so B is less enthusiastic than A"]], "negated_asymmetric_premise": [" gets an invitation(B) and not  gets an invitation(A), so not More(enthusiastic(A), enthusiastic(B))", ["B gets an invitation while A does not, so A is not more enthusiastic than B"]], "negated_asymmetric_conclusion": [" gets an invitation(A) and not  gets an invitation(B), so not More(enthusiastic(B), enthusiastic(A))", ["A gets an invitation while B does not, so B is not more enthusiastic than A"]]}
{"original": [" exercises their power(A) and not  exercises their power(B), so More(powerful(A), powerful(B))", ["A exercises their power while B does not, so A is more powerful than B"]], "negated": [" exercises their power(A) and not  exercises their power(B), so not Less(powerful(A), powerful(B))", ["A exercises their power while B does not, so A is not less powerful than B"]], "asymmetric_premise": [" exercises their power(B) and not  exercises their power(A), so Less(powerful(A), powerful(B))", ["B exercises their power while A does not, so A is less powerful than B"]], "asymmetric_conclusion": [" exercises their power(A) and not  exercises their power(B), so Less(powerful(B), powerful(A))", ["A exercises their power while B does not, so B is less powerful than A"]], "negated_asymmetric_premise": [" exercises their power(B) and not  exercises their power(A), so not More(powerful(A), powerful(B))", ["B exercises their power while A does not, so A is not more powerful than B"]], "negated_asymmetric_conclusion": [" exercises their power(A) and not  exercises their power(B), so not More(powerful(B), powerful(A))", ["A exercises their power while B does not, so B is not more powerful than A"]]}
{"original": [" throws up another person's hands(A) and not  throws up another person's hands(B), so More(angry(A), angry(B))", ["A throws up another person's hands while B does not, so A is more angry than B"]], "negated": [" throws up another person's hands(A) and not  throws up another person's hands(B), so not Less(angry(A), angry(B))", ["A throws up another person's hands while B does not, so A is not less angry than B"]], "asymmetric_premise": [" throws up another person's hands(B) and not  throws up another person's hands(A), so Less(angry(A), angry(B))", ["B throws up another person's hands while A does not, so A is less angry than B"]], "asymmetric_conclusion": [" throws up another person's hands(A) and not  throws up another person's hands(B), so Less(angry(B), angry(A))", ["A throws up another person's hands while B does not, so B is less angry than A"]], "negated_asymmetric_premise": [" throws up another person's hands(B) and not  throws up another person's hands(A), so not More(angry(A), angry(B))", ["B throws up another person's hands while A does not, so A is not more angry than B"]], "negated_asymmetric_conclusion": [" throws up another person's hands(A) and not  throws up another person's hands(B), so not More(angry(B), angry(A))", ["A throws up another person's hands while B does not, so B is not more angry than A"]]}
{"original": [" feels like crap(A) and not  feels like crap(B), so More(fluish(A), fluish(B))", ["A feels like crap while B does not, so A is more fluish than B"]], "negated": [" feels like crap(A) and not  feels like crap(B), so not Less(fluish(A), fluish(B))", ["A feels like crap while B does not, so A is not less fluish than B"]], "asymmetric_premise": [" feels like crap(B) and not  feels like crap(A), so Less(fluish(A), fluish(B))", ["B feels like crap while A does not, so A is less fluish than B"]], "asymmetric_conclusion": [" feels like crap(A) and not  feels like crap(B), so Less(fluish(B), fluish(A))", ["A feels like crap while B does not, so B is less fluish than A"]], "negated_asymmetric_premise": [" feels like crap(B) and not  feels like crap(A), so not More(fluish(A), fluish(B))", ["B feels like crap while A does not, so A is not more fluish than B"]], "negated_asymmetric_conclusion": [" feels like crap(A) and not  feels like crap(B), so not More(fluish(B), fluish(A))", ["A feels like crap while B does not, so B is not more fluish than A"]]}
{"original": [" considers another person example(A) and not  considers another person example(B), so More(observing(A), observing(B))", ["A considers another person example more than B, so A is more likely to be observing than B"]], "negated": [" considers another person example(A) and not  considers another person example(B), so not Less(observing(A), observing(B))", ["A considers another person example more than B, so A is not less observing than B"]], "asymmetric_premise": [" considers another person example(B) and not  considers another person example(A), so Less(observing(A), observing(B))", ["B considers another person example more than A, so A is less likely to be observing than B"]], "asymmetric_conclusion": [" considers another person example(A) and not  considers another person example(B), so Less(observing(B), observing(A))", ["A considers another person example more than B, so B is less likely to be observing than A"]], "negated_asymmetric_premise": [" considers another person example(B) and not  considers another person example(A), so not More(observing(A), observing(B))", ["B considers another person example more than A, so A is not more observing than B"]], "negated_asymmetric_conclusion": [" considers another person example(A) and not  considers another person example(B), so not More(observing(B), observing(A))", ["A considers another person example more than B, so B is not more observing than A"]]}
{"original": [" beats the bishop(A) and not  beats the bishop(B), so More(insulted(A), insulted(B))", ["A beats the bishop while B does not, so A is more insulted than B"]], "negated": [" beats the bishop(A) and not  beats the bishop(B), so not Less(insulted(A), insulted(B))", ["A beats the bishop while B does not, so A is not less insulted than B"]], "asymmetric_premise": [" beats the bishop(B) and not  beats the bishop(A), so Less(insulted(A), insulted(B))", ["B beats the bishop while A does not, so A is less insulted than B"]], "asymmetric_conclusion": [" beats the bishop(A) and not  beats the bishop(B), so Less(insulted(B), insulted(A))", ["A beats the bishop while B does not, so B is less insulted than A"]], "negated_asymmetric_premise": [" beats the bishop(B) and not  beats the bishop(A), so not More(insulted(A), insulted(B))", ["B beats the bishop while A does not, so A is not more insulted than B"]], "negated_asymmetric_conclusion": [" beats the bishop(A) and not  beats the bishop(B), so not More(insulted(B), insulted(A))", ["A beats the bishop while B does not, so B is not more insulted than A"]]}
{"original": [" loses one(A) and not  loses one(B), so More(careless(A), careless(B))", ["A loses one while B does not, so A is more careless than B"]], "negated": [" loses one(A) and not  loses one(B), so not Less(careless(A), careless(B))", ["A loses one while B does not, so A is not less careless than B"]], "asymmetric_premise": [" loses one(B) and not  loses one(A), so Less(careless(A), careless(B))", ["B loses one while A does not, so A is less careless than B"]], "asymmetric_conclusion": [" loses one(A) and not  loses one(B), so Less(careless(B), careless(A))", ["A loses one while B does not, so B is less careless than A"]], "negated_asymmetric_premise": [" loses one(B) and not  loses one(A), so not More(careless(A), careless(B))", ["B loses one while A does not, so A is not more careless than B"]], "negated_asymmetric_conclusion": [" loses one(A) and not  loses one(B), so not More(careless(B), careless(A))", ["A loses one while B does not, so B is not more careless than A"]]}
{"original": [" works out their salvation(A) and not  works out their salvation(B), so More(aware(A), aware(B))", ["A works out their salvation while B does not, so A is more aware than B"]], "negated": [" works out their salvation(A) and not  works out their salvation(B), so not Less(aware(A), aware(B))", ["A works out their salvation while B does not, so A is not less aware than B"]], "asymmetric_premise": [" works out their salvation(B) and not  works out their salvation(A), so Less(aware(A), aware(B))", ["B works out their salvation while A does not, so A is less aware than B"]], "asymmetric_conclusion": [" works out their salvation(A) and not  works out their salvation(B), so Less(aware(B), aware(A))", ["A works out their salvation while B does not, so B is less aware than A"]], "negated_asymmetric_premise": [" works out their salvation(B) and not  works out their salvation(A), so not More(aware(A), aware(B))", ["B works out their salvation while A does not, so A is not more aware than B"]], "negated_asymmetric_conclusion": [" works out their salvation(A) and not  works out their salvation(B), so not More(aware(B), aware(A))", ["A works out their salvation while B does not, so B is not more aware than A"]]}
{"original": [" gets another person's wallet back(A) and not  gets another person's wallet back(B), so More(helpful(A), helpful(B))", ["A gets another person's wallet back while B does not, so A is more helpful than B"]], "negated": [" gets another person's wallet back(A) and not  gets another person's wallet back(B), so not Less(helpful(A), helpful(B))", ["A gets another person's wallet back while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" gets another person's wallet back(B) and not  gets another person's wallet back(A), so Less(helpful(A), helpful(B))", ["B gets another person's wallet back while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" gets another person's wallet back(A) and not  gets another person's wallet back(B), so Less(helpful(B), helpful(A))", ["A gets another person's wallet back while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" gets another person's wallet back(B) and not  gets another person's wallet back(A), so not More(helpful(A), helpful(B))", ["B gets another person's wallet back while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" gets another person's wallet back(A) and not  gets another person's wallet back(B), so not More(helpful(B), helpful(A))", ["A gets another person's wallet back while B does not, so B is not more helpful than A"]]}
{"original": [" misses their stop(A) and not  misses their stop(B), so More(distracted(A), distracted(B))", ["A misses their stop while B does not, so A is more distracted than B"]], "negated": [" misses their stop(A) and not  misses their stop(B), so not Less(distracted(A), distracted(B))", ["A misses their stop while B does not, so A is not less distracted than B"]], "asymmetric_premise": [" misses their stop(B) and not  misses their stop(A), so Less(distracted(A), distracted(B))", ["B misses their stop while A does not, so A is less distracted than B"]], "asymmetric_conclusion": [" misses their stop(A) and not  misses their stop(B), so Less(distracted(B), distracted(A))", ["A misses their stop while B does not, so B is less distracted than A"]], "negated_asymmetric_premise": [" misses their stop(B) and not  misses their stop(A), so not More(distracted(A), distracted(B))", ["B misses their stop while A does not, so A is not more distracted than B"]], "negated_asymmetric_conclusion": [" misses their stop(A) and not  misses their stop(B), so not More(distracted(B), distracted(A))", ["A misses their stop while B does not, so B is not more distracted than A"]]}
{"original": [" puts it up for sale(A) and not  puts it up for sale(B), so More(clever(A), clever(B))", ["A puts it up for sale while B does not, so A is more clever than B"]], "negated": [" puts it up for sale(A) and not  puts it up for sale(B), so not Less(clever(A), clever(B))", ["A puts it up for sale while B does not, so A is not less clever than B"]], "asymmetric_premise": [" puts it up for sale(B) and not  puts it up for sale(A), so Less(clever(A), clever(B))", ["B puts it up for sale while A does not, so A is less clever than B"]], "asymmetric_conclusion": [" puts it up for sale(A) and not  puts it up for sale(B), so Less(clever(B), clever(A))", ["A puts it up for sale while B does not, so B is less clever than A"]], "negated_asymmetric_premise": [" puts it up for sale(B) and not  puts it up for sale(A), so not More(clever(A), clever(B))", ["B puts it up for sale while A does not, so A is not more clever than B"]], "negated_asymmetric_conclusion": [" puts it up for sale(A) and not  puts it up for sale(B), so not More(clever(B), clever(A))", ["A puts it up for sale while B does not, so B is not more clever than A"]]}
{"original": [" makes a difference(A) and not  makes a difference(B), so More(supportive(A), supportive(B))", ["A makes a difference while B does not, so A is more supportive than B"]], "negated": [" makes a difference(A) and not  makes a difference(B), so not Less(supportive(A), supportive(B))", ["A makes a difference while B does not, so A is not less supportive than B"]], "asymmetric_premise": [" makes a difference(B) and not  makes a difference(A), so Less(supportive(A), supportive(B))", ["B makes a difference while A does not, so A is less supportive than B"]], "asymmetric_conclusion": [" makes a difference(A) and not  makes a difference(B), so Less(supportive(B), supportive(A))", ["A makes a difference while B does not, so B is less supportive than A"]], "negated_asymmetric_premise": [" makes a difference(B) and not  makes a difference(A), so not More(supportive(A), supportive(B))", ["B makes a difference while A does not, so A is not more supportive than B"]], "negated_asymmetric_conclusion": [" makes a difference(A) and not  makes a difference(B), so not More(supportive(B), supportive(A))", ["A makes a difference while B does not, so B is not more supportive than A"]]}
{"original": [" works the other day(A) and not  works the other day(B), so More(hardworking(A), hardworking(B))", ["A works the other day while B does not, so A is more hardworking than B"]], "negated": [" works the other day(A) and not  works the other day(B), so not Less(hardworking(A), hardworking(B))", ["A works the other day while B does not, so A is not less hardworking than B"]], "asymmetric_premise": [" works the other day(B) and not  works the other day(A), so Less(hardworking(A), hardworking(B))", ["B works the other day while A does not, so A is less hardworking than B"]], "asymmetric_conclusion": [" works the other day(A) and not  works the other day(B), so Less(hardworking(B), hardworking(A))", ["A works the other day while B does not, so B is less hardworking than A"]], "negated_asymmetric_premise": [" works the other day(B) and not  works the other day(A), so not More(hardworking(A), hardworking(B))", ["B works the other day while A does not, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": [" works the other day(A) and not  works the other day(B), so not More(hardworking(B), hardworking(A))", ["A works the other day while B does not, so B is not more hardworking than A"]]}
{"original": [" becomes a police officer(A) and not  becomes a police officer(B), so More(brave(A), brave(B))", ["A becomes a police officer while B does not, so A is more brave than B"]], "negated": [" becomes a police officer(A) and not  becomes a police officer(B), so not Less(brave(A), brave(B))", ["A becomes a police officer while B does not, so A is not less brave than B"]], "asymmetric_premise": [" becomes a police officer(B) and not  becomes a police officer(A), so Less(brave(A), brave(B))", ["B becomes a police officer while A does not, so A is less brave than B"]], "asymmetric_conclusion": [" becomes a police officer(A) and not  becomes a police officer(B), so Less(brave(B), brave(A))", ["A becomes a police officer while B does not, so B is less brave than A"]], "negated_asymmetric_premise": [" becomes a police officer(B) and not  becomes a police officer(A), so not More(brave(A), brave(B))", ["B becomes a police officer while A does not, so A is not more brave than B"]], "negated_asymmetric_conclusion": [" becomes a police officer(A) and not  becomes a police officer(B), so not More(brave(B), brave(A))", ["A becomes a police officer while B does not, so B is not more brave than A"]]}
{"original": [" tells tales(A) and not  tells tales(B), so More(friendly(A), friendly(B))", ["A tells tales while B does not, so A is more friendly than B"]], "negated": [" tells tales(A) and not  tells tales(B), so not Less(friendly(A), friendly(B))", ["A tells tales while B does not, so A is not less friendly than B"]], "asymmetric_premise": [" tells tales(B) and not  tells tales(A), so Less(friendly(A), friendly(B))", ["B tells tales while A does not, so A is less friendly than B"]], "asymmetric_conclusion": [" tells tales(A) and not  tells tales(B), so Less(friendly(B), friendly(A))", ["A tells tales while B does not, so B is less friendly than A"]], "negated_asymmetric_premise": [" tells tales(B) and not  tells tales(A), so not More(friendly(A), friendly(B))", ["B tells tales while A does not, so A is not more friendly than B"]], "negated_asymmetric_conclusion": [" tells tales(A) and not  tells tales(B), so not More(friendly(B), friendly(A))", ["A tells tales while B does not, so B is not more friendly than A"]]}
{"original": [" can tell another person that another person is being solipsist and insolent(A) and not  can tell another person that another person is being solipsist and insolent(B), so More(clever(A), clever(B))", ["A can tell another person that another person is being solipsist and insolent while B does not, so A is more clever than B"]], "negated": [" can tell another person that another person is being solipsist and insolent(A) and not  can tell another person that another person is being solipsist and insolent(B), so not Less(clever(A), clever(B))", ["A can tell another person that another person is being solipsist and insolent more than B, so A is not less clever than B"]], "asymmetric_premise": [" can tell another person that another person is being solipsist and insolent(B) and not  can tell another person that another person is being solipsist and insolent(A), so Less(clever(A), clever(B))", ["A can tell another person that another person is being solipsist and insolent while B cannot, so A is less clever than B"]], "asymmetric_conclusion": [" can tell another person that another person is being solipsist and insolent(A) and not  can tell another person that another person is being solipsist and insolent(B), so Less(clever(B), clever(A))", ["A can tell another person that another person is being solipsist and insolent while B is not, so B is less clever than A"]], "negated_asymmetric_premise": [" can tell another person that another person is being solipsist and insolent(B) and not  can tell another person that another person is being solipsist and insolent(A), so not More(clever(A), clever(B))", ["A can tell another person that another person is being solipsist and insolent while B cannot, so A is not more clever than B"]], "negated_asymmetric_conclusion": [" can tell another person that another person is being solipsist and insolent(A) and not  can tell another person that another person is being solipsist and insolent(B), so not More(clever(B), clever(A))", ["B can tell another person that another person is being solipsist and insolent more than A, so B is not more clever than A"]]}
{"original": ["More( wants to make more money(A),  wants to make more money(B)), so More(eager(A), eager(B))", ["A wants to make more money than B, so A is more eager than B"]], "negated": ["More( wants to make more money(A),  wants to make more money(B)), so not Less(eager(A), eager(B))", ["A wants to make more money than B, so A is not less eager than B"]], "asymmetric_premise": ["More( wants to make more money(B),  wants to make more money(A)), so Less(eager(A), eager(B))", ["B wants to make more money than A, so A is less eager than B"]], "asymmetric_conclusion": ["More( wants to make more money(A),  wants to make more money(B)), so Less(eager(B), eager(A))", ["A wants to make more money than B, so B is less eager than A"]], "negated_asymmetric_premise": ["More( wants to make more money(B),  wants to make more money(A)), so not More(eager(A), eager(B))", ["B wants to make more money than A, so A is not more eager than B"]], "negated_asymmetric_conclusion": ["More( wants to make more money(A),  wants to make more money(B)), so not More(eager(B), eager(A))", ["A wants to make more money than B, so B is not more eager than A"]]}
{"original": [" makes another person comparison(A) and not  makes another person comparison(B), so More(comparing(A), comparing(B))", ["A makes another person comparison while B does not, so A is more comparing than B"]], "negated": [" makes another person comparison(A) and not  makes another person comparison(B), so not Less(comparing(A), comparing(B))", ["A makes another person comparison while B does not, so A is not less comparing than B"]], "asymmetric_premise": [" makes another person comparison(B) and not  makes another person comparison(A), so Less(comparing(A), comparing(B))", ["B makes another person comparison while A does not, so A is less comparing than B"]], "asymmetric_conclusion": [" makes another person comparison(A) and not  makes another person comparison(B), so Less(comparing(B), comparing(A))", ["A makes another person comparison while B does not, so B is less comparing than A"]], "negated_asymmetric_premise": [" makes another person comparison(B) and not  makes another person comparison(A), so not More(comparing(A), comparing(B))", ["B makes another person comparison while A does not, so A is not more comparing than B"]], "negated_asymmetric_conclusion": [" makes another person comparison(A) and not  makes another person comparison(B), so not More(comparing(B), comparing(A))", ["A makes another person comparison while B does not, so B is not more comparing than A"]]}
{"original": [" waters the plants(A) and not  waters the plants(B), so More(skilled(A), skilled(B))", ["A waters the plants while B does not, so A is more skilled than B"]], "negated": [" waters the plants(A) and not  waters the plants(B), so not Less(skilled(A), skilled(B))", ["A waters the plants while B does not, so A is not less skilled than B"]], "asymmetric_premise": [" waters the plants(B) and not  waters the plants(A), so Less(skilled(A), skilled(B))", ["B waters the plants while A does not, so A is less skilled than B"]], "asymmetric_conclusion": [" waters the plants(A) and not  waters the plants(B), so Less(skilled(B), skilled(A))", ["A waters the plants while B does not, so B is less skilled than A"]], "negated_asymmetric_premise": [" waters the plants(B) and not  waters the plants(A), so not More(skilled(A), skilled(B))", ["B waters the plants while A does not, so A is not more skilled than B"]], "negated_asymmetric_conclusion": [" waters the plants(A) and not  waters the plants(B), so not More(skilled(B), skilled(A))", ["A waters the plants while B does not, so B is not more skilled than A"]]}
{"original": [" surfs the web(A) and not  surfs the web(B), so More(bored(A), bored(B))", ["A surfs the web while B does not, so A is more bored than B"]], "negated": [" surfs the web(A) and not  surfs the web(B), so not Less(bored(A), bored(B))", ["A surfs the web while B does not, so A is not less bored than B"]], "asymmetric_premise": [" surfs the web(B) and not  surfs the web(A), so Less(bored(A), bored(B))", ["B surfs the web while A does not, so A is less bored than B"]], "asymmetric_conclusion": [" surfs the web(A) and not  surfs the web(B), so Less(bored(B), bored(A))", ["A surfs the web while B does not, so B is less bored than A"]], "negated_asymmetric_premise": [" surfs the web(B) and not  surfs the web(A), so not More(bored(A), bored(B))", ["B surfs the web while A does not, so A is not more bored than B"]], "negated_asymmetric_conclusion": [" surfs the web(A) and not  surfs the web(B), so not More(bored(B), bored(A))", ["A surfs the web while B does not, so B is not more bored than A"]]}
{"original": [" sends another person a text message(A) and not  sends another person a text message(B), so More(helpful(A), helpful(B))", ["A sends another person a text message while B does not, so A is more helpful than B"]], "negated": [" sends another person a text message(A) and not  sends another person a text message(B), so not Less(helpful(A), helpful(B))", ["A sends another person a text message while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" sends another person a text message(B) and not  sends another person a text message(A), so Less(helpful(A), helpful(B))", ["B sends another person a text message while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" sends another person a text message(A) and not  sends another person a text message(B), so Less(helpful(B), helpful(A))", ["A sends another person a text message while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" sends another person a text message(B) and not  sends another person a text message(A), so not More(helpful(A), helpful(B))", ["B sends another person a text message while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" sends another person a text message(A) and not  sends another person a text message(B), so not More(helpful(B), helpful(A))", ["A sends another person a text message while B does not, so B is not more helpful than A"]]}
{"original": [" learns to play the trumpet(A) and not  learns to play the trumpet(B), so More(educated(A), educated(B))", ["A learns to play the trumpet while B does not, so A is more educated than B"]], "negated": [" learns to play the trumpet(A) and not  learns to play the trumpet(B), so not Less(educated(A), educated(B))", ["A learns to play the trumpet while B does not, so A is not less educated than B"]], "asymmetric_premise": [" learns to play the trumpet(B) and not  learns to play the trumpet(A), so Less(educated(A), educated(B))", ["B learns to play the trumpet while A does not, so A is less educated than B"]], "asymmetric_conclusion": [" learns to play the trumpet(A) and not  learns to play the trumpet(B), so Less(educated(B), educated(A))", ["A learns to play the trumpet while B does not, so B is less educated than A"]], "negated_asymmetric_premise": [" learns to play the trumpet(B) and not  learns to play the trumpet(A), so not More(educated(A), educated(B))", ["B learns to play the trumpet while A does not, so A is not more educated than B"]], "negated_asymmetric_conclusion": [" learns to play the trumpet(A) and not  learns to play the trumpet(B), so not More(educated(B), educated(A))", ["A learns to play the trumpet while B does not, so B is not more educated than A"]]}
{"original": [" lives another person's life(A) and not  lives another person's life(B), so More(understanding(A), understanding(B))", ["A lives another person's life while B does not, so A is more understanding than B"]], "negated": [" lives another person's life(A) and not  lives another person's life(B), so not Less(understanding(A), understanding(B))", ["A lives another person's life while B does not, so A is not less understanding than B"]], "asymmetric_premise": [" lives another person's life(B) and not  lives another person's life(A), so Less(understanding(A), understanding(B))", ["B lives another person's life while A does not, so A is less understanding than B"]], "asymmetric_conclusion": [" lives another person's life(A) and not  lives another person's life(B), so Less(understanding(B), understanding(A))", ["A lives another person's life while B does not, so B is less understanding than A"]], "negated_asymmetric_premise": [" lives another person's life(B) and not  lives another person's life(A), so not More(understanding(A), understanding(B))", ["B lives another person's life while A does not, so A is not more understanding than B"]], "negated_asymmetric_conclusion": [" lives another person's life(A) and not  lives another person's life(B), so not More(understanding(B), understanding(A))", ["A lives another person's life while B does not, so B is not more understanding than A"]]}
{"original": [" meets a girl(A) and not  meets a girl(B), so More(appealing(A), appealing(B))", ["A meets a girl while B does not, so A is more appealing than B"]], "negated": [" meets a girl(A) and not  meets a girl(B), so not Less(appealing(A), appealing(B))", ["A meets a girl while B does not, so A is not less appealing than B"]], "asymmetric_premise": [" meets a girl(B) and not  meets a girl(A), so Less(appealing(A), appealing(B))", ["B meets a girl while A does not, so A is less appealing than B"]], "asymmetric_conclusion": [" meets a girl(A) and not  meets a girl(B), so Less(appealing(B), appealing(A))", ["A meets a girl while B does not, so B is less appealing than A"]], "negated_asymmetric_premise": [" meets a girl(B) and not  meets a girl(A), so not More(appealing(A), appealing(B))", ["B meets a girl while A does not, so A is not more appealing than B"]], "negated_asymmetric_conclusion": [" meets a girl(A) and not  meets a girl(B), so not More(appealing(B), appealing(A))", ["A meets a girl while B does not, so B is not more appealing than A"]]}
{"original": [" gives another person a share(A) and not  gives another person a share(B), so More(considerate(A), considerate(B))", ["A gives another person a share while B does not, so A is more considerate than B"]], "negated": [" gives another person a share(A) and not  gives another person a share(B), so not Less(considerate(A), considerate(B))", ["A gives another person a share while B does not, so A is not less considerate than B"]], "asymmetric_premise": [" gives another person a share(B) and not  gives another person a share(A), so Less(considerate(A), considerate(B))", ["B gives another person a share while A does not, so A is less considerate than B"]], "asymmetric_conclusion": [" gives another person a share(A) and not  gives another person a share(B), so Less(considerate(B), considerate(A))", ["A gives another person a share while B does not, so B is less considerate than A"]], "negated_asymmetric_premise": [" gives another person a share(B) and not  gives another person a share(A), so not More(considerate(A), considerate(B))", ["B gives another person a share while A does not, so A is not more considerate than B"]], "negated_asymmetric_conclusion": [" gives another person a share(A) and not  gives another person a share(B), so not More(considerate(B), considerate(A))", ["A gives another person a share while B does not, so B is not more considerate than A"]]}
{"original": [" puts their foot down on(A) and not  puts their foot down on(B), so More(angry(A), angry(B))", ["A puts their foot down on B while B does not, so A is more angry than B"]], "negated": [" puts their foot down on(A) and not  puts their foot down on(B), so not Less(angry(A), angry(B))", ["A puts their foot down on B while B does not, so A is not less angry than B"]], "asymmetric_premise": [" puts their foot down on(B) and not  puts their foot down on(A), so Less(angry(A), angry(B))", ["B puts their foot down on A while A does not, so A is less angry than B"]], "asymmetric_conclusion": [" puts their foot down on(A) and not  puts their foot down on(B), so Less(angry(B), angry(A))", ["A puts their foot down on B while B does not, so B is less angry than A"]], "negated_asymmetric_premise": [" puts their foot down on(B) and not  puts their foot down on(A), so not More(angry(A), angry(B))", ["B puts their foot down on A while A does not, so A is not more angry than B"]], "negated_asymmetric_conclusion": [" puts their foot down on(A) and not  puts their foot down on(B), so not More(angry(B), angry(A))", ["A puts their foot down on B while B does not, so B is not more angry than A"]]}
{"original": [" also gave another person(A) and not  also gave another person(B), so More(giver(A), giver(B))", ["A also gave another person more than B, so A is more of a giver than B"]], "negated": [" also gave another person(A) and not  also gave another person(B), so not Less(giver(A), giver(B))", ["A also gave another person more than B, so A is not less of a giver than B"]], "asymmetric_premise": [" also gave another person(B) and not  also gave another person(A), so Less(giver(A), giver(B))", ["B also gave another person more than A, so A is less of a giver than B"]], "asymmetric_conclusion": [" also gave another person(A) and not  also gave another person(B), so Less(giver(B), giver(A))", ["A also gave another person more than B, so B is a less giver than A"]], "negated_asymmetric_premise": [" also gave another person(B) and not  also gave another person(A), so not More(giver(A), giver(B))", ["B also gave another person more than A, so A is not more giver than B"]], "negated_asymmetric_conclusion": [" also gave another person(A) and not  also gave another person(B), so not More(giver(B), giver(A))", ["A also gave another person more than B, so B is not more giver than A"]]}
{"original": [" offers help(A) and not  offers help(B), so More(selfless(A), selfless(B))", ["A offers help while B does not, so A is more selfless than B"]], "negated": [" offers help(A) and not  offers help(B), so not Less(selfless(A), selfless(B))", ["A offers help while B does not, so A is not less selfless than B"]], "asymmetric_premise": [" offers help(B) and not  offers help(A), so Less(selfless(A), selfless(B))", ["B offers help while A does not, so A is less selfless than B"]], "asymmetric_conclusion": [" offers help(A) and not  offers help(B), so Less(selfless(B), selfless(A))", ["A offers help while B does not, so B is less selfless than A"]], "negated_asymmetric_premise": [" offers help(B) and not  offers help(A), so not More(selfless(A), selfless(B))", ["B offers help while A does not, so A is not more selfless than B"]], "negated_asymmetric_conclusion": [" offers help(A) and not  offers help(B), so not More(selfless(B), selfless(A))", ["A offers help while B does not, so B is not more selfless than A"]]}
{"original": [" tells their brother(A) and not  tells their brother(B), so More(gregarious(A), gregarious(B))", ["A tells their brother while B does not, so A is more gregarious than B"]], "negated": [" tells their brother(A) and not  tells their brother(B), so not Less(gregarious(A), gregarious(B))", ["A tells their brother while B does not, so A is not less gregarious than B"]], "asymmetric_premise": [" tells their brother(B) and not  tells their brother(A), so Less(gregarious(A), gregarious(B))", ["B tells their brother while A does not, so A is less gregarious than B"]], "asymmetric_conclusion": [" tells their brother(A) and not  tells their brother(B), so Less(gregarious(B), gregarious(A))", ["A tells their brother while B does not, so B is less gregarious than A"]], "negated_asymmetric_premise": [" tells their brother(B) and not  tells their brother(A), so not More(gregarious(A), gregarious(B))", ["B tells their brother while A does not, so A is not more gregarious than B"]], "negated_asymmetric_conclusion": [" tells their brother(A) and not  tells their brother(B), so not More(gregarious(B), gregarious(A))", ["A tells their brother while B does not, so B is not more gregarious than A"]]}
{"original": [" buys some stock(A) and not  buys some stock(B), so More(dynamic(A), dynamic(B))", ["A buys some stock while B does not, so A is more dynamic than B"]], "negated": [" buys some stock(A) and not  buys some stock(B), so not Less(dynamic(A), dynamic(B))", ["A buys some stock while B does not, so A is not less dynamic than B"]], "asymmetric_premise": [" buys some stock(B) and not  buys some stock(A), so Less(dynamic(A), dynamic(B))", ["B buys some stock while A does not, so A is less dynamic than B"]], "asymmetric_conclusion": [" buys some stock(A) and not  buys some stock(B), so Less(dynamic(B), dynamic(A))", ["A buys some stock while B does not, so B is less dynamic than A"]], "negated_asymmetric_premise": [" buys some stock(B) and not  buys some stock(A), so not More(dynamic(A), dynamic(B))", ["B buys some stock while A does not, so A is not more dynamic than B"]], "negated_asymmetric_conclusion": [" buys some stock(A) and not  buys some stock(B), so not More(dynamic(B), dynamic(A))", ["A buys some stock while B does not, so B is not more dynamic than A"]]}
{"original": [" makes millions(A) and not  makes millions(B), so More(rich(A), rich(B))", ["A makes millions while B does not, so A is more rich than B"]], "negated": [" makes millions(A) and not  makes millions(B), so not Less(rich(A), rich(B))", ["A makes millions while B does not, so A is not less rich than B"]], "asymmetric_premise": [" makes millions(B) and not  makes millions(A), so Less(rich(A), rich(B))", ["B makes millions while A does not, so A is less rich than B"]], "asymmetric_conclusion": [" makes millions(A) and not  makes millions(B), so Less(rich(B), rich(A))", ["A makes millions while B does not, so B is less rich than A"]], "negated_asymmetric_premise": [" makes millions(B) and not  makes millions(A), so not More(rich(A), rich(B))", ["B makes millions while A does not, so A is not more rich than B"]], "negated_asymmetric_conclusion": [" makes millions(A) and not  makes millions(B), so not More(rich(B), rich(A))", ["A makes millions while B does not, so B is not more rich than A"]]}
{"original": [" accomplishes their purpose(A) and not  accomplishes their purpose(B), so More(ambitious(A), ambitious(B))", ["A accomplishes their purpose while B does not, so A is more ambitious than B"]], "negated": [" accomplishes their purpose(A) and not  accomplishes their purpose(B), so not Less(ambitious(A), ambitious(B))", ["A accomplishes their purpose while B does not, so A is not less ambitious than B"]], "asymmetric_premise": [" accomplishes their purpose(B) and not  accomplishes their purpose(A), so Less(ambitious(A), ambitious(B))", ["B accomplishes their purpose while A does not, so A is less ambitious than B"]], "asymmetric_conclusion": [" accomplishes their purpose(A) and not  accomplishes their purpose(B), so Less(ambitious(B), ambitious(A))", ["A accomplishes their purpose while B does not, so B is less ambitious than A"]], "negated_asymmetric_premise": [" accomplishes their purpose(B) and not  accomplishes their purpose(A), so not More(ambitious(A), ambitious(B))", ["B accomplishes their purpose while A does not, so A is not more ambitious than B"]], "negated_asymmetric_conclusion": [" accomplishes their purpose(A) and not  accomplishes their purpose(B), so not More(ambitious(B), ambitious(A))", ["A accomplishes their purpose while B does not, so B is not more ambitious than A"]]}
{"original": [" attends the party(A) and not  attends the party(B), so More(friendly(A), friendly(B))", ["A attends the party while B does not, so A is more friendly than B"]], "negated": [" attends the party(A) and not  attends the party(B), so not Less(friendly(A), friendly(B))", ["A attends the party while B does not, so A is not less friendly than B"]], "asymmetric_premise": [" attends the party(B) and not  attends the party(A), so Less(friendly(A), friendly(B))", ["B attends the party while A does not, so A is less friendly than B"]], "asymmetric_conclusion": [" attends the party(A) and not  attends the party(B), so Less(friendly(B), friendly(A))", ["A attends the party while B does not, so B is less friendly than A"]], "negated_asymmetric_premise": [" attends the party(B) and not  attends the party(A), so not More(friendly(A), friendly(B))", ["B attends the party while A does not, so A is not more friendly than B"]], "negated_asymmetric_conclusion": [" attends the party(A) and not  attends the party(B), so not More(friendly(B), friendly(A))", ["A attends the party while B does not, so B is not more friendly than A"]]}
{"original": [" takes my dog(A) and not  takes my dog(B), so More(giving(A), giving(B))", ["A takes my dog while B does not, so A is more giving than B"]], "negated": [" takes my dog(A) and not  takes my dog(B), so not Less(giving(A), giving(B))", ["A takes my dog while B does not, so A is not less giving than B"]], "asymmetric_premise": [" takes my dog(B) and not  takes my dog(A), so Less(giving(A), giving(B))", ["B takes my dog while A does not, so A is less giving than B"]], "asymmetric_conclusion": [" takes my dog(A) and not  takes my dog(B), so Less(giving(B), giving(A))", ["A takes my dog while B does not, so B is less giving than A"]], "negated_asymmetric_premise": [" takes my dog(B) and not  takes my dog(A), so not More(giving(A), giving(B))", ["B takes my dog while A does not, so A is not more giving than B"]], "negated_asymmetric_conclusion": [" takes my dog(A) and not  takes my dog(B), so not More(giving(B), giving(A))", ["A takes my dog while B does not, so B is not more giving than A"]]}
{"original": [" plays another person's role(A) and not  plays another person's role(B), so More(interchangeable(A), interchangeable(B))", ["A plays another person's role while B does not, so A is more interchangeable than B"]], "negated": [" plays another person's role(A) and not  plays another person's role(B), so not Less(interchangeable(A), interchangeable(B))", ["A plays another person's role while B does not, so A is not less interchangeable than B"]], "asymmetric_premise": [" plays another person's role(B) and not  plays another person's role(A), so Less(interchangeable(A), interchangeable(B))", ["B plays another person's role while A does not, so A is less interchangeable than B"]], "asymmetric_conclusion": [" plays another person's role(A) and not  plays another person's role(B), so Less(interchangeable(B), interchangeable(A))", ["A plays another person's role while B does not, so B is less interchangeable than A"]], "negated_asymmetric_premise": [" plays another person's role(B) and not  plays another person's role(A), so not More(interchangeable(A), interchangeable(B))", ["B plays another person's role while A does not, so A is not more interchangeable than B"]], "negated_asymmetric_conclusion": [" plays another person's role(A) and not  plays another person's role(B), so not More(interchangeable(B), interchangeable(A))", ["A plays another person's role while B does not, so B is not more interchangeable than A"]]}
{"original": [" immediately turned(A) and not  immediately turned(B), so More(curious(A), curious(B))", ["A was immediately turned while B was not, so A is more curious than B"]], "negated": [" immediately turned(A) and not  immediately turned(B), so not Less(curious(A), curious(B))", ["A is immediately turned while B is not, so A is not less curious than B"]], "asymmetric_premise": [" immediately turned(B) and not  immediately turned(A), so Less(curious(A), curious(B))", ["B was immediately turned while A was not, so A is less curious than B"]], "asymmetric_conclusion": [" immediately turned(A) and not  immediately turned(B), so Less(curious(B), curious(A))", ["A was immediately turned while B was not, so B is less curious than A"]], "negated_asymmetric_premise": [" immediately turned(B) and not  immediately turned(A), so not More(curious(A), curious(B))", ["B is immediately turned while A is not, so A is not more curious than B"]], "negated_asymmetric_conclusion": [" immediately turned(A) and not  immediately turned(B), so not More(curious(B), curious(A))", ["A is immediately turned while B is not, so B is not more curious than A"]]}
{"original": [" pushes another person's head(A) and not  pushes another person's head(B), so More(aggressive(A), aggressive(B))", ["A pushes another person's head while B does not, so A is more aggressive than B"]], "negated": [" pushes another person's head(A) and not  pushes another person's head(B), so not Less(aggressive(A), aggressive(B))", ["A pushes another person's head while B does not, so A is not less aggressive than B"]], "asymmetric_premise": [" pushes another person's head(B) and not  pushes another person's head(A), so Less(aggressive(A), aggressive(B))", ["B pushes another person's head while A does not, so A is less aggressive than B"]], "asymmetric_conclusion": [" pushes another person's head(A) and not  pushes another person's head(B), so Less(aggressive(B), aggressive(A))", ["A pushes another person's head while B does not, so B is less aggressive than A"]], "negated_asymmetric_premise": [" pushes another person's head(B) and not  pushes another person's head(A), so not More(aggressive(A), aggressive(B))", ["B pushes another person's head while A does not, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": [" pushes another person's head(A) and not  pushes another person's head(B), so not More(aggressive(B), aggressive(A))", ["A pushes another person's head while B does not, so B is not more aggressive than A"]]}
{"original": [" would n't eat(A) and not  would n't eat(B), so More(dieting(A), dieting(B))", ["A would n't eat more than B, so A is more dieting than B"]], "negated": [" would n't eat(A) and not  would n't eat(B), so not Less(dieting(A), dieting(B))", ["A would n't eat more than B, so A is not less dieting than B"]], "asymmetric_premise": [" would n't eat(B) and not  would n't eat(A), so Less(dieting(A), dieting(B))", ["B would n't eat more than A, so A is less dieting than B"]], "asymmetric_conclusion": [" would n't eat(A) and not  would n't eat(B), so Less(dieting(B), dieting(A))", ["A would n't eat more than B, so B is less dieting than A"]], "negated_asymmetric_premise": [" would n't eat(B) and not  would n't eat(A), so not More(dieting(A), dieting(B))", ["B would n't eat more than A, so A is not more dieting than B"]], "negated_asymmetric_conclusion": [" would n't eat(A) and not  would n't eat(B), so not More(dieting(B), dieting(A))", ["A would n't eat more than B, so B is not more dieting than A"]]}
{"original": [" youngest another person president(A) and not  youngest another person president(B), so More(motivated(A), motivated(B))", ["A is able to youngest another person president while B is not, so A is more motivated than B"]], "negated": [" youngest another person president(A) and not  youngest another person president(B), so not Less(motivated(A), motivated(B))", ["A is the youngest another person president while B is not, so A is not less motivated than B"]], "asymmetric_premise": [" youngest another person president(B) and not  youngest another person president(A), so Less(motivated(A), motivated(B))", ["B is able to youngest another person president while A is not, so A is less motivated than B"]], "asymmetric_conclusion": [" youngest another person president(A) and not  youngest another person president(B), so Less(motivated(B), motivated(A))", ["A is able to youngest another person president while B is not, so B is less motivated than A"]], "negated_asymmetric_premise": [" youngest another person president(B) and not  youngest another person president(A), so not More(motivated(A), motivated(B))", ["B is not more motivated than A, so A is not more motivated than B"]], "negated_asymmetric_conclusion": [" youngest another person president(A) and not  youngest another person president(B), so not More(motivated(B), motivated(A))", ["A is the youngest another person president while B is not, so B is not more motivated than A"]]}
{"original": [" continues to drive(A) and not  continues to drive(B), so More(committed(A), committed(B))", ["A continues to drive while B does not, so A is more committed than B"]], "negated": [" continues to drive(A) and not  continues to drive(B), so not Less(committed(A), committed(B))", ["A continues to drive while B does not, so A is not less committed than B"]], "asymmetric_premise": [" continues to drive(B) and not  continues to drive(A), so Less(committed(A), committed(B))", ["B continues to drive while A does not, so A is less committed than B"]], "asymmetric_conclusion": [" continues to drive(A) and not  continues to drive(B), so Less(committed(B), committed(A))", ["A continues to drive while B does not, so B is less committed than A"]], "negated_asymmetric_premise": [" continues to drive(B) and not  continues to drive(A), so not More(committed(A), committed(B))", ["B continues to drive while A does not, so A is not more committed than B"]], "negated_asymmetric_conclusion": [" continues to drive(A) and not  continues to drive(B), so not More(committed(B), committed(A))", ["A continues to drive while B does not, so B is not more committed than A"]]}
{"original": [" wants a new dress(A) and not  wants a new dress(B), so More(spoiled(A), spoiled(B))", ["A wants a new dress while B does not, so A is more spoiled than B"]], "negated": [" wants a new dress(A) and not  wants a new dress(B), so not Less(spoiled(A), spoiled(B))", ["A wants a new dress while B does not, so A is not less spoiled than B"]], "asymmetric_premise": [" wants a new dress(B) and not  wants a new dress(A), so Less(spoiled(A), spoiled(B))", ["B wants a new dress while A does not, so A is less spoiled than B"]], "asymmetric_conclusion": [" wants a new dress(A) and not  wants a new dress(B), so Less(spoiled(B), spoiled(A))", ["A wants a new dress while B does not, so B is less spoiled than A"]], "negated_asymmetric_premise": [" wants a new dress(B) and not  wants a new dress(A), so not More(spoiled(A), spoiled(B))", ["B wants a new dress while A does not, so A is not more spoiled than B"]], "negated_asymmetric_conclusion": [" wants a new dress(A) and not  wants a new dress(B), so not More(spoiled(B), spoiled(A))", ["A wants a new dress while B does not, so B is not more spoiled than A"]]}
{"original": [" catches their drift(A) and not  catches their drift(B), so More(intelligent(A), intelligent(B))", ["A catches their drift while B does not, so A is more intelligent than B"]], "negated": [" catches their drift(A) and not  catches their drift(B), so not Less(intelligent(A), intelligent(B))", ["A catches their drift while B does not, so A is not less intelligent than B"]], "asymmetric_premise": [" catches their drift(B) and not  catches their drift(A), so Less(intelligent(A), intelligent(B))", ["B catches their drift while A does not, so A is less intelligent than B"]], "asymmetric_conclusion": [" catches their drift(A) and not  catches their drift(B), so Less(intelligent(B), intelligent(A))", ["A catches their drift while B does not, so B is less intelligent than A"]], "negated_asymmetric_premise": [" catches their drift(B) and not  catches their drift(A), so not More(intelligent(A), intelligent(B))", ["B catches their drift while A does not, so A is not more intelligent than B"]], "negated_asymmetric_conclusion": [" catches their drift(A) and not  catches their drift(B), so not More(intelligent(B), intelligent(A))", ["A catches their drift while B does not, so B is not more intelligent than A"]]}
{"original": [" grows taller(A) and not  grows taller(B), so More(large(A), large(B))", ["A grows taller while B does not, so A is more large than B"]], "negated": [" grows taller(A) and not  grows taller(B), so not Less(large(A), large(B))", ["A grows taller while B does not, so A is not less large than B"]], "asymmetric_premise": [" grows taller(B) and not  grows taller(A), so Less(large(A), large(B))", ["B grows taller while A does not, so A is less large than B"]], "asymmetric_conclusion": [" grows taller(A) and not  grows taller(B), so Less(large(B), large(A))", ["A grows taller while B does not, so B is less large than A"]], "negated_asymmetric_premise": [" grows taller(B) and not  grows taller(A), so not More(large(A), large(B))", ["B grows taller while A does not, so A is not more large than B"]], "negated_asymmetric_conclusion": [" grows taller(A) and not  grows taller(B), so not More(large(B), large(A))", ["A grows taller while B does not, so B is not more large than A"]]}
{"original": [" acts strange(A) and not  acts strange(B), so More(unusual(A), unusual(B))", ["A acts strange while B does not, so A is more unusual than B"]], "negated": [" acts strange(A) and not  acts strange(B), so not Less(unusual(A), unusual(B))", ["A acts strange while B does not, so A is not less unusual than B"]], "asymmetric_premise": [" acts strange(B) and not  acts strange(A), so Less(unusual(A), unusual(B))", ["B acts strange while A does not, so A is less unusual than B"]], "asymmetric_conclusion": [" acts strange(A) and not  acts strange(B), so Less(unusual(B), unusual(A))", ["A acts strange while B does not, so B is less unusual than A"]], "negated_asymmetric_premise": [" acts strange(B) and not  acts strange(A), so not More(unusual(A), unusual(B))", ["B acts strange while A does not, so A is not more unusual than B"]], "negated_asymmetric_conclusion": [" acts strange(A) and not  acts strange(B), so not More(unusual(B), unusual(A))", ["A acts strange while B does not, so B is not more unusual than A"]]}
{"original": [" tells another person's grandmother(A) and not  tells another person's grandmother(B), so More(eager(A), eager(B))", ["A tells another person's grandmother while B does not, so A is more eager than B"]], "negated": [" tells another person's grandmother(A) and not  tells another person's grandmother(B), so not Less(eager(A), eager(B))", ["A tells another person's grandmother while B does not, so A is not less eager than B"]], "asymmetric_premise": [" tells another person's grandmother(B) and not  tells another person's grandmother(A), so Less(eager(A), eager(B))", ["B tells another person's grandmother while A does not, so A is less eager than B"]], "asymmetric_conclusion": [" tells another person's grandmother(A) and not  tells another person's grandmother(B), so Less(eager(B), eager(A))", ["A tells another person's grandmother while B does not, so B is less eager than A"]], "negated_asymmetric_premise": [" tells another person's grandmother(B) and not  tells another person's grandmother(A), so not More(eager(A), eager(B))", ["B tells another person's grandmother while A does not, so A is not more eager than B"]], "negated_asymmetric_conclusion": [" tells another person's grandmother(A) and not  tells another person's grandmother(B), so not More(eager(B), eager(A))", ["A tells another person's grandmother while B does not, so B is not more eager than A"]]}
{"original": [" changes their policy(A) and not  changes their policy(B), so More(abrupt(A), abrupt(B))", ["A changes their policy while B does not, so A is more abrupt than B"]], "negated": [" changes their policy(A) and not  changes their policy(B), so not Less(abrupt(A), abrupt(B))", ["A changes their policy while B does not, so A is not less abrupt than B"]], "asymmetric_premise": [" changes their policy(B) and not  changes their policy(A), so Less(abrupt(A), abrupt(B))", ["B changes their policy while A does not, so A is less abrupt than B"]], "asymmetric_conclusion": [" changes their policy(A) and not  changes their policy(B), so Less(abrupt(B), abrupt(A))", ["A changes their policy while B does not, so B is less abrupt than A"]], "negated_asymmetric_premise": [" changes their policy(B) and not  changes their policy(A), so not More(abrupt(A), abrupt(B))", ["B changes their policy while A does not, so A is not more abrupt than B"]], "negated_asymmetric_conclusion": [" changes their policy(A) and not  changes their policy(B), so not More(abrupt(B), abrupt(A))", ["A changes their policy while B does not, so B is not more abrupt than A"]]}
{"original": [" offers to teach another person(A) and not  offers to teach another person(B), so More(generous(A), generous(B))", ["A offers to teach another person while B does not, so A is more generous than B"]], "negated": [" offers to teach another person(A) and not  offers to teach another person(B), so not Less(generous(A), generous(B))", ["A offers to teach another person while B does not, so A is not less generous than B"]], "asymmetric_premise": [" offers to teach another person(B) and not  offers to teach another person(A), so Less(generous(A), generous(B))", ["B offers to teach another person while A does not, so A is less generous than B"]], "asymmetric_conclusion": [" offers to teach another person(A) and not  offers to teach another person(B), so Less(generous(B), generous(A))", ["A offers to teach another person while B does not, so B is less generous than A"]], "negated_asymmetric_premise": [" offers to teach another person(B) and not  offers to teach another person(A), so not More(generous(A), generous(B))", ["B offers to teach another person while A does not, so A is not more generous than B"]], "negated_asymmetric_conclusion": [" offers to teach another person(A) and not  offers to teach another person(B), so not More(generous(B), generous(A))", ["A offers to teach another person while B does not, so B is not more generous than A"]]}
{"original": [" cracks a fat(A) and not  cracks a fat(B), so More(tired(A), tired(B))", ["A cracks a fat while B does not, so A is more tired than B"]], "negated": [" cracks a fat(A) and not  cracks a fat(B), so not Less(tired(A), tired(B))", ["A cracks a fat while B does not, so A is not less tired than B"]], "asymmetric_premise": [" cracks a fat(B) and not  cracks a fat(A), so Less(tired(A), tired(B))", ["B cracks a fat while A does not, so A is less tired than B"]], "asymmetric_conclusion": [" cracks a fat(A) and not  cracks a fat(B), so Less(tired(B), tired(A))", ["A cracks a fat while B does not, so B is less tired than A"]], "negated_asymmetric_premise": [" cracks a fat(B) and not  cracks a fat(A), so not More(tired(A), tired(B))", ["B cracks a fat while A does not, so A is not more tired than B"]], "negated_asymmetric_conclusion": [" cracks a fat(A) and not  cracks a fat(B), so not More(tired(B), tired(A))", ["A cracks a fat while B does not, so B is not more tired than A"]]}
{"original": [" sings their praises(A) and not  sings their praises(B), so More(snooty(A), snooty(B))", ["A sings their praises while B does not, so A is more snooty than B"]], "negated": [" sings their praises(A) and not  sings their praises(B), so not Less(snooty(A), snooty(B))", ["A sings their praises while B does not, so A is not less snooty than B"]], "asymmetric_premise": [" sings their praises(B) and not  sings their praises(A), so Less(snooty(A), snooty(B))", ["B sings their praises while A does not, so A is less snooty than B"]], "asymmetric_conclusion": [" sings their praises(A) and not  sings their praises(B), so Less(snooty(B), snooty(A))", ["A sings their praises while B does not, so B is less snooty than A"]], "negated_asymmetric_premise": [" sings their praises(B) and not  sings their praises(A), so not More(snooty(A), snooty(B))", ["B sings their praises while A does not, so A is not more snooty than B"]], "negated_asymmetric_conclusion": [" sings their praises(A) and not  sings their praises(B), so not More(snooty(B), snooty(A))", ["A sings their praises while B does not, so B is not more snooty than A"]]}
{"original": [" has always wanted to go to(A) and not  has always wanted to go to(B), so More(hopeful(A), hopeful(B))", ["A has always wanted to go to school while B does not, so A is more hopeful than B"]], "negated": [" has always wanted to go to(A) and not  has always wanted to go to(B), so not Less(hopeful(A), hopeful(B))", ["A has always wanted to go to more than B, so A is not less hopeful than B"]], "asymmetric_premise": [" has always wanted to go to(B) and not  has always wanted to go to(A), so Less(hopeful(A), hopeful(B))", ["B has always wanted to go to school while A does not, so A is less hopeful than B"]], "asymmetric_conclusion": [" has always wanted to go to(A) and not  has always wanted to go to(B), so Less(hopeful(B), hopeful(A))", ["A has always wanted to go to school while B does not, so B is less hopeful than A"]], "negated_asymmetric_premise": [" has always wanted to go to(B) and not  has always wanted to go to(A), so not More(hopeful(A), hopeful(B))", ["B has always wanted to go to more than A, so A is not more hopeful than B"]], "negated_asymmetric_conclusion": [" has always wanted to go to(A) and not  has always wanted to go to(B), so not More(hopeful(B), hopeful(A))", ["A has always wanted to go to more than B, so B is not more hopeful than A"]]}
{"original": [" stills loved(A) and not  stills loved(B), so More(content(A), content(B))", ["A is still loved while B is not, so A is more content than B"]], "negated": [" stills loved(A) and not  stills loved(B), so not Less(content(A), content(B))", ["A is still loved while B is not, so A is not less content than B"]], "asymmetric_premise": [" stills loved(B) and not  stills loved(A), so Less(content(A), content(B))", ["B is still loved while A is not, so A is less content than B"]], "asymmetric_conclusion": [" stills loved(A) and not  stills loved(B), so Less(content(B), content(A))", ["A is still loved while B is not, so B is less content than A"]], "negated_asymmetric_premise": [" stills loved(B) and not  stills loved(A), so not More(content(A), content(B))", ["B is still loved while A is not, so A is not more content than B"]], "negated_asymmetric_conclusion": [" stills loved(A) and not  stills loved(B), so not More(content(B), content(A))", ["A is still loved while B is not, so B is not more content than A"]]}
{"original": [" finds another person's class(A) and not  finds another person's class(B), so More(knowledgeable(A), knowledgeable(B))", ["A finds another person's class while B does not, so A is more knowledgeable than B"]], "negated": [" finds another person's class(A) and not  finds another person's class(B), so not Less(knowledgeable(A), knowledgeable(B))", ["A finds another person's class while B does not, so A is not less knowledgeable than B"]], "asymmetric_premise": [" finds another person's class(B) and not  finds another person's class(A), so Less(knowledgeable(A), knowledgeable(B))", ["B finds another person's class while A does not, so A is less knowledgeable than B"]], "asymmetric_conclusion": [" finds another person's class(A) and not  finds another person's class(B), so Less(knowledgeable(B), knowledgeable(A))", ["A finds another person's class while B does not, so B is less knowledgeable than A"]], "negated_asymmetric_premise": [" finds another person's class(B) and not  finds another person's class(A), so not More(knowledgeable(A), knowledgeable(B))", ["B finds another person's class while A does not, so A is not more knowledgeable than B"]], "negated_asymmetric_conclusion": [" finds another person's class(A) and not  finds another person's class(B), so not More(knowledgeable(B), knowledgeable(A))", ["A finds another person's class while B does not, so B is not more knowledgeable than A"]]}
{"original": [" wishes another person a happy birthday(A) and not  wishes another person a happy birthday(B), so More(thoughtful(A), thoughtful(B))", ["A wishes another person a happy birthday while B does not, so A is more thoughtful than B"]], "negated": [" wishes another person a happy birthday(A) and not  wishes another person a happy birthday(B), so not Less(thoughtful(A), thoughtful(B))", ["A wishes another person a happy birthday while B does not, so A is not less thoughtful than B"]], "asymmetric_premise": [" wishes another person a happy birthday(B) and not  wishes another person a happy birthday(A), so Less(thoughtful(A), thoughtful(B))", ["B wishes another person a happy birthday while A does not, so A is less thoughtful than B"]], "asymmetric_conclusion": [" wishes another person a happy birthday(A) and not  wishes another person a happy birthday(B), so Less(thoughtful(B), thoughtful(A))", ["A wishes another person a happy birthday while B does not, so B is less thoughtful than A"]], "negated_asymmetric_premise": [" wishes another person a happy birthday(B) and not  wishes another person a happy birthday(A), so not More(thoughtful(A), thoughtful(B))", ["B wishes another person a happy birthday while A does not, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": [" wishes another person a happy birthday(A) and not  wishes another person a happy birthday(B), so not More(thoughtful(B), thoughtful(A))", ["A wishes another person a happy birthday while B does not, so B is not more thoughtful than A"]]}
{"original": [" eats another person out of house and home(A) and not  eats another person out of house and home(B), so More(greedy(A), greedy(B))", ["A eats another person out of house and home while B does not, so A is more greedy than B"]], "negated": [" eats another person out of house and home(A) and not  eats another person out of house and home(B), so not Less(greedy(A), greedy(B))", ["A eats another person out of house and home while B does not, so A is not less greedy than B"]], "asymmetric_premise": [" eats another person out of house and home(B) and not  eats another person out of house and home(A), so Less(greedy(A), greedy(B))", ["B eats another person out of house and home while A does not, so A is less greedy than B"]], "asymmetric_conclusion": [" eats another person out of house and home(A) and not  eats another person out of house and home(B), so Less(greedy(B), greedy(A))", ["A eats another person out of house and home while B does not, so B is less greedy than A"]], "negated_asymmetric_premise": [" eats another person out of house and home(B) and not  eats another person out of house and home(A), so not More(greedy(A), greedy(B))", ["B eats another person out of house and home more than A, so A is not more greedy than B"]], "negated_asymmetric_conclusion": [" eats another person out of house and home(A) and not  eats another person out of house and home(B), so not More(greedy(B), greedy(A))", ["A eats another person out of house and home more than B, so B is not more greedy than A"]]}
{"original": [" leaves heading to another person(A) and not  leaves heading to another person(B), so More(talented(A), talented(B))", ["A leaves heading to another person while B does not, so A is more talented than B"]], "negated": [" leaves heading to another person(A) and not  leaves heading to another person(B), so not Less(talented(A), talented(B))", ["A leaves heading to another person while B does not, so A is not less talented than B"]], "asymmetric_premise": [" leaves heading to another person(B) and not  leaves heading to another person(A), so Less(talented(A), talented(B))", ["B leaves heading to another person while A does not, so A is less talented than B"]], "asymmetric_conclusion": [" leaves heading to another person(A) and not  leaves heading to another person(B), so Less(talented(B), talented(A))", ["A leaves heading to another person while B does not, so B is less talented than A"]], "negated_asymmetric_premise": [" leaves heading to another person(B) and not  leaves heading to another person(A), so not More(talented(A), talented(B))", ["B leaves heading to another person while A does not, so A is not more talented than B"]], "negated_asymmetric_conclusion": [" leaves heading to another person(A) and not  leaves heading to another person(B), so not More(talented(B), talented(A))", ["A leaves heading to another person while B does not, so B is not more talented than A"]]}
{"original": [" reads another person's books(A) and not  reads another person's books(B), so More(a reader(A), a reader(B))", ["A reads another person's books while B does not, so A is more a reader than B"]], "negated": [" reads another person's books(A) and not  reads another person's books(B), so not Less(a reader(A), a reader(B))", ["A reads another person's books while B does not, so A is not less a reader than B"]], "asymmetric_premise": [" reads another person's books(B) and not  reads another person's books(A), so Less(a reader(A), a reader(B))", ["B reads another person's books while A does not, so A is less a reader than B"]], "asymmetric_conclusion": [" reads another person's books(A) and not  reads another person's books(B), so Less(a reader(B), a reader(A))", ["A reads another person's books while B does not, so B is less a reader than A"]], "negated_asymmetric_premise": [" reads another person's books(B) and not  reads another person's books(A), so not More(a reader(A), a reader(B))", ["B reads another person's books while A does not, so A is not more a reader than B"]], "negated_asymmetric_conclusion": [" reads another person's books(A) and not  reads another person's books(B), so not More(a reader(B), a reader(A))", ["A reads another person's books while B does not, so B is not more a reader than A"]]}
{"original": [" gets sick of it(A) and not  gets sick of it(B), so More(sore(A), sore(B))", ["A gets sick of it while B does not, so A is more sore than B"]], "negated": [" gets sick of it(A) and not  gets sick of it(B), so not Less(sore(A), sore(B))", ["A gets sick of it while B does not, so A is not less sore than B"]], "asymmetric_premise": [" gets sick of it(B) and not  gets sick of it(A), so Less(sore(A), sore(B))", ["B gets sick of it while A does not, so A is less sore than B"]], "asymmetric_conclusion": [" gets sick of it(A) and not  gets sick of it(B), so Less(sore(B), sore(A))", ["A gets sick of it while B does not, so B is less sore than A"]], "negated_asymmetric_premise": [" gets sick of it(B) and not  gets sick of it(A), so not More(sore(A), sore(B))", ["B gets sick of it while A does not, so A is not more sore than B"]], "negated_asymmetric_conclusion": [" gets sick of it(A) and not  gets sick of it(B), so not More(sore(B), sore(A))", ["A gets sick of it while B does not, so B is not more sore than A"]]}
{"original": [" hurts another person so much(A) and not  hurts another person so much(B), so More(hurtful(A), hurtful(B))", ["A hurts another person so much while B does not, so A is more hurtful than B"]], "negated": [" hurts another person so much(A) and not  hurts another person so much(B), so not Less(hurtful(A), hurtful(B))", ["A hurts another person so much more than B, so A is not less hurtful than B"]], "asymmetric_premise": [" hurts another person so much(B) and not  hurts another person so much(A), so Less(hurtful(A), hurtful(B))", ["B hurts another person so much more than A, so A is less hurtful than B"]], "asymmetric_conclusion": [" hurts another person so much(A) and not  hurts another person so much(B), so Less(hurtful(B), hurtful(A))", ["A hurts another person so much more than B, so B is less hurtful than A"]], "negated_asymmetric_premise": [" hurts another person so much(B) and not  hurts another person so much(A), so not More(hurtful(A), hurtful(B))", ["B hurts another person so much more than A, so A is not more hurtful than B"]], "negated_asymmetric_conclusion": [" hurts another person so much(A) and not  hurts another person so much(B), so not More(hurtful(B), hurtful(A))", ["A hurts another person so much more than B, so B is not more hurtful than A"]]}
{"original": [" provides another person indication(A) and not  provides another person indication(B), so More(scholarly(A), scholarly(B))", ["A provides another person indication while B does not, so A is more scholarly than B"]], "negated": [" provides another person indication(A) and not  provides another person indication(B), so not Less(scholarly(A), scholarly(B))", ["A provides another person indication while B does not, so A is not less scholarly than B"]], "asymmetric_premise": [" provides another person indication(B) and not  provides another person indication(A), so Less(scholarly(A), scholarly(B))", ["B provides another person indication while A does not, so A is less scholarly than B"]], "asymmetric_conclusion": [" provides another person indication(A) and not  provides another person indication(B), so Less(scholarly(B), scholarly(A))", ["A provides another person indication while B does not, so B is less scholarly than A"]], "negated_asymmetric_premise": [" provides another person indication(B) and not  provides another person indication(A), so not More(scholarly(A), scholarly(B))", ["B provides another person indication while A does not, so A is not more scholarly than B"]], "negated_asymmetric_conclusion": [" provides another person indication(A) and not  provides another person indication(B), so not More(scholarly(B), scholarly(A))", ["A provides another person indication while B does not, so B is not more scholarly than A"]]}
{"original": [" pulls another person's back(A) and not  pulls another person's back(B), so More(helpful(A), helpful(B))", ["A pulls another person's back while B does not, so A is more helpful than B"]], "negated": [" pulls another person's back(A) and not  pulls another person's back(B), so not Less(helpful(A), helpful(B))", ["A pulls another person's back while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" pulls another person's back(B) and not  pulls another person's back(A), so Less(helpful(A), helpful(B))", ["B pulls another person's back while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" pulls another person's back(A) and not  pulls another person's back(B), so Less(helpful(B), helpful(A))", ["A pulls another person's back while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" pulls another person's back(B) and not  pulls another person's back(A), so not More(helpful(A), helpful(B))", ["B pulls another person's back while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" pulls another person's back(A) and not  pulls another person's back(B), so not More(helpful(B), helpful(A))", ["A pulls another person's back while B does not, so B is not more helpful than A"]]}
{"original": [" gives another person a hard time(A) and not  gives another person a hard time(B), so More(sarcastic(A), sarcastic(B))", ["A gives another person a hard time while B does not, so A is more sarcastic than B"]], "negated": [" gives another person a hard time(A) and not  gives another person a hard time(B), so not Less(sarcastic(A), sarcastic(B))", ["A gives another person a hard time while B does not, so A is not less sarcastic than B"]], "asymmetric_premise": [" gives another person a hard time(B) and not  gives another person a hard time(A), so Less(sarcastic(A), sarcastic(B))", ["B gives another person a hard time while A does not, so A is less sarcastic than B"]], "asymmetric_conclusion": [" gives another person a hard time(A) and not  gives another person a hard time(B), so Less(sarcastic(B), sarcastic(A))", ["A gives another person a hard time while B does not, so B is less sarcastic than A"]], "negated_asymmetric_premise": [" gives another person a hard time(B) and not  gives another person a hard time(A), so not More(sarcastic(A), sarcastic(B))", ["B gives another person a hard time while A does not, so A is not more sarcastic than B"]], "negated_asymmetric_conclusion": [" gives another person a hard time(A) and not  gives another person a hard time(B), so not More(sarcastic(B), sarcastic(A))", ["A gives another person a hard time while B does not, so B is not more sarcastic than A"]]}
{"original": [" sees a girl(A) and not  sees a girl(B), so More(excited(A), excited(B))", ["A sees a girl while B does not, so A is more excited than B"]], "negated": [" sees a girl(A) and not  sees a girl(B), so not Less(excited(A), excited(B))", ["A sees a girl while B does not, so A is not less excited than B"]], "asymmetric_premise": [" sees a girl(B) and not  sees a girl(A), so Less(excited(A), excited(B))", ["B sees a girl while A does not, so A is less excited than B"]], "asymmetric_conclusion": [" sees a girl(A) and not  sees a girl(B), so Less(excited(B), excited(A))", ["A sees a girl while B does not, so B is less excited than A"]], "negated_asymmetric_premise": [" sees a girl(B) and not  sees a girl(A), so not More(excited(A), excited(B))", ["B sees a girl while A does not, so A is not more excited than B"]], "negated_asymmetric_conclusion": [" sees a girl(A) and not  sees a girl(B), so not More(excited(B), excited(A))", ["A sees a girl while B does not, so B is not more excited than A"]]}
{"original": [" achieves another person end(A) and not  achieves another person end(B), so More(smug(A), smug(B))", ["A achieves another person end more than B, so A is more smug than B"]], "negated": [" achieves another person end(A) and not  achieves another person end(B), so not Less(smug(A), smug(B))", ["A achieves another person end more than B, so A is not less smug than B"]], "asymmetric_premise": [" achieves another person end(B) and not  achieves another person end(A), so Less(smug(A), smug(B))", ["B achieves another person end more than A, so A is less smug than B"]], "asymmetric_conclusion": [" achieves another person end(A) and not  achieves another person end(B), so Less(smug(B), smug(A))", ["A achieves another person end more than B, so B is less smug than A"]], "negated_asymmetric_premise": [" achieves another person end(B) and not  achieves another person end(A), so not More(smug(A), smug(B))", ["B achieves another person more than A, so A is not more smug than B"]], "negated_asymmetric_conclusion": [" achieves another person end(A) and not  achieves another person end(B), so not More(smug(B), smug(A))", ["A achieves another person more than B, so B is not more smug than A"]]}
{"original": [" gets first place(A) and not  gets first place(B), so More(skilled(A), skilled(B))", ["A gets first place while B does not, so A is more skilled than B"]], "negated": [" gets first place(A) and not  gets first place(B), so not Less(skilled(A), skilled(B))", ["A gets first place while B does not, so A is not less skilled than B"]], "asymmetric_premise": [" gets first place(B) and not  gets first place(A), so Less(skilled(A), skilled(B))", ["B gets first place while A does not, so A is less skilled than B"]], "asymmetric_conclusion": [" gets first place(A) and not  gets first place(B), so Less(skilled(B), skilled(A))", ["A gets first place while B does not, so B is less skilled than A"]], "negated_asymmetric_premise": [" gets first place(B) and not  gets first place(A), so not More(skilled(A), skilled(B))", ["B gets first place while A does not, so A is not more skilled than B"]], "negated_asymmetric_conclusion": [" gets first place(A) and not  gets first place(B), so not More(skilled(B), skilled(A))", ["A gets first place while B does not, so B is not more skilled than A"]]}
{"original": [" feels very proud(A) and not  feels very proud(B), so More(forceful(A), forceful(B))", ["A feels very proud while B does not, so A is more forceful than B"]], "negated": [" feels very proud(A) and not  feels very proud(B), so not Less(forceful(A), forceful(B))", ["A feels very proud while B does not, so A is not less forceful than B"]], "asymmetric_premise": [" feels very proud(B) and not  feels very proud(A), so Less(forceful(A), forceful(B))", ["B feels very proud while A does not, so A is less forceful than B"]], "asymmetric_conclusion": [" feels very proud(A) and not  feels very proud(B), so Less(forceful(B), forceful(A))", ["A feels very proud while B does not, so B is less forceful than A"]], "negated_asymmetric_premise": [" feels very proud(B) and not  feels very proud(A), so not More(forceful(A), forceful(B))", ["B feels very proud while A does not, so A is not more forceful than B"]], "negated_asymmetric_conclusion": [" feels very proud(A) and not  feels very proud(B), so not More(forceful(B), forceful(A))", ["A feels very proud while B does not, so B is not more forceful than A"]]}
{"original": [" prepares for another person emergency(A) and not  prepares for another person emergency(B), so More(well-prepared(A), well-prepared(B))", ["A prepares for another person emergency while B does not, so A is more well-prepared than B"]], "negated": [" prepares for another person emergency(A) and not  prepares for another person emergency(B), so not Less(well-prepared(A), well-prepared(B))", ["A prepares for another person emergency while B does not, so A is not less well-prepared than B"]], "asymmetric_premise": [" prepares for another person emergency(B) and not  prepares for another person emergency(A), so Less(well-prepared(A), well-prepared(B))", ["B prepares for another person emergency while A does not, so A is less well-prepared than B"]], "asymmetric_conclusion": [" prepares for another person emergency(A) and not  prepares for another person emergency(B), so Less(well-prepared(B), well-prepared(A))", ["A prepares for another person emergency while B does not, so B is less well-prepared than A"]], "negated_asymmetric_premise": [" prepares for another person emergency(B) and not  prepares for another person emergency(A), so not More(well-prepared(A), well-prepared(B))", ["B prepares for another person emergency more than A, so A is not more well-prepared than B"]], "negated_asymmetric_conclusion": [" prepares for another person emergency(A) and not  prepares for another person emergency(B), so not More(well-prepared(B), well-prepared(A))", ["A prepares for another person emergency while B does not, so B is not more well-prepared than A"]]}
{"original": [" plays ice hockey(A) and not  plays ice hockey(B), so More(physical(A), physical(B))", ["A plays ice hockey while B does not, so A is more physical than B"]], "negated": [" plays ice hockey(A) and not  plays ice hockey(B), so not Less(physical(A), physical(B))", ["A plays ice hockey while B does not, so A is not less physical than B"]], "asymmetric_premise": [" plays ice hockey(B) and not  plays ice hockey(A), so Less(physical(A), physical(B))", ["B plays ice hockey while A does not, so A is less physical than B"]], "asymmetric_conclusion": [" plays ice hockey(A) and not  plays ice hockey(B), so Less(physical(B), physical(A))", ["A plays ice hockey while B does not, so B is less physical than A"]], "negated_asymmetric_premise": [" plays ice hockey(B) and not  plays ice hockey(A), so not More(physical(A), physical(B))", ["B plays ice hockey while A does not, so A is not more physical than B"]], "negated_asymmetric_conclusion": [" plays ice hockey(A) and not  plays ice hockey(B), so not More(physical(B), physical(A))", ["A plays ice hockey while B does not, so B is not more physical than A"]]}
{"original": [" helps another person see(A) and not  helps another person see(B), so More(generous(A), generous(B))", ["A helps another person see while B does not, so A is more generous than B"]], "negated": [" helps another person see(A) and not  helps another person see(B), so not Less(generous(A), generous(B))", ["A helps another person see more than B, so A is not less generous than B"]], "asymmetric_premise": [" helps another person see(B) and not  helps another person see(A), so Less(generous(A), generous(B))", ["B helps another person see while A does not, so A is less generous than B"]], "asymmetric_conclusion": [" helps another person see(A) and not  helps another person see(B), so Less(generous(B), generous(A))", ["A helps another person see while B does not, so B is less generous than A"]], "negated_asymmetric_premise": [" helps another person see(B) and not  helps another person see(A), so not More(generous(A), generous(B))", ["B helps another person see more than A, so A is not more generous than B"]], "negated_asymmetric_conclusion": [" helps another person see(A) and not  helps another person see(B), so not More(generous(B), generous(A))", ["A helps another person see more than B, so B is not more generous than A"]]}
{"original": [" finds one on sale(A) and not  finds one on sale(B), so More(smart(A), smart(B))", ["A finds one on sale while B does not, so A is more smart than B"]], "negated": [" finds one on sale(A) and not  finds one on sale(B), so not Less(smart(A), smart(B))", ["A finds one on sale while B does not, so A is not less smart than B"]], "asymmetric_premise": [" finds one on sale(B) and not  finds one on sale(A), so Less(smart(A), smart(B))", ["B finds one on sale while A does not, so A is less smart than B"]], "asymmetric_conclusion": [" finds one on sale(A) and not  finds one on sale(B), so Less(smart(B), smart(A))", ["A finds one on sale while B does not, so B is less smart than A"]], "negated_asymmetric_premise": [" finds one on sale(B) and not  finds one on sale(A), so not More(smart(A), smart(B))", ["B finds one on sale while A does not, so A is not more smart than B"]], "negated_asymmetric_conclusion": [" finds one on sale(A) and not  finds one on sale(B), so not More(smart(B), smart(A))", ["A finds one on sale while B does not, so B is not more smart than A"]]}
{"original": [" throws open(A) and not  throws open(B), so More(aggressive(A), aggressive(B))", ["A throws open while B does not, so A is more aggressive than B"]], "negated": [" throws open(A) and not  throws open(B), so not Less(aggressive(A), aggressive(B))", ["A throws open while B does not, so A is not less aggressive than B"]], "asymmetric_premise": [" throws open(B) and not  throws open(A), so Less(aggressive(A), aggressive(B))", ["B throws open while A does not, so A is less aggressive than B"]], "asymmetric_conclusion": [" throws open(A) and not  throws open(B), so Less(aggressive(B), aggressive(A))", ["A throws open while B does not, so B is less aggressive than A"]], "negated_asymmetric_premise": [" throws open(B) and not  throws open(A), so not More(aggressive(A), aggressive(B))", ["B throws open while A does not, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": [" throws open(A) and not  throws open(B), so not More(aggressive(B), aggressive(A))", ["A throws open while B does not, so B is not more aggressive than A"]]}
{"original": [" drinks from a firehose(A) and not  drinks from a firehose(B), so More(thirsty(A), thirsty(B))", ["A drinks from a firehose while B does not, so A is more thirsty than B"]], "negated": [" drinks from a firehose(A) and not  drinks from a firehose(B), so not Less(thirsty(A), thirsty(B))", ["A drinks from a firehose while B does not, so A is not less thirsty than B"]], "asymmetric_premise": [" drinks from a firehose(B) and not  drinks from a firehose(A), so Less(thirsty(A), thirsty(B))", ["B drinks from a firehose while A does not, so A is less thirsty than B"]], "asymmetric_conclusion": [" drinks from a firehose(A) and not  drinks from a firehose(B), so Less(thirsty(B), thirsty(A))", ["A drinks from a firehose while B does not, so B is less thirsty than A"]], "negated_asymmetric_premise": [" drinks from a firehose(B) and not  drinks from a firehose(A), so not More(thirsty(A), thirsty(B))", ["B drinks from a firehose while A does not, so A is not more thirsty than B"]], "negated_asymmetric_conclusion": [" drinks from a firehose(A) and not  drinks from a firehose(B), so not More(thirsty(B), thirsty(A))", ["A drinks from a firehose while B does not, so B is not more thirsty than A"]]}
{"original": [" plays football after school(A) and not  plays football after school(B), so More(athletic(A), athletic(B))", ["A plays football after school while B does not, so A is more athletic than B"]], "negated": [" plays football after school(A) and not  plays football after school(B), so not Less(athletic(A), athletic(B))", ["A plays football after school while B does not, so A is not less athletic than B"]], "asymmetric_premise": [" plays football after school(B) and not  plays football after school(A), so Less(athletic(A), athletic(B))", ["B plays football after school while A does not, so A is less athletic than B"]], "asymmetric_conclusion": [" plays football after school(A) and not  plays football after school(B), so Less(athletic(B), athletic(A))", ["A plays football after school while B does not, so B is less athletic than A"]], "negated_asymmetric_premise": [" plays football after school(B) and not  plays football after school(A), so not More(athletic(A), athletic(B))", ["B plays football after school while A does not, so A is not more athletic than B"]], "negated_asymmetric_conclusion": [" plays football after school(A) and not  plays football after school(B), so not More(athletic(B), athletic(A))", ["A plays football after school while B does not, so B is not more athletic than A"]]}
{"original": [" bothers another person so much(A) and not  bothers another person so much(B), so More(childish(A), childish(B))", ["A bothers another person so much while B does not, so A is more childish than B"]], "negated": [" bothers another person so much(A) and not  bothers another person so much(B), so not Less(childish(A), childish(B))", ["A bothers another person so much more than B, so A is not less childish than B"]], "asymmetric_premise": [" bothers another person so much(B) and not  bothers another person so much(A), so Less(childish(A), childish(B))", ["B bothers another person so much while A does not, so A is less childish than B"]], "asymmetric_conclusion": [" bothers another person so much(A) and not  bothers another person so much(B), so Less(childish(B), childish(A))", ["A bothers another person so much while B does not, so B is less childish than A"]], "negated_asymmetric_premise": [" bothers another person so much(B) and not  bothers another person so much(A), so not More(childish(A), childish(B))", ["B bothers another person so much more than A, so A is not more childish than B"]], "negated_asymmetric_conclusion": [" bothers another person so much(A) and not  bothers another person so much(B), so not More(childish(B), childish(A))", ["A bothers another person so much more than B, so B is not more childish than A"]]}
{"original": [" gathers together in another person name(A) and not  gathers together in another person name(B), so More(concillatory(A), concillatory(B))", ["A gathers together in another person name while B does not, so A is more concillatory than B"]], "negated": [" gathers together in another person name(A) and not  gathers together in another person name(B), so not Less(concillatory(A), concillatory(B))", ["A gathers together in another person name while B does not, so A is not less concillatory than B"]], "asymmetric_premise": [" gathers together in another person name(B) and not  gathers together in another person name(A), so Less(concillatory(A), concillatory(B))", ["B gathers together in another person name while A does not, so A is less concillatory than B"]], "asymmetric_conclusion": [" gathers together in another person name(A) and not  gathers together in another person name(B), so Less(concillatory(B), concillatory(A))", ["A gathers together in another person name while B does not, so B is less concillatory than A"]], "negated_asymmetric_premise": [" gathers together in another person name(B) and not  gathers together in another person name(A), so not More(concillatory(A), concillatory(B))", ["B gathers together in another person name more than A, so A is not more concillatory than B"]], "negated_asymmetric_conclusion": [" gathers together in another person name(A) and not  gathers together in another person name(B), so not More(concillatory(B), concillatory(A))", ["A gathers together in another person name while B does not, so B is not more concillatory than A"]]}
{"original": [" does not make the team(A) and not  does not make the team(B), so More(unskilled(A), unskilled(B))", ["A does not make the team while B does, so A is more unskilled than B"]], "negated": [" does not make the team(A) and not  does not make the team(B), so not Less(unskilled(A), unskilled(B))", ["A does not make the team more than B, so A is not less unskilled than B"]], "asymmetric_premise": [" does not make the team(B) and not  does not make the team(A), so Less(unskilled(A), unskilled(B))", ["B does not make the team while A does, so A is less unskilled than B"]], "asymmetric_conclusion": [" does not make the team(A) and not  does not make the team(B), so Less(unskilled(B), unskilled(A))", ["A does not make the team while B does, so B is less unskilled than A"]], "negated_asymmetric_premise": [" does not make the team(B) and not  does not make the team(A), so not More(unskilled(A), unskilled(B))", ["B does not make the team more than A, so A is not more unskilled than B"]], "negated_asymmetric_conclusion": [" does not make the team(A) and not  does not make the team(B), so not More(unskilled(B), unskilled(A))", ["A does not make the team more than B, so B is not more unskilled than A"]]}
{"original": [" would be mad(A) and not  would be mad(B), so More(apprehensive(A), apprehensive(B))", ["A would be mad while B would not, so A is more apprehensive than B"]], "negated": [" would be mad(A) and not  would be mad(B), so not Less(apprehensive(A), apprehensive(B))", ["A would be mad while B would not, so A is not less apprehensive than B"]], "asymmetric_premise": [" would be mad(B) and not  would be mad(A), so Less(apprehensive(A), apprehensive(B))", ["B would be mad while A would not, so A is less apprehensive than B"]], "asymmetric_conclusion": [" would be mad(A) and not  would be mad(B), so Less(apprehensive(B), apprehensive(A))", ["A would be mad while B would not, so B is less apprehensive than A"]], "negated_asymmetric_premise": [" would be mad(B) and not  would be mad(A), so not More(apprehensive(A), apprehensive(B))", ["B would be mad while A is not, so A is not more apprehensive than B"]], "negated_asymmetric_conclusion": [" would be mad(A) and not  would be mad(B), so not More(apprehensive(B), apprehensive(A))", ["A would be mad while B would not, so B is not more apprehensive than A"]]}
{"original": [" makes another person act(A) and not  makes another person act(B), so More(clever(A), clever(B))", ["A makes another person act while B does not, so A is more clever than B"]], "negated": [" makes another person act(A) and not  makes another person act(B), so not Less(clever(A), clever(B))", ["A makes another person act while B does not, so A is not less clever than B"]], "asymmetric_premise": [" makes another person act(B) and not  makes another person act(A), so Less(clever(A), clever(B))", ["B makes another person act while A does not, so A is less clever than B"]], "asymmetric_conclusion": [" makes another person act(A) and not  makes another person act(B), so Less(clever(B), clever(A))", ["A makes another person act while B does not, so B is less clever than A"]], "negated_asymmetric_premise": [" makes another person act(B) and not  makes another person act(A), so not More(clever(A), clever(B))", ["B makes another person act while A does not, so A is not more clever than B"]], "negated_asymmetric_conclusion": [" makes another person act(A) and not  makes another person act(B), so not More(clever(B), clever(A))", ["A makes another person act while B does not, so B is not more clever than A"]]}
{"original": [" presses upon another person(A) and not  presses upon another person(B), so More(bold(A), bold(B))", ["A presses upon another person while B does not, so A is more bold than B"]], "negated": [" presses upon another person(A) and not  presses upon another person(B), so not Less(bold(A), bold(B))", ["A presses upon another person while B does not, so A is not less bold than B"]], "asymmetric_premise": [" presses upon another person(B) and not  presses upon another person(A), so Less(bold(A), bold(B))", ["B presses upon another person while A does not, so A is less bold than B"]], "asymmetric_conclusion": [" presses upon another person(A) and not  presses upon another person(B), so Less(bold(B), bold(A))", ["A presses upon another person while B does not, so B is less bold than A"]], "negated_asymmetric_premise": [" presses upon another person(B) and not  presses upon another person(A), so not More(bold(A), bold(B))", ["B presses upon another person while A does not, so A is not more bold than B"]], "negated_asymmetric_conclusion": [" presses upon another person(A) and not  presses upon another person(B), so not More(bold(B), bold(A))", ["A presses upon another person while B does not, so B is not more bold than A"]]}
{"original": [" runs late for work(A) and not  runs late for work(B), so More(tired(A), tired(B))", ["A runs late for work while B does not, so A is more tired than B"]], "negated": [" runs late for work(A) and not  runs late for work(B), so not Less(tired(A), tired(B))", ["A runs late for work while B does not, so A is not less tired than B"]], "asymmetric_premise": [" runs late for work(B) and not  runs late for work(A), so Less(tired(A), tired(B))", ["B runs late for work while A does not, so A is less tired than B"]], "asymmetric_conclusion": [" runs late for work(A) and not  runs late for work(B), so Less(tired(B), tired(A))", ["A runs late for work while B does not, so B is less tired than A"]], "negated_asymmetric_premise": [" runs late for work(B) and not  runs late for work(A), so not More(tired(A), tired(B))", ["B runs late for work while A does not, so A is not more tired than B"]], "negated_asymmetric_conclusion": [" runs late for work(A) and not  runs late for work(B), so not More(tired(B), tired(A))", ["A runs late for work while B does not, so B is not more tired than A"]]}
{"original": [" spends a penny(A) and not  spends a penny(B), so More(budget oriented(A), budget oriented(B))", ["A spends a penny while B does not, so A is more budget oriented than B"]], "negated": [" spends a penny(A) and not  spends a penny(B), so not Less(budget oriented(A), budget oriented(B))", ["A spends a penny while B does not, so A is not less budget oriented than B"]], "asymmetric_premise": [" spends a penny(B) and not  spends a penny(A), so Less(budget oriented(A), budget oriented(B))", ["B spends a penny while A does not, so A is less budget oriented than B"]], "asymmetric_conclusion": [" spends a penny(A) and not  spends a penny(B), so Less(budget oriented(B), budget oriented(A))", ["A spends a penny while B does not, so B is less budget oriented than A"]], "negated_asymmetric_premise": [" spends a penny(B) and not  spends a penny(A), so not More(budget oriented(A), budget oriented(B))", ["B spends a penny while A does not, so A is not more budget oriented than B"]], "negated_asymmetric_conclusion": [" spends a penny(A) and not  spends a penny(B), so not More(budget oriented(B), budget oriented(A))", ["A spends a penny while B does not, so B is not more budget oriented than A"]]}
{"original": [" makes sense in terms(A) and not  makes sense in terms(B), so More(thoughtful(A), thoughtful(B))", ["A makes sense in terms while B does not, so A is more thoughtful than B"]], "negated": [" makes sense in terms(A) and not  makes sense in terms(B), so not Less(thoughtful(A), thoughtful(B))", ["A makes sense in terms while B does not, so A is not less thoughtful than B"]], "asymmetric_premise": [" makes sense in terms(B) and not  makes sense in terms(A), so Less(thoughtful(A), thoughtful(B))", ["B makes sense in terms while A does not, so A is less thoughtful than B"]], "asymmetric_conclusion": [" makes sense in terms(A) and not  makes sense in terms(B), so Less(thoughtful(B), thoughtful(A))", ["A makes sense in terms while B does not, so B is less thoughtful than A"]], "negated_asymmetric_premise": [" makes sense in terms(B) and not  makes sense in terms(A), so not More(thoughtful(A), thoughtful(B))", ["B makes sense in terms while A does not, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": [" makes sense in terms(A) and not  makes sense in terms(B), so not More(thoughtful(B), thoughtful(A))", ["A makes sense in terms while B does not, so B is not more thoughtful than A"]]}
{"original": [" needs practice(A) and not  needs practice(B), so More(studious(A), studious(B))", ["A needs practice while B does not, so A is more studious than B"]], "negated": [" needs practice(A) and not  needs practice(B), so not Less(studious(A), studious(B))", ["A needs practice while B does not, so A is not less studious than B"]], "asymmetric_premise": [" needs practice(B) and not  needs practice(A), so Less(studious(A), studious(B))", ["B needs practice while A does not, so A is less studious than B"]], "asymmetric_conclusion": [" needs practice(A) and not  needs practice(B), so Less(studious(B), studious(A))", ["A needs practice while B does not, so B is less studious than A"]], "negated_asymmetric_premise": [" needs practice(B) and not  needs practice(A), so not More(studious(A), studious(B))", ["B needs practice more than A, so A is not more studious than B"]], "negated_asymmetric_conclusion": [" needs practice(A) and not  needs practice(B), so not More(studious(B), studious(A))", ["A needs practice more than B, so B is not more studious than A"]]}
{"original": [" walks around town(A) and not  walks around town(B), so More(explorer(A), explorer(B))", ["A walks around town while B does not, so A is a more explorer than B"]], "negated": [" walks around town(A) and not  walks around town(B), so not Less(explorer(A), explorer(B))", ["A walks around town while B does not, so A is not less explorer than B"]], "asymmetric_premise": [" walks around town(B) and not  walks around town(A), so Less(explorer(A), explorer(B))", ["B walks around town while A does not, so A is a less explorer than B"]], "asymmetric_conclusion": [" walks around town(A) and not  walks around town(B), so Less(explorer(B), explorer(A))", ["A walks around town while B does not, so B is a less explorer than A"]], "negated_asymmetric_premise": [" walks around town(B) and not  walks around town(A), so not More(explorer(A), explorer(B))", ["B walks around town while A does not, so A is not a more explorer than B"]], "negated_asymmetric_conclusion": [" walks around town(A) and not  walks around town(B), so not More(explorer(B), explorer(A))", ["A walks around town while B does not, so B is not a more explorer than A"]]}
{"original": [" moves around a lot(A) and not  moves around a lot(B), so More(restless(A), restless(B))", ["A moves around a lot while B does not, so A is more restless than B"]], "negated": [" moves around a lot(A) and not  moves around a lot(B), so not Less(restless(A), restless(B))", ["A moves around a lot more than B, so A is not less restless than B"]], "asymmetric_premise": [" moves around a lot(B) and not  moves around a lot(A), so Less(restless(A), restless(B))", ["B moves around a lot while A does not, so A is less restless than B"]], "asymmetric_conclusion": [" moves around a lot(A) and not  moves around a lot(B), so Less(restless(B), restless(A))", ["A moves around a lot while B does not, so B is less restless than A"]], "negated_asymmetric_premise": [" moves around a lot(B) and not  moves around a lot(A), so not More(restless(A), restless(B))", ["B moves around a lot more than A, so A is not more restless than B"]], "negated_asymmetric_conclusion": [" moves around a lot(A) and not  moves around a lot(B), so not More(restless(B), restless(A))", ["A moves around a lot more than B, so B is not more restless than A"]]}
{"original": [" listens to another person talk(A) and not  listens to another person talk(B), so More(observant(A), observant(B))", ["A listens to another person talk while B does not, so A is more observant than B"]], "negated": [" listens to another person talk(A) and not  listens to another person talk(B), so not Less(observant(A), observant(B))", ["A listens to another person talk while B does not, so A is not less observant than B"]], "asymmetric_premise": [" listens to another person talk(B) and not  listens to another person talk(A), so Less(observant(A), observant(B))", ["B listens to another person talk while A does not, so A is less observant than B"]], "asymmetric_conclusion": [" listens to another person talk(A) and not  listens to another person talk(B), so Less(observant(B), observant(A))", ["A listens to another person talk while B does not, so B is less observant than A"]], "negated_asymmetric_premise": [" listens to another person talk(B) and not  listens to another person talk(A), so not More(observant(A), observant(B))", ["B listens to another person talk while A does not, so A is not more observant than B"]], "negated_asymmetric_conclusion": [" listens to another person talk(A) and not  listens to another person talk(B), so not More(observant(B), observant(A))", ["A listens to another person talk while B does not, so B is not more observant than A"]]}
{"original": [" rids the bike(A) and not  rids the bike(B), so More(athletic(A), athletic(B))", ["A rids the bike while B does not, so A is more athletic than B"]], "negated": [" rids the bike(A) and not  rids the bike(B), so not Less(athletic(A), athletic(B))", ["A rids the bike while B does not, so A is not less athletic than B"]], "asymmetric_premise": [" rids the bike(B) and not  rids the bike(A), so Less(athletic(A), athletic(B))", ["B rids the bike while A does not, so A is less athletic than B"]], "asymmetric_conclusion": [" rids the bike(A) and not  rids the bike(B), so Less(athletic(B), athletic(A))", ["A rids the bike while B does not, so B is less athletic than A"]], "negated_asymmetric_premise": [" rids the bike(B) and not  rids the bike(A), so not More(athletic(A), athletic(B))", ["B rids the bike while A does not, so A is not more athletic than B"]], "negated_asymmetric_conclusion": [" rids the bike(A) and not  rids the bike(B), so not More(athletic(B), athletic(A))", ["A rids the bike while B does not, so B is not more athletic than A"]]}
{"original": [" loves country music(A) and not  loves country music(B), so More(simple(A), simple(B))", ["A loves country music while B does not, so A is more simple than B"]], "negated": [" loves country music(A) and not  loves country music(B), so not Less(simple(A), simple(B))", ["A loves country music while B does not, so A is not less simple than B"]], "asymmetric_premise": [" loves country music(B) and not  loves country music(A), so Less(simple(A), simple(B))", ["B loves country music while A does not, so A is less simple than B"]], "asymmetric_conclusion": [" loves country music(A) and not  loves country music(B), so Less(simple(B), simple(A))", ["A loves country music while B does not, so B is less simple than A"]], "negated_asymmetric_premise": [" loves country music(B) and not  loves country music(A), so not More(simple(A), simple(B))", ["B loves country music while A does not, so A is not more simple than B"]], "negated_asymmetric_conclusion": [" loves country music(A) and not  loves country music(B), so not More(simple(B), simple(A))", ["A loves country music while B does not, so B is not more simple than A"]]}
{"original": [" gives another person presents(A) and not  gives another person presents(B), so More(considerate(A), considerate(B))", ["A gives another person presents while B does not, so A is more considerate than B"]], "negated": [" gives another person presents(A) and not  gives another person presents(B), so not Less(considerate(A), considerate(B))", ["A gives another person presents while B does not, so A is not less considerate than B"]], "asymmetric_premise": [" gives another person presents(B) and not  gives another person presents(A), so Less(considerate(A), considerate(B))", ["B gives another person presents while A does not, so A is less considerate than B"]], "asymmetric_conclusion": [" gives another person presents(A) and not  gives another person presents(B), so Less(considerate(B), considerate(A))", ["A gives another person presents while B does not, so B is less considerate than A"]], "negated_asymmetric_premise": [" gives another person presents(B) and not  gives another person presents(A), so not More(considerate(A), considerate(B))", ["B gives another person presents while A does not, so A is not more considerate than B"]], "negated_asymmetric_conclusion": [" gives another person presents(A) and not  gives another person presents(B), so not More(considerate(B), considerate(A))", ["A gives another person presents while B does not, so B is not more considerate than A"]]}
{"original": [" teaches another person anything(A) and not  teaches another person anything(B), so More(helpful(A), helpful(B))", ["A teaches another person anything while B does not, so A is more helpful than B"]], "negated": [" teaches another person anything(A) and not  teaches another person anything(B), so not Less(helpful(A), helpful(B))", ["A teaches another person anything while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" teaches another person anything(B) and not  teaches another person anything(A), so Less(helpful(A), helpful(B))", ["B teaches another person anything while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" teaches another person anything(A) and not  teaches another person anything(B), so Less(helpful(B), helpful(A))", ["A teaches another person anything while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" teaches another person anything(B) and not  teaches another person anything(A), so not More(helpful(A), helpful(B))", ["B teaches another person anything while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" teaches another person anything(A) and not  teaches another person anything(B), so not More(helpful(B), helpful(A))", ["A teaches another person anything while B does not, so B is not more helpful than A"]]}
{"original": [" is so excited to go(A) and not  is so excited to go(B), so More(brave(A), brave(B))", ["A is so excited to go while B is not, so A is more brave than B"]], "negated": [" is so excited to go(A) and not  is so excited to go(B), so not Less(brave(A), brave(B))", ["A is so excited to go while B is not, so A is not less brave than B"]], "asymmetric_premise": [" is so excited to go(B) and not  is so excited to go(A), so Less(brave(A), brave(B))", ["B is so excited to go while A is not, so A is less brave than B"]], "asymmetric_conclusion": [" is so excited to go(A) and not  is so excited to go(B), so Less(brave(B), brave(A))", ["A is so excited to go while B is not, so B is less brave than A"]], "negated_asymmetric_premise": [" is so excited to go(B) and not  is so excited to go(A), so not More(brave(A), brave(B))", ["B is so excited to go, so A is not more brave than B"]], "negated_asymmetric_conclusion": [" is so excited to go(A) and not  is so excited to go(B), so not More(brave(B), brave(A))", ["A is so excited to go while B is not, so B is not more brave than A"]]}
{"original": [" sings the song(A) and not  sings the song(B), so More(talented(A), talented(B))", ["A sings the song while B does not, so A is more talented than B"]], "negated": [" sings the song(A) and not  sings the song(B), so not Less(talented(A), talented(B))", ["A sings the song while B does not, so A is not less talented than B"]], "asymmetric_premise": [" sings the song(B) and not  sings the song(A), so Less(talented(A), talented(B))", ["B sings the song while A does not, so A is less talented than B"]], "asymmetric_conclusion": [" sings the song(A) and not  sings the song(B), so Less(talented(B), talented(A))", ["A sings the song while B does not, so B is less talented than A"]], "negated_asymmetric_premise": [" sings the song(B) and not  sings the song(A), so not More(talented(A), talented(B))", ["B sings the song while A does not, so A is not more talented than B"]], "negated_asymmetric_conclusion": [" sings the song(A) and not  sings the song(B), so not More(talented(B), talented(A))", ["A sings the song while B does not, so B is not more talented than A"]]}
{"original": [" bakes all day(A) and not  bakes all day(B), so More(consistent(A), consistent(B))", ["A bakes all day while B does not, so A is more consistent than B"]], "negated": [" bakes all day(A) and not  bakes all day(B), so not Less(consistent(A), consistent(B))", ["A bakes all day while B does not, so A is not less consistent than B"]], "asymmetric_premise": [" bakes all day(B) and not  bakes all day(A), so Less(consistent(A), consistent(B))", ["B bakes all day while A does not, so A is less consistent than B"]], "asymmetric_conclusion": [" bakes all day(A) and not  bakes all day(B), so Less(consistent(B), consistent(A))", ["A bakes all day while B does not, so B is less consistent than A"]], "negated_asymmetric_premise": [" bakes all day(B) and not  bakes all day(A), so not More(consistent(A), consistent(B))", ["B bakes all day while A does not, so A is not more consistent than B"]], "negated_asymmetric_conclusion": [" bakes all day(A) and not  bakes all day(B), so not More(consistent(B), consistent(A))", ["A bakes all day while B does not, so B is not more consistent than A"]]}
{"original": [" takes their glasses(A) and not  takes their glasses(B), so More(content(A), content(B))", ["A takes their glasses while B does not, so A is more content than B"]], "negated": [" takes their glasses(A) and not  takes their glasses(B), so not Less(content(A), content(B))", ["A takes their glasses while B does not, so A is not less content than B"]], "asymmetric_premise": [" takes their glasses(B) and not  takes their glasses(A), so Less(content(A), content(B))", ["B takes their glasses while A does not, so A is less content than B"]], "asymmetric_conclusion": [" takes their glasses(A) and not  takes their glasses(B), so Less(content(B), content(A))", ["A takes their glasses while B does not, so B is less content than A"]], "negated_asymmetric_premise": [" takes their glasses(B) and not  takes their glasses(A), so not More(content(A), content(B))", ["B takes their glasses while A does not, so A is not more content than B"]], "negated_asymmetric_conclusion": [" takes their glasses(A) and not  takes their glasses(B), so not More(content(B), content(A))", ["A takes their glasses while B does not, so B is not more content than A"]]}
{"original": [" smells so bad(A) and not  smells so bad(B), so More(stinky(A), stinky(B))", ["A smells so bad while B does not, so A is more stinky than B"]], "negated": [" smells so bad(A) and not  smells so bad(B), so not Less(stinky(A), stinky(B))", ["A smells so bad while B does not, so A is not less stinky than B"]], "asymmetric_premise": [" smells so bad(B) and not  smells so bad(A), so Less(stinky(A), stinky(B))", ["B smells so bad while A does not, so A is less stinky than B"]], "asymmetric_conclusion": [" smells so bad(A) and not  smells so bad(B), so Less(stinky(B), stinky(A))", ["A smells so bad while B does not, so B is less stinky than A"]], "negated_asymmetric_premise": [" smells so bad(B) and not  smells so bad(A), so not More(stinky(A), stinky(B))", ["B smells so bad while A does not, so A is not more stinky than B"]], "negated_asymmetric_conclusion": [" smells so bad(A) and not  smells so bad(B), so not More(stinky(B), stinky(A))", ["A smells so bad while B does not, so B is not more stinky than A"]]}
{"original": [" plays videogames(A) and not  plays videogames(B), so More(entertainment seeking(A), entertainment seeking(B))", ["A plays videogames while B does not, so A is more entertainment seeking than B"]], "negated": [" plays videogames(A) and not  plays videogames(B), so not Less(entertainment seeking(A), entertainment seeking(B))", ["A plays videogames while B does not, so A is not less entertainment seeking than B"]], "asymmetric_premise": [" plays videogames(B) and not  plays videogames(A), so Less(entertainment seeking(A), entertainment seeking(B))", ["B plays videogames while A does not, so A is less entertainment seeking than B"]], "asymmetric_conclusion": [" plays videogames(A) and not  plays videogames(B), so Less(entertainment seeking(B), entertainment seeking(A))", ["A plays videogames while B does not, so B is less entertainment seeking than A"]], "negated_asymmetric_premise": [" plays videogames(B) and not  plays videogames(A), so not More(entertainment seeking(A), entertainment seeking(B))", ["B plays videogames while A does not, so A is not more entertainment seeking than B"]], "negated_asymmetric_conclusion": [" plays videogames(A) and not  plays videogames(B), so not More(entertainment seeking(B), entertainment seeking(A))", ["A plays videogames while B does not, so B is not more entertainment seeking than A"]]}
{"original": [" loses their glasses(A) and not  loses their glasses(B), so More(careless(A), careless(B))", ["A loses their glasses while B does not, so A is more careless than B"]], "negated": [" loses their glasses(A) and not  loses their glasses(B), so not Less(careless(A), careless(B))", ["A loses their glasses while B does not, so A is not less careless than B"]], "asymmetric_premise": [" loses their glasses(B) and not  loses their glasses(A), so Less(careless(A), careless(B))", ["B loses their glasses while A does not, so A is less careless than B"]], "asymmetric_conclusion": [" loses their glasses(A) and not  loses their glasses(B), so Less(careless(B), careless(A))", ["A loses their glasses while B does not, so B is less careless than A"]], "negated_asymmetric_premise": [" loses their glasses(B) and not  loses their glasses(A), so not More(careless(A), careless(B))", ["B loses their glasses while A does not, so A is not more careless than B"]], "negated_asymmetric_conclusion": [" loses their glasses(A) and not  loses their glasses(B), so not More(careless(B), careless(A))", ["A loses their glasses while B does not, so B is not more careless than A"]]}
{"original": [" looks in another person's eyes(A) and not  looks in another person's eyes(B), so More(beautiful(A), beautiful(B))", ["A looks in another person's eyes while B does not, so A is more beautiful than B"]], "negated": [" looks in another person's eyes(A) and not  looks in another person's eyes(B), so not Less(beautiful(A), beautiful(B))", ["A looks in another person's eyes while B does not, so A is not less beautiful than B"]], "asymmetric_premise": [" looks in another person's eyes(B) and not  looks in another person's eyes(A), so Less(beautiful(A), beautiful(B))", ["B looks in another person's eyes while A does not, so A is less beautiful than B"]], "asymmetric_conclusion": [" looks in another person's eyes(A) and not  looks in another person's eyes(B), so Less(beautiful(B), beautiful(A))", ["A looks in another person's eyes while B does not, so B is less beautiful than A"]], "negated_asymmetric_premise": [" looks in another person's eyes(B) and not  looks in another person's eyes(A), so not More(beautiful(A), beautiful(B))", ["B looks in another person's eyes while A does not, so A is not more beautiful than B"]], "negated_asymmetric_conclusion": [" looks in another person's eyes(A) and not  looks in another person's eyes(B), so not More(beautiful(B), beautiful(A))", ["A looks in another person's eyes while B does not, so B is not more beautiful than A"]]}
{"original": ["More( feels a lump(A),  feels a lump(B)), so More(concerned(A), concerned(B))", ["A feels a lump while B does not, so A is more concerned than B"]], "negated": ["More( feels a lump(A),  feels a lump(B)), so not Less(concerned(A), concerned(B))", ["A feels a lump more than B, so A is not less concerned than B"]], "asymmetric_premise": ["More( feels a lump(B),  feels a lump(A)), so Less(concerned(A), concerned(B))", ["B feels a lump, A does not, so A is less concerned than B"]], "asymmetric_conclusion": ["More( feels a lump(A),  feels a lump(B)), so Less(concerned(B), concerned(A))", ["A feels a lump while B does not, so B is less concerned than A"]], "negated_asymmetric_premise": ["More( feels a lump(B),  feels a lump(A)), so not More(concerned(A), concerned(B))", ["B feels a lump, A does not, so A is not more concerned than B"]], "negated_asymmetric_conclusion": ["More( feels a lump(A),  feels a lump(B)), so not More(concerned(B), concerned(A))", ["A feels a lump while B does not, so B is not more concerned than A"]]}
{"original": [" never listened(A) and not  never listened(B), so More(undisciplined(A), undisciplined(B))", ["A never listened while B did, so A is more undisciplined than B"]], "negated": [" never listened(A) and not  never listened(B), so not Less(undisciplined(A), undisciplined(B))", ["A never listened while B did, so A is not less undisciplined than B"]], "asymmetric_premise": [" never listened(B) and not  never listened(A), so Less(undisciplined(A), undisciplined(B))", ["B never listened while A did, so A is less undisciplined than B"]], "asymmetric_conclusion": [" never listened(A) and not  never listened(B), so Less(undisciplined(B), undisciplined(A))", ["A never listened while B did, so B is less undisciplined than A"]], "negated_asymmetric_premise": [" never listened(B) and not  never listened(A), so not More(undisciplined(A), undisciplined(B))", ["B never listened while A did, so A is not more undisciplined than B"]], "negated_asymmetric_conclusion": [" never listened(A) and not  never listened(B), so not More(undisciplined(B), undisciplined(A))", ["A never listened while B did, so B is not more undisciplined than A"]]}
{"original": [" calls the cops(A) and not  calls the cops(B), so More(honest(A), honest(B))", ["A calls the cops while B does not, so A is more honest than B"]], "negated": [" calls the cops(A) and not  calls the cops(B), so not Less(honest(A), honest(B))", ["A calls the cops while B does not, so A is not less honest than B"]], "asymmetric_premise": [" calls the cops(B) and not  calls the cops(A), so Less(honest(A), honest(B))", ["B calls the cops while A does not, so A is less honest than B"]], "asymmetric_conclusion": [" calls the cops(A) and not  calls the cops(B), so Less(honest(B), honest(A))", ["A calls the cops while B does not, so B is less honest than A"]], "negated_asymmetric_premise": [" calls the cops(B) and not  calls the cops(A), so not More(honest(A), honest(B))", ["B calls the cops while A does not, so A is not more honest than B"]], "negated_asymmetric_conclusion": [" calls the cops(A) and not  calls the cops(B), so not More(honest(B), honest(A))", ["A calls the cops while B does not, so B is not more honest than A"]]}
{"original": [" leaves the country(A) and not  leaves the country(B), so More(fleeing(A), fleeing(B))", ["A leaves the country while B does not, so A is more likely to be fleeing than B"]], "negated": [" leaves the country(A) and not  leaves the country(B), so not Less(fleeing(A), fleeing(B))", ["A leaves the country while B does not, so A is not less likely to be fleeing than B"]], "asymmetric_premise": [" leaves the country(B) and not  leaves the country(A), so Less(fleeing(A), fleeing(B))", ["B leaves the country while A does not, so A is less likely to be fleeing than B"]], "asymmetric_conclusion": [" leaves the country(A) and not  leaves the country(B), so Less(fleeing(B), fleeing(A))", ["A leaves the country while B does not, so B is less likely to be fleeing than A"]], "negated_asymmetric_premise": [" leaves the country(B) and not  leaves the country(A), so not More(fleeing(A), fleeing(B))", ["B leaves the country while A does not, so A is not more likely to be fleeing than B"]], "negated_asymmetric_conclusion": [" leaves the country(A) and not  leaves the country(B), so not More(fleeing(B), fleeing(A))", ["A leaves the country while B does not, so B is not more fleeing than A"]]}
{"original": [" brings another person back to life(A) and not  brings another person back to life(B), so More(skilled(A), skilled(B))", ["A brings another person back to life while B does not, so A is more skilled than B"]], "negated": [" brings another person back to life(A) and not  brings another person back to life(B), so not Less(skilled(A), skilled(B))", ["A brings another person back to life while B does not, so A is not less skilled than B"]], "asymmetric_premise": [" brings another person back to life(B) and not  brings another person back to life(A), so Less(skilled(A), skilled(B))", ["B brings another person back to life while A does not, so A is less skilled than B"]], "asymmetric_conclusion": [" brings another person back to life(A) and not  brings another person back to life(B), so Less(skilled(B), skilled(A))", ["A brings another person back to life while B does not, so B is less skilled than A"]], "negated_asymmetric_premise": [" brings another person back to life(B) and not  brings another person back to life(A), so not More(skilled(A), skilled(B))", ["B brings another person back to life while A does not, so A is not more skilled than B"]], "negated_asymmetric_conclusion": [" brings another person back to life(A) and not  brings another person back to life(B), so not More(skilled(B), skilled(A))", ["A brings another person back to life while B does not, so B is not more skilled than A"]]}
{"original": [" replaces the bulb(A) and not  replaces the bulb(B), so More(competent(A), competent(B))", ["A replaces the bulb while B does not, so A is more competent than B"]], "negated": [" replaces the bulb(A) and not  replaces the bulb(B), so not Less(competent(A), competent(B))", ["A replaces the bulb while B does not, so A is not less competent than B"]], "asymmetric_premise": [" replaces the bulb(B) and not  replaces the bulb(A), so Less(competent(A), competent(B))", ["B replaces the bulb while A does not, so A is less competent than B"]], "asymmetric_conclusion": [" replaces the bulb(A) and not  replaces the bulb(B), so Less(competent(B), competent(A))", ["A replaces the bulb while B does not, so B is less competent than A"]], "negated_asymmetric_premise": [" replaces the bulb(B) and not  replaces the bulb(A), so not More(competent(A), competent(B))", ["B replaces the bulb while A does not, so A is not more competent than B"]], "negated_asymmetric_conclusion": [" replaces the bulb(A) and not  replaces the bulb(B), so not More(competent(B), competent(A))", ["A replaces the bulb while B does not, so B is not more competent than A"]]}
{"original": [" worships the ground another person walks on(A) and not  worships the ground another person walks on(B), so More(fawning(A), fawning(B))", ["A worships the ground another person walks on more than B, so A is more fawning than B"]], "negated": [" worships the ground another person walks on(A) and not  worships the ground another person walks on(B), so not Less(fawning(A), fawning(B))", ["A worships the ground another person walks on more than B, so A is not less fawning than B"]], "asymmetric_premise": [" worships the ground another person walks on(B) and not  worships the ground another person walks on(A), so Less(fawning(A), fawning(B))", ["B worships the ground another person walks on more than A, so A is less fawning than B"]], "asymmetric_conclusion": [" worships the ground another person walks on(A) and not  worships the ground another person walks on(B), so Less(fawning(B), fawning(A))", ["A worships the ground another person walks on more than B, so B is less fawning than A"]], "negated_asymmetric_premise": [" worships the ground another person walks on(B) and not  worships the ground another person walks on(A), so not More(fawning(A), fawning(B))", ["B worships the ground another person walks on more than A, so A is not more fawning than B"]], "negated_asymmetric_conclusion": [" worships the ground another person walks on(A) and not  worships the ground another person walks on(B), so not More(fawning(B), fawning(A))", ["A worships the ground another person walks on more than B, so B is not more fawning than A"]]}
{"original": [" hears a knock on their door(A) and not  hears a knock on their door(B), so More(curious(A), curious(B))", ["A hears a knock on their door while B does not, so A is more curious than B"]], "negated": [" hears a knock on their door(A) and not  hears a knock on their door(B), so not Less(curious(A), curious(B))", ["A hears a knock on their door while B does not, so A is not less curious than B"]], "asymmetric_premise": [" hears a knock on their door(B) and not  hears a knock on their door(A), so Less(curious(A), curious(B))", ["B hears a knock on their door while A does not, so A is less curious than B"]], "asymmetric_conclusion": [" hears a knock on their door(A) and not  hears a knock on their door(B), so Less(curious(B), curious(A))", ["A hears a knock on their door while B does not, so B is less curious than A"]], "negated_asymmetric_premise": [" hears a knock on their door(B) and not  hears a knock on their door(A), so not More(curious(A), curious(B))", ["B hears a knock on their door while A does not, so A is not more curious than B"]], "negated_asymmetric_conclusion": [" hears a knock on their door(A) and not  hears a knock on their door(B), so not More(curious(B), curious(A))", ["A hears a knock on their door while B does not, so B is not more curious than A"]]}
{"original": [" tells another person was pregnant(A) and not  tells another person was pregnant(B), so More(excited(A), excited(B))", ["A tells another person was pregnant while B does not, so A is more excited than B"]], "negated": [" tells another person was pregnant(A) and not  tells another person was pregnant(B), so not Less(excited(A), excited(B))", ["A tells another person was pregnant while B does not, so A is not less excited than B"]], "asymmetric_premise": [" tells another person was pregnant(B) and not  tells another person was pregnant(A), so Less(excited(A), excited(B))", ["B tells another person was pregnant while A does not, so A is less excited than B"]], "asymmetric_conclusion": [" tells another person was pregnant(A) and not  tells another person was pregnant(B), so Less(excited(B), excited(A))", ["A tells another person was pregnant while B does not, so B is less excited than A"]], "negated_asymmetric_premise": [" tells another person was pregnant(B) and not  tells another person was pregnant(A), so not More(excited(A), excited(B))", ["B tells another person was pregnant while A does not, so A is not more excited than B"]], "negated_asymmetric_conclusion": [" tells another person was pregnant(A) and not  tells another person was pregnant(B), so not More(excited(B), excited(A))", ["A tells another person was pregnant while B does not, so B is not more excited than A"]]}
{"original": [" rides another person's bike(A) and not  rides another person's bike(B), so More(adventurous(A), adventurous(B))", ["A rides another person's bike while B does not, so A is more adventurous than B"]], "negated": [" rides another person's bike(A) and not  rides another person's bike(B), so not Less(adventurous(A), adventurous(B))", ["A rides another person's bike while B does not, so A is not less adventurous than B"]], "asymmetric_premise": [" rides another person's bike(B) and not  rides another person's bike(A), so Less(adventurous(A), adventurous(B))", ["B rides another person's bike while A does not, so A is less adventurous than B"]], "asymmetric_conclusion": [" rides another person's bike(A) and not  rides another person's bike(B), so Less(adventurous(B), adventurous(A))", ["A rides another person's bike while B does not, so B is less adventurous than A"]], "negated_asymmetric_premise": [" rides another person's bike(B) and not  rides another person's bike(A), so not More(adventurous(A), adventurous(B))", ["B rides another person's bike while A does not, so A is not more adventurous than B"]], "negated_asymmetric_conclusion": [" rides another person's bike(A) and not  rides another person's bike(B), so not More(adventurous(B), adventurous(A))", ["A rides another person's bike while B does not, so B is not more adventurous than A"]]}
{"original": [" hands another person his hat(A) and not  hands another person his hat(B), so More(helpful(A), helpful(B))", ["A hands another person his hat while B does not, so A is more helpful than B"]], "negated": [" hands another person his hat(A) and not  hands another person his hat(B), so not Less(helpful(A), helpful(B))", ["A hands another person his hat while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" hands another person his hat(B) and not  hands another person his hat(A), so Less(helpful(A), helpful(B))", ["B hands another person his hat while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" hands another person his hat(A) and not  hands another person his hat(B), so Less(helpful(B), helpful(A))", ["A hands another person his hat while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" hands another person his hat(B) and not  hands another person his hat(A), so not More(helpful(A), helpful(B))", ["B hands another person his hat while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" hands another person his hat(A) and not  hands another person his hat(B), so not More(helpful(B), helpful(A))", ["A hands another person his hat while B does not, so B is not more helpful than A"]]}
{"original": [" quits understanding objective reality(A) and not  quits understanding objective reality(B), so More(insane(A), insane(B))", ["A quits understanding objective reality while B does not, so A is more insane than B"]], "negated": [" quits understanding objective reality(A) and not  quits understanding objective reality(B), so not Less(insane(A), insane(B))", ["A quits understanding objective reality while B does not, so A is not less insane than B"]], "asymmetric_premise": [" quits understanding objective reality(B) and not  quits understanding objective reality(A), so Less(insane(A), insane(B))", ["B quits understanding objective reality while A does not, so A is less insane than B"]], "asymmetric_conclusion": [" quits understanding objective reality(A) and not  quits understanding objective reality(B), so Less(insane(B), insane(A))", ["A quits understanding objective reality while B does not, so B is less insane than A"]], "negated_asymmetric_premise": [" quits understanding objective reality(B) and not  quits understanding objective reality(A), so not More(insane(A), insane(B))", ["B quits understanding objective reality while A does not, so A is not more insane than B"]], "negated_asymmetric_conclusion": [" quits understanding objective reality(A) and not  quits understanding objective reality(B), so not More(insane(B), insane(A))", ["A quits understanding objective reality while B does not, so B is not more insane than A"]]}
{"original": [" eats chinese food(A) and not  eats chinese food(B), so More(starving(A), starving(B))", ["A eats chinese food while B does not, so A is more starving than B"]], "negated": [" eats chinese food(A) and not  eats chinese food(B), so not Less(starving(A), starving(B))", ["A eats chinese food while B does not, so A is not less starving than B"]], "asymmetric_premise": [" eats chinese food(B) and not  eats chinese food(A), so Less(starving(A), starving(B))", ["B eats chinese food while A does not, so A is less starving than B"]], "asymmetric_conclusion": [" eats chinese food(A) and not  eats chinese food(B), so Less(starving(B), starving(A))", ["A eats chinese food while B does not, so B is less starving than A"]], "negated_asymmetric_premise": [" eats chinese food(B) and not  eats chinese food(A), so not More(starving(A), starving(B))", ["B eats chinese food while A does not, so A is not more starving than B"]], "negated_asymmetric_conclusion": [" eats chinese food(A) and not  eats chinese food(B), so not More(starving(B), starving(A))", ["A eats chinese food while B does not, so B is not more starving than A"]]}
{"original": [" asks another person's wife(A) and not  asks another person's wife(B), so More(curious(A), curious(B))", ["A asks another person's wife while B does not, so A is more curious than B"]], "negated": [" asks another person's wife(A) and not  asks another person's wife(B), so not Less(curious(A), curious(B))", ["A asks another person's wife while B does not, so A is not less curious than B"]], "asymmetric_premise": [" asks another person's wife(B) and not  asks another person's wife(A), so Less(curious(A), curious(B))", ["B asks another person's wife while A does not, so A is less curious than B"]], "asymmetric_conclusion": [" asks another person's wife(A) and not  asks another person's wife(B), so Less(curious(B), curious(A))", ["A asks another person's wife while B does not, so B is less curious than A"]], "negated_asymmetric_premise": [" asks another person's wife(B) and not  asks another person's wife(A), so not More(curious(A), curious(B))", ["B asks another person's wife while A does not, so A is not more curious than B"]], "negated_asymmetric_conclusion": [" asks another person's wife(A) and not  asks another person's wife(B), so not More(curious(B), curious(A))", ["A asks another person's wife while B does not, so B is not more curious than A"]]}
{"original": [" plays it safe(A) and not  plays it safe(B), so More(cautious(A), cautious(B))", ["A plays it safe while B does not, so A is more cautious than B"]], "negated": [" plays it safe(A) and not  plays it safe(B), so not Less(cautious(A), cautious(B))", ["A plays it safe while B does not, so A is not less cautious than B"]], "asymmetric_premise": [" plays it safe(B) and not  plays it safe(A), so Less(cautious(A), cautious(B))", ["B plays it safe while A does not, so A is less cautious than B"]], "asymmetric_conclusion": [" plays it safe(A) and not  plays it safe(B), so Less(cautious(B), cautious(A))", ["A plays it safe while B does not, so B is less cautious than A"]], "negated_asymmetric_premise": [" plays it safe(B) and not  plays it safe(A), so not More(cautious(A), cautious(B))", ["B plays it safe while A does not, so A is not more cautious than B"]], "negated_asymmetric_conclusion": [" plays it safe(A) and not  plays it safe(B), so not More(cautious(B), cautious(A))", ["A plays it safe while B does not, so B is not more cautious than A"]]}
{"original": [" tells jeff(A) and not  tells jeff(B), so More(talkative(A), talkative(B))", ["A tells jeff something while B does not, so A is more talkative than B"]], "negated": [" tells jeff(A) and not  tells jeff(B), so not Less(talkative(A), talkative(B))", ["A tells jeff something while B does not, so A is not less talkative than B"]], "asymmetric_premise": [" tells jeff(B) and not  tells jeff(A), so Less(talkative(A), talkative(B))", ["B tells jeff something while A does not, so A is less talkative than B"]], "asymmetric_conclusion": [" tells jeff(A) and not  tells jeff(B), so Less(talkative(B), talkative(A))", ["A tells jeff something while B does not, so B is less talkative than A"]], "negated_asymmetric_premise": [" tells jeff(B) and not  tells jeff(A), so not More(talkative(A), talkative(B))", ["B tells jeff something while A does not, so A is not more talkative than B"]], "negated_asymmetric_conclusion": [" tells jeff(A) and not  tells jeff(B), so not More(talkative(B), talkative(A))", ["A tells jeff something while B does not, so B is not more talkative than A"]]}
{"original": [" looks at another person's wife(A) and not  looks at another person's wife(B), so More(aware(A), aware(B))", ["A looks at another person's wife while B does not, so A is more aware than B"]], "negated": [" looks at another person's wife(A) and not  looks at another person's wife(B), so not Less(aware(A), aware(B))", ["A looks at another person's wife while B does not, so A is not less aware than B"]], "asymmetric_premise": [" looks at another person's wife(B) and not  looks at another person's wife(A), so Less(aware(A), aware(B))", ["B looks at another person's wife while A does not, so A is less aware than B"]], "asymmetric_conclusion": [" looks at another person's wife(A) and not  looks at another person's wife(B), so Less(aware(B), aware(A))", ["A looks at another person's wife while B does not, so B is less aware than A"]], "negated_asymmetric_premise": [" looks at another person's wife(B) and not  looks at another person's wife(A), so not More(aware(A), aware(B))", ["B looks at another person's wife while A does not, so A is not more aware than B"]], "negated_asymmetric_conclusion": [" looks at another person's wife(A) and not  looks at another person's wife(B), so not More(aware(B), aware(A))", ["A looks at another person's wife while B does not, so B is not more aware than A"]]}
{"original": [" inherits from their father(A) and not  inherits from their father(B), so More(fortunate(A), fortunate(B))", ["A inherits from their father while B does not, so A is more fortunate than B"]], "negated": [" inherits from their father(A) and not  inherits from their father(B), so not Less(fortunate(A), fortunate(B))", ["A inherits from their father while B does not, so A is not less fortunate than B"]], "asymmetric_premise": [" inherits from their father(B) and not  inherits from their father(A), so Less(fortunate(A), fortunate(B))", ["B inherits from their father while A does not, so A is less fortunate than B"]], "asymmetric_conclusion": [" inherits from their father(A) and not  inherits from their father(B), so Less(fortunate(B), fortunate(A))", ["A inherits from their father while B does not, so B is less fortunate than A"]], "negated_asymmetric_premise": [" inherits from their father(B) and not  inherits from their father(A), so not More(fortunate(A), fortunate(B))", ["B inherits from their father while A does not, so A is not more fortunate than B"]], "negated_asymmetric_conclusion": [" inherits from their father(A) and not  inherits from their father(B), so not More(fortunate(B), fortunate(A))", ["A inherits from their father while B does not, so B is not more fortunate than A"]]}
{"original": [" causes trouble(A) and not  causes trouble(B), so More(mean(A), mean(B))", ["A causes trouble while B does not, so A is more mean than B"]], "negated": [" causes trouble(A) and not  causes trouble(B), so not Less(mean(A), mean(B))", ["A causes trouble while B does not, so A is not less mean than B"]], "asymmetric_premise": [" causes trouble(B) and not  causes trouble(A), so Less(mean(A), mean(B))", ["B causes trouble while A does not, so A is less mean than B"]], "asymmetric_conclusion": [" causes trouble(A) and not  causes trouble(B), so Less(mean(B), mean(A))", ["A causes trouble while B does not, so B is less mean than A"]], "negated_asymmetric_premise": [" causes trouble(B) and not  causes trouble(A), so not More(mean(A), mean(B))", ["B causes trouble while A does not, so A is not more mean than B"]], "negated_asymmetric_conclusion": [" causes trouble(A) and not  causes trouble(B), so not More(mean(B), mean(A))", ["A causes trouble while B does not, so B is not more mean than A"]]}
{"original": [" gets another person's friends together(A) and not  gets another person's friends together(B), so More(caring(A), caring(B))", ["A gets another person's friends together while B does not, so A is more caring than B"]], "negated": [" gets another person's friends together(A) and not  gets another person's friends together(B), so not Less(caring(A), caring(B))", ["A gets another person's friends together while B does not, so A is not less caring than B"]], "asymmetric_premise": [" gets another person's friends together(B) and not  gets another person's friends together(A), so Less(caring(A), caring(B))", ["B gets another person's friends together while A does not, so A is less caring than B"]], "asymmetric_conclusion": [" gets another person's friends together(A) and not  gets another person's friends together(B), so Less(caring(B), caring(A))", ["A gets another person's friends together while B does not, so B is less caring than A"]], "negated_asymmetric_premise": [" gets another person's friends together(B) and not  gets another person's friends together(A), so not More(caring(A), caring(B))", ["B gets another person's friends together while A does not, so A is not more caring than B"]], "negated_asymmetric_conclusion": [" gets another person's friends together(A) and not  gets another person's friends together(B), so not More(caring(B), caring(A))", ["A gets another person's friends together while B does not, so B is not more caring than A"]]}
{"original": [" would help another person(A) and not  would help another person(B), so More(friendly(A), friendly(B))", ["A would help another person more than B, so A is more friendly than B"]], "negated": [" would help another person(A) and not  would help another person(B), so not Less(friendly(A), friendly(B))", ["A would help another person more than B, so A is not less friendly than B"]], "asymmetric_premise": [" would help another person(B) and not  would help another person(A), so Less(friendly(A), friendly(B))", ["B would help another person while A does not, so A is less friendly than B"]], "asymmetric_conclusion": [" would help another person(A) and not  would help another person(B), so Less(friendly(B), friendly(A))", ["A would help another person while B does not, so B is less friendly than A"]], "negated_asymmetric_premise": [" would help another person(B) and not  would help another person(A), so not More(friendly(A), friendly(B))", ["B would help another person more than A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": [" would help another person(A) and not  would help another person(B), so not More(friendly(B), friendly(A))", ["A would help another person more than B, so B is not more friendly than A"]]}
{"original": [" refuses to listen(A) and not  refuses to listen(B), so More(annoyed(A), annoyed(B))", ["A refuses to listen while B does not, so A is more annoyed than B"]], "negated": [" refuses to listen(A) and not  refuses to listen(B), so not Less(annoyed(A), annoyed(B))", ["A refuses to listen while B does not, so A is not less annoyed than B"]], "asymmetric_premise": [" refuses to listen(B) and not  refuses to listen(A), so Less(annoyed(A), annoyed(B))", ["B refuses to listen while A does not, so A is less annoyed than B"]], "asymmetric_conclusion": [" refuses to listen(A) and not  refuses to listen(B), so Less(annoyed(B), annoyed(A))", ["A refuses to listen while B does not, so B is less annoyed than A"]], "negated_asymmetric_premise": [" refuses to listen(B) and not  refuses to listen(A), so not More(annoyed(A), annoyed(B))", ["B refuses to listen while A does, so A is not more annoyed than B"]], "negated_asymmetric_conclusion": [" refuses to listen(A) and not  refuses to listen(B), so not More(annoyed(B), annoyed(A))", ["A refuses to listen while B does not, so B is not more annoyed than A"]]}
{"original": [" gets closer and closer(A) and not  gets closer and closer(B), so More(anxious(A), anxious(B))", ["A gets closer and closer while B does not, so A is more anxious than B"]], "negated": [" gets closer and closer(A) and not  gets closer and closer(B), so not Less(anxious(A), anxious(B))", ["A gets closer and closer while B does not, so A is not less anxious than B"]], "asymmetric_premise": [" gets closer and closer(B) and not  gets closer and closer(A), so Less(anxious(A), anxious(B))", ["B gets closer and closer while A does not, so A is less anxious than B"]], "asymmetric_conclusion": [" gets closer and closer(A) and not  gets closer and closer(B), so Less(anxious(B), anxious(A))", ["A gets closer to B while B does not, so B is less anxious than A"]], "negated_asymmetric_premise": [" gets closer and closer(B) and not  gets closer and closer(A), so not More(anxious(A), anxious(B))", ["B gets closer and closer while A does not, so A is not more anxious than B"]], "negated_asymmetric_conclusion": [" gets closer and closer(A) and not  gets closer and closer(B), so not More(anxious(B), anxious(A))", ["A gets closer and closer to B while B does not, so B is not more anxious than A"]]}
{"original": [" visits their aunt(A) and not  visits their aunt(B), so More(concerned for others.(A), concerned for others.(B))", ["A visits their aunt while B does not, so A is more concerned for others than B"]], "negated": [" visits their aunt(A) and not  visits their aunt(B), so not Less(concerned for others.(A), concerned for others.(B))", ["A visits their aunt while B does not, so A is not less concerned for others than B"]], "asymmetric_premise": [" visits their aunt(B) and not  visits their aunt(A), so Less(concerned for others.(A), concerned for others.(B))", ["B visits their aunt while A does not, so A is less concerned for others than B"]], "asymmetric_conclusion": [" visits their aunt(A) and not  visits their aunt(B), so Less(concerned for others.(B), concerned for others.(A))", ["A visits their aunt while B does not, so B is less concerned for others than A"]], "negated_asymmetric_premise": [" visits their aunt(B) and not  visits their aunt(A), so not More(concerned for others.(A), concerned for others.(B))", ["B visits their aunt while A does not, so A is not more concerned for others than B"]], "negated_asymmetric_conclusion": [" visits their aunt(A) and not  visits their aunt(B), so not More(concerned for others.(B), concerned for others.(A))", ["A visits their aunt while B does not, so B is not more concerned for others than A"]]}
{"original": [" hugs their dog(A) and not  hugs their dog(B), so More(caring(A), caring(B))", ["A hugs their dog while B does not, so A is more caring than B"]], "negated": [" hugs their dog(A) and not  hugs their dog(B), so not Less(caring(A), caring(B))", ["A hugs their dog while B does not, so A is not less caring than B"]], "asymmetric_premise": [" hugs their dog(B) and not  hugs their dog(A), so Less(caring(A), caring(B))", ["B hugs their dog while A does not, so A is less caring than B"]], "asymmetric_conclusion": [" hugs their dog(A) and not  hugs their dog(B), so Less(caring(B), caring(A))", ["A hugs their dog while B does not, so B is less caring than A"]], "negated_asymmetric_premise": [" hugs their dog(B) and not  hugs their dog(A), so not More(caring(A), caring(B))", ["B hugs their dog while A does not, so A is not more caring than B"]], "negated_asymmetric_conclusion": [" hugs their dog(A) and not  hugs their dog(B), so not More(caring(B), caring(A))", ["A hugs their dog while B does not, so B is not more caring than A"]]}
{"original": [" lives with another person's family(A) and not  lives with another person's family(B), so More(caring(A), caring(B))", ["A lives with another person's family while B does not, so A is more caring than B"]], "negated": [" lives with another person's family(A) and not  lives with another person's family(B), so not Less(caring(A), caring(B))", ["A lives with another person's family while B does not, so A is not less caring than B"]], "asymmetric_premise": [" lives with another person's family(B) and not  lives with another person's family(A), so Less(caring(A), caring(B))", ["B lives with another person's family while A does not, so A is less caring than B"]], "asymmetric_conclusion": [" lives with another person's family(A) and not  lives with another person's family(B), so Less(caring(B), caring(A))", ["A lives with another person's family while B does not, so B is less caring than A"]], "negated_asymmetric_premise": [" lives with another person's family(B) and not  lives with another person's family(A), so not More(caring(A), caring(B))", ["B lives with another person's family while A does not, so A is not more caring than B"]], "negated_asymmetric_conclusion": [" lives with another person's family(A) and not  lives with another person's family(B), so not More(caring(B), caring(A))", ["A lives with another person's family while B does not, so B is not more caring than A"]]}
{"original": [" wants to look their best(A) and not  wants to look their best(B), so More(diva(A), diva(B))", ["A wants to look their best while B does not, so A is more diva than B"]], "negated": [" wants to look their best(A) and not  wants to look their best(B), so not Less(diva(A), diva(B))", ["A wants to look their best while B does not, so A is not less diva than B"]], "asymmetric_premise": [" wants to look their best(B) and not  wants to look their best(A), so Less(diva(A), diva(B))", ["B wants to look their best while A does not, so A is less diva than B"]], "asymmetric_conclusion": [" wants to look their best(A) and not  wants to look their best(B), so Less(diva(B), diva(A))", ["A wants to look their best while B does not, so B is less diva than A"]], "negated_asymmetric_premise": [" wants to look their best(B) and not  wants to look their best(A), so not More(diva(A), diva(B))", ["B wants to look their best while A does not, so A is not more diva than B"]], "negated_asymmetric_conclusion": [" wants to look their best(A) and not  wants to look their best(B), so not More(diva(B), diva(A))", ["A wants to look their best while B does not, so B is not more diva than A"]]}
{"original": [" rids the bike(A) and not  rids the bike(B), so More(athletic(A), athletic(B))", ["A rids the bike while B does not, so A is more athletic than B"]], "negated": [" rids the bike(A) and not  rids the bike(B), so not Less(athletic(A), athletic(B))", ["A rids the bike while B does not, so A is not less athletic than B"]], "asymmetric_premise": [" rids the bike(B) and not  rids the bike(A), so Less(athletic(A), athletic(B))", ["B rids the bike while A does not, so A is less athletic than B"]], "asymmetric_conclusion": [" rids the bike(A) and not  rids the bike(B), so Less(athletic(B), athletic(A))", ["A rids the bike while B does not, so B is less athletic than A"]], "negated_asymmetric_premise": [" rids the bike(B) and not  rids the bike(A), so not More(athletic(A), athletic(B))", ["B rids the bike while A does not, so A is not more athletic than B"]], "negated_asymmetric_conclusion": [" rids the bike(A) and not  rids the bike(B), so not More(athletic(B), athletic(A))", ["A rids the bike while B does not, so B is not more athletic than A"]]}
{"original": [" says the wrong thing(A) and not  says the wrong thing(B), so More(regretful(A), regretful(B))", ["A says the wrong thing while B does not, so A is more regretful than B"]], "negated": [" says the wrong thing(A) and not  says the wrong thing(B), so not Less(regretful(A), regretful(B))", ["A says the wrong thing while B does not, so A is not less regretful than B"]], "asymmetric_premise": [" says the wrong thing(B) and not  says the wrong thing(A), so Less(regretful(A), regretful(B))", ["B says the wrong thing while A does not, so A is less regretful than B"]], "asymmetric_conclusion": [" says the wrong thing(A) and not  says the wrong thing(B), so Less(regretful(B), regretful(A))", ["A says the wrong thing while B does not, so B is less regretful than A"]], "negated_asymmetric_premise": [" says the wrong thing(B) and not  says the wrong thing(A), so not More(regretful(A), regretful(B))", ["B says the wrong thing while A does not, so A is not more regretful than B"]], "negated_asymmetric_conclusion": [" says the wrong thing(A) and not  says the wrong thing(B), so not More(regretful(B), regretful(A))", ["A says the wrong thing while B does not, so B is not more regretful than A"]]}
{"original": [" spills juice(A) and not  spills juice(B), so More(clumsy(A), clumsy(B))", ["A spills juice while B does not, so A is more clumsy than B"]], "negated": [" spills juice(A) and not  spills juice(B), so not Less(clumsy(A), clumsy(B))", ["A spills juice while B does not, so A is not less clumsy than B"]], "asymmetric_premise": [" spills juice(B) and not  spills juice(A), so Less(clumsy(A), clumsy(B))", ["B spills juice while A does not, so A is less clumsy than B"]], "asymmetric_conclusion": [" spills juice(A) and not  spills juice(B), so Less(clumsy(B), clumsy(A))", ["A spills juice while B does not, so B is less clumsy than A"]], "negated_asymmetric_premise": [" spills juice(B) and not  spills juice(A), so not More(clumsy(A), clumsy(B))", ["B spills juice while A does not, so A is not more clumsy than B"]], "negated_asymmetric_conclusion": [" spills juice(A) and not  spills juice(B), so not More(clumsy(B), clumsy(A))", ["A spills juice while B does not, so B is not more clumsy than A"]]}
{"original": [" performs another person's duty(A) and not  performs another person's duty(B), so More(gracious(A), gracious(B))", ["A performs another person's duty while B does not, so A is more gracious than B"]], "negated": [" performs another person's duty(A) and not  performs another person's duty(B), so not Less(gracious(A), gracious(B))", ["A performs another person's duty while B does not, so A is not less gracious than B"]], "asymmetric_premise": [" performs another person's duty(B) and not  performs another person's duty(A), so Less(gracious(A), gracious(B))", ["B performs another person's duty while A does not, so A is less gracious than B"]], "asymmetric_conclusion": [" performs another person's duty(A) and not  performs another person's duty(B), so Less(gracious(B), gracious(A))", ["A performs another person's duty while B does not, so B is less gracious than A"]], "negated_asymmetric_premise": [" performs another person's duty(B) and not  performs another person's duty(A), so not More(gracious(A), gracious(B))", ["B performs another person's duty while A does not, so A is not more gracious than B"]], "negated_asymmetric_conclusion": [" performs another person's duty(A) and not  performs another person's duty(B), so not More(gracious(B), gracious(A))", ["A performs another person's duty while B does not, so B is not more gracious than A"]]}
{"original": [" takes a job(A) and not  takes a job(B), so More(dedicated(A), dedicated(B))", ["A takes a job while B does not, so A is more dedicated than B"]], "negated": [" takes a job(A) and not  takes a job(B), so not Less(dedicated(A), dedicated(B))", ["A takes a job while B does not, so A is not less dedicated than B"]], "asymmetric_premise": [" takes a job(B) and not  takes a job(A), so Less(dedicated(A), dedicated(B))", ["B takes a job while A does not, so A is less dedicated than B"]], "asymmetric_conclusion": [" takes a job(A) and not  takes a job(B), so Less(dedicated(B), dedicated(A))", ["A takes a job while B does not, so B is less dedicated than A"]], "negated_asymmetric_premise": [" takes a job(B) and not  takes a job(A), so not More(dedicated(A), dedicated(B))", ["B takes a job while A does not, so A is not more dedicated than B"]], "negated_asymmetric_conclusion": [" takes a job(A) and not  takes a job(B), so not More(dedicated(B), dedicated(A))", ["A takes a job while B does not, so B is not more dedicated than A"]]}
{"original": [" shaves all of their hair off(A) and not  shaves all of their hair off(B), so More(determined(A), determined(B))", ["A shaves all of their hair off while B does not, so A is more determined than B"]], "negated": [" shaves all of their hair off(A) and not  shaves all of their hair off(B), so not Less(determined(A), determined(B))", ["A shaves all of their hair off while B does not, so A is not less determined than B"]], "asymmetric_premise": [" shaves all of their hair off(B) and not  shaves all of their hair off(A), so Less(determined(A), determined(B))", ["B shaves all of their hair off while A does not, so A is less determined than B"]], "asymmetric_conclusion": [" shaves all of their hair off(A) and not  shaves all of their hair off(B), so Less(determined(B), determined(A))", ["A shaves all of their hair off while B does not, so B is less determined than A"]], "negated_asymmetric_premise": [" shaves all of their hair off(B) and not  shaves all of their hair off(A), so not More(determined(A), determined(B))", ["B shaves all of their hair off while A does not, so A is not more determined than B"]], "negated_asymmetric_conclusion": [" shaves all of their hair off(A) and not  shaves all of their hair off(B), so not More(determined(B), determined(A))", ["A shaves all of their hair off while B does not, so B is not more determined than A"]]}
{"original": [" tries not to panic(A) and not  tries not to panic(B), so More(scared(A), scared(B))", ["A tries not to panic while B does not, so A is more scared than B"]], "negated": [" tries not to panic(A) and not  tries not to panic(B), so not Less(scared(A), scared(B))", ["A tries not to panic while B does not, so A is not less scared than B"]], "asymmetric_premise": [" tries not to panic(B) and not  tries not to panic(A), so Less(scared(A), scared(B))", ["B tries not to panic while A does not, so A is less scared than B"]], "asymmetric_conclusion": [" tries not to panic(A) and not  tries not to panic(B), so Less(scared(B), scared(A))", ["A tries not to panic while B does not, so B is less scared than A"]], "negated_asymmetric_premise": [" tries not to panic(B) and not  tries not to panic(A), so not More(scared(A), scared(B))", ["B tries not to panic while A does not, so A is not more scared than B"]], "negated_asymmetric_conclusion": [" tries not to panic(A) and not  tries not to panic(B), so not More(scared(B), scared(A))", ["A tries not to panic while B does not, so B is not more scared than A"]]}
{"original": [" affords a car(A) and not  affords a car(B), so More(finished(A), finished(B))", ["A affords a car while B does not, so A is more finished than B"]], "negated": [" affords a car(A) and not  affords a car(B), so not Less(finished(A), finished(B))", ["A affords a car while B does not, so A is not less finished than B"]], "asymmetric_premise": [" affords a car(B) and not  affords a car(A), so Less(finished(A), finished(B))", ["B affords a car while A does not, so A is less finished than B"]], "asymmetric_conclusion": [" affords a car(A) and not  affords a car(B), so Less(finished(B), finished(A))", ["A affords a car while B does not, so B is less finished than A"]], "negated_asymmetric_premise": [" affords a car(B) and not  affords a car(A), so not More(finished(A), finished(B))", ["B affords a car while A does not, so A is not more finished than B"]], "negated_asymmetric_conclusion": [" affords a car(A) and not  affords a car(B), so not More(finished(B), finished(A))", ["A affords a car while B does not, so B is not more finished than A"]]}
{"original": [" buys a new fish(A) and not  buys a new fish(B), so More(excitable(A), excitable(B))", ["A buys a new fish while B does not, so A is more excitable than B"]], "negated": [" buys a new fish(A) and not  buys a new fish(B), so not Less(excitable(A), excitable(B))", ["A buys a new fish while B does not, so A is not less excitable than B"]], "asymmetric_premise": [" buys a new fish(B) and not  buys a new fish(A), so Less(excitable(A), excitable(B))", ["B buys a new fish while A does not, so A is less excitable than B"]], "asymmetric_conclusion": [" buys a new fish(A) and not  buys a new fish(B), so Less(excitable(B), excitable(A))", ["A buys a new fish while B does not, so B is less excitable than A"]], "negated_asymmetric_premise": [" buys a new fish(B) and not  buys a new fish(A), so not More(excitable(A), excitable(B))", ["B buys a new fish while A does not, so A is not more excitable than B"]], "negated_asymmetric_conclusion": [" buys a new fish(A) and not  buys a new fish(B), so not More(excitable(B), excitable(A))", ["A buys a new fish while B does not, so B is not more excitable than A"]]}
{"original": [" looks up into another person's eyes(A) and not  looks up into another person's eyes(B), so More(special(A), special(B))", ["A looks up into another person's eyes while B does not, so A is more special than B"]], "negated": [" looks up into another person's eyes(A) and not  looks up into another person's eyes(B), so not Less(special(A), special(B))", ["A looks up into another person's eyes while B does not, so A is not less special than B"]], "asymmetric_premise": [" looks up into another person's eyes(B) and not  looks up into another person's eyes(A), so Less(special(A), special(B))", ["B looks up into another person's eyes while A does not, so A is less special than B"]], "asymmetric_conclusion": [" looks up into another person's eyes(A) and not  looks up into another person's eyes(B), so Less(special(B), special(A))", ["A looks up into another person's eyes while B does not, so B is less special than A"]], "negated_asymmetric_premise": [" looks up into another person's eyes(B) and not  looks up into another person's eyes(A), so not More(special(A), special(B))", ["B looks up into another person's eyes while A does not, so A is not more special than B"]], "negated_asymmetric_conclusion": [" looks up into another person's eyes(A) and not  looks up into another person's eyes(B), so not More(special(B), special(A))", ["A looks up into another person's eyes while B does not, so B is not more special than A"]]}
{"original": [" is cleaning another person's house(A) and not  is cleaning another person's house(B), so More(helpful(A), helpful(B))", ["A is cleaning another person's house while B is not, so A is more helpful than B"]], "negated": [" is cleaning another person's house(A) and not  is cleaning another person's house(B), so not Less(helpful(A), helpful(B))", ["A is cleaning another person's house while B is not, so A is not less helpful than B"]], "asymmetric_premise": [" is cleaning another person's house(B) and not  is cleaning another person's house(A), so Less(helpful(A), helpful(B))", ["B is cleaning another person's house while A is not, so A is less helpful than B"]], "asymmetric_conclusion": [" is cleaning another person's house(A) and not  is cleaning another person's house(B), so Less(helpful(B), helpful(A))", ["A is cleaning another person's house while B is not, so B is less helpful than A"]], "negated_asymmetric_premise": [" is cleaning another person's house(B) and not  is cleaning another person's house(A), so not More(helpful(A), helpful(B))", ["B is cleaning another person's house while A is not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" is cleaning another person's house(A) and not  is cleaning another person's house(B), so not More(helpful(B), helpful(A))", ["A is cleaning another person's house while B is not, so B is not more helpful than A"]]}
{"original": [" gets a good night 's rest(A) and not  gets a good night 's rest(B), so More(awake(A), awake(B))", ["A gets a good night 's rest while B does not, so A is more awake than B"]], "negated": [" gets a good night 's rest(A) and not  gets a good night 's rest(B), so not Less(awake(A), awake(B))", ["A gets a good night 's rest while B does not, so A is not less awake than B"]], "asymmetric_premise": [" gets a good night 's rest(B) and not  gets a good night 's rest(A), so Less(awake(A), awake(B))", ["B gets a good night 's rest while A does not, so A is less awake than B"]], "asymmetric_conclusion": [" gets a good night 's rest(A) and not  gets a good night 's rest(B), so Less(awake(B), awake(A))", ["A gets a good night 's rest while B does not, so B is less awake than A"]], "negated_asymmetric_premise": [" gets a good night 's rest(B) and not  gets a good night 's rest(A), so not More(awake(A), awake(B))", ["B gets a good night 's rest while A does not, so A is not more awake than B"]], "negated_asymmetric_conclusion": [" gets a good night 's rest(A) and not  gets a good night 's rest(B), so not More(awake(B), awake(A))", ["A gets a good night 's rest while B does not, so B is not more awake than A"]]}
{"original": [" drums another person's fingers(A) and not  drums another person's fingers(B), so More(annoying(A), annoying(B))", ["A drums another person's fingers while B does not, so A is more annoying than B"]], "negated": [" drums another person's fingers(A) and not  drums another person's fingers(B), so not Less(annoying(A), annoying(B))", ["A drums another person's fingers while B does not, so A is not less annoying than B"]], "asymmetric_premise": [" drums another person's fingers(B) and not  drums another person's fingers(A), so Less(annoying(A), annoying(B))", ["B drums another person's fingers while A does not, so A is less annoying than B"]], "asymmetric_conclusion": [" drums another person's fingers(A) and not  drums another person's fingers(B), so Less(annoying(B), annoying(A))", ["A drums another person's fingers while B does not, so B is less annoying than A"]], "negated_asymmetric_premise": [" drums another person's fingers(B) and not  drums another person's fingers(A), so not More(annoying(A), annoying(B))", ["B drums another person's fingers while A does not, so A is not more annoying than B"]], "negated_asymmetric_conclusion": [" drums another person's fingers(A) and not  drums another person's fingers(B), so not More(annoying(B), annoying(A))", ["A drums another person's fingers while B does not, so B is not more annoying than A"]]}
{"original": [" tastes weird(A) and not  tastes weird(B), so More(sour(A), sour(B))", ["A tastes weird while B does not, so A is more sour than B"]], "negated": [" tastes weird(A) and not  tastes weird(B), so not Less(sour(A), sour(B))", ["A tastes weird while B does not, so A is not less sour than B"]], "asymmetric_premise": [" tastes weird(B) and not  tastes weird(A), so Less(sour(A), sour(B))", ["B tastes weird while A does not, so A is less sour than B"]], "asymmetric_conclusion": [" tastes weird(A) and not  tastes weird(B), so Less(sour(B), sour(A))", ["A tastes weird while B does not, so B is less sour than A"]], "negated_asymmetric_premise": [" tastes weird(B) and not  tastes weird(A), so not More(sour(A), sour(B))", ["B tastes weird while A does not, so A is not more sour than B"]], "negated_asymmetric_conclusion": [" tastes weird(A) and not  tastes weird(B), so not More(sour(B), sour(A))", ["A tastes weird while B does not, so B is not more sour than A"]]}
{"original": [" gets checked out(A) and not  gets checked out(B), so More(aware(A), aware(B))", ["A gets checked out while B does not, so A is more aware than B"]], "negated": [" gets checked out(A) and not  gets checked out(B), so not Less(aware(A), aware(B))", ["A gets checked out while B does not, so A is not less aware than B"]], "asymmetric_premise": [" gets checked out(B) and not  gets checked out(A), so Less(aware(A), aware(B))", ["B gets checked out while A does not, so A is less aware than B"]], "asymmetric_conclusion": [" gets checked out(A) and not  gets checked out(B), so Less(aware(B), aware(A))", ["A gets checked out while B does not, so B is less aware than A"]], "negated_asymmetric_premise": [" gets checked out(B) and not  gets checked out(A), so not More(aware(A), aware(B))", ["B gets checked out while A does not, so A is not more aware than B"]], "negated_asymmetric_conclusion": [" gets checked out(A) and not  gets checked out(B), so not More(aware(B), aware(A))", ["A gets checked out while B does not, so B is not more aware than A"]]}
{"original": [" pulls another person close(A) and not  pulls another person close(B), so More(romantic(A), romantic(B))", ["A pulls another person close while B does not, so A is more romantic than B"]], "negated": [" pulls another person close(A) and not  pulls another person close(B), so not Less(romantic(A), romantic(B))", ["A pulls another person close while B does not, so A is not less romantic than B"]], "asymmetric_premise": [" pulls another person close(B) and not  pulls another person close(A), so Less(romantic(A), romantic(B))", ["B pulls another person close while A does not, so A is less romantic than B"]], "asymmetric_conclusion": [" pulls another person close(A) and not  pulls another person close(B), so Less(romantic(B), romantic(A))", ["A pulls another person close while B does not, so B is less romantic than A"]], "negated_asymmetric_premise": [" pulls another person close(B) and not  pulls another person close(A), so not More(romantic(A), romantic(B))", ["B pulls another person close while A does not, so A is not more romantic than B"]], "negated_asymmetric_conclusion": [" pulls another person close(A) and not  pulls another person close(B), so not More(romantic(B), romantic(A))", ["A pulls another person close while B does not, so B is not more romantic than A"]]}
{"original": [" is a young girl(A) and not  is a young girl(B), so More(happy(A), happy(B))", ["A is a young girl, B is not, so A is more happy than B"]], "negated": [" is a young girl(A) and not  is a young girl(B), so not Less(happy(A), happy(B))", ["A is a young girl, B is not, so A is not less happy than B"]], "asymmetric_premise": [" is a young girl(B) and not  is a young girl(A), so Less(happy(A), happy(B))", ["B is a young girl, A is not, so A is less happy than B"]], "asymmetric_conclusion": [" is a young girl(A) and not  is a young girl(B), so Less(happy(B), happy(A))", ["A is a young girl, B is not, so B is less happy than A"]], "negated_asymmetric_premise": [" is a young girl(B) and not  is a young girl(A), so not More(happy(A), happy(B))", ["B is a young girl, A is not, so A is not more happy than B"]], "negated_asymmetric_conclusion": [" is a young girl(A) and not  is a young girl(B), so not More(happy(B), happy(A))", ["A is a young girl, B is not, so B is not more happy than A"]]}
{"original": [" gets their towel(A) and not  gets their towel(B), so More(wet(A), wet(B))", ["A gets their towel while B does not, so A is more wet than B"]], "negated": [" gets their towel(A) and not  gets their towel(B), so not Less(wet(A), wet(B))", ["A gets their towel while B does not, so A is not less wet than B"]], "asymmetric_premise": [" gets their towel(B) and not  gets their towel(A), so Less(wet(A), wet(B))", ["B gets their towel while A does not, so A is less wet than B"]], "asymmetric_conclusion": [" gets their towel(A) and not  gets their towel(B), so Less(wet(B), wet(A))", ["A gets their towel while B does not, so B is less wet than A"]], "negated_asymmetric_premise": [" gets their towel(B) and not  gets their towel(A), so not More(wet(A), wet(B))", ["B gets their towel while A does not, so A is not more wet than B"]], "negated_asymmetric_conclusion": [" gets their towel(A) and not  gets their towel(B), so not More(wet(B), wet(A))", ["A gets their towel while B does not, so B is not more wet than A"]]}
{"original": [" boos another person off the stage(A) and not  boos another person off the stage(B), so More(rude(A), rude(B))", ["A boos another person off the stage while B does not, so A is more rude than B"]], "negated": [" boos another person off the stage(A) and not  boos another person off the stage(B), so not Less(rude(A), rude(B))", ["A boos another person off the stage while B does not, so A is not less rude than B"]], "asymmetric_premise": [" boos another person off the stage(B) and not  boos another person off the stage(A), so Less(rude(A), rude(B))", ["B boos another person off the stage while A does not, so A is less rude than B"]], "asymmetric_conclusion": [" boos another person off the stage(A) and not  boos another person off the stage(B), so Less(rude(B), rude(A))", ["A boos another person off the stage while B does not, so B is less rude than A"]], "negated_asymmetric_premise": [" boos another person off the stage(B) and not  boos another person off the stage(A), so not More(rude(A), rude(B))", ["B boos another person off the stage while A does not, so A is not more rude than B"]], "negated_asymmetric_conclusion": [" boos another person off the stage(A) and not  boos another person off the stage(B), so not More(rude(B), rude(A))", ["A boos another person off the stage while B does not, so B is not more rude than A"]]}
{"original": [" dies their hair(A) and not  dies their hair(B), so More(self-conscious(A), self-conscious(B))", ["A dies their hair while B does not, so A is more self-conscious than B"]], "negated": [" dies their hair(A) and not  dies their hair(B), so not Less(self-conscious(A), self-conscious(B))", ["A dies their hair while B does not, so A is not less self-conscious than B"]], "asymmetric_premise": [" dies their hair(B) and not  dies their hair(A), so Less(self-conscious(A), self-conscious(B))", ["B dies their hair while A does not, so A is less self-conscious than B"]], "asymmetric_conclusion": [" dies their hair(A) and not  dies their hair(B), so Less(self-conscious(B), self-conscious(A))", ["A dies their hair while B does not, so B is less self-conscious than A"]], "negated_asymmetric_premise": [" dies their hair(B) and not  dies their hair(A), so not More(self-conscious(A), self-conscious(B))", ["B dies their hair while A does not, so A is not more self-conscious than B"]], "negated_asymmetric_conclusion": [" dies their hair(A) and not  dies their hair(B), so not More(self-conscious(B), self-conscious(A))", ["A dies their hair while B does not, so B is not more self-conscious than A"]]}
{"original": [" becomes very close(A) and not  becomes very close(B), so More(open(A), open(B))", ["A becomes very close while B does not, so A is more open than B"]], "negated": [" becomes very close(A) and not  becomes very close(B), so not Less(open(A), open(B))", ["A becomes very close to B while B does not, so A is not less open than B"]], "asymmetric_premise": [" becomes very close(B) and not  becomes very close(A), so Less(open(A), open(B))", ["B becomes very close to A while A is not, so A is less open than B"]], "asymmetric_conclusion": [" becomes very close(A) and not  becomes very close(B), so Less(open(B), open(A))", ["A becomes very close to B while B does not, so B is less open than A"]], "negated_asymmetric_premise": [" becomes very close(B) and not  becomes very close(A), so not More(open(A), open(B))", ["B becomes very close to A while A is not, so A is not more open than B"]], "negated_asymmetric_conclusion": [" becomes very close(A) and not  becomes very close(B), so not More(open(B), open(A))", ["A becomes very close to B while B does not, so B is not more open than A"]]}
{"original": [" cuts from the team(A) and not  cuts from the team(B), so More(unlucky(A), unlucky(B))", ["A makes cuts from the team while B does not, so A is more unlucky than B"]], "negated": [" cuts from the team(A) and not  cuts from the team(B), so not Less(unlucky(A), unlucky(B))", ["A cuts from the team while B does not, so A is not less unlucky than B"]], "asymmetric_premise": [" cuts from the team(B) and not  cuts from the team(A), so Less(unlucky(A), unlucky(B))", ["B cuts from the team while A does not, so A is less unlucky than B"]], "asymmetric_conclusion": [" cuts from the team(A) and not  cuts from the team(B), so Less(unlucky(B), unlucky(A))", ["A cuts from the team while B does not, so B is less unlucky than A"]], "negated_asymmetric_premise": [" cuts from the team(B) and not  cuts from the team(A), so not More(unlucky(A), unlucky(B))", ["B cuts from the team while A does not, so A is not more unlucky than B"]], "negated_asymmetric_conclusion": [" cuts from the team(A) and not  cuts from the team(B), so not More(unlucky(B), unlucky(A))", ["A cuts from the team while B does not, so B is not more unlucky than A"]]}
{"original": [" sprains their wrist(A) and not  sprains their wrist(B), so More(non athletic(A), non athletic(B))", ["A sprains their wrist while B does not, so A is more non athletic than B"]], "negated": [" sprains their wrist(A) and not  sprains their wrist(B), so not Less(non athletic(A), non athletic(B))", ["A sprains their wrist while B does not, so A is not less athletic than B"]], "asymmetric_premise": [" sprains their wrist(B) and not  sprains their wrist(A), so Less(non athletic(A), non athletic(B))", ["B sprains their wrist while A does not, so A is less athletic than B"]], "asymmetric_conclusion": [" sprains their wrist(A) and not  sprains their wrist(B), so Less(non athletic(B), non athletic(A))", ["A sprains their wrist while B does not, so B is less athletic than A"]], "negated_asymmetric_premise": [" sprains their wrist(B) and not  sprains their wrist(A), so not More(non athletic(A), non athletic(B))", ["B sprains their wrist while A does not, so A is not more athletic than B"]], "negated_asymmetric_conclusion": [" sprains their wrist(A) and not  sprains their wrist(B), so not More(non athletic(B), non athletic(A))", ["A sprains their wrist while B does not, so B is not more athletic than A"]]}
{"original": [" tries to get another person's attention(A) and not  tries to get another person's attention(B), so More(demanding(A), demanding(B))", ["A tries to get another person's attention while B does not, so A is more demanding than B"]], "negated": [" tries to get another person's attention(A) and not  tries to get another person's attention(B), so not Less(demanding(A), demanding(B))", ["A tries to get another person's attention while B does not, so A is not less demanding than B"]], "asymmetric_premise": [" tries to get another person's attention(B) and not  tries to get another person's attention(A), so Less(demanding(A), demanding(B))", ["B tries to get another person's attention while A does not, so A is less demanding than B"]], "asymmetric_conclusion": [" tries to get another person's attention(A) and not  tries to get another person's attention(B), so Less(demanding(B), demanding(A))", ["A tries to get another person's attention while B does not, so B is less demanding than A"]], "negated_asymmetric_premise": [" tries to get another person's attention(B) and not  tries to get another person's attention(A), so not More(demanding(A), demanding(B))", ["B tries to get another person's attention while A does not, so A is not more demanding than B"]], "negated_asymmetric_conclusion": [" tries to get another person's attention(A) and not  tries to get another person's attention(B), so not More(demanding(B), demanding(A))", ["A tries to get another person's attention while B does not, so B is not more demanding than A"]]}
{"original": [" brings another person a spare key(A) and not  brings another person a spare key(B), so More(generous(A), generous(B))", ["A brings another person a spare key while B does not, so A is more generous than B"]], "negated": [" brings another person a spare key(A) and not  brings another person a spare key(B), so not Less(generous(A), generous(B))", ["A brings another person a spare key while B does not, so A is not less generous than B"]], "asymmetric_premise": [" brings another person a spare key(B) and not  brings another person a spare key(A), so Less(generous(A), generous(B))", ["B brings another person a spare key while A does not, so A is less generous than B"]], "asymmetric_conclusion": [" brings another person a spare key(A) and not  brings another person a spare key(B), so Less(generous(B), generous(A))", ["A brings another person a spare key while B does not, so B is less generous than A"]], "negated_asymmetric_premise": [" brings another person a spare key(B) and not  brings another person a spare key(A), so not More(generous(A), generous(B))", ["B brings another person a spare key while A does not, so A is not more generous than B"]], "negated_asymmetric_conclusion": [" brings another person a spare key(A) and not  brings another person a spare key(B), so not More(generous(B), generous(A))", ["A brings another person a spare key while B does not, so B is not more generous than A"]]}
{"original": [" comes running(A) and not  comes running(B), so More(loyal(A), loyal(B))", ["A comes running while B does not, so A is more loyal than B"]], "negated": [" comes running(A) and not  comes running(B), so not Less(loyal(A), loyal(B))", ["A comes running while B does not, so A is not less loyal than B"]], "asymmetric_premise": [" comes running(B) and not  comes running(A), so Less(loyal(A), loyal(B))", ["B comes running while A does not, so A is less loyal than B"]], "asymmetric_conclusion": [" comes running(A) and not  comes running(B), so Less(loyal(B), loyal(A))", ["A comes running while B does not, so B is less loyal than A"]], "negated_asymmetric_premise": [" comes running(B) and not  comes running(A), so not More(loyal(A), loyal(B))", ["B comes running while A does not, so A is not more loyal than B"]], "negated_asymmetric_conclusion": [" comes running(A) and not  comes running(B), so not More(loyal(B), loyal(A))", ["A comes running while B does not, so B is not more loyal than A"]]}
{"original": [" uses the bathroom(A) and not  uses the bathroom(B), so More(hurried(A), hurried(B))", ["A uses the bathroom while B does not, so A is more hurried than B"]], "negated": [" uses the bathroom(A) and not  uses the bathroom(B), so not Less(hurried(A), hurried(B))", ["A uses the bathroom while B does not, so A is not less hurried than B"]], "asymmetric_premise": [" uses the bathroom(B) and not  uses the bathroom(A), so Less(hurried(A), hurried(B))", ["B uses the bathroom while A does not, so A is less hurried than B"]], "asymmetric_conclusion": [" uses the bathroom(A) and not  uses the bathroom(B), so Less(hurried(B), hurried(A))", ["A uses the bathroom while B does not, so B is less hurried than A"]], "negated_asymmetric_premise": [" uses the bathroom(B) and not  uses the bathroom(A), so not More(hurried(A), hurried(B))", ["B uses the bathroom while A does not, so A is not more hurried than B"]], "negated_asymmetric_conclusion": [" uses the bathroom(A) and not  uses the bathroom(B), so not More(hurried(B), hurried(A))", ["A uses the bathroom while B does not, so B is not more hurried than A"]]}
{"original": [" has finally come(A) and not  has finally come(B), so More(happy(A), happy(B))", ["A has finally come while B has not, so A is more happy than B"]], "negated": [" has finally come(A) and not  has finally come(B), so not Less(happy(A), happy(B))", ["A has finally come, so A is not less happy than B"]], "asymmetric_premise": [" has finally come(B) and not  has finally come(A), so Less(happy(A), happy(B))", ["B has finally come while A has not, so A is less happy than B"]], "asymmetric_conclusion": [" has finally come(A) and not  has finally come(B), so Less(happy(B), happy(A))", ["A has finally come, B has not, so B is less happy than A"]], "negated_asymmetric_premise": [" has finally come(B) and not  has finally come(A), so not More(happy(A), happy(B))", ["B has finally come while A has not, so A is not more happy than B"]], "negated_asymmetric_conclusion": [" has finally come(A) and not  has finally come(B), so not More(happy(B), happy(A))", ["A has finally come, B has not, so B is not more happy than A"]]}
{"original": [" rounds the corner(A) and not  rounds the corner(B), so More(adventurous(A), adventurous(B))", ["A rounds the corner while B does not, so A is more adventurous than B"]], "negated": [" rounds the corner(A) and not  rounds the corner(B), so not Less(adventurous(A), adventurous(B))", ["A rounds the corner while B does not, so A is not less adventurous than B"]], "asymmetric_premise": [" rounds the corner(B) and not  rounds the corner(A), so Less(adventurous(A), adventurous(B))", ["B rounds the corner while A does not, so A is less adventurous than B"]], "asymmetric_conclusion": [" rounds the corner(A) and not  rounds the corner(B), so Less(adventurous(B), adventurous(A))", ["A rounds the corner while B does not, so B is less adventurous than A"]], "negated_asymmetric_premise": [" rounds the corner(B) and not  rounds the corner(A), so not More(adventurous(A), adventurous(B))", ["B rounds the corner while A does not, so A is not more adventurous than B"]], "negated_asymmetric_conclusion": [" rounds the corner(A) and not  rounds the corner(B), so not More(adventurous(B), adventurous(A))", ["A rounds the corner while B does not, so B is not more adventurous than A"]]}
{"original": [" draws the line(A) and not  draws the line(B), so More(artistic(A), artistic(B))", ["A draws the line while B does not, so A is more artistic than B"]], "negated": [" draws the line(A) and not  draws the line(B), so not Less(artistic(A), artistic(B))", ["A draws the line while B does not, so A is not less artistic than B"]], "asymmetric_premise": [" draws the line(B) and not  draws the line(A), so Less(artistic(A), artistic(B))", ["B draws the line while A does not, so A is less artistic than B"]], "asymmetric_conclusion": [" draws the line(A) and not  draws the line(B), so Less(artistic(B), artistic(A))", ["A draws the line while B does not, so B is less artistic than A"]], "negated_asymmetric_premise": [" draws the line(B) and not  draws the line(A), so not More(artistic(A), artistic(B))", ["B draws the line while A does not, so A is not more artistic than B"]], "negated_asymmetric_conclusion": [" draws the line(A) and not  draws the line(B), so not More(artistic(B), artistic(A))", ["A draws the line while B does not, so B is not more artistic than A"]]}
{"original": [" works perfectly(A) and not  works perfectly(B), so More(effective(A), effective(B))", ["A works perfectly while B does not, so A is more effective than B"]], "negated": [" works perfectly(A) and not  works perfectly(B), so not Less(effective(A), effective(B))", ["A works perfectly while B does not, so A is not less effective than B"]], "asymmetric_premise": [" works perfectly(B) and not  works perfectly(A), so Less(effective(A), effective(B))", ["B works perfectly while A does not, so A is less effective than B"]], "asymmetric_conclusion": [" works perfectly(A) and not  works perfectly(B), so Less(effective(B), effective(A))", ["A works perfectly while B does not, so B is less effective than A"]], "negated_asymmetric_premise": [" works perfectly(B) and not  works perfectly(A), so not More(effective(A), effective(B))", ["B works perfectly while A does not, so A is not more effective than B"]], "negated_asymmetric_conclusion": [" works perfectly(A) and not  works perfectly(B), so not More(effective(B), effective(A))", ["A works perfectly while B does not, so B is not more effective than A"]]}
{"original": [" takes another person's picture(A) and not  takes another person's picture(B), so More(helpful(A), helpful(B))", ["A takes another person's picture while B does not, so A is more helpful than B"]], "negated": [" takes another person's picture(A) and not  takes another person's picture(B), so not Less(helpful(A), helpful(B))", ["A takes another person's picture while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" takes another person's picture(B) and not  takes another person's picture(A), so Less(helpful(A), helpful(B))", ["B takes another person's picture while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" takes another person's picture(A) and not  takes another person's picture(B), so Less(helpful(B), helpful(A))", ["A takes another person's picture while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" takes another person's picture(B) and not  takes another person's picture(A), so not More(helpful(A), helpful(B))", ["B takes another person's picture while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" takes another person's picture(A) and not  takes another person's picture(B), so not More(helpful(B), helpful(A))", ["A takes another person's picture while B does not, so B is not more helpful than A"]]}
{"original": [" works pretty well(A) and not  works pretty well(B), so More(competent(A), competent(B))", ["A works pretty well while B does not, so A is more competent than B"]], "negated": [" works pretty well(A) and not  works pretty well(B), so not Less(competent(A), competent(B))", ["A works pretty well while B does not, so A is not less competent than B"]], "asymmetric_premise": [" works pretty well(B) and not  works pretty well(A), so Less(competent(A), competent(B))", ["B works pretty well while A does not, so A is less competent than B"]], "asymmetric_conclusion": [" works pretty well(A) and not  works pretty well(B), so Less(competent(B), competent(A))", ["A works pretty well while B does not, so B is less competent than A"]], "negated_asymmetric_premise": [" works pretty well(B) and not  works pretty well(A), so not More(competent(A), competent(B))", ["B works pretty well while A does not, so A is not more competent than B"]], "negated_asymmetric_conclusion": [" works pretty well(A) and not  works pretty well(B), so not More(competent(B), competent(A))", ["A works pretty well while B does not, so B is not more competent than A"]]}
{"original": [" replaces the battery(A) and not  replaces the battery(B), so More(adroit(A), adroit(B))", ["A replaces the battery while B does not, so A is more adroit than B"]], "negated": [" replaces the battery(A) and not  replaces the battery(B), so not Less(adroit(A), adroit(B))", ["A replaces the battery while B does not, so A is not less adroit than B"]], "asymmetric_premise": [" replaces the battery(B) and not  replaces the battery(A), so Less(adroit(A), adroit(B))", ["B replaces the battery while A does not, so A is less adroit than B"]], "asymmetric_conclusion": [" replaces the battery(A) and not  replaces the battery(B), so Less(adroit(B), adroit(A))", ["A replaces the battery while B does not, so B is less adroit than A"]], "negated_asymmetric_premise": [" replaces the battery(B) and not  replaces the battery(A), so not More(adroit(A), adroit(B))", ["B replaces the battery while A does not, so A is not more adroit than B"]], "negated_asymmetric_conclusion": [" replaces the battery(A) and not  replaces the battery(B), so not More(adroit(B), adroit(A))", ["A replaces the battery while B does not, so B is not more adroit than A"]]}
{"original": [" knits a blanket(A) and not  knits a blanket(B), so More(creative(A), creative(B))", ["A knits a blanket while B does not, so A is more creative than B"]], "negated": [" knits a blanket(A) and not  knits a blanket(B), so not Less(creative(A), creative(B))", ["A knits a blanket while B does not, so A is not less creative than B"]], "asymmetric_premise": [" knits a blanket(B) and not  knits a blanket(A), so Less(creative(A), creative(B))", ["B knits a blanket while A does not, so A is less creative than B"]], "asymmetric_conclusion": [" knits a blanket(A) and not  knits a blanket(B), so Less(creative(B), creative(A))", ["A knits a blanket while B does not, so B is less creative than A"]], "negated_asymmetric_premise": [" knits a blanket(B) and not  knits a blanket(A), so not More(creative(A), creative(B))", ["B knits a blanket while A does not, so A is not more creative than B"]], "negated_asymmetric_conclusion": [" knits a blanket(A) and not  knits a blanket(B), so not More(creative(B), creative(A))", ["A knits a blanket while B does not, so B is not more creative than A"]]}
{"original": [" listens to another person's stories(A) and not  listens to another person's stories(B), so More(interested(A), interested(B))", ["A listens to another person's stories while B does not, so A is more interested than B"]], "negated": [" listens to another person's stories(A) and not  listens to another person's stories(B), so not Less(interested(A), interested(B))", ["A listens to another person's stories while B does not, so A is not less interested than B"]], "asymmetric_premise": [" listens to another person's stories(B) and not  listens to another person's stories(A), so Less(interested(A), interested(B))", ["B listens to another person's stories while A does not, so A is less interested than B"]], "asymmetric_conclusion": [" listens to another person's stories(A) and not  listens to another person's stories(B), so Less(interested(B), interested(A))", ["A listens to another person's stories while B does not, so B is less interested than A"]], "negated_asymmetric_premise": [" listens to another person's stories(B) and not  listens to another person's stories(A), so not More(interested(A), interested(B))", ["B listens to another person's stories while A does not, so A is not more interested than B"]], "negated_asymmetric_conclusion": [" listens to another person's stories(A) and not  listens to another person's stories(B), so not More(interested(B), interested(A))", ["A listens to another person's stories while B does not, so B is not more interested than A"]]}
{"original": [" follows another person back(A) and not  follows another person back(B), so More(lost(A), lost(B))", ["A follows another person back while B does not, so A is more lost than B"]], "negated": [" follows another person back(A) and not  follows another person back(B), so not Less(lost(A), lost(B))", ["A follows another person back while B does not, so A is not less lost than B"]], "asymmetric_premise": [" follows another person back(B) and not  follows another person back(A), so Less(lost(A), lost(B))", ["B follows another person back while A does not, so A is less lost than B"]], "asymmetric_conclusion": [" follows another person back(A) and not  follows another person back(B), so Less(lost(B), lost(A))", ["A follows another person back while B does not, so B is less lost than A"]], "negated_asymmetric_premise": [" follows another person back(B) and not  follows another person back(A), so not More(lost(A), lost(B))", ["B follows another person back while A does not, so A is not more lost than B"]], "negated_asymmetric_conclusion": [" follows another person back(A) and not  follows another person back(B), so not More(lost(B), lost(A))", ["A follows another person back while B does not, so B is not more lost than A"]]}
{"original": [" needs some cash(A) and not  needs some cash(B), so More(desperate(A), desperate(B))", ["A needs some cash while B does not, so A is more desperate than B"]], "negated": [" needs some cash(A) and not  needs some cash(B), so not Less(desperate(A), desperate(B))", ["A needs some cash while B does not, so A is not less desperate than B"]], "asymmetric_premise": [" needs some cash(B) and not  needs some cash(A), so Less(desperate(A), desperate(B))", ["B needs some cash while A does not, so A is less desperate than B"]], "asymmetric_conclusion": [" needs some cash(A) and not  needs some cash(B), so Less(desperate(B), desperate(A))", ["A needs some cash while B does not, so B is less desperate than A"]], "negated_asymmetric_premise": [" needs some cash(B) and not  needs some cash(A), so not More(desperate(A), desperate(B))", ["B needs some cash while A does not, so A is not more desperate than B"]], "negated_asymmetric_conclusion": [" needs some cash(A) and not  needs some cash(B), so not More(desperate(B), desperate(A))", ["A needs some cash while B does not, so B is not more desperate than A"]]}
{"original": [" tells the students(A) and not  tells the students(B), so More(intelligent(A), intelligent(B))", ["A tells the students while B does not, so A is more intelligent than B"]], "negated": [" tells the students(A) and not  tells the students(B), so not Less(intelligent(A), intelligent(B))", ["A tells the students while B does not, so A is not less intelligent than B"]], "asymmetric_premise": [" tells the students(B) and not  tells the students(A), so Less(intelligent(A), intelligent(B))", ["B tells the students while A does not, so A is less intelligent than B"]], "asymmetric_conclusion": [" tells the students(A) and not  tells the students(B), so Less(intelligent(B), intelligent(A))", ["A tells the students while B does not, so B is less intelligent than A"]], "negated_asymmetric_premise": [" tells the students(B) and not  tells the students(A), so not More(intelligent(A), intelligent(B))", ["B tells the students while A does not, so A is not more intelligent than B"]], "negated_asymmetric_conclusion": [" tells the students(A) and not  tells the students(B), so not More(intelligent(B), intelligent(A))", ["A tells the students while B does not, so B is not more intelligent than A"]]}
{"original": [" follows another person course(A) and not  follows another person course(B), so More(responsible(A), responsible(B))", ["A follows another person course while B does not, so A is more responsible than B"]], "negated": [" follows another person course(A) and not  follows another person course(B), so not Less(responsible(A), responsible(B))", ["A follows another person course while B does not, so A is not less responsible than B"]], "asymmetric_premise": [" follows another person course(B) and not  follows another person course(A), so Less(responsible(A), responsible(B))", ["B follows another person course while A does not, so A is less responsible than B"]], "asymmetric_conclusion": [" follows another person course(A) and not  follows another person course(B), so Less(responsible(B), responsible(A))", ["A follows another person course while B does not, so B is less responsible than A"]], "negated_asymmetric_premise": [" follows another person course(B) and not  follows another person course(A), so not More(responsible(A), responsible(B))", ["B follows another person course while A does not, so A is not more responsible than B"]], "negated_asymmetric_conclusion": [" follows another person course(A) and not  follows another person course(B), so not More(responsible(B), responsible(A))", ["A follows another person course while B does not, so B is not more responsible than A"]]}
{"original": [" checks another person's temperature(A) and not  checks another person's temperature(B), so More(loving(A), loving(B))", ["A checks another person's temperature while B does not, so A is more loving than B"]], "negated": [" checks another person's temperature(A) and not  checks another person's temperature(B), so not Less(loving(A), loving(B))", ["A checks another person's temperature while B does not, so A is not less loving than B"]], "asymmetric_premise": [" checks another person's temperature(B) and not  checks another person's temperature(A), so Less(loving(A), loving(B))", ["B checks another person's temperature while A does not, so A is less loving than B"]], "asymmetric_conclusion": [" checks another person's temperature(A) and not  checks another person's temperature(B), so Less(loving(B), loving(A))", ["A checks another person's temperature while B does not, so B is less loving than A"]], "negated_asymmetric_premise": [" checks another person's temperature(B) and not  checks another person's temperature(A), so not More(loving(A), loving(B))", ["B checks another person's temperature while A does not, so A is not more loving than B"]], "negated_asymmetric_conclusion": [" checks another person's temperature(A) and not  checks another person's temperature(B), so not More(loving(B), loving(A))", ["A checks another person's temperature while B does not, so B is not more loving than A"]]}
{"original": [" gets food(A) and not  gets food(B), so More(able(A), able(B))", ["A gets food while B does not, so A is more able than B"]], "negated": [" gets food(A) and not  gets food(B), so not Less(able(A), able(B))", ["A gets food while B does not, so A is not less able than B"]], "asymmetric_premise": [" gets food(B) and not  gets food(A), so Less(able(A), able(B))", ["B gets food while A does not, so A is less able than B"]], "asymmetric_conclusion": [" gets food(A) and not  gets food(B), so Less(able(B), able(A))", ["A gets food while B does not, so B is less able to get food than A"]], "negated_asymmetric_premise": [" gets food(B) and not  gets food(A), so not More(able(A), able(B))", ["B gets food while A does not, so A is not more able than B"]], "negated_asymmetric_conclusion": [" gets food(A) and not  gets food(B), so not More(able(B), able(A))", ["A gets food while B does not, so B is not more able than A"]]}
{"original": [" blesses another person soul(A) and not  blesses another person soul(B), so More(religious(A), religious(B))", ["A blesses another person soul while B does not, so A is more religious than B"]], "negated": [" blesses another person soul(A) and not  blesses another person soul(B), so not Less(religious(A), religious(B))", ["A blesses another person soul while B does not, so A is not less religious than B"]], "asymmetric_premise": [" blesses another person soul(B) and not  blesses another person soul(A), so Less(religious(A), religious(B))", ["B blesses another person soul while A does not, so A is less religious than B"]], "asymmetric_conclusion": [" blesses another person soul(A) and not  blesses another person soul(B), so Less(religious(B), religious(A))", ["A blesses another person soul while B does not, so B is less religious than A"]], "negated_asymmetric_premise": [" blesses another person soul(B) and not  blesses another person soul(A), so not More(religious(A), religious(B))", ["B blesses another person soul while A does not, so A is not more religious than B"]], "negated_asymmetric_conclusion": [" blesses another person soul(A) and not  blesses another person soul(B), so not More(religious(B), religious(A))", ["A blesses another person soul while B does not, so B is not more religious than A"]]}
{"original": [" plays another person's music(A) and not  plays another person's music(B), so More(entertainer(A), entertainer(B))", ["A plays another person's music while B does not, so A is a more entertainer than B"]], "negated": [" plays another person's music(A) and not  plays another person's music(B), so not Less(entertainer(A), entertainer(B))", ["A plays another person's music while B does not, so A is not less entertainer than B"]], "asymmetric_premise": [" plays another person's music(B) and not  plays another person's music(A), so Less(entertainer(A), entertainer(B))", ["B plays another person's music while A does not, so A is a less entertainer than B"]], "asymmetric_conclusion": [" plays another person's music(A) and not  plays another person's music(B), so Less(entertainer(B), entertainer(A))", ["A plays another person's music while B does not, so B is a less entertainer than A"]], "negated_asymmetric_premise": [" plays another person's music(B) and not  plays another person's music(A), so not More(entertainer(A), entertainer(B))", ["B plays another person's music while A does not, so A is not more entertainer than B"]], "negated_asymmetric_conclusion": [" plays another person's music(A) and not  plays another person's music(B), so not More(entertainer(B), entertainer(A))", ["A plays another person's music while B does not, so B is not more entertainer than A"]]}
{"original": [" jumps away(A) and not  jumps away(B), so More(startled(A), startled(B))", ["A jumps away while B does not, so A is more startled than B"]], "negated": [" jumps away(A) and not  jumps away(B), so not Less(startled(A), startled(B))", ["A jumps away while B does not, so A is not less startled than B"]], "asymmetric_premise": [" jumps away(B) and not  jumps away(A), so Less(startled(A), startled(B))", ["B jumps away while A does not, so A is less startled than B"]], "asymmetric_conclusion": [" jumps away(A) and not  jumps away(B), so Less(startled(B), startled(A))", ["A jumps away while B does not, so B is less startled than A"]], "negated_asymmetric_premise": [" jumps away(B) and not  jumps away(A), so not More(startled(A), startled(B))", ["B jumps away while A does not, so A is not more startled than B"]], "negated_asymmetric_conclusion": [" jumps away(A) and not  jumps away(B), so not More(startled(B), startled(A))", ["A jumps away while B does not, so B is not more startled than A"]]}
{"original": [" treats another person with respect(A) and not  treats another person with respect(B), so More(curteous(A), curteous(B))", ["A treats another person with respect while B does not, so A is more curteous than B"]], "negated": [" treats another person with respect(A) and not  treats another person with respect(B), so not Less(curteous(A), curteous(B))", ["A treats another person with respect while B does not, so A is not less curteous than B"]], "asymmetric_premise": [" treats another person with respect(B) and not  treats another person with respect(A), so Less(curteous(A), curteous(B))", ["B treats another person with respect while A does not, so A is less curteous than B"]], "asymmetric_conclusion": [" treats another person with respect(A) and not  treats another person with respect(B), so Less(curteous(B), curteous(A))", ["A treats another person with respect while B does not, so B is less curteous than A"]], "negated_asymmetric_premise": [" treats another person with respect(B) and not  treats another person with respect(A), so not More(curteous(A), curteous(B))", ["B treats another person with respect more than A, so A is not more curteous than B"]], "negated_asymmetric_conclusion": [" treats another person with respect(A) and not  treats another person with respect(B), so not More(curteous(B), curteous(A))", ["A treats another person with respect more than B, so B is not more curteous than A"]]}
{"original": [" apologizes profusely(A) and not  apologizes profusely(B), so More(remorseful(A), remorseful(B))", ["A apologizes profusely while B does not, so A is more remorseful than B"]], "negated": [" apologizes profusely(A) and not  apologizes profusely(B), so not Less(remorseful(A), remorseful(B))", ["A apologizes profusely while B does not, so A is not less remorseful than B"]], "asymmetric_premise": [" apologizes profusely(B) and not  apologizes profusely(A), so Less(remorseful(A), remorseful(B))", ["B apologizes profusely while A does not, so A is less remorseful than B"]], "asymmetric_conclusion": [" apologizes profusely(A) and not  apologizes profusely(B), so Less(remorseful(B), remorseful(A))", ["A apologizes profusely while B does not, so B is less remorseful than A"]], "negated_asymmetric_premise": [" apologizes profusely(B) and not  apologizes profusely(A), so not More(remorseful(A), remorseful(B))", ["B apologizes profusely while A does not, so A is not more remorseful than B"]], "negated_asymmetric_conclusion": [" apologizes profusely(A) and not  apologizes profusely(B), so not More(remorseful(B), remorseful(A))", ["A apologizes profusely while B does not, so B is not more remorseful than A"]]}
{"original": [" feels even worse(A) and not  feels even worse(B), so More(unhealthy(A), unhealthy(B))", ["A feels even worse than B, so A is more unhealthy than B"]], "negated": [" feels even worse(A) and not  feels even worse(B), so not Less(unhealthy(A), unhealthy(B))", ["A feels even worse than B, so A is not less unhealthy than B"]], "asymmetric_premise": [" feels even worse(B) and not  feels even worse(A), so Less(unhealthy(A), unhealthy(B))", ["B feels even worse than A, so A is less unhealthy than B"]], "asymmetric_conclusion": [" feels even worse(A) and not  feels even worse(B), so Less(unhealthy(B), unhealthy(A))", ["A feels even worse than B, so B is less unhealthy than A"]], "negated_asymmetric_premise": [" feels even worse(B) and not  feels even worse(A), so not More(unhealthy(A), unhealthy(B))", ["B feels even worse than A, so A is not more unhealthy than B"]], "negated_asymmetric_conclusion": [" feels even worse(A) and not  feels even worse(B), so not More(unhealthy(B), unhealthy(A))", ["A feels even worse than B, so B is not more unhealthy than A"]]}
{"original": [" apologizes profusely(A) and not  apologizes profusely(B), so More(repentant(A), repentant(B))", ["A apologizes profusely while B does not, so A is more repentant than B"]], "negated": [" apologizes profusely(A) and not  apologizes profusely(B), so not Less(repentant(A), repentant(B))", ["A apologizes profusely while B does not, so A is not less repentant than B"]], "asymmetric_premise": [" apologizes profusely(B) and not  apologizes profusely(A), so Less(repentant(A), repentant(B))", ["B apologizes profusely while A does not, so A is less repentant than B"]], "asymmetric_conclusion": [" apologizes profusely(A) and not  apologizes profusely(B), so Less(repentant(B), repentant(A))", ["A apologizes profusely while B does not, so B is less repentant than A"]], "negated_asymmetric_premise": [" apologizes profusely(B) and not  apologizes profusely(A), so not More(repentant(A), repentant(B))", ["B apologizes profusely while A does not, so A is not more repentant than B"]], "negated_asymmetric_conclusion": [" apologizes profusely(A) and not  apologizes profusely(B), so not More(repentant(B), repentant(A))", ["A apologizes profusely while B does not, so B is not more repentant than A"]]}
{"original": [" raises their children(A) and not  raises their children(B), so More(giving(A), giving(B))", ["A raises their children while B does not, so A is more giving than B"]], "negated": [" raises their children(A) and not  raises their children(B), so not Less(giving(A), giving(B))", ["A raises their children while B does not, so A is not less giving than B"]], "asymmetric_premise": [" raises their children(B) and not  raises their children(A), so Less(giving(A), giving(B))", ["B raises their children while A does not, so A is less giving than B"]], "asymmetric_conclusion": [" raises their children(A) and not  raises their children(B), so Less(giving(B), giving(A))", ["A raises their children while B does not, so B is less giving than A"]], "negated_asymmetric_premise": [" raises their children(B) and not  raises their children(A), so not More(giving(A), giving(B))", ["B raises their children while A does not, so A is not more giving than B"]], "negated_asymmetric_conclusion": [" raises their children(A) and not  raises their children(B), so not More(giving(B), giving(A))", ["A raises their children while B does not, so B is not more giving than A"]]}
{"original": [" really hit it off(A) and not  really hit it off(B), so More(fun(A), fun(B))", ["A really hit it off with B while B did not, so A is more fun than B"]], "negated": [" really hit it off(A) and not  really hit it off(B), so not Less(fun(A), fun(B))", ["A and B hit it off while B did not, so A is not less fun than B"]], "asymmetric_premise": [" really hit it off(B) and not  really hit it off(A), so Less(fun(A), fun(B))", ["B really hit it off with A while A did not, so A is less fun than B"]], "asymmetric_conclusion": [" really hit it off(A) and not  really hit it off(B), so Less(fun(B), fun(A))", ["A really hit it off with B while B did not, so B is less fun than A"]], "negated_asymmetric_premise": [" really hit it off(B) and not  really hit it off(A), so not More(fun(A), fun(B))", ["B has not really hit it off with A, so A is not more fun than B"]], "negated_asymmetric_conclusion": [" really hit it off(A) and not  really hit it off(B), so not More(fun(B), fun(A))", ["A really hit it off with B, so B is not more fun than A"]]}
{"original": [" is really mad(A) and not  is really mad(B), so More(upset(A), upset(B))", ["A is really mad while B is not, so A is more upset than B"]], "negated": [" is really mad(A) and not  is really mad(B), so not Less(upset(A), upset(B))", ["A is really mad while B is not, so A is not less upset than B"]], "asymmetric_premise": [" is really mad(B) and not  is really mad(A), so Less(upset(A), upset(B))", ["B is really mad while A is not, so A is less upset than B"]], "asymmetric_conclusion": [" is really mad(A) and not  is really mad(B), so Less(upset(B), upset(A))", ["A is really mad while B is not, so B is less upset than A"]], "negated_asymmetric_premise": [" is really mad(B) and not  is really mad(A), so not More(upset(A), upset(B))", ["B is really mad while A is not, so A is not more upset than B"]], "negated_asymmetric_conclusion": [" is really mad(A) and not  is really mad(B), so not More(upset(B), upset(A))", ["A is really mad while B is not, so B is not more upset than A"]]}
{"original": [" gathers wood(A) and not  gathers wood(B), so More(practical(A), practical(B))", ["A gathers wood while B does not, so A is more practical than B"]], "negated": [" gathers wood(A) and not  gathers wood(B), so not Less(practical(A), practical(B))", ["A gathers wood while B does not, so A is not less practical than B"]], "asymmetric_premise": [" gathers wood(B) and not  gathers wood(A), so Less(practical(A), practical(B))", ["B gathers wood while A does not, so A is less practical than B"]], "asymmetric_conclusion": [" gathers wood(A) and not  gathers wood(B), so Less(practical(B), practical(A))", ["A gathers wood while B does not, so B is less practical than A"]], "negated_asymmetric_premise": [" gathers wood(B) and not  gathers wood(A), so not More(practical(A), practical(B))", ["B gathers wood while A does not, so A is not more practical than B"]], "negated_asymmetric_conclusion": [" gathers wood(A) and not  gathers wood(B), so not More(practical(B), practical(A))", ["A gathers wood while B does not, so B is not more practical than A"]]}
{"original": [" finds everything(A) and not  finds everything(B), so More(skilled(A), skilled(B))", ["A finds everything while B does not, so A is more skilled than B"]], "negated": [" finds everything(A) and not  finds everything(B), so not Less(skilled(A), skilled(B))", ["A finds everything while B does not, so A is not less skilled than B"]], "asymmetric_premise": [" finds everything(B) and not  finds everything(A), so Less(skilled(A), skilled(B))", ["B finds everything while A does not, so A is less skilled than B"]], "asymmetric_conclusion": [" finds everything(A) and not  finds everything(B), so Less(skilled(B), skilled(A))", ["A finds everything while B does not, so B is less skilled than A"]], "negated_asymmetric_premise": [" finds everything(B) and not  finds everything(A), so not More(skilled(A), skilled(B))", ["B finds everything while A does not, so A is not more skilled than B"]], "negated_asymmetric_conclusion": [" finds everything(A) and not  finds everything(B), so not More(skilled(B), skilled(A))", ["A finds everything while B does not, so B is not more skilled than A"]]}
{"original": [" gets mail(A) and not  gets mail(B), so More(skilled with their hands(A), skilled with their hands(B))", ["A gets mail while B does not, so A is more skilled with their hands than B"]], "negated": [" gets mail(A) and not  gets mail(B), so not Less(skilled with their hands(A), skilled with their hands(B))", ["A gets mail while B does not, so A is not less skilled with their hands than B"]], "asymmetric_premise": [" gets mail(B) and not  gets mail(A), so Less(skilled with their hands(A), skilled with their hands(B))", ["B gets mail while A does not, so A is less skilled with their hands than B"]], "asymmetric_conclusion": [" gets mail(A) and not  gets mail(B), so Less(skilled with their hands(B), skilled with their hands(A))", ["A gets mail while B does not, so B is less skilled with their hands than A"]], "negated_asymmetric_premise": [" gets mail(B) and not  gets mail(A), so not More(skilled with their hands(A), skilled with their hands(B))", ["B gets mail while A does not, so A is not more skilled with their hands than B"]], "negated_asymmetric_conclusion": [" gets mail(A) and not  gets mail(B), so not More(skilled with their hands(B), skilled with their hands(A))", ["A gets mail while B does not, so B is not more skilled with their hands than A"]]}
{"original": [" wraps another person's arms(A) and not  wraps another person's arms(B), so More(swaddling(A), swaddling(B))", ["A wraps another person's arms while B does not, so A is more swaddling than B"]], "negated": [" wraps another person's arms(A) and not  wraps another person's arms(B), so not Less(swaddling(A), swaddling(B))", ["A wraps another person's arms while B does not, so A is not less swaddling than B"]], "asymmetric_premise": [" wraps another person's arms(B) and not  wraps another person's arms(A), so Less(swaddling(A), swaddling(B))", ["B wraps another person's arms while A does not, so A is less swaddling than B"]], "asymmetric_conclusion": [" wraps another person's arms(A) and not  wraps another person's arms(B), so Less(swaddling(B), swaddling(A))", ["A wraps another person's arms while B does not, so B is less swaddling than A"]], "negated_asymmetric_premise": [" wraps another person's arms(B) and not  wraps another person's arms(A), so not More(swaddling(A), swaddling(B))", ["B wraps another person's arms while A does not, so A is not more swaddling than B"]], "negated_asymmetric_conclusion": [" wraps another person's arms(A) and not  wraps another person's arms(B), so not More(swaddling(B), swaddling(A))", ["A wraps another person's arms while B does not, so B is not more swaddling than A"]]}
{"original": [" walks in the woods(A) and not  walks in the woods(B), so More(thoughtful(A), thoughtful(B))", ["A walks in the woods while B does not, so A is more thoughtful than B"]], "negated": [" walks in the woods(A) and not  walks in the woods(B), so not Less(thoughtful(A), thoughtful(B))", ["A walks in the woods while B does not, so A is not less thoughtful than B"]], "asymmetric_premise": [" walks in the woods(B) and not  walks in the woods(A), so Less(thoughtful(A), thoughtful(B))", ["B walks in the woods while A does not, so A is less thoughtful than B"]], "asymmetric_conclusion": [" walks in the woods(A) and not  walks in the woods(B), so Less(thoughtful(B), thoughtful(A))", ["A walks in the woods while B does not, so B is less thoughtful than A"]], "negated_asymmetric_premise": [" walks in the woods(B) and not  walks in the woods(A), so not More(thoughtful(A), thoughtful(B))", ["B walks in the woods while A does not, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": [" walks in the woods(A) and not  walks in the woods(B), so not More(thoughtful(B), thoughtful(A))", ["A walks in the woods while B does not, so B is not more thoughtful than A"]]}
{"original": [" rests upon another person(A) and not  rests upon another person(B), so More(selfish(A), selfish(B))", ["A rests upon another person while B does not, so A is more selfish than B"]], "negated": [" rests upon another person(A) and not  rests upon another person(B), so not Less(selfish(A), selfish(B))", ["A rests upon another person while B does not, so A is not less selfish than B"]], "asymmetric_premise": [" rests upon another person(B) and not  rests upon another person(A), so Less(selfish(A), selfish(B))", ["B rests upon another person while A does not, so A is less selfish than B"]], "asymmetric_conclusion": [" rests upon another person(A) and not  rests upon another person(B), so Less(selfish(B), selfish(A))", ["A rests upon another person while B does not, so B is less selfish than A"]], "negated_asymmetric_premise": [" rests upon another person(B) and not  rests upon another person(A), so not More(selfish(A), selfish(B))", ["B rests upon another person while A does not, so A is not more selfish than B"]], "negated_asymmetric_conclusion": [" rests upon another person(A) and not  rests upon another person(B), so not More(selfish(B), selfish(A))", ["A rests upon another person while B does not, so B is not more selfish than A"]]}
{"original": [" wins a contest(A) and not  wins a contest(B), so More(lucky(A), lucky(B))", ["A wins a contest while B does not, so A is more lucky than B"]], "negated": [" wins a contest(A) and not  wins a contest(B), so not Less(lucky(A), lucky(B))", ["A wins a contest while B does not, so A is not less lucky than B"]], "asymmetric_premise": [" wins a contest(B) and not  wins a contest(A), so Less(lucky(A), lucky(B))", ["B wins a contest while A does not, so A is less lucky than B"]], "asymmetric_conclusion": [" wins a contest(A) and not  wins a contest(B), so Less(lucky(B), lucky(A))", ["A wins a contest while B does not, so B is less lucky than A"]], "negated_asymmetric_premise": [" wins a contest(B) and not  wins a contest(A), so not More(lucky(A), lucky(B))", ["B wins a contest while A does not, so A is not more lucky than B"]], "negated_asymmetric_conclusion": [" wins a contest(A) and not  wins a contest(B), so not More(lucky(B), lucky(A))", ["A wins a contest while B does not, so B is not more lucky than A"]]}
{"original": [" shaves their beard(A) and not  shaves their beard(B), so More(responsible(A), responsible(B))", ["A shaves their beard while B does not, so A is more responsible than B"]], "negated": [" shaves their beard(A) and not  shaves their beard(B), so not Less(responsible(A), responsible(B))", ["A shaves their beard while B does not, so A is not less responsible than B"]], "asymmetric_premise": [" shaves their beard(B) and not  shaves their beard(A), so Less(responsible(A), responsible(B))", ["B shaves their beard while A does not, so A is less responsible than B"]], "asymmetric_conclusion": [" shaves their beard(A) and not  shaves their beard(B), so Less(responsible(B), responsible(A))", ["A shaves their beard while B does not, so B is less responsible than A"]], "negated_asymmetric_premise": [" shaves their beard(B) and not  shaves their beard(A), so not More(responsible(A), responsible(B))", ["B shaves their beard while A does not, so A is not more responsible than B"]], "negated_asymmetric_conclusion": [" shaves their beard(A) and not  shaves their beard(B), so not More(responsible(B), responsible(A))", ["A shaves their beard while B does not, so B is not more responsible than A"]]}
{"original": [" sits in another person's chair(A) and not  sits in another person's chair(B), so More(pushy(A), pushy(B))", ["A sits in another person's chair while B does not, so A is more pushy than B"]], "negated": [" sits in another person's chair(A) and not  sits in another person's chair(B), so not Less(pushy(A), pushy(B))", ["A sits in another person's chair more than B, so A is not less pushy than B"]], "asymmetric_premise": [" sits in another person's chair(B) and not  sits in another person's chair(A), so Less(pushy(A), pushy(B))", ["B sits in another person's chair while A does not, so A is less pushy than B"]], "asymmetric_conclusion": [" sits in another person's chair(A) and not  sits in another person's chair(B), so Less(pushy(B), pushy(A))", ["A sits in another person's chair while B does not, so B is less pushy than A"]], "negated_asymmetric_premise": [" sits in another person's chair(B) and not  sits in another person's chair(A), so not More(pushy(A), pushy(B))", ["B sits in another person's chair more than A, so A is not more pushy than B"]], "negated_asymmetric_conclusion": [" sits in another person's chair(A) and not  sits in another person's chair(B), so not More(pushy(B), pushy(A))", ["A sits in another person's chair more than B, so B is not more pushy than A"]]}
{"original": [" commands another person army(A) and not  commands another person army(B), so More(strong(A), strong(B))", ["A commands another person army while B does not, so A is more strong than B"]], "negated": [" commands another person army(A) and not  commands another person army(B), so not Less(strong(A), strong(B))", ["A commands another person army while B does not, so A is not less strong than B"]], "asymmetric_premise": [" commands another person army(B) and not  commands another person army(A), so Less(strong(A), strong(B))", ["B commands another person army while A does not, so A is less strong than B"]], "asymmetric_conclusion": [" commands another person army(A) and not  commands another person army(B), so Less(strong(B), strong(A))", ["A commands another person army while B does not, so B is less strong than A"]], "negated_asymmetric_premise": [" commands another person army(B) and not  commands another person army(A), so not More(strong(A), strong(B))", ["B commands another person army while A does not, so A is not more strong than B"]], "negated_asymmetric_conclusion": [" commands another person army(A) and not  commands another person army(B), so not More(strong(B), strong(A))", ["A commands another person army while B does not, so B is not more strong than A"]]}
{"original": [" loves their husband(A) and not  loves their husband(B), so More(affectionate(A), affectionate(B))", ["A loves their husband while B does not, so A is more affectionate than B"]], "negated": [" loves their husband(A) and not  loves their husband(B), so not Less(affectionate(A), affectionate(B))", ["A loves their husband while B does not, so A is not less affectionate than B"]], "asymmetric_premise": [" loves their husband(B) and not  loves their husband(A), so Less(affectionate(A), affectionate(B))", ["B loves their husband while A does not, so A is less affectionate than B"]], "asymmetric_conclusion": [" loves their husband(A) and not  loves their husband(B), so Less(affectionate(B), affectionate(A))", ["A loves their husband while B does not, so B is less affectionate than A"]], "negated_asymmetric_premise": [" loves their husband(B) and not  loves their husband(A), so not More(affectionate(A), affectionate(B))", ["B loves their husband while A does not, so A is not more affectionate than B"]], "negated_asymmetric_conclusion": [" loves their husband(A) and not  loves their husband(B), so not More(affectionate(B), affectionate(A))", ["A loves their husband while B does not, so B is not more affectionate than A"]]}
{"original": [" leaves aside the question(A) and not  leaves aside the question(B), so More(uncommunicative(A), uncommunicative(B))", ["A leaves aside the question while B does not, so A is more uncommunicative than B"]], "negated": [" leaves aside the question(A) and not  leaves aside the question(B), so not Less(uncommunicative(A), uncommunicative(B))", ["A leaves aside the question while B does not, so A is not less uncommunicative than B"]], "asymmetric_premise": [" leaves aside the question(B) and not  leaves aside the question(A), so Less(uncommunicative(A), uncommunicative(B))", ["B leaves aside the question while A does not, so A is less uncommunicative than B"]], "asymmetric_conclusion": [" leaves aside the question(A) and not  leaves aside the question(B), so Less(uncommunicative(B), uncommunicative(A))", ["A leaves aside the question while B does not, so B is less uncommunicative than A"]], "negated_asymmetric_premise": [" leaves aside the question(B) and not  leaves aside the question(A), so not More(uncommunicative(A), uncommunicative(B))", ["B leaves aside the question while A does not, so A is not more uncommunicative than B"]], "negated_asymmetric_conclusion": [" leaves aside the question(A) and not  leaves aside the question(B), so not More(uncommunicative(B), uncommunicative(A))", ["A leaves aside the question while B does not, so B is not more uncommunicative than A"]]}
{"original": [" wants to be a ballerina(A) and not  wants to be a ballerina(B), so More(artistic(A), artistic(B))", ["A wants to be a ballerina while B does not, so A is more artistic than B"]], "negated": [" wants to be a ballerina(A) and not  wants to be a ballerina(B), so not Less(artistic(A), artistic(B))", ["A wants to be a ballerina while B does not, so A is not less artistic than B"]], "asymmetric_premise": [" wants to be a ballerina(B) and not  wants to be a ballerina(A), so Less(artistic(A), artistic(B))", ["B wants to be a ballerina while A does not, so A is less artistic than B"]], "asymmetric_conclusion": [" wants to be a ballerina(A) and not  wants to be a ballerina(B), so Less(artistic(B), artistic(A))", ["A wants to be a ballerina while B does not, so B is less artistic than A"]], "negated_asymmetric_premise": [" wants to be a ballerina(B) and not  wants to be a ballerina(A), so not More(artistic(A), artistic(B))", ["B wants to be a ballerina while A does not, so A is not more artistic than B"]], "negated_asymmetric_conclusion": [" wants to be a ballerina(A) and not  wants to be a ballerina(B), so not More(artistic(B), artistic(A))", ["A wants to be a ballerina while B does not, so B is not more artistic than A"]]}
{"original": [" is driving down the road(A) and not  is driving down the road(B), so More(responsible(A), responsible(B))", ["A is driving down the road while B is not, so A is more responsible than B"]], "negated": [" is driving down the road(A) and not  is driving down the road(B), so not Less(responsible(A), responsible(B))", ["A is driving down the road while B is not, so A is not less responsible than B"]], "asymmetric_premise": [" is driving down the road(B) and not  is driving down the road(A), so Less(responsible(A), responsible(B))", ["B is driving down the road while A is not, so A is less responsible than B"]], "asymmetric_conclusion": [" is driving down the road(A) and not  is driving down the road(B), so Less(responsible(B), responsible(A))", ["A is driving down the road while B is not, so B is less responsible than A"]], "negated_asymmetric_premise": [" is driving down the road(B) and not  is driving down the road(A), so not More(responsible(A), responsible(B))", ["B is driving down the road while A is not, so A is not more responsible than B"]], "negated_asymmetric_conclusion": [" is driving down the road(A) and not  is driving down the road(B), so not More(responsible(B), responsible(A))", ["A is driving down the road while B is not, so B is not more responsible than A"]]}
{"original": [" gnashes their teeth(A) and not  gnashes their teeth(B), so More(scared(A), scared(B))", ["A gnashes their teeth while B does not, so A is more scared than B"]], "negated": [" gnashes their teeth(A) and not  gnashes their teeth(B), so not Less(scared(A), scared(B))", ["A gnashes their teeth while B does not, so A is not less scared than B"]], "asymmetric_premise": [" gnashes their teeth(B) and not  gnashes their teeth(A), so Less(scared(A), scared(B))", ["B gnashes their teeth while A does not, so A is less scared than B"]], "asymmetric_conclusion": [" gnashes their teeth(A) and not  gnashes their teeth(B), so Less(scared(B), scared(A))", ["A gnashes their teeth while B does not, so B is less scared than A"]], "negated_asymmetric_premise": [" gnashes their teeth(B) and not  gnashes their teeth(A), so not More(scared(A), scared(B))", ["B gnashes their teeth while A does not, so A is not more scared than B"]], "negated_asymmetric_conclusion": [" gnashes their teeth(A) and not  gnashes their teeth(B), so not More(scared(B), scared(A))", ["A gnashes their teeth while B does not, so B is not more scared than A"]]}
{"original": [" says bye to another person(A) and not  says bye to another person(B), so More(sad(A), sad(B))", ["A says bye to another person while B does not, so A is more sad than B"]], "negated": [" says bye to another person(A) and not  says bye to another person(B), so not Less(sad(A), sad(B))", ["A says bye to another person while B does not, so A is not less sad than B"]], "asymmetric_premise": [" says bye to another person(B) and not  says bye to another person(A), so Less(sad(A), sad(B))", ["B says bye to another person while A does not, so A is less sad than B"]], "asymmetric_conclusion": [" says bye to another person(A) and not  says bye to another person(B), so Less(sad(B), sad(A))", ["A says bye to another person while B does not, so B is less sad than A"]], "negated_asymmetric_premise": [" says bye to another person(B) and not  says bye to another person(A), so not More(sad(A), sad(B))", ["B says bye to another person while A does not, so A is not more sad than B"]], "negated_asymmetric_conclusion": [" says bye to another person(A) and not  says bye to another person(B), so not More(sad(B), sad(A))", ["A says bye to another person while B does not, so B is not more sad than A"]]}
{"original": [" gives another person lessons(A) and not  gives another person lessons(B), so More(smart(A), smart(B))", ["A gives another person lessons while B does not, so A is more smart than B"]], "negated": [" gives another person lessons(A) and not  gives another person lessons(B), so not Less(smart(A), smart(B))", ["A gives another person lessons while B does not, so A is not less smart than B"]], "asymmetric_premise": [" gives another person lessons(B) and not  gives another person lessons(A), so Less(smart(A), smart(B))", ["B gives another person lessons while A does not, so A is less smart than B"]], "asymmetric_conclusion": [" gives another person lessons(A) and not  gives another person lessons(B), so Less(smart(B), smart(A))", ["A gives another person lessons while B does not, so B is less smart than A"]], "negated_asymmetric_premise": [" gives another person lessons(B) and not  gives another person lessons(A), so not More(smart(A), smart(B))", ["B gives another person lessons while A does not, so A is not more smart than B"]], "negated_asymmetric_conclusion": [" gives another person lessons(A) and not  gives another person lessons(B), so not More(smart(B), smart(A))", ["A gives another person lessons while B does not, so B is not more smart than A"]]}
{"original": [" wins a medal(A) and not  wins a medal(B), so More(competitive(A), competitive(B))", ["A wins a medal while B does not, so A is more competitive than B"]], "negated": [" wins a medal(A) and not  wins a medal(B), so not Less(competitive(A), competitive(B))", ["A wins a medal while B does not, so A is not less competitive than B"]], "asymmetric_premise": [" wins a medal(B) and not  wins a medal(A), so Less(competitive(A), competitive(B))", ["B wins a medal while A does not, so A is less competitive than B"]], "asymmetric_conclusion": [" wins a medal(A) and not  wins a medal(B), so Less(competitive(B), competitive(A))", ["A wins a medal while B does not, so B is less competitive than A"]], "negated_asymmetric_premise": [" wins a medal(B) and not  wins a medal(A), so not More(competitive(A), competitive(B))", ["B wins a medal while A does not, so A is not more competitive than B"]], "negated_asymmetric_conclusion": [" wins a medal(A) and not  wins a medal(B), so not More(competitive(B), competitive(A))", ["A wins a medal while B does not, so B is not more competitive than A"]]}
{"original": [" says would send(A) and not  says would send(B), so More(caring(A), caring(B))", ["A says would send money while B does not, so A is more caring than B"]], "negated": [" says would send(A) and not  says would send(B), so not Less(caring(A), caring(B))", ["A says would send mail while B does not, so A is not less caring than B"]], "asymmetric_premise": [" says would send(B) and not  says would send(A), so Less(caring(A), caring(B))", ["B says would send money while A does not, so A is less caring than B"]], "asymmetric_conclusion": [" says would send(A) and not  says would send(B), so Less(caring(B), caring(A))", ["A says would send money while B does not, so B is less caring than A"]], "negated_asymmetric_premise": [" says would send(B) and not  says would send(A), so not More(caring(A), caring(B))", ["B says would send mail while A does not, so A is not more caring than B"]], "negated_asymmetric_conclusion": [" says would send(A) and not  says would send(B), so not More(caring(B), caring(A))", ["A says would send mail while B does not, so B is not more caring than A"]]}
{"original": [" learns spanish(A) and not  learns spanish(B), so More(curious(A), curious(B))", ["A learns spanish while B does not, so A is more curious than B"]], "negated": [" learns spanish(A) and not  learns spanish(B), so not Less(curious(A), curious(B))", ["A learns spanish while B does not, so A is not less curious than B"]], "asymmetric_premise": [" learns spanish(B) and not  learns spanish(A), so Less(curious(A), curious(B))", ["B learns spanish while A does not, so A is less curious than B"]], "asymmetric_conclusion": [" learns spanish(A) and not  learns spanish(B), so Less(curious(B), curious(A))", ["A learns spanish while B does not, so B is less curious than A"]], "negated_asymmetric_premise": [" learns spanish(B) and not  learns spanish(A), so not More(curious(A), curious(B))", ["B learns spanish while A does not, so A is not more curious than B"]], "negated_asymmetric_conclusion": [" learns spanish(A) and not  learns spanish(B), so not More(curious(B), curious(A))", ["A learns spanish while B does not, so B is not more curious than A"]]}
{"original": [" sets another person right(A) and not  sets another person right(B), so More(motivated(A), motivated(B))", ["A sets another person right while B does not, so A is more motivated than B"]], "negated": [" sets another person right(A) and not  sets another person right(B), so not Less(motivated(A), motivated(B))", ["A sets another person right while B does not, so A is not less motivated than B"]], "asymmetric_premise": [" sets another person right(B) and not  sets another person right(A), so Less(motivated(A), motivated(B))", ["B sets another person right while A does not, so A is less motivated than B"]], "asymmetric_conclusion": [" sets another person right(A) and not  sets another person right(B), so Less(motivated(B), motivated(A))", ["A sets another person right while B does not, so B is less motivated than A"]], "negated_asymmetric_premise": [" sets another person right(B) and not  sets another person right(A), so not More(motivated(A), motivated(B))", ["B sets another person right while A does not, so A is not more motivated than B"]], "negated_asymmetric_conclusion": [" sets another person right(A) and not  sets another person right(B), so not More(motivated(B), motivated(A))", ["A sets another person right while B does not, so B is not more motivated than A"]]}
{"original": [" sees a man about a dog(A) and not  sees a man about a dog(B), so More(engaged(A), engaged(B))", ["A sees a man about a dog while B does not, so A is more engaged than B"]], "negated": [" sees a man about a dog(A) and not  sees a man about a dog(B), so not Less(engaged(A), engaged(B))", ["A sees a man about a dog while B does not, so A is not less engaged than B"]], "asymmetric_premise": [" sees a man about a dog(B) and not  sees a man about a dog(A), so Less(engaged(A), engaged(B))", ["B sees a man about a dog while A does not, so A is less engaged than B"]], "asymmetric_conclusion": [" sees a man about a dog(A) and not  sees a man about a dog(B), so Less(engaged(B), engaged(A))", ["A sees a man about a dog while B does not, so B is less engaged than A"]], "negated_asymmetric_premise": [" sees a man about a dog(B) and not  sees a man about a dog(A), so not More(engaged(A), engaged(B))", ["B sees a man about a dog while A does not, so A is not more engaged than B"]], "negated_asymmetric_conclusion": [" sees a man about a dog(A) and not  sees a man about a dog(B), so not More(engaged(B), engaged(A))", ["A sees a man about a dog while B does not, so B is not more engaged than A"]]}
{"original": [" admires another person's work(A) and not  admires another person's work(B), so More(admirier(A), admirier(B))", ["A admires another person's work while B does not, so A is more admirier than B"]], "negated": [" admires another person's work(A) and not  admires another person's work(B), so not Less(admirier(A), admirier(B))", ["A admires another person's work while B does not, so A is not less admirier than B"]], "asymmetric_premise": [" admires another person's work(B) and not  admires another person's work(A), so Less(admirier(A), admirier(B))", ["B admires another person's work while A does not, so A is less admirier than B"]], "asymmetric_conclusion": [" admires another person's work(A) and not  admires another person's work(B), so Less(admirier(B), admirier(A))", ["A admires another person's work while B does not, so B is less admirier than A"]], "negated_asymmetric_premise": [" admires another person's work(B) and not  admires another person's work(A), so not More(admirier(A), admirier(B))", ["B admires another person's work more than A, so A is not more admirier than B"]], "negated_asymmetric_conclusion": [" admires another person's work(A) and not  admires another person's work(B), so not More(admirier(B), admirier(A))", ["A admires another person's work while B does not, so B is not more admirier than A"]]}
{"original": [" starts dating(A) and not  starts dating(B), so More(hopeful(A), hopeful(B))", ["A starts dating while B does not, so A is more hopeful than B"]], "negated": [" starts dating(A) and not  starts dating(B), so not Less(hopeful(A), hopeful(B))", ["A starts dating while B does not, so A is not less hopeful than B"]], "asymmetric_premise": [" starts dating(B) and not  starts dating(A), so Less(hopeful(A), hopeful(B))", ["B starts dating while A does not, so A is less hopeful than B"]], "asymmetric_conclusion": [" starts dating(A) and not  starts dating(B), so Less(hopeful(B), hopeful(A))", ["A starts dating while B does not, so B is less hopeful than A"]], "negated_asymmetric_premise": [" starts dating(B) and not  starts dating(A), so not More(hopeful(A), hopeful(B))", ["B starts dating while A does not, so A is not more hopeful than B"]], "negated_asymmetric_conclusion": [" starts dating(A) and not  starts dating(B), so not More(hopeful(B), hopeful(A))", ["A starts dating while B does not, so B is not more hopeful than A"]]}
{"original": [" tests the waters(A) and not  tests the waters(B), so More(apprehensive(A), apprehensive(B))", ["A tests the waters while B does not, so A is more apprehensive than B"]], "negated": [" tests the waters(A) and not  tests the waters(B), so not Less(apprehensive(A), apprehensive(B))", ["A tests the waters while B does not, so A is not less apprehensive than B"]], "asymmetric_premise": [" tests the waters(B) and not  tests the waters(A), so Less(apprehensive(A), apprehensive(B))", ["B tests the waters while A does not, so A is less apprehensive than B"]], "asymmetric_conclusion": [" tests the waters(A) and not  tests the waters(B), so Less(apprehensive(B), apprehensive(A))", ["A tests the waters while B does not, so B is less apprehensive than A"]], "negated_asymmetric_premise": [" tests the waters(B) and not  tests the waters(A), so not More(apprehensive(A), apprehensive(B))", ["B tests the waters while A does not, so A is not more apprehensive than B"]], "negated_asymmetric_conclusion": [" tests the waters(A) and not  tests the waters(B), so not More(apprehensive(B), apprehensive(A))", ["A tests the waters while B does not, so B is not more apprehensive than A"]]}
{"original": [" lands a new job(A) and not  lands a new job(B), so More(responsible(A), responsible(B))", ["A lands a new job while B does not, so A is more responsible than B"]], "negated": [" lands a new job(A) and not  lands a new job(B), so not Less(responsible(A), responsible(B))", ["A lands a new job while B does not, so A is not less responsible than B"]], "asymmetric_premise": [" lands a new job(B) and not  lands a new job(A), so Less(responsible(A), responsible(B))", ["B lands a new job while A does not, so A is less responsible than B"]], "asymmetric_conclusion": [" lands a new job(A) and not  lands a new job(B), so Less(responsible(B), responsible(A))", ["A lands a new job while B does not, so B is less responsible than A"]], "negated_asymmetric_premise": [" lands a new job(B) and not  lands a new job(A), so not More(responsible(A), responsible(B))", ["B lands a new job while A does not, so A is not more responsible than B"]], "negated_asymmetric_conclusion": [" lands a new job(A) and not  lands a new job(B), so not More(responsible(B), responsible(A))", ["A lands a new job while B does not, so B is not more responsible than A"]]}
{"original": [" is driving their car(A) and not  is driving their car(B), so More(frenzied(A), frenzied(B))", ["A is driving their car while B is not, so A is more frenzied than B"]], "negated": [" is driving their car(A) and not  is driving their car(B), so not Less(frenzied(A), frenzied(B))", ["A is driving their car while B is not, so A is not less frenzied than B"]], "asymmetric_premise": [" is driving their car(B) and not  is driving their car(A), so Less(frenzied(A), frenzied(B))", ["B is driving their car while A is not, so A is less frenzied than B"]], "asymmetric_conclusion": [" is driving their car(A) and not  is driving their car(B), so Less(frenzied(B), frenzied(A))", ["A is driving their car while B is not, so B is less frenzied than A"]], "negated_asymmetric_premise": [" is driving their car(B) and not  is driving their car(A), so not More(frenzied(A), frenzied(B))", ["B is driving their car while A is not, so A is not more frenzied than B"]], "negated_asymmetric_conclusion": [" is driving their car(A) and not  is driving their car(B), so not More(frenzied(B), frenzied(A))", ["A is driving their car while B is not, so B is not more frenzied than A"]]}
{"original": [" has a bad cough(A) and not  has a bad cough(B), so More(sick(A), sick(B))", ["A has a bad cough while B does not, so A is more sick than B"]], "negated": [" has a bad cough(A) and not  has a bad cough(B), so not Less(sick(A), sick(B))", ["A has a bad cough while B does not, so A is not less sick than B"]], "asymmetric_premise": [" has a bad cough(B) and not  has a bad cough(A), so Less(sick(A), sick(B))", ["B has a bad cough while A does not, so A is less sick than B"]], "asymmetric_conclusion": [" has a bad cough(A) and not  has a bad cough(B), so Less(sick(B), sick(A))", ["A has a bad cough while B does not, so B is less sick than A"]], "negated_asymmetric_premise": [" has a bad cough(B) and not  has a bad cough(A), so not More(sick(A), sick(B))", ["B has a bad cough while A does not, so A is not more sick than B"]], "negated_asymmetric_conclusion": [" has a bad cough(A) and not  has a bad cough(B), so not More(sick(B), sick(A))", ["A has a bad cough while B does not, so B is not more sick than A"]]}
{"original": [" uses their noggin(A) and not  uses their noggin(B), so More(thoughtful(A), thoughtful(B))", ["A uses their noggin while B does not, so A is more thoughtful than B"]], "negated": [" uses their noggin(A) and not  uses their noggin(B), so not Less(thoughtful(A), thoughtful(B))", ["A uses their noggin while B does not, so A is not less thoughtful than B"]], "asymmetric_premise": [" uses their noggin(B) and not  uses their noggin(A), so Less(thoughtful(A), thoughtful(B))", ["B uses their noggin while A does not, so A is less thoughtful than B"]], "asymmetric_conclusion": [" uses their noggin(A) and not  uses their noggin(B), so Less(thoughtful(B), thoughtful(A))", ["A uses their noggin while B does not, so B is less thoughtful than A"]], "negated_asymmetric_premise": [" uses their noggin(B) and not  uses their noggin(A), so not More(thoughtful(A), thoughtful(B))", ["B uses their noggin more than A, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": [" uses their noggin(A) and not  uses their noggin(B), so not More(thoughtful(B), thoughtful(A))", ["A uses their noggin while B does not, so B is not more thoughtful than A"]]}
{"original": [" gets a black eye(A) and not  gets a black eye(B), so More(different(A), different(B))", ["A gets a black eye while B does not, so A is more different than B"]], "negated": [" gets a black eye(A) and not  gets a black eye(B), so not Less(different(A), different(B))", ["A gets a black eye while B does not, so A is not less different than B"]], "asymmetric_premise": [" gets a black eye(B) and not  gets a black eye(A), so Less(different(A), different(B))", ["B gets a black eye while A does not, so A is less different than B"]], "asymmetric_conclusion": [" gets a black eye(A) and not  gets a black eye(B), so Less(different(B), different(A))", ["A gets a black eye while B does not, so B is less different than A"]], "negated_asymmetric_premise": [" gets a black eye(B) and not  gets a black eye(A), so not More(different(A), different(B))", ["B gets a black eye while A does not, so A is not more different than B"]], "negated_asymmetric_conclusion": [" gets a black eye(A) and not  gets a black eye(B), so not More(different(B), different(A))", ["A gets a black eye while B does not, so B is not more different than A"]]}
{"original": [" loves candy(A) and not  loves candy(B), so More(agreeable(A), agreeable(B))", ["A loves candy while B does not, so A is more agreeable than B"]], "negated": [" loves candy(A) and not  loves candy(B), so not Less(agreeable(A), agreeable(B))", ["A loves candy while B does not, so A is not less agreeable than B"]], "asymmetric_premise": [" loves candy(B) and not  loves candy(A), so Less(agreeable(A), agreeable(B))", ["B loves candy while A does not, so A is less agreeable than B"]], "asymmetric_conclusion": [" loves candy(A) and not  loves candy(B), so Less(agreeable(B), agreeable(A))", ["A loves candy while B does not, so B is less agreeable than A"]], "negated_asymmetric_premise": [" loves candy(B) and not  loves candy(A), so not More(agreeable(A), agreeable(B))", ["B loves candy while A does not, so A is not more agreeable than B"]], "negated_asymmetric_conclusion": [" loves candy(A) and not  loves candy(B), so not More(agreeable(B), agreeable(A))", ["A loves candy while B does not, so B is not more agreeable than A"]]}
{"original": [" visits another person's grandmother(A) and not  visits another person's grandmother(B), so More(sociable(A), sociable(B))", ["A visits another person's grandmother while B does not, so A is more sociable than B"]], "negated": [" visits another person's grandmother(A) and not  visits another person's grandmother(B), so not Less(sociable(A), sociable(B))", ["A visits another person's grandmother while B does not, so A is not less sociable than B"]], "asymmetric_premise": [" visits another person's grandmother(B) and not  visits another person's grandmother(A), so Less(sociable(A), sociable(B))", ["B visits another person's grandmother while A does not, so A is less sociable than B"]], "asymmetric_conclusion": [" visits another person's grandmother(A) and not  visits another person's grandmother(B), so Less(sociable(B), sociable(A))", ["A visits another person's grandmother while B does not, so B is less sociable than A"]], "negated_asymmetric_premise": [" visits another person's grandmother(B) and not  visits another person's grandmother(A), so not More(sociable(A), sociable(B))", ["B visits another person's grandmother while A does not, so A is not more sociable than B"]], "negated_asymmetric_conclusion": [" visits another person's grandmother(A) and not  visits another person's grandmother(B), so not More(sociable(B), sociable(A))", ["A visits another person's grandmother while B does not, so B is not more sociable than A"]]}
{"original": [" hires someone(A) and not  hires someone(B), so More(commanding(A), commanding(B))", ["A hires someone while B does not, so A is more commanding than B"]], "negated": [" hires someone(A) and not  hires someone(B), so not Less(commanding(A), commanding(B))", ["A hires someone while B does not, so A is not less commanding than B"]], "asymmetric_premise": [" hires someone(B) and not  hires someone(A), so Less(commanding(A), commanding(B))", ["B hires someone while A does not, so A is less commanding than B"]], "asymmetric_conclusion": [" hires someone(A) and not  hires someone(B), so Less(commanding(B), commanding(A))", ["A hires someone while B does not, so B is less commanding than A"]], "negated_asymmetric_premise": [" hires someone(B) and not  hires someone(A), so not More(commanding(A), commanding(B))", ["B hires someone while A does not, so A is not more commanding than B"]], "negated_asymmetric_conclusion": [" hires someone(A) and not  hires someone(B), so not More(commanding(B), commanding(A))", ["A hires someone while B does not, so B is not more commanding than A"]]}
{"original": [" wants to go again(A) and not  wants to go again(B), so More(hopeful(A), hopeful(B))", ["A wants to go again while B does not, so A is more hopeful than B"]], "negated": [" wants to go again(A) and not  wants to go again(B), so not Less(hopeful(A), hopeful(B))", ["A wants to go again while B does not, so A is not less hopeful than B"]], "asymmetric_premise": [" wants to go again(B) and not  wants to go again(A), so Less(hopeful(A), hopeful(B))", ["B wants to go again while A does not, so A is less hopeful than B"]], "asymmetric_conclusion": [" wants to go again(A) and not  wants to go again(B), so Less(hopeful(B), hopeful(A))", ["A wants to go again while B does not, so B is less hopeful than A"]], "negated_asymmetric_premise": [" wants to go again(B) and not  wants to go again(A), so not More(hopeful(A), hopeful(B))", ["B wants to go again while A does not, so A is not more hopeful than B"]], "negated_asymmetric_conclusion": [" wants to go again(A) and not  wants to go again(B), so not More(hopeful(B), hopeful(A))", ["A wants to go again while B does not, so B is not more hopeful than A"]]}
{"original": [" licks their chops(A) and not  licks their chops(B), so More(hungry(A), hungry(B))", ["A licks their chops while B does not, so A is more hungry than B"]], "negated": [" licks their chops(A) and not  licks their chops(B), so not Less(hungry(A), hungry(B))", ["A licks their chops while B does not, so A is not less hungry than B"]], "asymmetric_premise": [" licks their chops(B) and not  licks their chops(A), so Less(hungry(A), hungry(B))", ["B licks their chops while A does not, so A is less hungry than B"]], "asymmetric_conclusion": [" licks their chops(A) and not  licks their chops(B), so Less(hungry(B), hungry(A))", ["A licks their chops while B does not, so B is less hungry than A"]], "negated_asymmetric_premise": [" licks their chops(B) and not  licks their chops(A), so not More(hungry(A), hungry(B))", ["B licks their chops while A does not, so A is not more hungry than B"]], "negated_asymmetric_conclusion": [" licks their chops(A) and not  licks their chops(B), so not More(hungry(B), hungry(A))", ["A licks their chops while B does not, so B is not more hungry than A"]]}
{"original": [" says would help(A) and not  says would help(B), so More(helpful(A), helpful(B))", ["A says would help people while B does not, so A is more helpful than B"]], "negated": [" says would help(A) and not  says would help(B), so not Less(helpful(A), helpful(B))", ["A says would help people while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" says would help(B) and not  says would help(A), so Less(helpful(A), helpful(B))", ["B says would help while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" says would help(A) and not  says would help(B), so Less(helpful(B), helpful(A))", ["A says would help people while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" says would help(B) and not  says would help(A), so not More(helpful(A), helpful(B))", ["B says would help people while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" says would help(A) and not  says would help(B), so not More(helpful(B), helpful(A))", ["A says would help people while B does not, so B is not more helpful than A"]]}
{"original": [" hops to one day(A) and not  hops to one day(B), so More(free-spirited(A), free-spirited(B))", ["A hops to one day more than B, so A is more free-spirited than B"]], "negated": [" hops to one day(A) and not  hops to one day(B), so not Less(free-spirited(A), free-spirited(B))", ["A hops to one day more than B, so A is not less free-spirited than B"]], "asymmetric_premise": [" hops to one day(B) and not  hops to one day(A), so Less(free-spirited(A), free-spirited(B))", ["B hops to one day while A does not, so A is less free-spirited than B"]], "asymmetric_conclusion": [" hops to one day(A) and not  hops to one day(B), so Less(free-spirited(B), free-spirited(A))", ["A hops to one day while B does not, so B is less free-spirited than A"]], "negated_asymmetric_premise": [" hops to one day(B) and not  hops to one day(A), so not More(free-spirited(A), free-spirited(B))", ["B hops to one day more than A, so A is not more free-spirited than B"]], "negated_asymmetric_conclusion": [" hops to one day(A) and not  hops to one day(B), so not More(free-spirited(B), free-spirited(A))", ["A hops to one day more than B, so B is not more free-spirited than A"]]}
{"original": [" gets an ipad(A) and not  gets an ipad(B), so More(excited(A), excited(B))", ["A gets an ipad while B does not, so A is more excited than B"]], "negated": [" gets an ipad(A) and not  gets an ipad(B), so not Less(excited(A), excited(B))", ["A gets an ipad while B does not, so A is not less excited than B"]], "asymmetric_premise": [" gets an ipad(B) and not  gets an ipad(A), so Less(excited(A), excited(B))", ["B gets an ipad while A does not, so A is less excited than B"]], "asymmetric_conclusion": [" gets an ipad(A) and not  gets an ipad(B), so Less(excited(B), excited(A))", ["A gets an ipad while B does not, so B is less excited than A"]], "negated_asymmetric_premise": [" gets an ipad(B) and not  gets an ipad(A), so not More(excited(A), excited(B))", ["B gets an ipad while A does not, so A is not more excited than B"]], "negated_asymmetric_conclusion": [" gets an ipad(A) and not  gets an ipad(B), so not More(excited(B), excited(A))", ["A gets an ipad while B does not, so B is not more excited than A"]]}
{"original": [" finishes the hike(A) and not  finishes the hike(B), so More(hardworking(A), hardworking(B))", ["A finishes the hike while B does not, so A is more hardworking than B"]], "negated": [" finishes the hike(A) and not  finishes the hike(B), so not Less(hardworking(A), hardworking(B))", ["A finishes the hike while B does not, so A is not less hardworking than B"]], "asymmetric_premise": [" finishes the hike(B) and not  finishes the hike(A), so Less(hardworking(A), hardworking(B))", ["B finishes the hike while A does not, so A is less hardworking than B"]], "asymmetric_conclusion": [" finishes the hike(A) and not  finishes the hike(B), so Less(hardworking(B), hardworking(A))", ["A finishes the hike while B does not, so B is less hardworking than A"]], "negated_asymmetric_premise": [" finishes the hike(B) and not  finishes the hike(A), so not More(hardworking(A), hardworking(B))", ["B finishes the hike while A does not, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": [" finishes the hike(A) and not  finishes the hike(B), so not More(hardworking(B), hardworking(A))", ["A finishes the hike while B does not, so B is not more hardworking than A"]]}
{"original": [" loses weight(A) and not  loses weight(B), so More(motivated(A), motivated(B))", ["A loses weight while B does not, so A is more motivated than B"]], "negated": [" loses weight(A) and not  loses weight(B), so not Less(motivated(A), motivated(B))", ["A loses weight while B does not, so A is not less motivated than B"]], "asymmetric_premise": [" loses weight(B) and not  loses weight(A), so Less(motivated(A), motivated(B))", ["B loses weight while A does not, so A is less motivated than B"]], "asymmetric_conclusion": [" loses weight(A) and not  loses weight(B), so Less(motivated(B), motivated(A))", ["A loses weight while B does not, so B is less motivated than A"]], "negated_asymmetric_premise": [" loses weight(B) and not  loses weight(A), so not More(motivated(A), motivated(B))", ["B loses weight while A does not, so A is not more motivated than B"]], "negated_asymmetric_conclusion": [" loses weight(A) and not  loses weight(B), so not More(motivated(B), motivated(A))", ["A loses weight while B does not, so B is not more motivated than A"]]}
{"original": [" gets dizzy(A) and not  gets dizzy(B), so More(sick(A), sick(B))", ["A gets dizzy while B does not, so A is more sick than B"]], "negated": [" gets dizzy(A) and not  gets dizzy(B), so not Less(sick(A), sick(B))", ["A gets dizzy while B does not, so A is not less sick than B"]], "asymmetric_premise": [" gets dizzy(B) and not  gets dizzy(A), so Less(sick(A), sick(B))", ["B gets dizzy while A does not, so A is less sick than B"]], "asymmetric_conclusion": [" gets dizzy(A) and not  gets dizzy(B), so Less(sick(B), sick(A))", ["A gets dizzy while B does not, so B is less sick than A"]], "negated_asymmetric_premise": [" gets dizzy(B) and not  gets dizzy(A), so not More(sick(A), sick(B))", ["B gets dizzy while A does not, so A is not more sick than B"]], "negated_asymmetric_conclusion": [" gets dizzy(A) and not  gets dizzy(B), so not More(sick(B), sick(A))", ["A gets dizzy while B does not, so B is not more sick than A"]]}
{"original": [" needs a job(A) and not  needs a job(B), so More(motivated(A), motivated(B))", ["A needs a job while B does not, so A is more motivated than B"]], "negated": [" needs a job(A) and not  needs a job(B), so not Less(motivated(A), motivated(B))", ["A needs a job while B does not, so A is not less motivated than B"]], "asymmetric_premise": [" needs a job(B) and not  needs a job(A), so Less(motivated(A), motivated(B))", ["B needs a job while A does not, so A is less motivated than B"]], "asymmetric_conclusion": [" needs a job(A) and not  needs a job(B), so Less(motivated(B), motivated(A))", ["A needs a job while B does not, so B is less motivated than A"]], "negated_asymmetric_premise": [" needs a job(B) and not  needs a job(A), so not More(motivated(A), motivated(B))", ["B needs a job while A does not, so A is not more motivated than B"]], "negated_asymmetric_conclusion": [" needs a job(A) and not  needs a job(B), so not More(motivated(B), motivated(A))", ["A needs a job while B does not, so B is not more motivated than A"]]}
{"original": [" increases their ability(A) and not  increases their ability(B), so More(determined(A), determined(B))", ["A increases their ability while B does not, so A is more determined than B"]], "negated": [" increases their ability(A) and not  increases their ability(B), so not Less(determined(A), determined(B))", ["A increases their ability while B does not, so A is not less determined than B"]], "asymmetric_premise": [" increases their ability(B) and not  increases their ability(A), so Less(determined(A), determined(B))", ["B increases their ability while A does not, so A is less determined than B"]], "asymmetric_conclusion": [" increases their ability(A) and not  increases their ability(B), so Less(determined(B), determined(A))", ["A increases their ability while B does not, so B is less determined than A"]], "negated_asymmetric_premise": [" increases their ability(B) and not  increases their ability(A), so not More(determined(A), determined(B))", ["B increases their ability while A does not, so A is not more determined than B"]], "negated_asymmetric_conclusion": [" increases their ability(A) and not  increases their ability(B), so not More(determined(B), determined(A))", ["A increases their ability while B does not, so B is not more determined than A"]]}
{"original": [" slams on the brakes(A) and not  slams on the brakes(B), so More(angry(A), angry(B))", ["A slams on the brakes while B does not, so A is more angry than B"]], "negated": [" slams on the brakes(A) and not  slams on the brakes(B), so not Less(angry(A), angry(B))", ["A slams on the brakes while B does not, so A is not less angry than B"]], "asymmetric_premise": [" slams on the brakes(B) and not  slams on the brakes(A), so Less(angry(A), angry(B))", ["B slams on the brakes while A does not, so A is less angry than B"]], "asymmetric_conclusion": [" slams on the brakes(A) and not  slams on the brakes(B), so Less(angry(B), angry(A))", ["A slams on the brakes while B does not, so B is less angry than A"]], "negated_asymmetric_premise": [" slams on the brakes(B) and not  slams on the brakes(A), so not More(angry(A), angry(B))", ["B slams on the brakes while A does not, so A is not more angry than B"]], "negated_asymmetric_conclusion": [" slams on the brakes(A) and not  slams on the brakes(B), so not More(angry(B), angry(A))", ["A slams on the brakes while B does not, so B is not more angry than A"]]}
{"original": [" spills soda(A) and not  spills soda(B), so More(foolish(A), foolish(B))", ["A spills soda while B does not, so A is more foolish than B"]], "negated": [" spills soda(A) and not  spills soda(B), so not Less(foolish(A), foolish(B))", ["A spills soda while B does not, so A is not less foolish than B"]], "asymmetric_premise": [" spills soda(B) and not  spills soda(A), so Less(foolish(A), foolish(B))", ["B spills soda while A does not, so A is less foolish than B"]], "asymmetric_conclusion": [" spills soda(A) and not  spills soda(B), so Less(foolish(B), foolish(A))", ["A spills soda while B does not, so B is less foolish than A"]], "negated_asymmetric_premise": [" spills soda(B) and not  spills soda(A), so not More(foolish(A), foolish(B))", ["B spills soda while A does not, so A is not more foolish than B"]], "negated_asymmetric_conclusion": [" spills soda(A) and not  spills soda(B), so not More(foolish(B), foolish(A))", ["A spills soda while B does not, so B is not more foolish than A"]]}
{"original": [" goes another person's ways(A) and not  goes another person's ways(B), so More(adherent(A), adherent(B))", ["A goes another person's ways while B does not, so A is more adherent than B"]], "negated": [" goes another person's ways(A) and not  goes another person's ways(B), so not Less(adherent(A), adherent(B))", ["A goes another person's ways while B does not, so A is not less adherent than B"]], "asymmetric_premise": [" goes another person's ways(B) and not  goes another person's ways(A), so Less(adherent(A), adherent(B))", ["B goes another person's ways while A does not, so A is less adherent than B"]], "asymmetric_conclusion": [" goes another person's ways(A) and not  goes another person's ways(B), so Less(adherent(B), adherent(A))", ["A goes another person's ways while B does not, so B is less adherent than A"]], "negated_asymmetric_premise": [" goes another person's ways(B) and not  goes another person's ways(A), so not More(adherent(A), adherent(B))", ["B goes another person's ways while A does not, so A is not more adherent than B"]], "negated_asymmetric_conclusion": [" goes another person's ways(A) and not  goes another person's ways(B), so not More(adherent(B), adherent(A))", ["A goes another person's ways while B does not, so B is not more adherent than A"]]}
{"original": [" breaks the camel 's back(A) and not  breaks the camel 's back(B), so More(demanding(A), demanding(B))", ["A breaks the camel 's back while B does not, so A is more demanding than B"]], "negated": [" breaks the camel 's back(A) and not  breaks the camel 's back(B), so not Less(demanding(A), demanding(B))", ["A breaks the camel 's back while B does not, so A is not less demanding than B"]], "asymmetric_premise": [" breaks the camel 's back(B) and not  breaks the camel 's back(A), so Less(demanding(A), demanding(B))", ["B breaks the camel 's back while A does not, so A is less demanding than B"]], "asymmetric_conclusion": [" breaks the camel 's back(A) and not  breaks the camel 's back(B), so Less(demanding(B), demanding(A))", ["A breaks the camel 's back while B does not, so B is less demanding than A"]], "negated_asymmetric_premise": [" breaks the camel 's back(B) and not  breaks the camel 's back(A), so not More(demanding(A), demanding(B))", ["B breaks the camel 's back while A does not, so A is not more demanding than B"]], "negated_asymmetric_conclusion": [" breaks the camel 's back(A) and not  breaks the camel 's back(B), so not More(demanding(B), demanding(A))", ["A breaks the camel 's back while B does not, so B is not more demanding than A"]]}
{"original": [" asks the clerk(A) and not  asks the clerk(B), so More(confused(A), confused(B))", ["A asks the clerk while B does not, so A is more confused than B"]], "negated": [" asks the clerk(A) and not  asks the clerk(B), so not Less(confused(A), confused(B))", ["A asks the clerk while B does not, so A is not less confused than B"]], "asymmetric_premise": [" asks the clerk(B) and not  asks the clerk(A), so Less(confused(A), confused(B))", ["B asks the clerk while A does not, so A is less confused than B"]], "asymmetric_conclusion": [" asks the clerk(A) and not  asks the clerk(B), so Less(confused(B), confused(A))", ["A asks the clerk while B does not, so B is less confused than A"]], "negated_asymmetric_premise": [" asks the clerk(B) and not  asks the clerk(A), so not More(confused(A), confused(B))", ["B asks the clerk while A does not, so A is not more confused than B"]], "negated_asymmetric_conclusion": [" asks the clerk(A) and not  asks the clerk(B), so not More(confused(B), confused(A))", ["A asks the clerk while B does not, so B is not more confused than A"]]}
{"original": [" makes decisions for another person(A) and not  makes decisions for another person(B), so More(decisive(A), decisive(B))", ["A makes decisions for another person while B does not, so A is more decisive than B"]], "negated": [" makes decisions for another person(A) and not  makes decisions for another person(B), so not Less(decisive(A), decisive(B))", ["A makes decisions for another person while B does not, so A is not less decisive than B"]], "asymmetric_premise": [" makes decisions for another person(B) and not  makes decisions for another person(A), so Less(decisive(A), decisive(B))", ["B makes decisions for another person while A does not, so A is less decisive than B"]], "asymmetric_conclusion": [" makes decisions for another person(A) and not  makes decisions for another person(B), so Less(decisive(B), decisive(A))", ["A makes decisions for another person while B does not, so B is less decisive than A"]], "negated_asymmetric_premise": [" makes decisions for another person(B) and not  makes decisions for another person(A), so not More(decisive(A), decisive(B))", ["B makes decisions for another person while A does not, so A is not more decisive than B"]], "negated_asymmetric_conclusion": [" makes decisions for another person(A) and not  makes decisions for another person(B), so not More(decisive(B), decisive(A))", ["A makes decisions for another person while B does not, so B is not more decisive than A"]]}
{"original": [" takes another person to the circus(A) and not  takes another person to the circus(B), so More(ready(A), ready(B))", ["A takes another person to the circus while B does not, so A is more ready than B"]], "negated": [" takes another person to the circus(A) and not  takes another person to the circus(B), so not Less(ready(A), ready(B))", ["A takes another person to the circus while B does not, so A is not less ready than B"]], "asymmetric_premise": [" takes another person to the circus(B) and not  takes another person to the circus(A), so Less(ready(A), ready(B))", ["B takes another person to the circus while A does not, so A is less ready than B"]], "asymmetric_conclusion": [" takes another person to the circus(A) and not  takes another person to the circus(B), so Less(ready(B), ready(A))", ["A takes another person to the circus while B does not, so B is less ready than A"]], "negated_asymmetric_premise": [" takes another person to the circus(B) and not  takes another person to the circus(A), so not More(ready(A), ready(B))", ["B takes another person to the circus while A does not, so A is not more ready than B"]], "negated_asymmetric_conclusion": [" takes another person to the circus(A) and not  takes another person to the circus(B), so not More(ready(B), ready(A))", ["A takes another person to the circus while B does not, so B is not more ready than A"]]}
{"original": [" steals another person away(A) and not  steals another person away(B), so More(scary(A), scary(B))", ["A steals another person away while B does not, so A is more scary than B"]], "negated": [" steals another person away(A) and not  steals another person away(B), so not Less(scary(A), scary(B))", ["A steals another person away while B does not, so A is not less scary than B"]], "asymmetric_premise": [" steals another person away(B) and not  steals another person away(A), so Less(scary(A), scary(B))", ["B steals another person away while A does not, so A is less scary than B"]], "asymmetric_conclusion": [" steals another person away(A) and not  steals another person away(B), so Less(scary(B), scary(A))", ["A steals another person away while B does not, so B is less scary than A"]], "negated_asymmetric_premise": [" steals another person away(B) and not  steals another person away(A), so not More(scary(A), scary(B))", ["B steals another person away while A does not, so A is not more scary than B"]], "negated_asymmetric_conclusion": [" steals another person away(A) and not  steals another person away(B), so not More(scary(B), scary(A))", ["A steals another person away while B does not, so B is not more scary than A"]]}
{"original": [" becomes a father(A) and not  becomes a father(B), so More(successful(A), successful(B))", ["A becomes a father while B does not, so A is more successful than B"]], "negated": [" becomes a father(A) and not  becomes a father(B), so not Less(successful(A), successful(B))", ["A becomes a father while B does not, so A is not less successful than B"]], "asymmetric_premise": [" becomes a father(B) and not  becomes a father(A), so Less(successful(A), successful(B))", ["B becomes a father while A does not, so A is less successful than B"]], "asymmetric_conclusion": [" becomes a father(A) and not  becomes a father(B), so Less(successful(B), successful(A))", ["A becomes a father while B does not, so B is less successful than A"]], "negated_asymmetric_premise": [" becomes a father(B) and not  becomes a father(A), so not More(successful(A), successful(B))", ["B becomes a father while A does not, so A is not more successful than B"]], "negated_asymmetric_conclusion": [" becomes a father(A) and not  becomes a father(B), so not More(successful(B), successful(A))", ["A becomes a father while B does not, so B is not more successful than A"]]}
{"original": [" plays the lottery(A) and not  plays the lottery(B), so More(irresponsible(A), irresponsible(B))", ["A plays the lottery while B does not, so A is more irresponsible than B"]], "negated": [" plays the lottery(A) and not  plays the lottery(B), so not Less(irresponsible(A), irresponsible(B))", ["A plays the lottery while B does not, so A is not less irresponsible than B"]], "asymmetric_premise": [" plays the lottery(B) and not  plays the lottery(A), so Less(irresponsible(A), irresponsible(B))", ["B plays the lottery while A does not, so A is less irresponsible than B"]], "asymmetric_conclusion": [" plays the lottery(A) and not  plays the lottery(B), so Less(irresponsible(B), irresponsible(A))", ["A plays the lottery while B does not, so B is less irresponsible than A"]], "negated_asymmetric_premise": [" plays the lottery(B) and not  plays the lottery(A), so not More(irresponsible(A), irresponsible(B))", ["B plays the lottery while A does not, so A is not more irresponsible than B"]], "negated_asymmetric_conclusion": [" plays the lottery(A) and not  plays the lottery(B), so not More(irresponsible(B), irresponsible(A))", ["A plays the lottery while B does not, so B is not more irresponsible than A"]]}
{"original": [" finds an apartment(A) and not  finds an apartment(B), so More(traveler(A), traveler(B))", ["A finds an apartment while B does not, so A is more likely to be in an apartment than B"]], "negated": [" finds an apartment(A) and not  finds an apartment(B), so not Less(traveler(A), traveler(B))", ["A finds an apartment while B does not, so A is not less traveler than B"]], "asymmetric_premise": [" finds an apartment(B) and not  finds an apartment(A), so Less(traveler(A), traveler(B))", ["B finds an apartment while A does not, so A is a less traveler than B"]], "asymmetric_conclusion": [" finds an apartment(A) and not  finds an apartment(B), so Less(traveler(B), traveler(A))", ["A finds an apartment while B does not, so B is a less traveler than A"]], "negated_asymmetric_premise": [" finds an apartment(B) and not  finds an apartment(A), so not More(traveler(A), traveler(B))", ["B finds an apartment while A does not, so A is not more traveler than B"]], "negated_asymmetric_conclusion": [" finds an apartment(A) and not  finds an apartment(B), so not More(traveler(B), traveler(A))", ["A finds an apartment while B does not, so B is not more traveler than A"]]}
{"original": [" brings another person something(A) and not  brings another person something(B), so More(kind(A), kind(B))", ["A brings another person something while B does not, so A is more kind than B"]], "negated": [" brings another person something(A) and not  brings another person something(B), so not Less(kind(A), kind(B))", ["A brings another person something while B does not, so A is not less kind than B"]], "asymmetric_premise": [" brings another person something(B) and not  brings another person something(A), so Less(kind(A), kind(B))", ["B brings another person something while A does not, so A is less kind than B"]], "asymmetric_conclusion": [" brings another person something(A) and not  brings another person something(B), so Less(kind(B), kind(A))", ["A brings another person something while B does not, so B is less kind than A"]], "negated_asymmetric_premise": [" brings another person something(B) and not  brings another person something(A), so not More(kind(A), kind(B))", ["B brings another person something while A does not, so A is not more kind than B"]], "negated_asymmetric_conclusion": [" brings another person something(A) and not  brings another person something(B), so not More(kind(B), kind(A))", ["A brings another person something while B does not, so B is not more kind than A"]]}
{"original": [" bats another person eye(A) and not  bats another person eye(B), so More(curious(A), curious(B))", ["A bats another person eye while B does not, so A is more curious than B"]], "negated": [" bats another person eye(A) and not  bats another person eye(B), so not Less(curious(A), curious(B))", ["A bats another person eye while B does not, so A is not less curious than B"]], "asymmetric_premise": [" bats another person eye(B) and not  bats another person eye(A), so Less(curious(A), curious(B))", ["B bats another person eye while A does not, so A is less curious than B"]], "asymmetric_conclusion": [" bats another person eye(A) and not  bats another person eye(B), so Less(curious(B), curious(A))", ["A bats another person eye while B does not, so B is less curious than A"]], "negated_asymmetric_premise": [" bats another person eye(B) and not  bats another person eye(A), so not More(curious(A), curious(B))", ["B bats another person eye while A does not, so A is not more curious than B"]], "negated_asymmetric_conclusion": [" bats another person eye(A) and not  bats another person eye(B), so not More(curious(B), curious(A))", ["A bats another person eye while B does not, so B is not more curious than A"]]}
{"original": [" drives another person up the wall(A) and not  drives another person up the wall(B), so More(crazy(A), crazy(B))", ["A drives another person up the wall while B does not, so A is more crazy than B"]], "negated": [" drives another person up the wall(A) and not  drives another person up the wall(B), so not Less(crazy(A), crazy(B))", ["A drives another person up the wall more than B, so A is not less crazy than B"]], "asymmetric_premise": [" drives another person up the wall(B) and not  drives another person up the wall(A), so Less(crazy(A), crazy(B))", ["B drives another person up the wall while A does not, so A is less crazy than B"]], "asymmetric_conclusion": [" drives another person up the wall(A) and not  drives another person up the wall(B), so Less(crazy(B), crazy(A))", ["A drives another person up the wall while B does not, so B is less crazy than A"]], "negated_asymmetric_premise": [" drives another person up the wall(B) and not  drives another person up the wall(A), so not More(crazy(A), crazy(B))", ["B drives another person up the wall more than A, so A is not more crazy than B"]], "negated_asymmetric_conclusion": [" drives another person up the wall(A) and not  drives another person up the wall(B), so not More(crazy(B), crazy(A))", ["A drives another person up the wall more than B, so B is not more crazy than A"]]}
{"original": [" helps another person get up(A) and not  helps another person get up(B), so More(helpful(A), helpful(B))", ["A helps another person get up while B does not, so A is more helpful than B"]], "negated": [" helps another person get up(A) and not  helps another person get up(B), so not Less(helpful(A), helpful(B))", ["A helps another person get up while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" helps another person get up(B) and not  helps another person get up(A), so Less(helpful(A), helpful(B))", ["B helps another person get up while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" helps another person get up(A) and not  helps another person get up(B), so Less(helpful(B), helpful(A))", ["A helps another person get up while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" helps another person get up(B) and not  helps another person get up(A), so not More(helpful(A), helpful(B))", ["B helps another person get up while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" helps another person get up(A) and not  helps another person get up(B), so not More(helpful(B), helpful(A))", ["A helps another person get up while B does not, so B is not more helpful than A"]]}
{"original": [" races their friend(A) and not  races their friend(B), so More(adventurous(A), adventurous(B))", ["A races their friend while B does not, so A is more adventurous than B"]], "negated": [" races their friend(A) and not  races their friend(B), so not Less(adventurous(A), adventurous(B))", ["A races their friend while B does not, so A is not less adventurous than B"]], "asymmetric_premise": [" races their friend(B) and not  races their friend(A), so Less(adventurous(A), adventurous(B))", ["B races their friend while A does not, so A is less adventurous than B"]], "asymmetric_conclusion": [" races their friend(A) and not  races their friend(B), so Less(adventurous(B), adventurous(A))", ["A races their friend while B does not, so B is less adventurous than A"]], "negated_asymmetric_premise": [" races their friend(B) and not  races their friend(A), so not More(adventurous(A), adventurous(B))", ["B races their friend while A does not, so A is not more adventurous than B"]], "negated_asymmetric_conclusion": [" races their friend(A) and not  races their friend(B), so not More(adventurous(B), adventurous(A))", ["A races their friend while B does not, so B is not more adventurous than A"]]}
{"original": [" publishes another person account(A) and not  publishes another person account(B), so More(brave(A), brave(B))", ["A publishes another person account while B does not, so A is more brave than B"]], "negated": [" publishes another person account(A) and not  publishes another person account(B), so not Less(brave(A), brave(B))", ["A publishes another person account while B does not, so A is not less brave than B"]], "asymmetric_premise": [" publishes another person account(B) and not  publishes another person account(A), so Less(brave(A), brave(B))", ["B publishes another person account while A does not, so A is less brave than B"]], "asymmetric_conclusion": [" publishes another person account(A) and not  publishes another person account(B), so Less(brave(B), brave(A))", ["A publishes another person account while B does not, so B is less brave than A"]], "negated_asymmetric_premise": [" publishes another person account(B) and not  publishes another person account(A), so not More(brave(A), brave(B))", ["B publishes another person account while A does not, so A is not more brave than B"]], "negated_asymmetric_conclusion": [" publishes another person account(A) and not  publishes another person account(B), so not More(brave(B), brave(A))", ["A publishes another person account while B does not, so B is not more brave than A"]]}
{"original": [" says uncle(A) and not  says uncle(B), so More(tired(A), tired(B))", ["A says uncle is tired while B is not, so A is more tired than B"]], "negated": [" says uncle(A) and not  says uncle(B), so not Less(tired(A), tired(B))", ["A says uncle is tired while B is not, so A is not less tired than B"]], "asymmetric_premise": [" says uncle(B) and not  says uncle(A), so Less(tired(A), tired(B))", ["B says uncle is tired while A is not, so A is less tired than B"]], "asymmetric_conclusion": [" says uncle(A) and not  says uncle(B), so Less(tired(B), tired(A))", ["A says uncle is tired while B is not, so B is less tired than A"]], "negated_asymmetric_premise": [" says uncle(B) and not  says uncle(A), so not More(tired(A), tired(B))", ["B says uncle is not more tired than A, so A is not more tired than B"]], "negated_asymmetric_conclusion": [" says uncle(A) and not  says uncle(B), so not More(tired(B), tired(A))", ["A says uncle is tired while B is not, so B is not more tired than A"]]}
{"original": [" feels very lonely(A) and not  feels very lonely(B), so More(solitary(A), solitary(B))", ["A feels very lonely while B does not, so A is more solitary than B"]], "negated": [" feels very lonely(A) and not  feels very lonely(B), so not Less(solitary(A), solitary(B))", ["A feels very lonely while B does not, so A is not less solitary than B"]], "asymmetric_premise": [" feels very lonely(B) and not  feels very lonely(A), so Less(solitary(A), solitary(B))", ["B feels very lonely while A does not, so A is less solitary than B"]], "asymmetric_conclusion": [" feels very lonely(A) and not  feels very lonely(B), so Less(solitary(B), solitary(A))", ["A feels very lonely while B does not, so B is less solitary than A"]], "negated_asymmetric_premise": [" feels very lonely(B) and not  feels very lonely(A), so not More(solitary(A), solitary(B))", ["B feels very lonely while A does not, so A is not more solitary than B"]], "negated_asymmetric_conclusion": [" feels very lonely(A) and not  feels very lonely(B), so not More(solitary(B), solitary(A))", ["A feels very lonely while B does not, so B is not more solitary than A"]]}
{"original": [" buys their first house(A) and not  buys their first house(B), so More(thoughtful(A), thoughtful(B))", ["A buys their first house while B does not, so A is more thoughtful than B"]], "negated": [" buys their first house(A) and not  buys their first house(B), so not Less(thoughtful(A), thoughtful(B))", ["A buys their first house while B does not, so A is not less thoughtful than B"]], "asymmetric_premise": [" buys their first house(B) and not  buys their first house(A), so Less(thoughtful(A), thoughtful(B))", ["B buys their first house while A does not, so A is less thoughtful than B"]], "asymmetric_conclusion": [" buys their first house(A) and not  buys their first house(B), so Less(thoughtful(B), thoughtful(A))", ["A buys their first house while B does not, so B is less thoughtful than A"]], "negated_asymmetric_premise": [" buys their first house(B) and not  buys their first house(A), so not More(thoughtful(A), thoughtful(B))", ["B buys their first house while A does not, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": [" buys their first house(A) and not  buys their first house(B), so not More(thoughtful(B), thoughtful(A))", ["A buys their first house while B does not, so B is not more thoughtful than A"]]}
{"original": [" comes with the territory(A) and not  comes with the territory(B), so More(included(A), included(B))", ["A comes with the territory while B does not, so A is more included than B"]], "negated": [" comes with the territory(A) and not  comes with the territory(B), so not Less(included(A), included(B))", ["A comes with the territory while B does not, so A is not less included than B"]], "asymmetric_premise": [" comes with the territory(B) and not  comes with the territory(A), so Less(included(A), included(B))", ["B comes with the territory while A does not, so A is less included than B"]], "asymmetric_conclusion": [" comes with the territory(A) and not  comes with the territory(B), so Less(included(B), included(A))", ["A comes with the territory while B does not, so B is less included than A"]], "negated_asymmetric_premise": [" comes with the territory(B) and not  comes with the territory(A), so not More(included(A), included(B))", ["B comes with the territory while A does not, so A is not more included than B"]], "negated_asymmetric_conclusion": [" comes with the territory(A) and not  comes with the territory(B), so not More(included(B), included(A))", ["A comes with the territory while B does not, so B is not more included than A"]]}
{"original": [" takes the leash(A) and not  takes the leash(B), so More(dutiful(A), dutiful(B))", ["A takes the leash while B does not, so A is more dutiful than B"]], "negated": [" takes the leash(A) and not  takes the leash(B), so not Less(dutiful(A), dutiful(B))", ["A takes the leash while B does not, so A is not less dutiful than B"]], "asymmetric_premise": [" takes the leash(B) and not  takes the leash(A), so Less(dutiful(A), dutiful(B))", ["B takes the leash while A does not, so A is less dutiful than B"]], "asymmetric_conclusion": [" takes the leash(A) and not  takes the leash(B), so Less(dutiful(B), dutiful(A))", ["A takes the leash while B does not, so B is less dutiful than A"]], "negated_asymmetric_premise": [" takes the leash(B) and not  takes the leash(A), so not More(dutiful(A), dutiful(B))", ["B takes the leash while A does not, so A is not more dutiful than B"]], "negated_asymmetric_conclusion": [" takes the leash(A) and not  takes the leash(B), so not More(dutiful(B), dutiful(A))", ["A takes the leash while B does not, so B is not more dutiful than A"]]}
{"original": [" wants to stay(A) and not  wants to stay(B), so More(committed(A), committed(B))", ["A wants to stay while B does not, so A is more committed than B"]], "negated": [" wants to stay(A) and not  wants to stay(B), so not Less(committed(A), committed(B))", ["A wants to stay while B does not, so A is not less committed than B"]], "asymmetric_premise": [" wants to stay(B) and not  wants to stay(A), so Less(committed(A), committed(B))", ["B wants to stay while A does not, so A is less committed than B"]], "asymmetric_conclusion": [" wants to stay(A) and not  wants to stay(B), so Less(committed(B), committed(A))", ["A wants to stay while B does not, so B is less committed than A"]], "negated_asymmetric_premise": [" wants to stay(B) and not  wants to stay(A), so not More(committed(A), committed(B))", ["B wants to stay while A does not, so A is not more committed than B"]], "negated_asymmetric_conclusion": [" wants to stay(A) and not  wants to stay(B), so not More(committed(B), committed(A))", ["A wants to stay while B does not, so B is not more committed than A"]]}
{"original": [" breaks another person's arm(A) and not  breaks another person's arm(B), so More(violent(A), violent(B))", ["A breaks another person's arm while B does not, so A is more violent than B"]], "negated": [" breaks another person's arm(A) and not  breaks another person's arm(B), so not Less(violent(A), violent(B))", ["A breaks another person's arm while B does not, so A is not less violent than B"]], "asymmetric_premise": [" breaks another person's arm(B) and not  breaks another person's arm(A), so Less(violent(A), violent(B))", ["B breaks another person's arm while A does not, so A is less violent than B"]], "asymmetric_conclusion": [" breaks another person's arm(A) and not  breaks another person's arm(B), so Less(violent(B), violent(A))", ["A breaks another person's arm while B does not, so B is less violent than A"]], "negated_asymmetric_premise": [" breaks another person's arm(B) and not  breaks another person's arm(A), so not More(violent(A), violent(B))", ["B breaks another person's arm while A does not, so A is not more violent than B"]], "negated_asymmetric_conclusion": [" breaks another person's arm(A) and not  breaks another person's arm(B), so not More(violent(B), violent(A))", ["A breaks another person's arm while B does not, so B is not more violent than A"]]}
{"original": [" gets so angry(A) and not  gets so angry(B), so More(moody(A), moody(B))", ["A gets so angry while B does not, so A is more moody than B"]], "negated": [" gets so angry(A) and not  gets so angry(B), so not Less(moody(A), moody(B))", ["A gets so angry while B does not, so A is not less moody than B"]], "asymmetric_premise": [" gets so angry(B) and not  gets so angry(A), so Less(moody(A), moody(B))", ["B gets so angry while A does not, so A is less moody than B"]], "asymmetric_conclusion": [" gets so angry(A) and not  gets so angry(B), so Less(moody(B), moody(A))", ["A gets so angry while B does not, so B is less moody than A"]], "negated_asymmetric_premise": [" gets so angry(B) and not  gets so angry(A), so not More(moody(A), moody(B))", ["B gets so angry while A does not, so A is not more moody than B"]], "negated_asymmetric_conclusion": [" gets so angry(A) and not  gets so angry(B), so not More(moody(B), moody(A))", ["A gets so angry while B does not, so B is not more moody than A"]]}
{"original": [" schedules an interview(A) and not  schedules an interview(B), so More(ambitious(A), ambitious(B))", ["A schedules an interview while B does not, so A is more ambitious than B"]], "negated": [" schedules an interview(A) and not  schedules an interview(B), so not Less(ambitious(A), ambitious(B))", ["A schedules an interview while B does not, so A is not less ambitious than B"]], "asymmetric_premise": [" schedules an interview(B) and not  schedules an interview(A), so Less(ambitious(A), ambitious(B))", ["B schedules an interview while A does not, so A is less ambitious than B"]], "asymmetric_conclusion": [" schedules an interview(A) and not  schedules an interview(B), so Less(ambitious(B), ambitious(A))", ["A schedules an interview while B does not, so B is less ambitious than A"]], "negated_asymmetric_premise": [" schedules an interview(B) and not  schedules an interview(A), so not More(ambitious(A), ambitious(B))", ["B schedules an interview while A does not, so A is not more ambitious than B"]], "negated_asymmetric_conclusion": [" schedules an interview(A) and not  schedules an interview(B), so not More(ambitious(B), ambitious(A))", ["A schedules an interview while B does not, so B is not more ambitious than A"]]}
{"original": [" forms another person whole(A) and not  forms another person whole(B), so More(completing(A), completing(B))", ["A forms another person whole while B does not, so A is more likely to be completing than B"]], "negated": [" forms another person whole(A) and not  forms another person whole(B), so not Less(completing(A), completing(B))", ["A forms another person whole while B does not, so A is not less capable of completing than B"]], "asymmetric_premise": [" forms another person whole(B) and not  forms another person whole(A), so Less(completing(A), completing(B))", ["B forms another person whole while A does not, so A is less capable of completing than B"]], "asymmetric_conclusion": [" forms another person whole(A) and not  forms another person whole(B), so Less(completing(B), completing(A))", ["A forms another person whole while B does not, so B is less capable of completing than A"]], "negated_asymmetric_premise": [" forms another person whole(B) and not  forms another person whole(A), so not More(completing(A), completing(B))", ["B forms another person whole while A does not, so A is not more capable of completing than B"]], "negated_asymmetric_conclusion": [" forms another person whole(A) and not  forms another person whole(B), so not More(completing(B), completing(A))", ["A forms another person whole while B does not, so B is not more capable of completing than A"]]}
{"original": [" wants to go to the park(A) and not  wants to go to the park(B), so More(motivated(A), motivated(B))", ["A wants to go to the park while B does not, so A is more motivated than B"]], "negated": [" wants to go to the park(A) and not  wants to go to the park(B), so not Less(motivated(A), motivated(B))", ["A wants to go to the park while B does not, so A is not less motivated than B"]], "asymmetric_premise": [" wants to go to the park(B) and not  wants to go to the park(A), so Less(motivated(A), motivated(B))", ["B wants to go to the park while A does not, so A is less motivated than B"]], "asymmetric_conclusion": [" wants to go to the park(A) and not  wants to go to the park(B), so Less(motivated(B), motivated(A))", ["A wants to go to the park while B does not, so B is less motivated than A"]], "negated_asymmetric_premise": [" wants to go to the park(B) and not  wants to go to the park(A), so not More(motivated(A), motivated(B))", ["B wants to go to the park while A does not, so A is not more motivated than B"]], "negated_asymmetric_conclusion": [" wants to go to the park(A) and not  wants to go to the park(B), so not More(motivated(B), motivated(A))", ["A wants to go to the park while B does not, so B is not more motivated than A"]]}
{"original": [" seems like another person(A) and not  seems like another person(B), so More(similar(A), similar(B))", ["A seems like another person while B does not, so A is more similar than B"]], "negated": [" seems like another person(A) and not  seems like another person(B), so not Less(similar(A), similar(B))", ["A seems like another person while B does not, so A is not less similar than B"]], "asymmetric_premise": [" seems like another person(B) and not  seems like another person(A), so Less(similar(A), similar(B))", ["B seems like another person while A does not, so A is less similar than B"]], "asymmetric_conclusion": [" seems like another person(A) and not  seems like another person(B), so Less(similar(B), similar(A))", ["A seems like another person while B does not, so B is less similar than A"]], "negated_asymmetric_premise": [" seems like another person(B) and not  seems like another person(A), so not More(similar(A), similar(B))", ["B seems like another person while A does not, so A is not more similar than B"]], "negated_asymmetric_conclusion": [" seems like another person(A) and not  seems like another person(B), so not More(similar(B), similar(A))", ["A seems like another person while B does not, so B is not more similar than A"]]}
{"original": [" maintains another person level(A) and not  maintains another person level(B), so More(competitive(A), competitive(B))", ["A maintains another person level while B does not, so A is more competitive than B"]], "negated": [" maintains another person level(A) and not  maintains another person level(B), so not Less(competitive(A), competitive(B))", ["A maintains another person level while B does not, so A is not less competitive than B"]], "asymmetric_premise": [" maintains another person level(B) and not  maintains another person level(A), so Less(competitive(A), competitive(B))", ["B maintains another person level while A does not, so A is less competitive than B"]], "asymmetric_conclusion": [" maintains another person level(A) and not  maintains another person level(B), so Less(competitive(B), competitive(A))", ["A maintains another person level while B does not, so B is less competitive than A"]], "negated_asymmetric_premise": [" maintains another person level(B) and not  maintains another person level(A), so not More(competitive(A), competitive(B))", ["B maintains another person level while A does not, so A is not more competitive than B"]], "negated_asymmetric_conclusion": [" maintains another person level(A) and not  maintains another person level(B), so not More(competitive(B), competitive(A))", ["A maintains another person level while B does not, so B is not more competitive than A"]]}
{"original": [" walks along(A) and not  walks along(B), so More(contemplative(A), contemplative(B))", ["A walks along while B does not, so A is more contemplative than B"]], "negated": [" walks along(A) and not  walks along(B), so not Less(contemplative(A), contemplative(B))", ["A walks along while B does not, so A is not less contemplative than B"]], "asymmetric_premise": [" walks along(B) and not  walks along(A), so Less(contemplative(A), contemplative(B))", ["B walks along while A does not, so A is less contemplative than B"]], "asymmetric_conclusion": [" walks along(A) and not  walks along(B), so Less(contemplative(B), contemplative(A))", ["A walks along while B does not, so B is less contemplative than A"]], "negated_asymmetric_premise": [" walks along(B) and not  walks along(A), so not More(contemplative(A), contemplative(B))", ["B walks along while A does not, so A is not more contemplative than B"]], "negated_asymmetric_conclusion": [" walks along(A) and not  walks along(B), so not More(contemplative(B), contemplative(A))", ["A walks along while B does not, so B is not more contemplative than A"]]}
{"original": [" does their utmost(A) and not  does their utmost(B), so More(goal-oriented(A), goal-oriented(B))", ["A does their utmost while B does not, so A is more goal-oriented than B"]], "negated": [" does their utmost(A) and not  does their utmost(B), so not Less(goal-oriented(A), goal-oriented(B))", ["A does their utmost while B does not, so A is not less goal-oriented than B"]], "asymmetric_premise": [" does their utmost(B) and not  does their utmost(A), so Less(goal-oriented(A), goal-oriented(B))", ["B does their utmost while A does not, so A is less goal-oriented than B"]], "asymmetric_conclusion": [" does their utmost(A) and not  does their utmost(B), so Less(goal-oriented(B), goal-oriented(A))", ["A does their utmost while B does not, so B is less goal-oriented than A"]], "negated_asymmetric_premise": [" does their utmost(B) and not  does their utmost(A), so not More(goal-oriented(A), goal-oriented(B))", ["B does their utmost while A does not, so A is not more goal-oriented than B"]], "negated_asymmetric_conclusion": [" does their utmost(A) and not  does their utmost(B), so not More(goal-oriented(B), goal-oriented(A))", ["A does their utmost while B does not, so B is not more goal-oriented than A"]]}
{"original": [" goes home for the day(A) and not  goes home for the day(B), so More(tired(A), tired(B))", ["A goes home for the day while B does not, so A is more tired than B"]], "negated": [" goes home for the day(A) and not  goes home for the day(B), so not Less(tired(A), tired(B))", ["A goes home for the day while B does not, so A is not less tired than B"]], "asymmetric_premise": [" goes home for the day(B) and not  goes home for the day(A), so Less(tired(A), tired(B))", ["B goes home for the day while A does not, so A is less tired than B"]], "asymmetric_conclusion": [" goes home for the day(A) and not  goes home for the day(B), so Less(tired(B), tired(A))", ["A goes home for the day while B does not, so B is less tired than A"]], "negated_asymmetric_premise": [" goes home for the day(B) and not  goes home for the day(A), so not More(tired(A), tired(B))", ["B goes home for the day while A does not, so A is not more tired than B"]], "negated_asymmetric_conclusion": [" goes home for the day(A) and not  goes home for the day(B), so not More(tired(B), tired(A))", ["A goes home for the day while B does not, so B is not more tired than A"]]}
{"original": [" faces an uneasy future(A) and not  faces an uneasy future(B), so More(ambiguous(A), ambiguous(B))", ["A faces an uneasy future while B does not, so A is more ambiguous than B"]], "negated": [" faces an uneasy future(A) and not  faces an uneasy future(B), so not Less(ambiguous(A), ambiguous(B))", ["A faces an uneasy future while B does not, so A is not less ambiguous than B"]], "asymmetric_premise": [" faces an uneasy future(B) and not  faces an uneasy future(A), so Less(ambiguous(A), ambiguous(B))", ["B faces an uneasy future while A does not, so A is less ambiguous than B"]], "asymmetric_conclusion": [" faces an uneasy future(A) and not  faces an uneasy future(B), so Less(ambiguous(B), ambiguous(A))", ["A faces an uneasy future while B does not, so B is less ambiguous than A"]], "negated_asymmetric_premise": [" faces an uneasy future(B) and not  faces an uneasy future(A), so not More(ambiguous(A), ambiguous(B))", ["B faces an uneasy future while A does not, so A is not more ambiguous than B"]], "negated_asymmetric_conclusion": [" faces an uneasy future(A) and not  faces an uneasy future(B), so not More(ambiguous(B), ambiguous(A))", ["A faces an uneasy future while B does not, so B is not more ambiguous than A"]]}
{"original": [" eats at the restaurant(A) and not  eats at the restaurant(B), so More(lazy(A), lazy(B))", ["A eats at the restaurant while B does not, so A is more lazy than B"]], "negated": [" eats at the restaurant(A) and not  eats at the restaurant(B), so not Less(lazy(A), lazy(B))", ["A eats at the restaurant while B does not, so A is not less lazy than B"]], "asymmetric_premise": [" eats at the restaurant(B) and not  eats at the restaurant(A), so Less(lazy(A), lazy(B))", ["B eats at the restaurant while A does not, so A is less lazy than B"]], "asymmetric_conclusion": [" eats at the restaurant(A) and not  eats at the restaurant(B), so Less(lazy(B), lazy(A))", ["A eats at the restaurant while B does not, so B is less lazy than A"]], "negated_asymmetric_premise": [" eats at the restaurant(B) and not  eats at the restaurant(A), so not More(lazy(A), lazy(B))", ["B eats at the restaurant while A does not, so A is not more lazy than B"]], "negated_asymmetric_conclusion": [" eats at the restaurant(A) and not  eats at the restaurant(B), so not More(lazy(B), lazy(A))", ["A eats at the restaurant while B does not, so B is not more lazy than A"]]}
{"original": [" takes it to the shop(A) and not  takes it to the shop(B), so More(responsible(A), responsible(B))", ["A takes it to the shop while B does not, so A is more responsible than B"]], "negated": [" takes it to the shop(A) and not  takes it to the shop(B), so not Less(responsible(A), responsible(B))", ["A takes it to the shop while B does not, so A is not less responsible than B"]], "asymmetric_premise": [" takes it to the shop(B) and not  takes it to the shop(A), so Less(responsible(A), responsible(B))", ["B takes it to the shop while A does not, so A is less responsible than B"]], "asymmetric_conclusion": [" takes it to the shop(A) and not  takes it to the shop(B), so Less(responsible(B), responsible(A))", ["A takes it to the shop while B does not, so B is less responsible than A"]], "negated_asymmetric_premise": [" takes it to the shop(B) and not  takes it to the shop(A), so not More(responsible(A), responsible(B))", ["B takes it to the shop while A does not, so A is not more responsible than B"]], "negated_asymmetric_conclusion": [" takes it to the shop(A) and not  takes it to the shop(B), so not More(responsible(B), responsible(A))", ["A takes it to the shop while B does not, so B is not more responsible than A"]]}
{"original": [" pays their electric bill(A) and not  pays their electric bill(B), so More(helpful(A), helpful(B))", ["A pays their electric bill while B does not, so A is more helpful than B"]], "negated": [" pays their electric bill(A) and not  pays their electric bill(B), so not Less(helpful(A), helpful(B))", ["A pays their electric bill while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" pays their electric bill(B) and not  pays their electric bill(A), so Less(helpful(A), helpful(B))", ["B pays their electric bill while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" pays their electric bill(A) and not  pays their electric bill(B), so Less(helpful(B), helpful(A))", ["A pays their electric bill while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" pays their electric bill(B) and not  pays their electric bill(A), so not More(helpful(A), helpful(B))", ["B pays their electric bill while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" pays their electric bill(A) and not  pays their electric bill(B), so not More(helpful(B), helpful(A))", ["A pays their electric bill while B does not, so B is not more helpful than A"]]}
{"original": [" spots check(A) and not  spots check(B), so More(talented(A), talented(B))", ["A is able to spots check while B does not, so A is more talented than B"]], "negated": [" spots check(A) and not  spots check(B), so not Less(talented(A), talented(B))", ["A is able to spots check while B is not, so A is not less talented than B"]], "asymmetric_premise": [" spots check(B) and not  spots check(A), so Less(talented(A), talented(B))", ["B can be used to spots check while A cannot, so A is less talented than B"]], "asymmetric_conclusion": [" spots check(A) and not  spots check(B), so Less(talented(B), talented(A))", ["A can be used to spots check while B cannot, so B is less talented than A"]], "negated_asymmetric_premise": [" spots check(B) and not  spots check(A), so not More(talented(A), talented(B))", ["B is able to spots check while A is not, so A is not more talented than B"]], "negated_asymmetric_conclusion": [" spots check(A) and not  spots check(B), so not More(talented(B), talented(A))", ["A can be used to spots check while B cannot, so B is not more talented than A"]]}
{"original": [" grabs another person by the arm(A) and not  grabs another person by the arm(B), so More(aggressive(A), aggressive(B))", ["A grabs another person by the arm while B does not, so A is more aggressive than B"]], "negated": [" grabs another person by the arm(A) and not  grabs another person by the arm(B), so not Less(aggressive(A), aggressive(B))", ["A grabs another person by the arm while B does not, so A is not less aggressive than B"]], "asymmetric_premise": [" grabs another person by the arm(B) and not  grabs another person by the arm(A), so Less(aggressive(A), aggressive(B))", ["B grabs another person by the arm while A does not, so A is less aggressive than B"]], "asymmetric_conclusion": [" grabs another person by the arm(A) and not  grabs another person by the arm(B), so Less(aggressive(B), aggressive(A))", ["A grabs another person by the arm while B does not, so B is less aggressive than A"]], "negated_asymmetric_premise": [" grabs another person by the arm(B) and not  grabs another person by the arm(A), so not More(aggressive(A), aggressive(B))", ["B grabs another person by the arm while A does not, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": [" grabs another person by the arm(A) and not  grabs another person by the arm(B), so not More(aggressive(B), aggressive(A))", ["A grabs another person by the arm while B does not, so B is not more aggressive than A"]]}
{"original": [" would n't stop crying(A) and not  would n't stop crying(B), so More(hysterical(A), hysterical(B))", ["A would n't stop crying while B did, so A is more hysterical than B"]], "negated": [" would n't stop crying(A) and not  would n't stop crying(B), so not Less(hysterical(A), hysterical(B))", ["A would n't stop crying more than B, so A is not less hysterical than B"]], "asymmetric_premise": [" would n't stop crying(B) and not  would n't stop crying(A), so Less(hysterical(A), hysterical(B))", ["B would n't stop crying while A did, so A is less hysterical than B"]], "asymmetric_conclusion": [" would n't stop crying(A) and not  would n't stop crying(B), so Less(hysterical(B), hysterical(A))", ["A would n't stop crying while B did, so B is less hysterical than A"]], "negated_asymmetric_premise": [" would n't stop crying(B) and not  would n't stop crying(A), so not More(hysterical(A), hysterical(B))", ["B would n't stop crying more than A, so A is not more hysterical than B"]], "negated_asymmetric_conclusion": [" would n't stop crying(A) and not  would n't stop crying(B), so not More(hysterical(B), hysterical(A))", ["A would n't stop crying more than B, so B is not more hysterical than A"]]}
{"original": [" takes the phone(A) and not  takes the phone(B), so More(aggressive(A), aggressive(B))", ["A takes the phone while B does not, so A is more aggressive than B"]], "negated": [" takes the phone(A) and not  takes the phone(B), so not Less(aggressive(A), aggressive(B))", ["A takes the phone while B does not, so A is not less aggressive than B"]], "asymmetric_premise": [" takes the phone(B) and not  takes the phone(A), so Less(aggressive(A), aggressive(B))", ["B takes the phone while A does not, so A is less aggressive than B"]], "asymmetric_conclusion": [" takes the phone(A) and not  takes the phone(B), so Less(aggressive(B), aggressive(A))", ["A takes the phone while B does not, so B is less aggressive than A"]], "negated_asymmetric_premise": [" takes the phone(B) and not  takes the phone(A), so not More(aggressive(A), aggressive(B))", ["B takes the phone while A does not, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": [" takes the phone(A) and not  takes the phone(B), so not More(aggressive(B), aggressive(A))", ["A takes the phone while B does not, so B is not more aggressive than A"]]}
{"original": [" bakes cookies(A) and not  bakes cookies(B), so More(eager(A), eager(B))", ["A bakes cookies while B does not, so A is more eager than B"]], "negated": [" bakes cookies(A) and not  bakes cookies(B), so not Less(eager(A), eager(B))", ["A bakes cookies while B does not, so A is not less eager than B"]], "asymmetric_premise": [" bakes cookies(B) and not  bakes cookies(A), so Less(eager(A), eager(B))", ["B bakes cookies while A does not, so A is less eager than B"]], "asymmetric_conclusion": [" bakes cookies(A) and not  bakes cookies(B), so Less(eager(B), eager(A))", ["A bakes cookies while B does not, so B is less eager than A"]], "negated_asymmetric_premise": [" bakes cookies(B) and not  bakes cookies(A), so not More(eager(A), eager(B))", ["B bakes cookies while A does not, so A is not more eager than B"]], "negated_asymmetric_conclusion": [" bakes cookies(A) and not  bakes cookies(B), so not More(eager(B), eager(A))", ["A bakes cookies while B does not, so B is not more eager than A"]]}
{"original": [" takes another person's daughter(A) and not  takes another person's daughter(B), so More(mean(A), mean(B))", ["A takes another person's daughter while B does not, so A is more mean than B"]], "negated": [" takes another person's daughter(A) and not  takes another person's daughter(B), so not Less(mean(A), mean(B))", ["A takes another person's daughter while B does not, so A is not less mean than B"]], "asymmetric_premise": [" takes another person's daughter(B) and not  takes another person's daughter(A), so Less(mean(A), mean(B))", ["B takes another person's daughter while A does not, so A is less mean than B"]], "asymmetric_conclusion": [" takes another person's daughter(A) and not  takes another person's daughter(B), so Less(mean(B), mean(A))", ["A takes another person's daughter while B does not, so B is less mean than A"]], "negated_asymmetric_premise": [" takes another person's daughter(B) and not  takes another person's daughter(A), so not More(mean(A), mean(B))", ["B takes another person's daughter while A does not, so A is not more mean than B"]], "negated_asymmetric_conclusion": [" takes another person's daughter(A) and not  takes another person's daughter(B), so not More(mean(B), mean(A))", ["A takes another person's daughter while B does not, so B is not more mean than A"]]}
{"original": [" drinks the milk(A) and not  drinks the milk(B), so More(health-conscious(A), health-conscious(B))", ["A drinks the milk while B does not, so A is more health-conscious than B"]], "negated": [" drinks the milk(A) and not  drinks the milk(B), so not Less(health-conscious(A), health-conscious(B))", ["A drinks the milk while B does not, so A is not less health-conscious than B"]], "asymmetric_premise": [" drinks the milk(B) and not  drinks the milk(A), so Less(health-conscious(A), health-conscious(B))", ["B drinks the milk while A does not, so A is less health-conscious than B"]], "asymmetric_conclusion": [" drinks the milk(A) and not  drinks the milk(B), so Less(health-conscious(B), health-conscious(A))", ["A drinks the milk while B does not, so B is less health-conscious than A"]], "negated_asymmetric_premise": [" drinks the milk(B) and not  drinks the milk(A), so not More(health-conscious(A), health-conscious(B))", ["B drinks the milk while A does not, so A is not more health-conscious than B"]], "negated_asymmetric_conclusion": [" drinks the milk(A) and not  drinks the milk(B), so not More(health-conscious(B), health-conscious(A))", ["A drinks the milk while B does not, so B is not more health-conscious than A"]]}
{"original": [" grows bored(A) and not  grows bored(B), so More(unsure(A), unsure(B))", ["A grows bored while B does not, so A is more unsure than B"]], "negated": [" grows bored(A) and not  grows bored(B), so not Less(unsure(A), unsure(B))", ["A grows bored while B does not, so A is not less unsure than B"]], "asymmetric_premise": [" grows bored(B) and not  grows bored(A), so Less(unsure(A), unsure(B))", ["B grows bored while A does not, so A is less unsure than B"]], "asymmetric_conclusion": [" grows bored(A) and not  grows bored(B), so Less(unsure(B), unsure(A))", ["A grows bored while B does not, so B is less unsure than A"]], "negated_asymmetric_premise": [" grows bored(B) and not  grows bored(A), so not More(unsure(A), unsure(B))", ["B grows bored while A does not, so A is not more unsure than B"]], "negated_asymmetric_conclusion": [" grows bored(A) and not  grows bored(B), so not More(unsure(B), unsure(A))", ["A grows bored while B does not, so B is not more unsure than A"]]}
{"original": [" is familiar to another person's ear(A) and not  is familiar to another person's ear(B), so More(knowning(A), knowning(B))", ["A is familiar to another person's ear more than B, so A is more knowning than B"]], "negated": [" is familiar to another person's ear(A) and not  is familiar to another person's ear(B), so not Less(knowning(A), knowning(B))", ["A is familiar to another person's ear more than B, so A is not less knowning than B"]], "asymmetric_premise": [" is familiar to another person's ear(B) and not  is familiar to another person's ear(A), so Less(knowning(A), knowning(B))", ["B is familiar to another person's ear while A is not, so A is less knowning than B"]], "asymmetric_conclusion": [" is familiar to another person's ear(A) and not  is familiar to another person's ear(B), so Less(knowning(B), knowning(A))", ["A is familiar to another person's ear while B is not, so B is less knowning than A"]], "negated_asymmetric_premise": [" is familiar to another person's ear(B) and not  is familiar to another person's ear(A), so not More(knowning(A), knowning(B))", ["B is familiar to another person's ear more than A, so A is not more knowning than B"]], "negated_asymmetric_conclusion": [" is familiar to another person's ear(A) and not  is familiar to another person's ear(B), so not More(knowning(B), knowning(A))", ["A is familiar to another person's ear more than B, so B is not more knowning than A"]]}
{"original": [" takes another person's phone(A) and not  takes another person's phone(B), so More(sneaky(A), sneaky(B))", ["A takes another person's phone while B does not, so A is more sneaky than B"]], "negated": [" takes another person's phone(A) and not  takes another person's phone(B), so not Less(sneaky(A), sneaky(B))", ["A takes another person's phone while B does not, so A is not less sneaky than B"]], "asymmetric_premise": [" takes another person's phone(B) and not  takes another person's phone(A), so Less(sneaky(A), sneaky(B))", ["B takes another person's phone while A does not, so A is less sneaky than B"]], "asymmetric_conclusion": [" takes another person's phone(A) and not  takes another person's phone(B), so Less(sneaky(B), sneaky(A))", ["A takes another person's phone while B does not, so B is less sneaky than A"]], "negated_asymmetric_premise": [" takes another person's phone(B) and not  takes another person's phone(A), so not More(sneaky(A), sneaky(B))", ["B takes another person's phone while A does not, so A is not more sneaky than B"]], "negated_asymmetric_conclusion": [" takes another person's phone(A) and not  takes another person's phone(B), so not More(sneaky(B), sneaky(A))", ["A takes another person's phone while B does not, so B is not more sneaky than A"]]}
{"original": [" gets beat up(A) and not  gets beat up(B), so More(hurt(A), hurt(B))", ["A gets beat up while B does not, so A is more hurt than B"]], "negated": [" gets beat up(A) and not  gets beat up(B), so not Less(hurt(A), hurt(B))", ["A gets beat up while B does not, so A is not less hurt than B"]], "asymmetric_premise": [" gets beat up(B) and not  gets beat up(A), so Less(hurt(A), hurt(B))", ["B gets beat up while A does not, so A is less hurt than B"]], "asymmetric_conclusion": [" gets beat up(A) and not  gets beat up(B), so Less(hurt(B), hurt(A))", ["A gets beat up while B does not, so B is less hurt than A"]], "negated_asymmetric_premise": [" gets beat up(B) and not  gets beat up(A), so not More(hurt(A), hurt(B))", ["B gets beat up while A does not, so A is not more hurt than B"]], "negated_asymmetric_conclusion": [" gets beat up(A) and not  gets beat up(B), so not More(hurt(B), hurt(A))", ["A gets beat up while B does not, so B is not more hurt than A"]]}
{"original": [" arrives the next day(A) and not  arrives the next day(B), so More(responsible(A), responsible(B))", ["A arrives the next day while B does not, so A is more responsible than B"]], "negated": [" arrives the next day(A) and not  arrives the next day(B), so not Less(responsible(A), responsible(B))", ["A arrives the next day while B does not, so A is not less responsible than B"]], "asymmetric_premise": [" arrives the next day(B) and not  arrives the next day(A), so Less(responsible(A), responsible(B))", ["B arrives the next day while A does not, so A is less responsible than B"]], "asymmetric_conclusion": [" arrives the next day(A) and not  arrives the next day(B), so Less(responsible(B), responsible(A))", ["A arrives the next day while B does not, so B is less responsible than A"]], "negated_asymmetric_premise": [" arrives the next day(B) and not  arrives the next day(A), so not More(responsible(A), responsible(B))", ["B arrives the next day while A does not, so A is not more responsible than B"]], "negated_asymmetric_conclusion": [" arrives the next day(A) and not  arrives the next day(B), so not More(responsible(B), responsible(A))", ["A arrives the next day while B does not, so B is not more responsible than A"]]}
{"original": [" talks to another person's daughter(A) and not  talks to another person's daughter(B), so More(nuturing(A), nuturing(B))", ["A talks to another person's daughter while B does not, so A is more nuturing than B"]], "negated": [" talks to another person's daughter(A) and not  talks to another person's daughter(B), so not Less(nuturing(A), nuturing(B))", ["A talks to another person's daughter while B does not, so A is not less nuturing than B"]], "asymmetric_premise": [" talks to another person's daughter(B) and not  talks to another person's daughter(A), so Less(nuturing(A), nuturing(B))", ["B talks to another person's daughter while A does not, so A is less nuturing than B"]], "asymmetric_conclusion": [" talks to another person's daughter(A) and not  talks to another person's daughter(B), so Less(nuturing(B), nuturing(A))", ["A talks to another person's daughter while B does not, so B is less nuturing than A"]], "negated_asymmetric_premise": [" talks to another person's daughter(B) and not  talks to another person's daughter(A), so not More(nuturing(A), nuturing(B))", ["B talks to another person's daughter while A does not, so A is not more nuturing than B"]], "negated_asymmetric_conclusion": [" talks to another person's daughter(A) and not  talks to another person's daughter(B), so not More(nuturing(B), nuturing(A))", ["A talks to another person's daughter while B does not, so B is not more nuturing than A"]]}
{"original": [" moans into another person's mouth(A) and not  moans into another person's mouth(B), so More(loving(A), loving(B))", ["A moans into another person's mouth while B does not, so A is more loving than B"]], "negated": [" moans into another person's mouth(A) and not  moans into another person's mouth(B), so not Less(loving(A), loving(B))", ["A moans into another person's mouth while B does not, so A is not less loving than B"]], "asymmetric_premise": [" moans into another person's mouth(B) and not  moans into another person's mouth(A), so Less(loving(A), loving(B))", ["B moans into another person's mouth while A does not, so A is less loving than B"]], "asymmetric_conclusion": [" moans into another person's mouth(A) and not  moans into another person's mouth(B), so Less(loving(B), loving(A))", ["A moans into another person's mouth while B does not, so B is less loving than A"]], "negated_asymmetric_premise": [" moans into another person's mouth(B) and not  moans into another person's mouth(A), so not More(loving(A), loving(B))", ["B moans into another person's mouth while A does not, so A is not more loving than B"]], "negated_asymmetric_conclusion": [" moans into another person's mouth(A) and not  moans into another person's mouth(B), so not More(loving(B), loving(A))", ["A moans into another person's mouth while B does not, so B is not more loving than A"]]}
{"original": [" learns computer programming(A) and not  learns computer programming(B), so More(bright(A), bright(B))", ["A learns computer programming while B does not, so A is more bright than B"]], "negated": [" learns computer programming(A) and not  learns computer programming(B), so not Less(bright(A), bright(B))", ["A learns computer programming while B does not, so A is not less bright than B"]], "asymmetric_premise": [" learns computer programming(B) and not  learns computer programming(A), so Less(bright(A), bright(B))", ["B learns computer programming while A does not, so A is less bright than B"]], "asymmetric_conclusion": [" learns computer programming(A) and not  learns computer programming(B), so Less(bright(B), bright(A))", ["A learns computer programming while B does not, so B is less bright than A"]], "negated_asymmetric_premise": [" learns computer programming(B) and not  learns computer programming(A), so not More(bright(A), bright(B))", ["B learns computer programming while A does not, so A is not more bright than B"]], "negated_asymmetric_conclusion": [" learns computer programming(A) and not  learns computer programming(B), so not More(bright(B), bright(A))", ["A learns computer programming while B does not, so B is not more bright than A"]]}
{"original": [" builds their house(A) and not  builds their house(B), so More(dedicated(A), dedicated(B))", ["A builds their house while B does not, so A is more dedicated than B"]], "negated": [" builds their house(A) and not  builds their house(B), so not Less(dedicated(A), dedicated(B))", ["A builds their house while B does not, so A is not less dedicated than B"]], "asymmetric_premise": [" builds their house(B) and not  builds their house(A), so Less(dedicated(A), dedicated(B))", ["B builds their house while A does not, so A is less dedicated than B"]], "asymmetric_conclusion": [" builds their house(A) and not  builds their house(B), so Less(dedicated(B), dedicated(A))", ["A builds their house while B does not, so B is less dedicated than A"]], "negated_asymmetric_premise": [" builds their house(B) and not  builds their house(A), so not More(dedicated(A), dedicated(B))", ["B builds their house while A does not, so A is not more dedicated than B"]], "negated_asymmetric_conclusion": [" builds their house(A) and not  builds their house(B), so not More(dedicated(B), dedicated(A))", ["A builds their house while B does not, so B is not more dedicated than A"]]}
{"original": [" brings another person fame(A) and not  brings another person fame(B), so More(fruitful(A), fruitful(B))", ["A brings another person fame while B does not, so A is more fruitful than B"]], "negated": [" brings another person fame(A) and not  brings another person fame(B), so not Less(fruitful(A), fruitful(B))", ["A brings another person fame while B does not, so A is not less fruitful than B"]], "asymmetric_premise": [" brings another person fame(B) and not  brings another person fame(A), so Less(fruitful(A), fruitful(B))", ["B brings another person fame while A does not, so A is less fruitful than B"]], "asymmetric_conclusion": [" brings another person fame(A) and not  brings another person fame(B), so Less(fruitful(B), fruitful(A))", ["A brings another person fame while B does not, so B is less fruitful than A"]], "negated_asymmetric_premise": [" brings another person fame(B) and not  brings another person fame(A), so not More(fruitful(A), fruitful(B))", ["B brings another person fame while A does not, so A is not more fruitful than B"]], "negated_asymmetric_conclusion": [" brings another person fame(A) and not  brings another person fame(B), so not More(fruitful(B), fruitful(A))", ["A brings another person fame while B does not, so B is not more fruitful than A"]]}
{"original": [" collects rocks(A) and not  collects rocks(B), so More(dedicated(A), dedicated(B))", ["A collects rocks while B does not, so A is more dedicated than B"]], "negated": [" collects rocks(A) and not  collects rocks(B), so not Less(dedicated(A), dedicated(B))", ["A collects rocks while B does not, so A is not less dedicated than B"]], "asymmetric_premise": [" collects rocks(B) and not  collects rocks(A), so Less(dedicated(A), dedicated(B))", ["B collects rocks while A does not, so A is less dedicated than B"]], "asymmetric_conclusion": [" collects rocks(A) and not  collects rocks(B), so Less(dedicated(B), dedicated(A))", ["A collects rocks while B does not, so B is less dedicated than A"]], "negated_asymmetric_premise": [" collects rocks(B) and not  collects rocks(A), so not More(dedicated(A), dedicated(B))", ["B collects rocks while A does not, so A is not more dedicated than B"]], "negated_asymmetric_conclusion": [" collects rocks(A) and not  collects rocks(B), so not More(dedicated(B), dedicated(A))", ["A collects rocks while B does not, so B is not more dedicated than A"]]}
{"original": [" suits another person's taste(A) and not  suits another person's taste(B), so More(easy going(A), easy going(B))", ["A suits another person's taste more than B, so A is more easy going than B"]], "negated": [" suits another person's taste(A) and not  suits another person's taste(B), so not Less(easy going(A), easy going(B))", ["A suits another person's taste more than B, so A is not less easy going than B"]], "asymmetric_premise": [" suits another person's taste(B) and not  suits another person's taste(A), so Less(easy going(A), easy going(B))", ["B suits another person's taste while A does not, so A is less easy going than B"]], "asymmetric_conclusion": [" suits another person's taste(A) and not  suits another person's taste(B), so Less(easy going(B), easy going(A))", ["A suits another person's taste while B does not, so B is less easy going than A"]], "negated_asymmetric_premise": [" suits another person's taste(B) and not  suits another person's taste(A), so not More(easy going(A), easy going(B))", ["B suits another person's taste more than A, so A is not more easy going than B"]], "negated_asymmetric_conclusion": [" suits another person's taste(A) and not  suits another person's taste(B), so not More(easy going(B), easy going(A))", ["A suits another person's taste more than B, so B is not more easy going than A"]]}
{"original": [" pulls an all-nighter(A) and not  pulls an all-nighter(B), so More(tired(A), tired(B))", ["A pulls an all-nighter while B does not, so A is more tired than B"]], "negated": [" pulls an all-nighter(A) and not  pulls an all-nighter(B), so not Less(tired(A), tired(B))", ["A pulls an all-nighter while B does not, so A is not less tired than B"]], "asymmetric_premise": [" pulls an all-nighter(B) and not  pulls an all-nighter(A), so Less(tired(A), tired(B))", ["B pulls an all-nighter while A does not, so A is less tired than B"]], "asymmetric_conclusion": [" pulls an all-nighter(A) and not  pulls an all-nighter(B), so Less(tired(B), tired(A))", ["A pulls an all-nighter while B does not, so B is less tired than A"]], "negated_asymmetric_premise": [" pulls an all-nighter(B) and not  pulls an all-nighter(A), so not More(tired(A), tired(B))", ["B pulls an all-nighter while A does not, so A is not more tired than B"]], "negated_asymmetric_conclusion": [" pulls an all-nighter(A) and not  pulls an all-nighter(B), so not More(tired(B), tired(A))", ["A pulls an all-nighter while B does not, so B is not more tired than A"]]}
{"original": [" drives home(A) and not  drives home(B), so More(responsible(A), responsible(B))", ["A drives home while B does not, so A is more responsible than B"]], "negated": [" drives home(A) and not  drives home(B), so not Less(responsible(A), responsible(B))", ["A drives home while B does not, so A is not less responsible than B"]], "asymmetric_premise": [" drives home(B) and not  drives home(A), so Less(responsible(A), responsible(B))", ["B drives home while A does not, so A is less responsible than B"]], "asymmetric_conclusion": [" drives home(A) and not  drives home(B), so Less(responsible(B), responsible(A))", ["A drives home while B does not, so B is less responsible than A"]], "negated_asymmetric_premise": [" drives home(B) and not  drives home(A), so not More(responsible(A), responsible(B))", ["B drives home while A does not, so A is not more responsible than B"]], "negated_asymmetric_conclusion": [" drives home(A) and not  drives home(B), so not More(responsible(B), responsible(A))", ["A drives home while B does not, so B is not more responsible than A"]]}
{"original": [" eats sandwiches(A) and not  eats sandwiches(B), so More(conventional(A), conventional(B))", ["A eats sandwiches while B does not, so A is more conventional than B"]], "negated": [" eats sandwiches(A) and not  eats sandwiches(B), so not Less(conventional(A), conventional(B))", ["A eats sandwiches while B does not, so A is not less conventional than B"]], "asymmetric_premise": [" eats sandwiches(B) and not  eats sandwiches(A), so Less(conventional(A), conventional(B))", ["B eats sandwiches while A does not, so A is less conventional than B"]], "asymmetric_conclusion": [" eats sandwiches(A) and not  eats sandwiches(B), so Less(conventional(B), conventional(A))", ["A eats sandwiches while B does not, so B is less conventional than A"]], "negated_asymmetric_premise": [" eats sandwiches(B) and not  eats sandwiches(A), so not More(conventional(A), conventional(B))", ["B eats sandwiches while A does not, so A is not more conventional than B"]], "negated_asymmetric_conclusion": [" eats sandwiches(A) and not  eats sandwiches(B), so not More(conventional(B), conventional(A))", ["A eats sandwiches while B does not, so B is not more conventional than A"]]}
{"original": [" has enough money to pay their rent(A) and not  has enough money to pay their rent(B), so More(hard working(A), hard working(B))", ["A has enough money to pay their rent while B does not, so A is more hard working than B"]], "negated": [" has enough money to pay their rent(A) and not  has enough money to pay their rent(B), so not Less(hard working(A), hard working(B))", ["A has enough money to pay their rent while B does not, so A is not less hard working than B"]], "asymmetric_premise": [" has enough money to pay their rent(B) and not  has enough money to pay their rent(A), so Less(hard working(A), hard working(B))", ["B has enough money to pay their rent while A does not, so A is less hard working than B"]], "asymmetric_conclusion": [" has enough money to pay their rent(A) and not  has enough money to pay their rent(B), so Less(hard working(B), hard working(A))", ["A has enough money to pay their rent while B does not, so B is less hard working than A"]], "negated_asymmetric_premise": [" has enough money to pay their rent(B) and not  has enough money to pay their rent(A), so not More(hard working(A), hard working(B))", ["B has enough money to pay their rent more than A, so A is not more hard working than B"]], "negated_asymmetric_conclusion": [" has enough money to pay their rent(A) and not  has enough money to pay their rent(B), so not More(hard working(B), hard working(A))", ["A has enough money to pay their rent while B does not, so B is not more hard working than A"]]}
{"original": [" looks beautiful(A) and not  looks beautiful(B), so More(prepared(A), prepared(B))", ["A looks beautiful while B does not, so A is more prepared than B"]], "negated": [" looks beautiful(A) and not  looks beautiful(B), so not Less(prepared(A), prepared(B))", ["A looks beautiful while B does not, so A is not less prepared than B"]], "asymmetric_premise": [" looks beautiful(B) and not  looks beautiful(A), so Less(prepared(A), prepared(B))", ["B looks beautiful while A does not, so A is less prepared than B"]], "asymmetric_conclusion": [" looks beautiful(A) and not  looks beautiful(B), so Less(prepared(B), prepared(A))", ["A looks beautiful while B does not, so B is less prepared than A"]], "negated_asymmetric_premise": [" looks beautiful(B) and not  looks beautiful(A), so not More(prepared(A), prepared(B))", ["B looks beautiful while A does not, so A is not more prepared than B"]], "negated_asymmetric_conclusion": [" looks beautiful(A) and not  looks beautiful(B), so not More(prepared(B), prepared(A))", ["A looks beautiful while B does not, so B is not more prepared than A"]]}
{"original": [" sounds interesting(A) and not  sounds interesting(B), so More(adventurous guy(A), adventurous guy(B))", ["A sounds interesting while B does not, so A is more adventurous than B"]], "negated": [" sounds interesting(A) and not  sounds interesting(B), so not Less(adventurous guy(A), adventurous guy(B))", ["A sounds interesting while B does not, so A is not less adventurous than B"]], "asymmetric_premise": [" sounds interesting(B) and not  sounds interesting(A), so Less(adventurous guy(A), adventurous guy(B))", ["B sounds interesting while A does not, so A is a less adventurous guy than B"]], "asymmetric_conclusion": [" sounds interesting(A) and not  sounds interesting(B), so Less(adventurous guy(B), adventurous guy(A))", ["A sounds interesting while B does not, so B is a less adventurous guy than A"]], "negated_asymmetric_premise": [" sounds interesting(B) and not  sounds interesting(A), so not More(adventurous guy(A), adventurous guy(B))", ["B sounds interesting while A does not, so A is not more adventurous than B"]], "negated_asymmetric_conclusion": [" sounds interesting(A) and not  sounds interesting(B), so not More(adventurous guy(B), adventurous guy(A))", ["A sounds interesting while B does not, so B is not a more adventurous guy than A"]]}
{"original": [" takes part in the struggle(A) and not  takes part in the struggle(B), so More(helpful(A), helpful(B))", ["A takes part in the struggle while B does not, so A is more helpful than B"]], "negated": [" takes part in the struggle(A) and not  takes part in the struggle(B), so not Less(helpful(A), helpful(B))", ["A takes part in the struggle while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" takes part in the struggle(B) and not  takes part in the struggle(A), so Less(helpful(A), helpful(B))", ["B takes part in the struggle while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" takes part in the struggle(A) and not  takes part in the struggle(B), so Less(helpful(B), helpful(A))", ["A takes part in the struggle while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" takes part in the struggle(B) and not  takes part in the struggle(A), so not More(helpful(A), helpful(B))", ["B takes part in the struggle while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" takes part in the struggle(A) and not  takes part in the struggle(B), so not More(helpful(B), helpful(A))", ["A takes part in the struggle while B does not, so B is not more helpful than A"]]}
{"original": [" plays a role in the process(A) and not  plays a role in the process(B), so More(bizzare(A), bizzare(B))", ["A plays a role in the process while B does not, so A is more bizzare than B"]], "negated": [" plays a role in the process(A) and not  plays a role in the process(B), so not Less(bizzare(A), bizzare(B))", ["A plays a role in the process while B does not, so A is not less bizzare than B"]], "asymmetric_premise": [" plays a role in the process(B) and not  plays a role in the process(A), so Less(bizzare(A), bizzare(B))", ["B plays a role in the process while A does not, so A is less bizzare than B"]], "asymmetric_conclusion": [" plays a role in the process(A) and not  plays a role in the process(B), so Less(bizzare(B), bizzare(A))", ["A plays a role in the process while B does not, so B is less bizzare than A"]], "negated_asymmetric_premise": [" plays a role in the process(B) and not  plays a role in the process(A), so not More(bizzare(A), bizzare(B))", ["B plays a role in the process while A does not, so A is not more bizzare than B"]], "negated_asymmetric_conclusion": [" plays a role in the process(A) and not  plays a role in the process(B), so not More(bizzare(B), bizzare(A))", ["A plays a role in the process while B does not, so B is not more bizzare than A"]]}
{"original": [" would play with another person(A) and not  would play with another person(B), so More(patient(A), patient(B))", ["A would play with another person while B does not, so A is more patient than B"]], "negated": [" would play with another person(A) and not  would play with another person(B), so not Less(patient(A), patient(B))", ["A would play with another person while B does not, so A is not less patient than B"]], "asymmetric_premise": [" would play with another person(B) and not  would play with another person(A), so Less(patient(A), patient(B))", ["B would play with another person while A does not, so A is less patient than B"]], "asymmetric_conclusion": [" would play with another person(A) and not  would play with another person(B), so Less(patient(B), patient(A))", ["A would play with another person while B does not, so B is less patient than A"]], "negated_asymmetric_premise": [" would play with another person(B) and not  would play with another person(A), so not More(patient(A), patient(B))", ["B would play with another person while A does not, so A is not more patient than B"]], "negated_asymmetric_conclusion": [" would play with another person(A) and not  would play with another person(B), so not More(patient(B), patient(A))", ["A would play with another person while B does not, so B is not more patient than A"]]}
{"original": [" takes their first steps(A) and not  takes their first steps(B), so More(active(A), active(B))", ["A takes their first steps while B does not, so A is more active than B"]], "negated": [" takes their first steps(A) and not  takes their first steps(B), so not Less(active(A), active(B))", ["A takes their first steps while B does not, so A is not less active than B"]], "asymmetric_premise": [" takes their first steps(B) and not  takes their first steps(A), so Less(active(A), active(B))", ["B takes their first steps while A does not, so A is less active than B"]], "asymmetric_conclusion": [" takes their first steps(A) and not  takes their first steps(B), so Less(active(B), active(A))", ["A takes their first steps while B does not, so B is less active than A"]], "negated_asymmetric_premise": [" takes their first steps(B) and not  takes their first steps(A), so not More(active(A), active(B))", ["B takes their first steps while A does not, so A is not more active than B"]], "negated_asymmetric_conclusion": [" takes their first steps(A) and not  takes their first steps(B), so not More(active(B), active(A))", ["A takes their first steps while B does not, so B is not more active than A"]]}
{"original": [" climbs back(A) and not  climbs back(B), so More(relieved(A), relieved(B))", ["A climbs back while B does not, so A is more relieved than B"]], "negated": [" climbs back(A) and not  climbs back(B), so not Less(relieved(A), relieved(B))", ["A climbs back while B does not, so A is not less relieved than B"]], "asymmetric_premise": [" climbs back(B) and not  climbs back(A), so Less(relieved(A), relieved(B))", ["B climbs back while A does not, so A is less relieved than B"]], "asymmetric_conclusion": [" climbs back(A) and not  climbs back(B), so Less(relieved(B), relieved(A))", ["A climbs back while B does not, so B is less relieved than A"]], "negated_asymmetric_premise": [" climbs back(B) and not  climbs back(A), so not More(relieved(A), relieved(B))", ["B climbs back while A does not, so A is not more relieved than B"]], "negated_asymmetric_conclusion": [" climbs back(A) and not  climbs back(B), so not More(relieved(B), relieved(A))", ["A climbs back while B does not, so B is not more relieved than A"]]}
{"original": [" gives another person a right(A) and not  gives another person a right(B), so More(determind(A), determind(B))", ["A gives another person a right while B does not, so A is more determind than B"]], "negated": [" gives another person a right(A) and not  gives another person a right(B), so not Less(determind(A), determind(B))", ["A gives another person a right while B does not, so A is not less determind than B"]], "asymmetric_premise": [" gives another person a right(B) and not  gives another person a right(A), so Less(determind(A), determind(B))", ["B gives another person a right while A does not, so A is less determind than B"]], "asymmetric_conclusion": [" gives another person a right(A) and not  gives another person a right(B), so Less(determind(B), determind(A))", ["A gives another person a right while B does not, so B is less determind than A"]], "negated_asymmetric_premise": [" gives another person a right(B) and not  gives another person a right(A), so not More(determind(A), determind(B))", ["B gives another person a right while A does not, so A is not more determind than B"]], "negated_asymmetric_conclusion": [" gives another person a right(A) and not  gives another person a right(B), so not More(determind(B), determind(A))", ["A gives another person a right while B does not, so B is not more determind than A"]]}
{"original": [" grabs another person's shoulders(A) and not  grabs another person's shoulders(B), so More(forceful(A), forceful(B))", ["A grabs another person's shoulders while B does not, so A is more forceful than B"]], "negated": [" grabs another person's shoulders(A) and not  grabs another person's shoulders(B), so not Less(forceful(A), forceful(B))", ["A grabs another person's shoulders while B does not, so A is not less forceful than B"]], "asymmetric_premise": [" grabs another person's shoulders(B) and not  grabs another person's shoulders(A), so Less(forceful(A), forceful(B))", ["B grabs another person's shoulders while A does not, so A is less forceful than B"]], "asymmetric_conclusion": [" grabs another person's shoulders(A) and not  grabs another person's shoulders(B), so Less(forceful(B), forceful(A))", ["A grabs another person's shoulders while B does not, so B is less forceful than A"]], "negated_asymmetric_premise": [" grabs another person's shoulders(B) and not  grabs another person's shoulders(A), so not More(forceful(A), forceful(B))", ["B grabs another person's shoulders while A does not, so A is not more forceful than B"]], "negated_asymmetric_conclusion": [" grabs another person's shoulders(A) and not  grabs another person's shoulders(B), so not More(forceful(B), forceful(A))", ["A grabs another person's shoulders while B does not, so B is not more forceful than A"]]}
{"original": [" nips in the bud(A) and not  nips in the bud(B), so More(strong(A), strong(B))", ["A has more nips in the bud than B, so A is more strong than B"]], "negated": [" nips in the bud(A) and not  nips in the bud(B), so not Less(strong(A), strong(B))", ["A has more nips in the bud than B, so A is not less strong than B"]], "asymmetric_premise": [" nips in the bud(B) and not  nips in the bud(A), so Less(strong(A), strong(B))", ["B has nips in the bud while A does not, so A is less strong than B"]], "asymmetric_conclusion": [" nips in the bud(A) and not  nips in the bud(B), so Less(strong(B), strong(A))", ["A has nips in the bud while B does not, so B is less strong than A"]], "negated_asymmetric_premise": [" nips in the bud(B) and not  nips in the bud(A), so not More(strong(A), strong(B))", ["B has more nips in the bud than A, so A is not more strong than B"]], "negated_asymmetric_conclusion": [" nips in the bud(A) and not  nips in the bud(B), so not More(strong(B), strong(A))", ["A has more nips in the bud than B, so B is not more strong than A"]]}
{"original": [" wins the game(A) and not  wins the game(B), so More(skillful(A), skillful(B))", ["A wins the game while B does not, so A is more skillful than B"]], "negated": [" wins the game(A) and not  wins the game(B), so not Less(skillful(A), skillful(B))", ["A wins the game while B does not, so A is not less skillful than B"]], "asymmetric_premise": [" wins the game(B) and not  wins the game(A), so Less(skillful(A), skillful(B))", ["B wins the game while A does not, so A is less skillful than B"]], "asymmetric_conclusion": [" wins the game(A) and not  wins the game(B), so Less(skillful(B), skillful(A))", ["A wins the game while B does not, so B is less skillful than A"]], "negated_asymmetric_premise": [" wins the game(B) and not  wins the game(A), so not More(skillful(A), skillful(B))", ["B wins the game while A does not, so A is not more skillful than B"]], "negated_asymmetric_conclusion": [" wins the game(A) and not  wins the game(B), so not More(skillful(B), skillful(A))", ["A wins the game while B does not, so B is not more skillful than A"]]}
{"original": [" escapes another person's mouth(A) and not  escapes another person's mouth(B), so More(strange(A), strange(B))", ["A escapes another person's mouth while B does not, so A is more strange than B"]], "negated": [" escapes another person's mouth(A) and not  escapes another person's mouth(B), so not Less(strange(A), strange(B))", ["A escapes another person's mouth while B does not, so A is not less strange than B"]], "asymmetric_premise": [" escapes another person's mouth(B) and not  escapes another person's mouth(A), so Less(strange(A), strange(B))", ["B escapes another person's mouth while A does not, so A is less strange than B"]], "asymmetric_conclusion": [" escapes another person's mouth(A) and not  escapes another person's mouth(B), so Less(strange(B), strange(A))", ["A escapes another person's mouth while B does not, so B is less strange than A"]], "negated_asymmetric_premise": [" escapes another person's mouth(B) and not  escapes another person's mouth(A), so not More(strange(A), strange(B))", ["B escapes another person's mouth while A does not, so A is not more strange than B"]], "negated_asymmetric_conclusion": [" escapes another person's mouth(A) and not  escapes another person's mouth(B), so not More(strange(B), strange(A))", ["A escapes another person's mouth while B does not, so B is not more strange than A"]]}
{"original": [" clears cut(A) and not  clears cut(B), so More(determined(A), determined(B))", ["A clears cut while B does not, so A is more determined than B"]], "negated": [" clears cut(A) and not  clears cut(B), so not Less(determined(A), determined(B))", ["A clears cut while B does not, so A is not less determined than B"]], "asymmetric_premise": [" clears cut(B) and not  clears cut(A), so Less(determined(A), determined(B))", ["B clears cut while A does not, so A is less determined than B"]], "asymmetric_conclusion": [" clears cut(A) and not  clears cut(B), so Less(determined(B), determined(A))", ["A clears cut while B does not, so B is less determined than A"]], "negated_asymmetric_premise": [" clears cut(B) and not  clears cut(A), so not More(determined(A), determined(B))", ["B clears cut while A does not, so A is not more determined than B"]], "negated_asymmetric_conclusion": [" clears cut(A) and not  clears cut(B), so not More(determined(B), determined(A))", ["A clears cut while B does not, so B is not more determined than A"]]}
{"original": [" gives another person authority(A) and not  gives another person authority(B), so More(talented(A), talented(B))", ["A gives another person authority while B does not, so A is more talented than B"]], "negated": [" gives another person authority(A) and not  gives another person authority(B), so not Less(talented(A), talented(B))", ["A gives another person authority while B does not, so A is not less talented than B"]], "asymmetric_premise": [" gives another person authority(B) and not  gives another person authority(A), so Less(talented(A), talented(B))", ["B gives another person authority while A does not, so A is less talented than B"]], "asymmetric_conclusion": [" gives another person authority(A) and not  gives another person authority(B), so Less(talented(B), talented(A))", ["A gives another person authority while B does not, so B is less talented than A"]], "negated_asymmetric_premise": [" gives another person authority(B) and not  gives another person authority(A), so not More(talented(A), talented(B))", ["B gives another person authority while A does not, so A is not more talented than B"]], "negated_asymmetric_conclusion": [" gives another person authority(A) and not  gives another person authority(B), so not More(talented(B), talented(A))", ["A gives another person authority while B does not, so B is not more talented than A"]]}
{"original": [" avoids another person conflict(A) and not  avoids another person conflict(B), so More(nervous(A), nervous(B))", ["A avoids another person conflict while B does not, so A is more nervous than B"]], "negated": [" avoids another person conflict(A) and not  avoids another person conflict(B), so not Less(nervous(A), nervous(B))", ["A avoids another person conflict while B does not, so A is not less nervous than B"]], "asymmetric_premise": [" avoids another person conflict(B) and not  avoids another person conflict(A), so Less(nervous(A), nervous(B))", ["B avoids another person conflict while A does not, so A is less nervous than B"]], "asymmetric_conclusion": [" avoids another person conflict(A) and not  avoids another person conflict(B), so Less(nervous(B), nervous(A))", ["A avoids another person conflict while B does not, so B is less nervous than A"]], "negated_asymmetric_premise": [" avoids another person conflict(B) and not  avoids another person conflict(A), so not More(nervous(A), nervous(B))", ["B avoids another person conflict while A does not, so A is not more nervous than B"]], "negated_asymmetric_conclusion": [" avoids another person conflict(A) and not  avoids another person conflict(B), so not More(nervous(B), nervous(A))", ["A avoids another person conflict while B does not, so B is not more nervous than A"]]}
{"original": [" gives it to their mother(A) and not  gives it to their mother(B), so More(helpful(A), helpful(B))", ["A gives it to their mother while B does not, so A is more helpful than B"]], "negated": [" gives it to their mother(A) and not  gives it to their mother(B), so not Less(helpful(A), helpful(B))", ["A gives it to their mother while B does not, so A is not less helpful than B"]], "asymmetric_premise": [" gives it to their mother(B) and not  gives it to their mother(A), so Less(helpful(A), helpful(B))", ["B gives it to their mother while A does not, so A is less helpful than B"]], "asymmetric_conclusion": [" gives it to their mother(A) and not  gives it to their mother(B), so Less(helpful(B), helpful(A))", ["A gives it to their mother while B does not, so B is less helpful than A"]], "negated_asymmetric_premise": [" gives it to their mother(B) and not  gives it to their mother(A), so not More(helpful(A), helpful(B))", ["B gives it to their mother while A does not, so A is not more helpful than B"]], "negated_asymmetric_conclusion": [" gives it to their mother(A) and not  gives it to their mother(B), so not More(helpful(B), helpful(A))", ["A gives it to their mother while B does not, so B is not more helpful than A"]]}
{"original": [" books their trip(A) and not  books their trip(B), so More(traveled(A), traveled(B))", ["A books their trip while B does not, so A is more traveled than B"]], "negated": [" books their trip(A) and not  books their trip(B), so not Less(traveled(A), traveled(B))", ["A books their trip while B does not, so A is not less traveled than B"]], "asymmetric_premise": [" books their trip(B) and not  books their trip(A), so Less(traveled(A), traveled(B))", ["B books their trip while A does not, so A is less traveled than B"]], "asymmetric_conclusion": [" books their trip(A) and not  books their trip(B), so Less(traveled(B), traveled(A))", ["A books their trip while B does not, so B is less traveled than A"]], "negated_asymmetric_premise": [" books their trip(B) and not  books their trip(A), so not More(traveled(A), traveled(B))", ["B books their trip while A does not, so A is not more traveled than B"]], "negated_asymmetric_conclusion": [" books their trip(A) and not  books their trip(B), so not More(traveled(B), traveled(A))", ["A books their trip while B does not, so B is not more traveled than A"]]}
{"original": [" has a long day(A) and not  has a long day(B), so More(bored(A), bored(B))", ["A has a long day while B does not, so A is more bored than B"]], "negated": [" has a long day(A) and not  has a long day(B), so not Less(bored(A), bored(B))", ["A has a long day while B does not, so A is not less bored than B"]], "asymmetric_premise": [" has a long day(B) and not  has a long day(A), so Less(bored(A), bored(B))", ["B has a long day while A does not, so A is less bored than B"]], "asymmetric_conclusion": [" has a long day(A) and not  has a long day(B), so Less(bored(B), bored(A))", ["A has a long day while B does not, so B is less bored than A"]], "negated_asymmetric_premise": [" has a long day(B) and not  has a long day(A), so not More(bored(A), bored(B))", ["B has a long day while A does not, so A is not more bored than B"]], "negated_asymmetric_conclusion": [" has a long day(A) and not  has a long day(B), so not More(bored(B), bored(A))", ["A has a long day while B does not, so B is not more bored than A"]]}
{"original": [" gives another person some medicine(A) and not  gives another person some medicine(B), so More(caring(A), caring(B))", ["A gives another person some medicine while B does not, so A is more caring than B"]], "negated": [" gives another person some medicine(A) and not  gives another person some medicine(B), so not Less(caring(A), caring(B))", ["A gives another person some medicine while B does not, so A is not less caring than B"]], "asymmetric_premise": [" gives another person some medicine(B) and not  gives another person some medicine(A), so Less(caring(A), caring(B))", ["B gives another person some medicine while A does not, so A is less caring than B"]], "asymmetric_conclusion": [" gives another person some medicine(A) and not  gives another person some medicine(B), so Less(caring(B), caring(A))", ["A gives another person some medicine while B does not, so B is less caring than A"]], "negated_asymmetric_premise": [" gives another person some medicine(B) and not  gives another person some medicine(A), so not More(caring(A), caring(B))", ["B gives another person some medicine while A does not, so A is not more caring than B"]], "negated_asymmetric_conclusion": [" gives another person some medicine(A) and not  gives another person some medicine(B), so not More(caring(B), caring(A))", ["A gives another person some medicine while B does not, so B is not more caring than A"]]}
{"original": [" sees another person all the time(A) and not  sees another person all the time(B), so More(available(A), available(B))", ["A sees another person all the time while B does not, so A is more available than B"]], "negated": [" sees another person all the time(A) and not  sees another person all the time(B), so not Less(available(A), available(B))", ["A sees another person all the time while B does not, so A is not less available than B"]], "asymmetric_premise": [" sees another person all the time(B) and not  sees another person all the time(A), so Less(available(A), available(B))", ["B sees another person all the time while A does not, so A is less available than B"]], "asymmetric_conclusion": [" sees another person all the time(A) and not  sees another person all the time(B), so Less(available(B), available(A))", ["A sees another person all the time while B does not, so B is less available than A"]], "negated_asymmetric_premise": [" sees another person all the time(B) and not  sees another person all the time(A), so not More(available(A), available(B))", ["B sees another person all the time more than A, so A is not more available than B"]], "negated_asymmetric_conclusion": [" sees another person all the time(A) and not  sees another person all the time(B), so not More(available(B), available(A))", ["A sees another person all the time more than B, so B is not more available than A"]]}
{"original": [" shins brightly(A) and not  shins brightly(B), so More(unique(A), unique(B))", ["A lights his shins brightly while B does not, so A is more unique than B"]], "negated": [" shins brightly(A) and not  shins brightly(B), so not Less(unique(A), unique(B))", ["A lights his shins brightly while B does not, so A is not less unique than B"]], "asymmetric_premise": [" shins brightly(B) and not  shins brightly(A), so Less(unique(A), unique(B))", ["B lights his shins brightly while A does not, so A is less unique than B"]], "asymmetric_conclusion": [" shins brightly(A) and not  shins brightly(B), so Less(unique(B), unique(A))", ["A lights his shins brightly while B does not, so B is less unique than A"]], "negated_asymmetric_premise": [" shins brightly(B) and not  shins brightly(A), so not More(unique(A), unique(B))", ["B lights his shins brightly while A does not, so A is not more unique than B"]], "negated_asymmetric_conclusion": [" shins brightly(A) and not  shins brightly(B), so not More(unique(B), unique(A))", ["A lights his shins brightly while B does not, so B is not more unique than A"]]}
{"original": [" offers another person the job(A) and not  offers another person the job(B), so More(busy(A), busy(B))", ["A offers another person the job while B does not, so A is more busy than B"]], "negated": [" offers another person the job(A) and not  offers another person the job(B), so not Less(busy(A), busy(B))", ["A offers another person the job while B does not, so A is not less busy than B"]], "asymmetric_premise": [" offers another person the job(B) and not  offers another person the job(A), so Less(busy(A), busy(B))", ["B offers another person the job while A does not, so A is less busy than B"]], "asymmetric_conclusion": [" offers another person the job(A) and not  offers another person the job(B), so Less(busy(B), busy(A))", ["A offers another person the job while B does not, so B is less busy than A"]], "negated_asymmetric_premise": [" offers another person the job(B) and not  offers another person the job(A), so not More(busy(A), busy(B))", ["B offers another person the job while A does not, so A is not more busy than B"]], "negated_asymmetric_conclusion": [" offers another person the job(A) and not  offers another person the job(B), so not More(busy(B), busy(A))", ["A offers another person the job while B does not, so B is not more busy than A"]]}
{"original": [" sees another person much(A) and not  sees another person much(B), so More(loving(A), loving(B))", ["A sees another person much more than B, so A is more loving than B"]], "negated": [" sees another person much(A) and not  sees another person much(B), so not Less(loving(A), loving(B))", ["A sees another person much more than B, so A is not less loving than B"]], "asymmetric_premise": [" sees another person much(B) and not  sees another person much(A), so Less(loving(A), loving(B))", ["B sees another person much more than A, so A is less loving than B"]], "asymmetric_conclusion": [" sees another person much(A) and not  sees another person much(B), so Less(loving(B), loving(A))", ["A sees another person much more than B, so B is less loving than A"]], "negated_asymmetric_premise": [" sees another person much(B) and not  sees another person much(A), so not More(loving(A), loving(B))", ["B sees another person much more than A, so A is not more loving than B"]], "negated_asymmetric_conclusion": [" sees another person much(A) and not  sees another person much(B), so not More(loving(B), loving(A))", ["A sees another person much more than B, so B is not more loving than A"]]}
{"original": [" attains their goal(A) and not  attains their goal(B), so More(relieved(A), relieved(B))", ["A attains their goal while B does not, so A is more relieved than B"]], "negated": [" attains their goal(A) and not  attains their goal(B), so not Less(relieved(A), relieved(B))", ["A attains their goal while B does not, so A is not less relieved than B"]], "asymmetric_premise": [" attains their goal(B) and not  attains their goal(A), so Less(relieved(A), relieved(B))", ["B attains their goal while A does not, so A is less relieved than B"]], "asymmetric_conclusion": [" attains their goal(A) and not  attains their goal(B), so Less(relieved(B), relieved(A))", ["A attains their goal while B does not, so B is less relieved than A"]], "negated_asymmetric_premise": [" attains their goal(B) and not  attains their goal(A), so not More(relieved(A), relieved(B))", ["B attains their goal while A does not, so A is not more relieved than B"]], "negated_asymmetric_conclusion": [" attains their goal(A) and not  attains their goal(B), so not More(relieved(B), relieved(A))", ["A attains their goal while B does not, so B is not more relieved than A"]]}
{"original": [" buys another person a new pair(A) and not  buys another person a new pair(B), so More(caring(A), caring(B))", ["A buys another person a new pair of shoes while B does not, so A is more caring than B"]], "negated": [" buys another person a new pair(A) and not  buys another person a new pair(B), so not Less(caring(A), caring(B))", ["A buys another person a new pair of shoes while B does not, so A is not less caring than B"]], "asymmetric_premise": [" buys another person a new pair(B) and not  buys another person a new pair(A), so Less(caring(A), caring(B))", ["B buys another person a new pair of shoes while A does not, so A is less caring than B"]], "asymmetric_conclusion": [" buys another person a new pair(A) and not  buys another person a new pair(B), so Less(caring(B), caring(A))", ["A buys another person a new pair of shoes while B does not, so B is less caring than A"]], "negated_asymmetric_premise": [" buys another person a new pair(B) and not  buys another person a new pair(A), so not More(caring(A), caring(B))", ["B buys another person a new pair of shoes while A does not, so A is not more caring than B"]], "negated_asymmetric_conclusion": [" buys another person a new pair(A) and not  buys another person a new pair(B), so not More(caring(B), caring(A))", ["A buys another person a new pair of shoes while B does not, so B is not more caring than A"]]}
{"original": ["see in dark(A) and not see in dark(B), so More(light(A), light(B))", ["A is able to see in dark while B does not, so A is more light than B"]], "negated": ["see in dark(A) and not see in dark(B), so not Less(light(A), light(B))", ["A can be used to see in dark while B cannot, so A is not less light than B"]], "asymmetric_premise": ["see in dark(B) and not see in dark(A), so Less(light(A), light(B))", ["B can be used to see in dark while A cannot, so A is less light than B"]], "asymmetric_conclusion": ["see in dark(A) and not see in dark(B), so Less(light(B), light(A))", ["A can be used to see in dark while B cannot, so B is less light than A"]], "negated_asymmetric_premise": ["see in dark(B) and not see in dark(A), so not More(light(A), light(B))", ["B can see in dark while A cannot, so A is not more light than B"]], "negated_asymmetric_conclusion": ["see in dark(A) and not see in dark(B), so not More(light(B), light(A))", ["A can be used to see in dark while B cannot, so B is not more light than A"]]}
{"original": ["illumination(A) and not illumination(B), so More(light(A), light(B))", ["A is capable of illumination while B is not, so A is more light than B"]], "negated": ["illumination(A) and not illumination(B), so not Less(light(A), light(B))", ["A is capable of illumination while B is not, so A is not less light than B"]], "asymmetric_premise": ["illumination(B) and not illumination(A), so Less(light(A), light(B))", ["B is capable of illumination while A is not, so A is less light than B"]], "asymmetric_conclusion": ["illumination(A) and not illumination(B), so Less(light(B), light(A))", ["A is capable of illumination while B is not, so B is less light than A"]], "negated_asymmetric_premise": ["illumination(B) and not illumination(A), so not More(light(A), light(B))", ["B is capable of illumination while A is not, so A is not more light than B"]], "negated_asymmetric_conclusion": ["illumination(A) and not illumination(B), so not More(light(B), light(A))", ["A is capable of illumination while B is not, so B is not more light than A"]]}
{"original": ["measure measure distance(A) and not measure measure distance(B), so More(square(A), square(B))", ["A is able to measure measure distance while B cannot, so A is more square than B."]], "negated": ["measure measure distance(A) and not measure measure distance(B), so not Less(square(A), square(B))", ["A is able to measure measure distance while B is not, so A is not less square than B"]], "asymmetric_premise": ["measure measure distance(B) and not measure measure distance(A), so Less(square(A), square(B))", ["B is able to measure measure distance while A is not, so A is less square than B"]], "asymmetric_conclusion": ["measure measure distance(A) and not measure measure distance(B), so Less(square(B), square(A))", ["A is able to measure measure distance while B is not, so B is less square than A"]], "negated_asymmetric_premise": ["measure measure distance(B) and not measure measure distance(A), so not More(square(A), square(B))", ["B is able to measure measure distance while A is not, so A is not more square than B"]], "negated_asymmetric_conclusion": ["measure measure distance(A) and not measure measure distance(B), so not More(square(B), square(A))", ["A is able to measure measure distance while B is not, so B is not more square than A"]]}
{"original": ["More( gives away the store(A),  gives away the store(B)), so More(generous(A), generous(B))", ["A gives away the store more than B, so A is more generous than B"]], "negated": ["More( gives away the store(A),  gives away the store(B)), so not Less(generous(A), generous(B))", ["A gives away the store more than B, so A is not less generous than B"]], "asymmetric_premise": ["More( gives away the store(B),  gives away the store(A)), so Less(generous(A), generous(B))", ["B gives away the store more than A, so A is less generous than B"]], "asymmetric_conclusion": ["More( gives away the store(A),  gives away the store(B)), so Less(generous(B), generous(A))", ["A gives away the store more than B, so B is less generous than A"]], "negated_asymmetric_premise": ["More( gives away the store(B),  gives away the store(A)), so not More(generous(A), generous(B))", ["B gives away the store more than A, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["More( gives away the store(A),  gives away the store(B)), so not More(generous(B), generous(A))", ["A gives away the store more than B, so B is not more generous than A"]]}
{"original": ["More( is at an outdoor mall(A),  is at an outdoor mall(B)), so More(athletic(A), athletic(B))", ["A is at an outdoor mall more than B, so A is more athletic than B"]], "negated": ["More( is at an outdoor mall(A),  is at an outdoor mall(B)), so not Less(athletic(A), athletic(B))", ["A is at an outdoor mall more than B, so A is not less athletic than B"]], "asymmetric_premise": ["More( is at an outdoor mall(B),  is at an outdoor mall(A)), so Less(athletic(A), athletic(B))", ["B is at an outdoor mall more than A, so A is less athletic than B"]], "asymmetric_conclusion": ["More( is at an outdoor mall(A),  is at an outdoor mall(B)), so Less(athletic(B), athletic(A))", ["A is at an outdoor mall more than B, so B is less athletic than A"]], "negated_asymmetric_premise": ["More( is at an outdoor mall(B),  is at an outdoor mall(A)), so not More(athletic(A), athletic(B))", ["B is at an outdoor mall more than A, so A is not more athletic than B"]], "negated_asymmetric_conclusion": ["More( is at an outdoor mall(A),  is at an outdoor mall(B)), so not More(athletic(B), athletic(A))", ["A is at an outdoor mall more than B, so B is not more athletic than A"]]}
{"original": ["More( gives another person a knowledge(A),  gives another person a knowledge(B)), so More(understanding(A), understanding(B))", ["A gives another person a knowledge more than B, so A is more understanding than B"]], "negated": ["More( gives another person a knowledge(A),  gives another person a knowledge(B)), so not Less(understanding(A), understanding(B))", ["A gives another person a knowledge more than B, so A is not less understanding than B"]], "asymmetric_premise": ["More( gives another person a knowledge(B),  gives another person a knowledge(A)), so Less(understanding(A), understanding(B))", ["B gives another person a knowledge more than A, so A is less understanding than B"]], "asymmetric_conclusion": ["More( gives another person a knowledge(A),  gives another person a knowledge(B)), so Less(understanding(B), understanding(A))", ["A gives another person a knowledge more than B, so B is less understanding than A"]], "negated_asymmetric_premise": ["More( gives another person a knowledge(B),  gives another person a knowledge(A)), so not More(understanding(A), understanding(B))", ["B gives another person a knowledge more than A, so A is not more understanding than B"]], "negated_asymmetric_conclusion": ["More( gives another person a knowledge(A),  gives another person a knowledge(B)), so not More(understanding(B), understanding(A))", ["A gives another person a knowledge more than B, so B is not more understanding than A"]]}
{"original": ["More( extends beyond the limits(A),  extends beyond the limits(B)), so More(persistent(A), persistent(B))", ["A extends beyond the limits more than B, so A is more persistent than B"]], "negated": ["More( extends beyond the limits(A),  extends beyond the limits(B)), so not Less(persistent(A), persistent(B))", ["A extends beyond the limits more than B, so A is not less persistent than B"]], "asymmetric_premise": ["More( extends beyond the limits(B),  extends beyond the limits(A)), so Less(persistent(A), persistent(B))", ["B extends beyond the limits more than A, so A is less persistent than B"]], "asymmetric_conclusion": ["More( extends beyond the limits(A),  extends beyond the limits(B)), so Less(persistent(B), persistent(A))", ["A extends beyond the limits more than B, so B is less persistent than A"]], "negated_asymmetric_premise": ["More( extends beyond the limits(B),  extends beyond the limits(A)), so not More(persistent(A), persistent(B))", ["B extends beyond the limits more than A, so A is not more persistent than B"]], "negated_asymmetric_conclusion": ["More( extends beyond the limits(A),  extends beyond the limits(B)), so not More(persistent(B), persistent(A))", ["A extends beyond the limits more than B, so B is not more persistent than A"]]}
{"original": ["More( has never seen before(A),  has never seen before(B)), so More(curious(A), curious(B))", ["A has never seen before what B has never seen before, so A is more curious than B"]], "negated": ["More( has never seen before(A),  has never seen before(B)), so not Less(curious(A), curious(B))", ["A has never seen before more than B, so A is not less curious than B"]], "asymmetric_premise": ["More( has never seen before(B),  has never seen before(A)), so Less(curious(A), curious(B))", ["B has never seen before more than A, so A is less curious than B"]], "asymmetric_conclusion": ["More( has never seen before(A),  has never seen before(B)), so Less(curious(B), curious(A))", ["A has never seen before more than B, so B is less curious than A"]], "negated_asymmetric_premise": ["More( has never seen before(B),  has never seen before(A)), so not More(curious(A), curious(B))", ["B has never seen before more than A, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["More( has never seen before(A),  has never seen before(B)), so not More(curious(B), curious(A))", ["A has never seen before more than B, so B is not more curious than A"]]}
{"original": ["More( gets anxious(A),  gets anxious(B)), so More(jittery(A), jittery(B))", ["A gets anxious more than B, so A is more jittery than B"]], "negated": ["More( gets anxious(A),  gets anxious(B)), so not Less(jittery(A), jittery(B))", ["A gets anxious more than B, so A is not less jittery than B"]], "asymmetric_premise": ["More( gets anxious(B),  gets anxious(A)), so Less(jittery(A), jittery(B))", ["B gets anxious more than A, so A is less jittery than B"]], "asymmetric_conclusion": ["More( gets anxious(A),  gets anxious(B)), so Less(jittery(B), jittery(A))", ["A gets anxious more than B, so B is less jittery than A"]], "negated_asymmetric_premise": ["More( gets anxious(B),  gets anxious(A)), so not More(jittery(A), jittery(B))", ["B gets anxious more than A, so A is not more jittery than B"]], "negated_asymmetric_conclusion": ["More( gets anxious(A),  gets anxious(B)), so not More(jittery(B), jittery(A))", ["A gets anxious more than B, so B is not more jittery than A"]]}
{"original": ["More( gives another person's position(A),  gives another person's position(B)), so More(careless(A), careless(B))", ["A gives another person's position more than B, so A is more careless than B"]], "negated": ["More( gives another person's position(A),  gives another person's position(B)), so not Less(careless(A), careless(B))", ["A gives another person's position more than B, so A is not less careless than B"]], "asymmetric_premise": ["More( gives another person's position(B),  gives another person's position(A)), so Less(careless(A), careless(B))", ["B gives another person's position more than A, so A is less careless than B"]], "asymmetric_conclusion": ["More( gives another person's position(A),  gives another person's position(B)), so Less(careless(B), careless(A))", ["A gives another person's position more than B, so B is less careless than A"]], "negated_asymmetric_premise": ["More( gives another person's position(B),  gives another person's position(A)), so not More(careless(A), careless(B))", ["B gives another person's position more than A, so A is not more careless than B"]], "negated_asymmetric_conclusion": ["More( gives another person's position(A),  gives another person's position(B)), so not More(careless(B), careless(A))", ["A gives another person's position more than B, so B is not more careless than A"]]}
{"original": ["More( provides another person outlet(A),  provides another person outlet(B)), so More(understanding(A), understanding(B))", ["A provides another person outlet more than B, so A is more understanding than B"]], "negated": ["More( provides another person outlet(A),  provides another person outlet(B)), so not Less(understanding(A), understanding(B))", ["A provides another person outlet more than B, so A is not less understanding than B"]], "asymmetric_premise": ["More( provides another person outlet(B),  provides another person outlet(A)), so Less(understanding(A), understanding(B))", ["B provides another person outlet more than A, so A is less understanding than B"]], "asymmetric_conclusion": ["More( provides another person outlet(A),  provides another person outlet(B)), so Less(understanding(B), understanding(A))", ["A provides another person outlet more than B, so B is less understanding than A"]], "negated_asymmetric_premise": ["More( provides another person outlet(B),  provides another person outlet(A)), so not More(understanding(A), understanding(B))", ["B provides another person outlet more than A, so A is not more understanding than B"]], "negated_asymmetric_conclusion": ["More( provides another person outlet(A),  provides another person outlet(B)), so not More(understanding(B), understanding(A))", ["A provides another person outlet more than B, so B is not more understanding than A"]]}
{"original": ["More( wants to work(A),  wants to work(B)), so More(determined(A), determined(B))", ["A wants to work more than B, so A is more determined than B"]], "negated": ["More( wants to work(A),  wants to work(B)), so not Less(determined(A), determined(B))", ["A wants to work more than B, so A is not less determined than B"]], "asymmetric_premise": ["More( wants to work(B),  wants to work(A)), so Less(determined(A), determined(B))", ["B wants to work more than A, so A is less determined than B"]], "asymmetric_conclusion": ["More( wants to work(A),  wants to work(B)), so Less(determined(B), determined(A))", ["A wants to work more than B, so B is less determined than A"]], "negated_asymmetric_premise": ["More( wants to work(B),  wants to work(A)), so not More(determined(A), determined(B))", ["B wants to work more than A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["More( wants to work(A),  wants to work(B)), so not More(determined(B), determined(A))", ["A wants to work more than B, so B is not more determined than A"]]}
{"original": ["More( uses in their construction(A),  uses in their construction(B)), so More(talented(A), talented(B))", ["A uses in their construction more than B, so A is more talented than B"]], "negated": ["More( uses in their construction(A),  uses in their construction(B)), so not Less(talented(A), talented(B))", ["A uses in their construction more than B, so A is not less talented than B"]], "asymmetric_premise": ["More( uses in their construction(B),  uses in their construction(A)), so Less(talented(A), talented(B))", ["B uses in their construction more than A, so A is less talented than B"]], "asymmetric_conclusion": ["More( uses in their construction(A),  uses in their construction(B)), so Less(talented(B), talented(A))", ["A uses in their construction more than B, so B is less talented than A"]], "negated_asymmetric_premise": ["More( uses in their construction(B),  uses in their construction(A)), so not More(talented(A), talented(B))", ["B uses in their construction more than A, so A is not more talented than B"]], "negated_asymmetric_conclusion": ["More( uses in their construction(A),  uses in their construction(B)), so not More(talented(B), talented(A))", ["A uses in their construction more than B, so B is not more talented than A"]]}
{"original": ["More( hunts the eggs(A),  hunts the eggs(B)), so More(uncivilized(A), uncivilized(B))", ["A hunts the eggs more than B, so A is more uncivilized than B"]], "negated": ["More( hunts the eggs(A),  hunts the eggs(B)), so not Less(uncivilized(A), uncivilized(B))", ["A hunts the eggs more than B, so A is not less uncivilized than B"]], "asymmetric_premise": ["More( hunts the eggs(B),  hunts the eggs(A)), so Less(uncivilized(A), uncivilized(B))", ["B hunts the eggs more than A, so A is less uncivilized than B"]], "asymmetric_conclusion": ["More( hunts the eggs(A),  hunts the eggs(B)), so Less(uncivilized(B), uncivilized(A))", ["A hunts the eggs more than B, so B is less uncivilized than A"]], "negated_asymmetric_premise": ["More( hunts the eggs(B),  hunts the eggs(A)), so not More(uncivilized(A), uncivilized(B))", ["B hunts the eggs more than A, so A is not more uncivilized than B"]], "negated_asymmetric_conclusion": ["More( hunts the eggs(A),  hunts the eggs(B)), so not More(uncivilized(B), uncivilized(A))", ["A hunts the eggs more than B, so B is not more uncivilized than A"]]}
{"original": ["More( severely injured(A),  severely injured(B)), so More(combative(A), combative(B))", ["A has been more severely injured than B, so A is more combative than B"]], "negated": ["More( severely injured(A),  severely injured(B)), so not Less(combative(A), combative(B))", ["A has been more severely injured than B, so A is not less combative than B"]], "asymmetric_premise": ["More( severely injured(B),  severely injured(A)), so Less(combative(A), combative(B))", ["B has been more severely injured than A, so A is less combative than B"]], "asymmetric_conclusion": ["More( severely injured(A),  severely injured(B)), so Less(combative(B), combative(A))", ["A has been more severely injured than B, so B is less combative than A"]], "negated_asymmetric_premise": ["More( severely injured(B),  severely injured(A)), so not More(combative(A), combative(B))", ["B has been more severely injured than A, so A is not more combative than B"]], "negated_asymmetric_conclusion": ["More( severely injured(A),  severely injured(B)), so not More(combative(B), combative(A))", ["A has been more severely injured than B, so B is not more combative than A"]]}
{"original": ["More( names names(A),  names names(B)), so More(mean(A), mean(B))", ["A names names more than B, so A is more mean than B"]], "negated": ["More( names names(A),  names names(B)), so not Less(mean(A), mean(B))", ["A names names more than B, so A is not less mean than B"]], "asymmetric_premise": ["More( names names(B),  names names(A)), so Less(mean(A), mean(B))", ["B names names more than A, so A is less mean than B"]], "asymmetric_conclusion": ["More( names names(A),  names names(B)), so Less(mean(B), mean(A))", ["A names names more than B, so B is less mean than A"]], "negated_asymmetric_premise": ["More( names names(B),  names names(A)), so not More(mean(A), mean(B))", ["B names names more than A, so A is not more mean than B"]], "negated_asymmetric_conclusion": ["More( names names(A),  names names(B)), so not More(mean(B), mean(A))", ["A names names more than B, so B is not more mean than A"]]}
{"original": ["More( loses their job(A),  loses their job(B)), so More(sad(A), sad(B))", ["A loses their job more than B, so A is more sad than B"]], "negated": ["More( loses their job(A),  loses their job(B)), so not Less(sad(A), sad(B))", ["A loses their job more than B, so A is not less sad than B"]], "asymmetric_premise": ["More( loses their job(B),  loses their job(A)), so Less(sad(A), sad(B))", ["B loses their job more than A, so A is less sad than B"]], "asymmetric_conclusion": ["More( loses their job(A),  loses their job(B)), so Less(sad(B), sad(A))", ["A loses their job more than B, so B is less sad than A"]], "negated_asymmetric_premise": ["More( loses their job(B),  loses their job(A)), so not More(sad(A), sad(B))", ["B loses their job more than A, so A is not more sad than B"]], "negated_asymmetric_conclusion": ["More( loses their job(A),  loses their job(B)), so not More(sad(B), sad(A))", ["A loses their job more than B, so B is not more sad than A"]]}
{"original": ["More( sends a message(A),  sends a message(B)), so More(collaborative(A), collaborative(B))", ["A sends a message more than B, so A is more collaborative than B"]], "negated": ["More( sends a message(A),  sends a message(B)), so not Less(collaborative(A), collaborative(B))", ["A sends a message more than B, so A is not less collaborative than B"]], "asymmetric_premise": ["More( sends a message(B),  sends a message(A)), so Less(collaborative(A), collaborative(B))", ["B sends a message more than A, so A is less collaborative than B"]], "asymmetric_conclusion": ["More( sends a message(A),  sends a message(B)), so Less(collaborative(B), collaborative(A))", ["A sends a message more than B, so B is less collaborative than A"]], "negated_asymmetric_premise": ["More( sends a message(B),  sends a message(A)), so not More(collaborative(A), collaborative(B))", ["B sends a message more than A, so A is not more collaborative than B"]], "negated_asymmetric_conclusion": ["More( sends a message(A),  sends a message(B)), so not More(collaborative(B), collaborative(A))", ["A sends a message more than B, so B is not more collaborative than A"]]}
{"original": ["More( has to go to school(A),  has to go to school(B)), so More(good(A), good(B))", ["A has to go to school more than B, so A is more good than B"]], "negated": ["More( has to go to school(A),  has to go to school(B)), so not Less(good(A), good(B))", ["A has to go to school more than B, so A is not less good than B"]], "asymmetric_premise": ["More( has to go to school(B),  has to go to school(A)), so Less(good(A), good(B))", ["B has to go to school more than A, so A is less good than B"]], "asymmetric_conclusion": ["More( has to go to school(A),  has to go to school(B)), so Less(good(B), good(A))", ["A has to go to school more than B, so B is less good than A"]], "negated_asymmetric_premise": ["More( has to go to school(B),  has to go to school(A)), so not More(good(A), good(B))", ["B has to go to school more than A, so A is not more good than B"]], "negated_asymmetric_conclusion": ["More( has to go to school(A),  has to go to school(B)), so not More(good(B), good(A))", ["A has to go to school more than B, so B is not more good than A"]]}
{"original": ["More( likes to hunt(A),  likes to hunt(B)), so More(skilled(A), skilled(B))", ["A likes to hunt more than B, so A is more skilled than B"]], "negated": ["More( likes to hunt(A),  likes to hunt(B)), so not Less(skilled(A), skilled(B))", ["A likes to hunt more than B, so A is not less skilled than B"]], "asymmetric_premise": ["More( likes to hunt(B),  likes to hunt(A)), so Less(skilled(A), skilled(B))", ["B likes to hunt more than A, so A is less skilled than B"]], "asymmetric_conclusion": ["More( likes to hunt(A),  likes to hunt(B)), so Less(skilled(B), skilled(A))", ["A likes to hunt more than B, so B is less skilled than A"]], "negated_asymmetric_premise": ["More( likes to hunt(B),  likes to hunt(A)), so not More(skilled(A), skilled(B))", ["B likes to hunt more than A, so A is not more skilled than B"]], "negated_asymmetric_conclusion": ["More( likes to hunt(A),  likes to hunt(B)), so not More(skilled(B), skilled(A))", ["A likes to hunt more than B, so B is not more skilled than A"]]}
{"original": ["More( gives another person's one(A),  gives another person's one(B)), so More(giving(A), giving(B))", ["A gives another person's one more than B, so A is more giving than B"]], "negated": ["More( gives another person's one(A),  gives another person's one(B)), so not Less(giving(A), giving(B))", ["A gives another person's one more than B, so A is not less giving than B"]], "asymmetric_premise": ["More( gives another person's one(B),  gives another person's one(A)), so Less(giving(A), giving(B))", ["B gives another person's one more than A, so A is less giving than B"]], "asymmetric_conclusion": ["More( gives another person's one(A),  gives another person's one(B)), so Less(giving(B), giving(A))", ["A gives another person's one more than B, so B is less giving than A"]], "negated_asymmetric_premise": ["More( gives another person's one(B),  gives another person's one(A)), so not More(giving(A), giving(B))", ["B gives another person's one more than A, so A is not more giving than B"]], "negated_asymmetric_conclusion": ["More( gives another person's one(A),  gives another person's one(B)), so not More(giving(B), giving(A))", ["A gives another person's one more than B, so B is not more giving than A"]]}
{"original": ["More( sets another person apart(A),  sets another person apart(B)), so More(organized(A), organized(B))", ["A sets another person apart more than B, so A is more organized than B"]], "negated": ["More( sets another person apart(A),  sets another person apart(B)), so not Less(organized(A), organized(B))", ["A sets another person apart more than B, so A is not less organized than B"]], "asymmetric_premise": ["More( sets another person apart(B),  sets another person apart(A)), so Less(organized(A), organized(B))", ["B sets another person apart more than A, so A is less organized than B"]], "asymmetric_conclusion": ["More( sets another person apart(A),  sets another person apart(B)), so Less(organized(B), organized(A))", ["A sets another person apart more than B, so B is less organized than A"]], "negated_asymmetric_premise": ["More( sets another person apart(B),  sets another person apart(A)), so not More(organized(A), organized(B))", ["B sets another person apart more than A, so A is not more organized than B"]], "negated_asymmetric_conclusion": ["More( sets another person apart(A),  sets another person apart(B)), so not More(organized(B), organized(A))", ["A sets another person apart more than B, so B is not more organized than A"]]}
{"original": ["More( kills another person animal(A),  kills another person animal(B)), so More(brutal(A), brutal(B))", ["A kills another person animal more than B, so A is more brutal than B"]], "negated": ["More( kills another person animal(A),  kills another person animal(B)), so not Less(brutal(A), brutal(B))", ["A kills another person animal more than B, so A is not less brutal than B"]], "asymmetric_premise": ["More( kills another person animal(B),  kills another person animal(A)), so Less(brutal(A), brutal(B))", ["B kills another person animal more than A, so A is less brutal than B"]], "asymmetric_conclusion": ["More( kills another person animal(A),  kills another person animal(B)), so Less(brutal(B), brutal(A))", ["A kills another person animal more than B, so B is less brutal than A"]], "negated_asymmetric_premise": ["More( kills another person animal(B),  kills another person animal(A)), so not More(brutal(A), brutal(B))", ["B kills another person animal more than A, so A is not more brutal than B"]], "negated_asymmetric_conclusion": ["More( kills another person animal(A),  kills another person animal(B)), so not More(brutal(B), brutal(A))", ["A kills another person animal more than B, so B is not more brutal than A"]]}
{"original": ["More( draws attention away(A),  draws attention away(B)), so More(outgoing(A), outgoing(B))", ["A draws attention away more than B, so A is more outgoing than B"]], "negated": ["More( draws attention away(A),  draws attention away(B)), so not Less(outgoing(A), outgoing(B))", ["A draws attention away more than B, so A is not less outgoing than B"]], "asymmetric_premise": ["More( draws attention away(B),  draws attention away(A)), so Less(outgoing(A), outgoing(B))", ["B draws attention away more than A, so A is less outgoing than B"]], "asymmetric_conclusion": ["More( draws attention away(A),  draws attention away(B)), so Less(outgoing(B), outgoing(A))", ["A draws attention away more than B, so B is less outgoing than A"]], "negated_asymmetric_premise": ["More( draws attention away(B),  draws attention away(A)), so not More(outgoing(A), outgoing(B))", ["B draws attention away more than A, so A is not more outgoing than B"]], "negated_asymmetric_conclusion": ["More( draws attention away(A),  draws attention away(B)), so not More(outgoing(B), outgoing(A))", ["A draws attention away more than B, so B is not more outgoing than A"]]}
{"original": ["More( sends another person to a school(A),  sends another person to a school(B)), so More(strict(A), strict(B))", ["A sends another person to a school more than B, so A is more strict than B"]], "negated": ["More( sends another person to a school(A),  sends another person to a school(B)), so not Less(strict(A), strict(B))", ["A sends another person to a school more than B, so A is not less strict than B"]], "asymmetric_premise": ["More( sends another person to a school(B),  sends another person to a school(A)), so Less(strict(A), strict(B))", ["B sends another person to a school more than A, so A is less strict than B"]], "asymmetric_conclusion": ["More( sends another person to a school(A),  sends another person to a school(B)), so Less(strict(B), strict(A))", ["A sends another person to a school more than B, so B is less strict than A"]], "negated_asymmetric_premise": ["More( sends another person to a school(B),  sends another person to a school(A)), so not More(strict(A), strict(B))", ["B sends another person to a school more than A, so A is not more strict than B"]], "negated_asymmetric_conclusion": ["More( sends another person to a school(A),  sends another person to a school(B)), so not More(strict(B), strict(A))", ["A sends another person to a school more than B, so B is not more strict than A"]]}
{"original": ["More( forms another person estimate(A),  forms another person estimate(B)), so More(calculating(A), calculating(B))", ["A forms another person estimate more than B, so A is more likely to be calculating than B"]], "negated": ["More( forms another person estimate(A),  forms another person estimate(B)), so not Less(calculating(A), calculating(B))", ["A forms another person estimate more than B, so A is not less capable of calculating than B"]], "asymmetric_premise": ["More( forms another person estimate(B),  forms another person estimate(A)), so Less(calculating(A), calculating(B))", ["B forms another person estimate more than A, so A is less capable of calculating than B"]], "asymmetric_conclusion": ["More( forms another person estimate(A),  forms another person estimate(B)), so Less(calculating(B), calculating(A))", ["A forms another person estimate more than B, so B is less capable of calculating than A"]], "negated_asymmetric_premise": ["More( forms another person estimate(B),  forms another person estimate(A)), so not More(calculating(A), calculating(B))", ["B forms another person estimate more than A, so A is not more capable of calculating than B"]], "negated_asymmetric_conclusion": ["More( forms another person estimate(A),  forms another person estimate(B)), so not More(calculating(B), calculating(A))", ["A forms another person estimate more than B, so B is not more capable of calculating than A"]]}
{"original": ["More( gives their wife(A),  gives their wife(B)), so More(considerate(A), considerate(B))", ["A gives their wife more than B, so A is more considerate than B"]], "negated": ["More( gives their wife(A),  gives their wife(B)), so not Less(considerate(A), considerate(B))", ["A gives their wife more than B, so A is not less considerate than B"]], "asymmetric_premise": ["More( gives their wife(B),  gives their wife(A)), so Less(considerate(A), considerate(B))", ["B gives their wife more than A, so A is less considerate than B"]], "asymmetric_conclusion": ["More( gives their wife(A),  gives their wife(B)), so Less(considerate(B), considerate(A))", ["A gives their wife more than B, so B is less considerate than A"]], "negated_asymmetric_premise": ["More( gives their wife(B),  gives their wife(A)), so not More(considerate(A), considerate(B))", ["B gives their wife more than A, so A is not more considerate than B"]], "negated_asymmetric_conclusion": ["More( gives their wife(A),  gives their wife(B)), so not More(considerate(B), considerate(A))", ["A gives their wife more than B, so B is not more considerate than A"]]}
{"original": ["More( searches all day(A),  searches all day(B)), so More(active(A), active(B))", ["A searches all day more than B, so A is more active than B"]], "negated": ["More( searches all day(A),  searches all day(B)), so not Less(active(A), active(B))", ["A searches all day more than B, so A is not less active than B"]], "asymmetric_premise": ["More( searches all day(B),  searches all day(A)), so Less(active(A), active(B))", ["B searches all day more than A, so A is less active than B"]], "asymmetric_conclusion": ["More( searches all day(A),  searches all day(B)), so Less(active(B), active(A))", ["A searches all day more than B, so B is less active than A"]], "negated_asymmetric_premise": ["More( searches all day(B),  searches all day(A)), so not More(active(A), active(B))", ["B searches all day more than A, so A is not more active than B"]], "negated_asymmetric_conclusion": ["More( searches all day(A),  searches all day(B)), so not More(active(B), active(A))", ["A searches all day more than B, so B is not more active than A"]]}
{"original": ["More( earns their keep(A),  earns their keep(B)), so More(independent(A), independent(B))", ["A earns their keep more than B, so A is more independent than B"]], "negated": ["More( earns their keep(A),  earns their keep(B)), so not Less(independent(A), independent(B))", ["A earns their keep more than B, so A is not less independent than B"]], "asymmetric_premise": ["More( earns their keep(B),  earns their keep(A)), so Less(independent(A), independent(B))", ["B earns their keep more than A, so A is less independent than B"]], "asymmetric_conclusion": ["More( earns their keep(A),  earns their keep(B)), so Less(independent(B), independent(A))", ["A earns their keep more than B, so B is less independent than A"]], "negated_asymmetric_premise": ["More( earns their keep(B),  earns their keep(A)), so not More(independent(A), independent(B))", ["B earns their keep more than A, so A is not more independent than B"]], "negated_asymmetric_conclusion": ["More( earns their keep(A),  earns their keep(B)), so not More(independent(B), independent(A))", ["A earns their keep more than B, so B is not more independent than A"]]}
{"original": ["More( increases their profits(A),  increases their profits(B)), so More(clever(A), clever(B))", ["A increases their profits more than B, so A is more clever than B"]], "negated": ["More( increases their profits(A),  increases their profits(B)), so not Less(clever(A), clever(B))", ["A increases their profits more than B, so A is not less clever than B"]], "asymmetric_premise": ["More( increases their profits(B),  increases their profits(A)), so Less(clever(A), clever(B))", ["B increases their profits more than A, so A is less clever than B"]], "asymmetric_conclusion": ["More( increases their profits(A),  increases their profits(B)), so Less(clever(B), clever(A))", ["A increases their profits more than B, so B is less clever than A"]], "negated_asymmetric_premise": ["More( increases their profits(B),  increases their profits(A)), so not More(clever(A), clever(B))", ["B increases their profits more than A, so A is not more clever than B"]], "negated_asymmetric_conclusion": ["More( increases their profits(A),  increases their profits(B)), so not More(clever(B), clever(A))", ["A increases their profits more than B, so B is not more clever than A"]]}
{"original": ["More( plays fast and loose(A),  plays fast and loose(B)), so More(unsucess(A), unsucess(B))", ["A plays fast and loose more than B, so A is more unsucess than B"]], "negated": ["More( plays fast and loose(A),  plays fast and loose(B)), so not Less(unsucess(A), unsucess(B))", ["A plays fast and loose more than B, so A is not less unsucess than B"]], "asymmetric_premise": ["More( plays fast and loose(B),  plays fast and loose(A)), so Less(unsucess(A), unsucess(B))", ["B plays fast and loose more than A, so A is less unsucess than B"]], "asymmetric_conclusion": ["More( plays fast and loose(A),  plays fast and loose(B)), so Less(unsucess(B), unsucess(A))", ["A plays fast and loose more than B, so B is less unsucess than A"]], "negated_asymmetric_premise": ["More( plays fast and loose(B),  plays fast and loose(A)), so not More(unsucess(A), unsucess(B))", ["B plays fast and loose more than A, so A is not more unsucess than B"]], "negated_asymmetric_conclusion": ["More( plays fast and loose(A),  plays fast and loose(B)), so not More(unsucess(B), unsucess(A))", ["A plays fast and loose more than B, so B is not more unsucess than A"]]}
{"original": ["More( protects their privacy(A),  protects their privacy(B)), so More(responsible(A), responsible(B))", ["A protects their privacy more than B, so A is more responsible than B"]], "negated": ["More( protects their privacy(A),  protects their privacy(B)), so not Less(responsible(A), responsible(B))", ["A protects their privacy more than B, so A is not less responsible than B"]], "asymmetric_premise": ["More( protects their privacy(B),  protects their privacy(A)), so Less(responsible(A), responsible(B))", ["B protects their privacy more than A, so A is less responsible than B"]], "asymmetric_conclusion": ["More( protects their privacy(A),  protects their privacy(B)), so Less(responsible(B), responsible(A))", ["A protects their privacy more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["More( protects their privacy(B),  protects their privacy(A)), so not More(responsible(A), responsible(B))", ["B protects their privacy more than A, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["More( protects their privacy(A),  protects their privacy(B)), so not More(responsible(B), responsible(A))", ["A protects their privacy more than B, so B is not more responsible than A"]]}
{"original": ["More( comes home to another person(A),  comes home to another person(B)), so More(responsible(A), responsible(B))", ["A comes home to another person more than B, so A is more responsible than B"]], "negated": ["More( comes home to another person(A),  comes home to another person(B)), so not Less(responsible(A), responsible(B))", ["A comes home to another person more than B, so A is not less responsible than B"]], "asymmetric_premise": ["More( comes home to another person(B),  comes home to another person(A)), so Less(responsible(A), responsible(B))", ["B comes home to another person more than A, so A is less responsible than B"]], "asymmetric_conclusion": ["More( comes home to another person(A),  comes home to another person(B)), so Less(responsible(B), responsible(A))", ["A comes home to another person more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["More( comes home to another person(B),  comes home to another person(A)), so not More(responsible(A), responsible(B))", ["B comes home to another person more than A, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["More( comes home to another person(A),  comes home to another person(B)), so not More(responsible(B), responsible(A))", ["A comes home to another person more than B, so B is not more responsible than A"]]}
{"original": ["More( gets a cup of coffee(A),  gets a cup of coffee(B)), so More(fatigued(A), fatigued(B))", ["A gets a cup of coffee more than B, so A is more fatigued than B"]], "negated": ["More( gets a cup of coffee(A),  gets a cup of coffee(B)), so not Less(fatigued(A), fatigued(B))", ["A gets a cup of coffee more than B, so A is not less fatigued than B"]], "asymmetric_premise": ["More( gets a cup of coffee(B),  gets a cup of coffee(A)), so Less(fatigued(A), fatigued(B))", ["B gets a cup of coffee more than A, so A is less fatigued than B"]], "asymmetric_conclusion": ["More( gets a cup of coffee(A),  gets a cup of coffee(B)), so Less(fatigued(B), fatigued(A))", ["A gets a cup of coffee more than B, so B is less fatigued than A"]], "negated_asymmetric_premise": ["More( gets a cup of coffee(B),  gets a cup of coffee(A)), so not More(fatigued(A), fatigued(B))", ["B gets a cup of coffee more than A, so A is not more fatigued than B"]], "negated_asymmetric_conclusion": ["More( gets a cup of coffee(A),  gets a cup of coffee(B)), so not More(fatigued(B), fatigued(A))", ["A gets a cup of coffee more than B, so B is not more fatigued than A"]]}
{"original": ["More( starts looking for a new job(A),  starts looking for a new job(B)), so More(proactive(A), proactive(B))", ["A starts looking for a new job more than B, so A is more proactive than B"]], "negated": ["More( starts looking for a new job(A),  starts looking for a new job(B)), so not Less(proactive(A), proactive(B))", ["A starts looking for a new job more than B, so A is not less proactive than B"]], "asymmetric_premise": ["More( starts looking for a new job(B),  starts looking for a new job(A)), so Less(proactive(A), proactive(B))", ["B starts looking for a new job more than A, so A is less proactive than B"]], "asymmetric_conclusion": ["More( starts looking for a new job(A),  starts looking for a new job(B)), so Less(proactive(B), proactive(A))", ["A starts looking for a new job more than B, so B is less proactive than A"]], "negated_asymmetric_premise": ["More( starts looking for a new job(B),  starts looking for a new job(A)), so not More(proactive(A), proactive(B))", ["B starts looking for a new job more than A, so A is not more proactive than B"]], "negated_asymmetric_conclusion": ["More( starts looking for a new job(A),  starts looking for a new job(B)), so not More(proactive(B), proactive(A))", ["A starts looking for a new job more than B, so B is not more proactive than A"]]}
{"original": ["More( hits below their weight(A),  hits below their weight(B)), so More(quick(A), quick(B))", ["A hits below their weight more than B, so A is more quick than B"]], "negated": ["More( hits below their weight(A),  hits below their weight(B)), so not Less(quick(A), quick(B))", ["A hits below their weight more than B, so A is not less quick than B"]], "asymmetric_premise": ["More( hits below their weight(B),  hits below their weight(A)), so Less(quick(A), quick(B))", ["B hits below their weight more than A, so A is less quick than B"]], "asymmetric_conclusion": ["More( hits below their weight(A),  hits below their weight(B)), so Less(quick(B), quick(A))", ["A hits below their weight more than B, so B is less quick than A"]], "negated_asymmetric_premise": ["More( hits below their weight(B),  hits below their weight(A)), so not More(quick(A), quick(B))", ["B hits below their weight more than A, so A is not more quick than B"]], "negated_asymmetric_conclusion": ["More( hits below their weight(A),  hits below their weight(B)), so not More(quick(B), quick(A))", ["A hits below their weight more than B, so B is not more quick than A"]]}
{"original": ["More( makes a break for it(A),  makes a break for it(B)), so More(risky(A), risky(B))", ["A makes a break for it more than B, so A is more risky than B"]], "negated": ["More( makes a break for it(A),  makes a break for it(B)), so not Less(risky(A), risky(B))", ["A makes a break for it more than B, so A is not less risky than B"]], "asymmetric_premise": ["More( makes a break for it(B),  makes a break for it(A)), so Less(risky(A), risky(B))", ["B makes a break for it more than A, so A is less risky than B"]], "asymmetric_conclusion": ["More( makes a break for it(A),  makes a break for it(B)), so Less(risky(B), risky(A))", ["A makes a break for it more than B, so B is less risky than A"]], "negated_asymmetric_premise": ["More( makes a break for it(B),  makes a break for it(A)), so not More(risky(A), risky(B))", ["B makes a break for it more than A, so A is not more risky than B"]], "negated_asymmetric_conclusion": ["More( makes a break for it(A),  makes a break for it(B)), so not More(risky(B), risky(A))", ["A makes a break for it more than B, so B is not more risky than A"]]}
{"original": ["More( is at the grocery store with their mom(A),  is at the grocery store with their mom(B)), so More(needed(A), needed(B))", ["A is at the grocery store with their mom more than B, so A is more needed than B"]], "negated": ["More( is at the grocery store with their mom(A),  is at the grocery store with their mom(B)), so not Less(needed(A), needed(B))", ["A is at the grocery store with their mom more than B, so A is not less needed than B"]], "asymmetric_premise": ["More( is at the grocery store with their mom(B),  is at the grocery store with their mom(A)), so Less(needed(A), needed(B))", ["B is at the grocery store with their mom more than A, so A is less needed than B"]], "asymmetric_conclusion": ["More( is at the grocery store with their mom(A),  is at the grocery store with their mom(B)), so Less(needed(B), needed(A))", ["A is at the grocery store with their mom more than B, so B is less needed than A"]], "negated_asymmetric_premise": ["More( is at the grocery store with their mom(B),  is at the grocery store with their mom(A)), so not More(needed(A), needed(B))", ["B is at the grocery store with their mom while A is not, so A is not more needed than B"]], "negated_asymmetric_conclusion": ["More( is at the grocery store with their mom(A),  is at the grocery store with their mom(B)), so not More(needed(B), needed(A))", ["A is at the grocery store with their mom more than B, so B is not more needed than A"]]}
{"original": ["More( reaches another person level(A),  reaches another person level(B)), so More(prepared(A), prepared(B))", ["A reaches another person level more than B, so A is more prepared than B"]], "negated": ["More( reaches another person level(A),  reaches another person level(B)), so not Less(prepared(A), prepared(B))", ["A reaches another person level more than B, so A is not less prepared than B"]], "asymmetric_premise": ["More( reaches another person level(B),  reaches another person level(A)), so Less(prepared(A), prepared(B))", ["B reaches another person level more than A, so A is less prepared than B"]], "asymmetric_conclusion": ["More( reaches another person level(A),  reaches another person level(B)), so Less(prepared(B), prepared(A))", ["A reaches another person level more than B, so B is less prepared than A"]], "negated_asymmetric_premise": ["More( reaches another person level(B),  reaches another person level(A)), so not More(prepared(A), prepared(B))", ["B reaches another person level more than A, so A is not more prepared than B"]], "negated_asymmetric_conclusion": ["More( reaches another person level(A),  reaches another person level(B)), so not More(prepared(B), prepared(A))", ["A reaches another person level more than B, so B is not more prepared than A"]]}
{"original": ["More( fills another person's tank(A),  fills another person's tank(B)), so More(dutiful(A), dutiful(B))", ["A fills another person's tank more than B, so A is more dutiful than B"]], "negated": ["More( fills another person's tank(A),  fills another person's tank(B)), so not Less(dutiful(A), dutiful(B))", ["A fills another person's tank more than B, so A is not less dutiful than B"]], "asymmetric_premise": ["More( fills another person's tank(B),  fills another person's tank(A)), so Less(dutiful(A), dutiful(B))", ["B fills another person's tank more than A, so A is less dutiful than B"]], "asymmetric_conclusion": ["More( fills another person's tank(A),  fills another person's tank(B)), so Less(dutiful(B), dutiful(A))", ["A fills another person's tank more than B, so B is less dutiful than A"]], "negated_asymmetric_premise": ["More( fills another person's tank(B),  fills another person's tank(A)), so not More(dutiful(A), dutiful(B))", ["B fills another person's tank more than A, so A is not more dutiful than B"]], "negated_asymmetric_conclusion": ["More( fills another person's tank(A),  fills another person's tank(B)), so not More(dutiful(B), dutiful(A))", ["A fills another person's tank more than B, so B is not more dutiful than A"]]}
{"original": ["More( starts flirting with another person(A),  starts flirting with another person(B)), so More(engaged(A), engaged(B))", ["A starts flirting with another person more than B, so A is more engaged than B"]], "negated": ["More( starts flirting with another person(A),  starts flirting with another person(B)), so not Less(engaged(A), engaged(B))", ["A starts flirting with another person more than B, so A is not less engaged than B"]], "asymmetric_premise": ["More( starts flirting with another person(B),  starts flirting with another person(A)), so Less(engaged(A), engaged(B))", ["B starts flirting with another person more than A, so A is less engaged than B"]], "asymmetric_conclusion": ["More( starts flirting with another person(A),  starts flirting with another person(B)), so Less(engaged(B), engaged(A))", ["A starts flirting with another person more than B, so B is less engaged than A"]], "negated_asymmetric_premise": ["More( starts flirting with another person(B),  starts flirting with another person(A)), so not More(engaged(A), engaged(B))", ["B starts flirting with another person more than A, so A is not more engaged than B"]], "negated_asymmetric_conclusion": ["More( starts flirting with another person(A),  starts flirting with another person(B)), so not More(engaged(B), engaged(A))", ["A starts flirting with another person more than B, so B is not more engaged than A"]]}
{"original": ["More( brings another person into line(A),  brings another person into line(B)), so More(strong(A), strong(B))", ["A brings another person into line more than B, so A is more strong than B"]], "negated": ["More( brings another person into line(A),  brings another person into line(B)), so not Less(strong(A), strong(B))", ["A brings another person into line more than B, so A is not less strong than B"]], "asymmetric_premise": ["More( brings another person into line(B),  brings another person into line(A)), so Less(strong(A), strong(B))", ["B brings another person into line more than A, so A is less strong than B"]], "asymmetric_conclusion": ["More( brings another person into line(A),  brings another person into line(B)), so Less(strong(B), strong(A))", ["A brings another person into line more than B, so B is less strong than A"]], "negated_asymmetric_premise": ["More( brings another person into line(B),  brings another person into line(A)), so not More(strong(A), strong(B))", ["B brings another person into line more than A, so A is not more strong than B"]], "negated_asymmetric_conclusion": ["More( brings another person into line(A),  brings another person into line(B)), so not More(strong(B), strong(A))", ["A brings another person into line more than B, so B is not more strong than A"]]}
{"original": ["More( reaps the harvest(A),  reaps the harvest(B)), so More(skillful(A), skillful(B))", ["A reaps the harvest more than B, so A is more skillful than B"]], "negated": ["More( reaps the harvest(A),  reaps the harvest(B)), so not Less(skillful(A), skillful(B))", ["A reaps the harvest more than B, so A is not less skillful than B"]], "asymmetric_premise": ["More( reaps the harvest(B),  reaps the harvest(A)), so Less(skillful(A), skillful(B))", ["B reaps the harvest more than A, so A is less skillful than B"]], "asymmetric_conclusion": ["More( reaps the harvest(A),  reaps the harvest(B)), so Less(skillful(B), skillful(A))", ["A reaps the harvest more than B, so B is less skillful than A"]], "negated_asymmetric_premise": ["More( reaps the harvest(B),  reaps the harvest(A)), so not More(skillful(A), skillful(B))", ["B reaps the harvest more than A, so A is not more skillful than B"]], "negated_asymmetric_conclusion": ["More( reaps the harvest(A),  reaps the harvest(B)), so not More(skillful(B), skillful(A))", ["A reaps the harvest more than B, so B is not more skillful than A"]]}
{"original": ["More( invites another person to visit(A),  invites another person to visit(B)), so More(kind(A), kind(B))", ["A invites another person to visit more than B, so A is more kind than B"]], "negated": ["More( invites another person to visit(A),  invites another person to visit(B)), so not Less(kind(A), kind(B))", ["A invites another person to visit more than B, so A is not less kind than B"]], "asymmetric_premise": ["More( invites another person to visit(B),  invites another person to visit(A)), so Less(kind(A), kind(B))", ["B invites another person to visit more than A, so A is less kind than B"]], "asymmetric_conclusion": ["More( invites another person to visit(A),  invites another person to visit(B)), so Less(kind(B), kind(A))", ["A invites another person to visit more than B, so B is less kind than A"]], "negated_asymmetric_premise": ["More( invites another person to visit(B),  invites another person to visit(A)), so not More(kind(A), kind(B))", ["B invites another person to visit more than A, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["More( invites another person to visit(A),  invites another person to visit(B)), so not More(kind(B), kind(A))", ["A invites another person to visit more than B, so B is not more kind than A"]]}
{"original": ["More( is able to drive(A),  is able to drive(B)), so More(skilled(A), skilled(B))", ["A is able to drive more than B, so A is more skilled than B"]], "negated": ["More( is able to drive(A),  is able to drive(B)), so not Less(skilled(A), skilled(B))", ["A is able to drive more than B, so A is not less skilled than B"]], "asymmetric_premise": ["More( is able to drive(B),  is able to drive(A)), so Less(skilled(A), skilled(B))", ["B is able to drive more than A, so A is less skilled than B"]], "asymmetric_conclusion": ["More( is able to drive(A),  is able to drive(B)), so Less(skilled(B), skilled(A))", ["A is able to drive more than B, so B is less skilled than A"]], "negated_asymmetric_premise": ["More( is able to drive(B),  is able to drive(A)), so not More(skilled(A), skilled(B))", ["B is able to drive more than A, so A is not more skilled than B"]], "negated_asymmetric_conclusion": ["More( is able to drive(A),  is able to drive(B)), so not More(skilled(B), skilled(A))", ["A is able to drive more than B, so B is not more skilled than A"]]}
{"original": ["More( performs their tasks(A),  performs their tasks(B)), so More(hardworking(A), hardworking(B))", ["A performs their tasks more than B, so A is more hardworking than B"]], "negated": ["More( performs their tasks(A),  performs their tasks(B)), so not Less(hardworking(A), hardworking(B))", ["A performs their tasks more than B, so A is not less hardworking than B"]], "asymmetric_premise": ["More( performs their tasks(B),  performs their tasks(A)), so Less(hardworking(A), hardworking(B))", ["B performs their tasks more than A, so A is less hardworking than B"]], "asymmetric_conclusion": ["More( performs their tasks(A),  performs their tasks(B)), so Less(hardworking(B), hardworking(A))", ["A performs their tasks more than B, so B is less hardworking than A"]], "negated_asymmetric_premise": ["More( performs their tasks(B),  performs their tasks(A)), so not More(hardworking(A), hardworking(B))", ["B performs their tasks more than A, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": ["More( performs their tasks(A),  performs their tasks(B)), so not More(hardworking(B), hardworking(A))", ["A performs their tasks more than B, so B is not more hardworking than A"]]}
{"original": ["More( takes another person's seats(A),  takes another person's seats(B)), so More(rude(A), rude(B))", ["A takes another person's seats more than B, so A is more rude than B"]], "negated": ["More( takes another person's seats(A),  takes another person's seats(B)), so not Less(rude(A), rude(B))", ["A takes another person's seats more than B, so A is not less rude than B"]], "asymmetric_premise": ["More( takes another person's seats(B),  takes another person's seats(A)), so Less(rude(A), rude(B))", ["B takes another person's seats more than A, so A is less rude than B"]], "asymmetric_conclusion": ["More( takes another person's seats(A),  takes another person's seats(B)), so Less(rude(B), rude(A))", ["A takes another person's seats more than B, so B is less rude than A"]], "negated_asymmetric_premise": ["More( takes another person's seats(B),  takes another person's seats(A)), so not More(rude(A), rude(B))", ["B takes another person's seats more than A, so A is not more rude than B"]], "negated_asymmetric_conclusion": ["More( takes another person's seats(A),  takes another person's seats(B)), so not More(rude(B), rude(A))", ["A takes another person's seats more than B, so B is not more rude than A"]]}
{"original": ["More( sits down on another person's bed(A),  sits down on another person's bed(B)), so More(sleepy(A), sleepy(B))", ["A sits down on another person's bed more than B, so A is more sleepy than B"]], "negated": ["More( sits down on another person's bed(A),  sits down on another person's bed(B)), so not Less(sleepy(A), sleepy(B))", ["A sits down on another person's bed more than B, so A is not less sleepy than B"]], "asymmetric_premise": ["More( sits down on another person's bed(B),  sits down on another person's bed(A)), so Less(sleepy(A), sleepy(B))", ["B sits down on another person's bed more than A, so A is less sleepy than B"]], "asymmetric_conclusion": ["More( sits down on another person's bed(A),  sits down on another person's bed(B)), so Less(sleepy(B), sleepy(A))", ["A sits down on another person's bed more than B, so B is less sleepy than A"]], "negated_asymmetric_premise": ["More( sits down on another person's bed(B),  sits down on another person's bed(A)), so not More(sleepy(A), sleepy(B))", ["B sits down on another person's bed more than A, so A is not more sleepy than B"]], "negated_asymmetric_conclusion": ["More( sits down on another person's bed(A),  sits down on another person's bed(B)), so not More(sleepy(B), sleepy(A))", ["A sits down on another person's bed more than B, so B is not more sleepy than A"]]}
{"original": ["More( picks a fight with another person(A),  picks a fight with another person(B)), so More(foolish(A), foolish(B))", ["A picks a fight with another person more than B, so A is more foolish than B"]], "negated": ["More( picks a fight with another person(A),  picks a fight with another person(B)), so not Less(foolish(A), foolish(B))", ["A picks a fight with another person more than B, so A is not less foolish than B"]], "asymmetric_premise": ["More( picks a fight with another person(B),  picks a fight with another person(A)), so Less(foolish(A), foolish(B))", ["B picks a fight with another person more than A, so A is less foolish than B"]], "asymmetric_conclusion": ["More( picks a fight with another person(A),  picks a fight with another person(B)), so Less(foolish(B), foolish(A))", ["A picks a fight with another person more than B, so B is less foolish than A"]], "negated_asymmetric_premise": ["More( picks a fight with another person(B),  picks a fight with another person(A)), so not More(foolish(A), foolish(B))", ["B picks a fight with another person more than A, so A is not more foolish than B"]], "negated_asymmetric_conclusion": ["More( picks a fight with another person(A),  picks a fight with another person(B)), so not More(foolish(B), foolish(A))", ["A picks a fight with another person more than B, so B is not more foolish than A"]]}
{"original": ["More( visits their relatives(A),  visits their relatives(B)), so More(thoughtful(A), thoughtful(B))", ["A visits their relatives more than B, so A is more thoughtful than B"]], "negated": ["More( visits their relatives(A),  visits their relatives(B)), so not Less(thoughtful(A), thoughtful(B))", ["A visits their relatives more than B, so A is not less thoughtful than B"]], "asymmetric_premise": ["More( visits their relatives(B),  visits their relatives(A)), so Less(thoughtful(A), thoughtful(B))", ["B visits their relatives more than A, so A is less thoughtful than B"]], "asymmetric_conclusion": ["More( visits their relatives(A),  visits their relatives(B)), so Less(thoughtful(B), thoughtful(A))", ["A visits their relatives more than B, so B is less thoughtful than A"]], "negated_asymmetric_premise": ["More( visits their relatives(B),  visits their relatives(A)), so not More(thoughtful(A), thoughtful(B))", ["B visits their relatives more than A, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": ["More( visits their relatives(A),  visits their relatives(B)), so not More(thoughtful(B), thoughtful(A))", ["A visits their relatives more than B, so B is not more thoughtful than A"]]}
{"original": ["More( washes their truck(A),  washes their truck(B)), so More(tidy(A), tidy(B))", ["A washes their truck more than B, so A is more tidy than B"]], "negated": ["More( washes their truck(A),  washes their truck(B)), so not Less(tidy(A), tidy(B))", ["A washes their truck more than B, so A is not less tidy than B"]], "asymmetric_premise": ["More( washes their truck(B),  washes their truck(A)), so Less(tidy(A), tidy(B))", ["B washes their truck more than A, so A is less tidy than B"]], "asymmetric_conclusion": ["More( washes their truck(A),  washes their truck(B)), so Less(tidy(B), tidy(A))", ["A washes their truck more than B, so B is less tidy than A"]], "negated_asymmetric_premise": ["More( washes their truck(B),  washes their truck(A)), so not More(tidy(A), tidy(B))", ["B washes their truck more than A, so A is not more tidy than B"]], "negated_asymmetric_conclusion": ["More( washes their truck(A),  washes their truck(B)), so not More(tidy(B), tidy(A))", ["A washes their truck more than B, so B is not more tidy than A"]]}
{"original": ["More( turns their lights(A),  turns their lights(B)), so More(responsible(A), responsible(B))", ["A turns their lights more than B, so A is more responsible than B"]], "negated": ["More( turns their lights(A),  turns their lights(B)), so not Less(responsible(A), responsible(B))", ["A turns their lights more than B, so A is not less responsible than B"]], "asymmetric_premise": ["More( turns their lights(B),  turns their lights(A)), so Less(responsible(A), responsible(B))", ["B turns their lights more than A, so A is less responsible than B"]], "asymmetric_conclusion": ["More( turns their lights(A),  turns their lights(B)), so Less(responsible(B), responsible(A))", ["A turns their lights more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["More( turns their lights(B),  turns their lights(A)), so not More(responsible(A), responsible(B))", ["B turns their lights more than A, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["More( turns their lights(A),  turns their lights(B)), so not More(responsible(B), responsible(A))", ["A turns their lights more than B, so B is not more responsible than A"]]}
{"original": ["More( is at the mall with another person's friends(A),  is at the mall with another person's friends(B)), so More(happy(A), happy(B))", ["A is at the mall with another person's friends more than B, so A is more happy than B"]], "negated": ["More( is at the mall with another person's friends(A),  is at the mall with another person's friends(B)), so not Less(happy(A), happy(B))", ["A is at the mall with another person's friends more than B, so A is not less happy than B"]], "asymmetric_premise": ["More( is at the mall with another person's friends(B),  is at the mall with another person's friends(A)), so Less(happy(A), happy(B))", ["B is at the mall with another person's friends more than A, so A is less happy than B"]], "asymmetric_conclusion": ["More( is at the mall with another person's friends(A),  is at the mall with another person's friends(B)), so Less(happy(B), happy(A))", ["A is at the mall with another person's friends more than B, so B is less happy than A"]], "negated_asymmetric_premise": ["More( is at the mall with another person's friends(B),  is at the mall with another person's friends(A)), so not More(happy(A), happy(B))", ["B is at the mall with another person's friends more than A, so A is not more happy than B"]], "negated_asymmetric_conclusion": ["More( is at the mall with another person's friends(A),  is at the mall with another person's friends(B)), so not More(happy(B), happy(A))", ["A is at the mall with another person's friends more than B, so B is not more happy than A"]]}
{"original": ["More( keeps quiet(A),  keeps quiet(B)), so More(scared(A), scared(B))", ["A keeps quiet while B does not, so A is more scared than B"]], "negated": ["More( keeps quiet(A),  keeps quiet(B)), so not Less(scared(A), scared(B))", ["A keeps quiet more than B, so A is not less scared than B"]], "asymmetric_premise": ["More( keeps quiet(B),  keeps quiet(A)), so Less(scared(A), scared(B))", ["B keeps quiet more than A, so A is less scared than B"]], "asymmetric_conclusion": ["More( keeps quiet(A),  keeps quiet(B)), so Less(scared(B), scared(A))", ["A keeps quiet more than B, so B is less scared than A"]], "negated_asymmetric_premise": ["More( keeps quiet(B),  keeps quiet(A)), so not More(scared(A), scared(B))", ["B keeps quiet while A does not, so A is not more scared than B"]], "negated_asymmetric_conclusion": ["More( keeps quiet(A),  keeps quiet(B)), so not More(scared(B), scared(A))", ["A keeps quiet more than B, so B is not more scared than A"]]}
{"original": ["More( receives a job offer(A),  receives a job offer(B)), so More(skilled(A), skilled(B))", ["A receives a job offer more than B, so A is more skilled than B"]], "negated": ["More( receives a job offer(A),  receives a job offer(B)), so not Less(skilled(A), skilled(B))", ["A receives a job offer more than B, so A is not less skilled than B"]], "asymmetric_premise": ["More( receives a job offer(B),  receives a job offer(A)), so Less(skilled(A), skilled(B))", ["B receives a job offer more than A, so A is less skilled than B"]], "asymmetric_conclusion": ["More( receives a job offer(A),  receives a job offer(B)), so Less(skilled(B), skilled(A))", ["A receives a job offer more than B, so B is less skilled than A"]], "negated_asymmetric_premise": ["More( receives a job offer(B),  receives a job offer(A)), so not More(skilled(A), skilled(B))", ["B receives a job offer more than A, so A is not more skilled than B"]], "negated_asymmetric_conclusion": ["More( receives a job offer(A),  receives a job offer(B)), so not More(skilled(B), skilled(A))", ["A receives a job offer more than B, so B is not more skilled than A"]]}
{"original": ["More( has made a mistake(A),  has made a mistake(B)), so More(remorseful(A), remorseful(B))", ["A has made a mistake more than B, so A is more remorseful than B"]], "negated": ["More( has made a mistake(A),  has made a mistake(B)), so not Less(remorseful(A), remorseful(B))", ["A has made a mistake more than B, so A is not less remorseful than B"]], "asymmetric_premise": ["More( has made a mistake(B),  has made a mistake(A)), so Less(remorseful(A), remorseful(B))", ["B has made a mistake more than A, so A is less remorseful than B"]], "asymmetric_conclusion": ["More( has made a mistake(A),  has made a mistake(B)), so Less(remorseful(B), remorseful(A))", ["A has made a mistake more than B, so B is less remorseful than A"]], "negated_asymmetric_premise": ["More( has made a mistake(B),  has made a mistake(A)), so not More(remorseful(A), remorseful(B))", ["B has made a mistake, so A is not more remorseful than B"]], "negated_asymmetric_conclusion": ["More( has made a mistake(A),  has made a mistake(B)), so not More(remorseful(B), remorseful(A))", ["A has made a mistake more than B, so B is not more remorseful than A"]]}
{"original": ["More( is taking care of another person(A),  is taking care of another person(B)), so More(caring(A), caring(B))", ["A is taking care of another person more than B, so A is more caring than B"]], "negated": ["More( is taking care of another person(A),  is taking care of another person(B)), so not Less(caring(A), caring(B))", ["A is taking care of another person more than B, so A is not less caring than B"]], "asymmetric_premise": ["More( is taking care of another person(B),  is taking care of another person(A)), so Less(caring(A), caring(B))", ["B is taking care of another person more than A, so A is less caring than B"]], "asymmetric_conclusion": ["More( is taking care of another person(A),  is taking care of another person(B)), so Less(caring(B), caring(A))", ["A is taking care of another person more than B, so B is less caring than A"]], "negated_asymmetric_premise": ["More( is taking care of another person(B),  is taking care of another person(A)), so not More(caring(A), caring(B))", ["B is taking care of another person more than A, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["More( is taking care of another person(A),  is taking care of another person(B)), so not More(caring(B), caring(A))", ["A is taking care of another person more than B, so B is not more caring than A"]]}
{"original": ["More( smells so good(A),  smells so good(B)), so More(tactful(A), tactful(B))", ["A smells so good than B, so A is more tactful than B"]], "negated": ["More( smells so good(A),  smells so good(B)), so not Less(tactful(A), tactful(B))", ["A smells so good, so A is not less tactful than B"]], "asymmetric_premise": ["More( smells so good(B),  smells so good(A)), so Less(tactful(A), tactful(B))", ["B smells so good, so A is less tactful than B"]], "asymmetric_conclusion": ["More( smells so good(A),  smells so good(B)), so Less(tactful(B), tactful(A))", ["A smells so good than B, so B is less tactful than A"]], "negated_asymmetric_premise": ["More( smells so good(B),  smells so good(A)), so not More(tactful(A), tactful(B))", ["B smells so good while A does not, so A is not more tactful than B"]], "negated_asymmetric_conclusion": ["More( smells so good(A),  smells so good(B)), so not More(tactful(B), tactful(A))", ["A smells so good, so B is not more tactful than A"]]}
{"original": ["More( notices right away(A),  notices right away(B)), so More(aware(A), aware(B))", ["A notices right away more than B, so A is more aware than B"]], "negated": ["More( notices right away(A),  notices right away(B)), so not Less(aware(A), aware(B))", ["A notices right away more than B, so A is not less aware than B"]], "asymmetric_premise": ["More( notices right away(B),  notices right away(A)), so Less(aware(A), aware(B))", ["B notices right away more than A, so A is less aware than B"]], "asymmetric_conclusion": ["More( notices right away(A),  notices right away(B)), so Less(aware(B), aware(A))", ["A notices right away more than B, so B is less aware than A"]], "negated_asymmetric_premise": ["More( notices right away(B),  notices right away(A)), so not More(aware(A), aware(B))", ["B notices right away more than A, so A is not more aware than B"]], "negated_asymmetric_conclusion": ["More( notices right away(A),  notices right away(B)), so not More(aware(B), aware(A))", ["A notices right away more than B, so B is not more aware than A"]]}
{"original": ["More( makes their name(A),  makes their name(B)), so More(important(A), important(B))", ["A makes their name more than B, so A is more important than B"]], "negated": ["More( makes their name(A),  makes their name(B)), so not Less(important(A), important(B))", ["A makes their name more than B, so A is not less important than B"]], "asymmetric_premise": ["More( makes their name(B),  makes their name(A)), so Less(important(A), important(B))", ["B makes their name more than A, so A is less important than B"]], "asymmetric_conclusion": ["More( makes their name(A),  makes their name(B)), so Less(important(B), important(A))", ["A makes their name more than B, so B is less important than A"]], "negated_asymmetric_premise": ["More( makes their name(B),  makes their name(A)), so not More(important(A), important(B))", ["B makes their name more than A, so A is not more important than B"]], "negated_asymmetric_conclusion": ["More( makes their name(A),  makes their name(B)), so not More(important(B), important(A))", ["A makes their name more than B, so B is not more important than A"]]}
{"original": ["More( tries everything(A),  tries everything(B)), so More(curious(A), curious(B))", ["A tries everything more than B, so A is more curious than B"]], "negated": ["More( tries everything(A),  tries everything(B)), so not Less(curious(A), curious(B))", ["A tries everything more than B, so A is not less curious than B"]], "asymmetric_premise": ["More( tries everything(B),  tries everything(A)), so Less(curious(A), curious(B))", ["B tries everything more than A, so A is less curious than B"]], "asymmetric_conclusion": ["More( tries everything(A),  tries everything(B)), so Less(curious(B), curious(A))", ["A tries everything more than B, so B is less curious than A"]], "negated_asymmetric_premise": ["More( tries everything(B),  tries everything(A)), so not More(curious(A), curious(B))", ["B tries everything more than A, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["More( tries everything(A),  tries everything(B)), so not More(curious(B), curious(A))", ["A tries everything more than B, so B is not more curious than A"]]}
{"original": ["More( opens their car(A),  opens their car(B)), so More(normal(A), normal(B))", ["A opens their car more than B, so A is more normal than B"]], "negated": ["More( opens their car(A),  opens their car(B)), so not Less(normal(A), normal(B))", ["A opens their car more than B, so A is not less normal than B"]], "asymmetric_premise": ["More( opens their car(B),  opens their car(A)), so Less(normal(A), normal(B))", ["B opens their car more than A, so A is less normal than B"]], "asymmetric_conclusion": ["More( opens their car(A),  opens their car(B)), so Less(normal(B), normal(A))", ["A opens their car more than B, so B is less normal than A"]], "negated_asymmetric_premise": ["More( opens their car(B),  opens their car(A)), so not More(normal(A), normal(B))", ["B opens their car more than A, so A is not more normal than B"]], "negated_asymmetric_conclusion": ["More( opens their car(A),  opens their car(B)), so not More(normal(B), normal(A))", ["A opens their car more than B, so B is not more normal than A"]]}
{"original": ["More( attends their meetings(A),  attends their meetings(B)), so More(faithful(A), faithful(B))", ["A attends their meetings more than B, so A is more faithful than B"]], "negated": ["More( attends their meetings(A),  attends their meetings(B)), so not Less(faithful(A), faithful(B))", ["A attends their meetings more than B, so A is not less faithful than B"]], "asymmetric_premise": ["More( attends their meetings(B),  attends their meetings(A)), so Less(faithful(A), faithful(B))", ["B attends their meetings more than A, so A is less faithful than B"]], "asymmetric_conclusion": ["More( attends their meetings(A),  attends their meetings(B)), so Less(faithful(B), faithful(A))", ["A attends their meetings more than B, so B is less faithful than A"]], "negated_asymmetric_premise": ["More( attends their meetings(B),  attends their meetings(A)), so not More(faithful(A), faithful(B))", ["B attends their meetings more than A, so A is not more faithful than B"]], "negated_asymmetric_conclusion": ["More( attends their meetings(A),  attends their meetings(B)), so not More(faithful(B), faithful(A))", ["A attends their meetings more than B, so B is not more faithful than A"]]}
{"original": ["More( is washed away(A),  is washed away(B)), so More(cautious(A), cautious(B))", ["A is washed away more than B, so A is more cautious than B"]], "negated": ["More( is washed away(A),  is washed away(B)), so not Less(cautious(A), cautious(B))", ["A is washed away more than B, so A is not less cautious than B"]], "asymmetric_premise": ["More( is washed away(B),  is washed away(A)), so Less(cautious(A), cautious(B))", ["B is washed away more than A, so A is less cautious than B"]], "asymmetric_conclusion": ["More( is washed away(A),  is washed away(B)), so Less(cautious(B), cautious(A))", ["A is washed away more than B, so B is less cautious than A"]], "negated_asymmetric_premise": ["More( is washed away(B),  is washed away(A)), so not More(cautious(A), cautious(B))", ["B is washed away more than A, so A is not more cautious than B"]], "negated_asymmetric_conclusion": ["More( is washed away(A),  is washed away(B)), so not More(cautious(B), cautious(A))", ["A is washed away more than B, so B is not more cautious than A"]]}
{"original": ["More( puts another person's son(A),  puts another person's son(B)), so More(bossy(A), bossy(B))", ["A puts another person's son more than B, so A is more bossy than B"]], "negated": ["More( puts another person's son(A),  puts another person's son(B)), so not Less(bossy(A), bossy(B))", ["A puts another person's son more than B, so A is not less bossy than B"]], "asymmetric_premise": ["More( puts another person's son(B),  puts another person's son(A)), so Less(bossy(A), bossy(B))", ["B puts another person's son more than A, so A is less bossy than B"]], "asymmetric_conclusion": ["More( puts another person's son(A),  puts another person's son(B)), so Less(bossy(B), bossy(A))", ["A puts another person's son more than B, so B is less bossy than A"]], "negated_asymmetric_premise": ["More( puts another person's son(B),  puts another person's son(A)), so not More(bossy(A), bossy(B))", ["B puts another person's son more than A, so A is not more bossy than B"]], "negated_asymmetric_conclusion": ["More( puts another person's son(A),  puts another person's son(B)), so not More(bossy(B), bossy(A))", ["A puts another person's son more than B, so B is not more bossy than A"]]}
{"original": ["More( gets their father(A),  gets their father(B)), so More(supportive(A), supportive(B))", ["A gets their father more than B, so A is more supportive than B"]], "negated": ["More( gets their father(A),  gets their father(B)), so not Less(supportive(A), supportive(B))", ["A gets their father more than B, so A is not less supportive than B"]], "asymmetric_premise": ["More( gets their father(B),  gets their father(A)), so Less(supportive(A), supportive(B))", ["B gets their father more than A, so A is less supportive than B"]], "asymmetric_conclusion": ["More( gets their father(A),  gets their father(B)), so Less(supportive(B), supportive(A))", ["A gets their father more than B, so B is less supportive than A"]], "negated_asymmetric_premise": ["More( gets their father(B),  gets their father(A)), so not More(supportive(A), supportive(B))", ["B gets their father more than A, so A is not more supportive than B"]], "negated_asymmetric_conclusion": ["More( gets their father(A),  gets their father(B)), so not More(supportive(B), supportive(A))", ["A gets their father more than B, so B is not more supportive than A"]]}
{"original": ["More( expresses their admiration(A),  expresses their admiration(B)), so More(loving(A), loving(B))", ["A expresses their admiration more than B, so A is more loving than B"]], "negated": ["More( expresses their admiration(A),  expresses their admiration(B)), so not Less(loving(A), loving(B))", ["A expresses their admiration more than B, so A is not less loving than B"]], "asymmetric_premise": ["More( expresses their admiration(B),  expresses their admiration(A)), so Less(loving(A), loving(B))", ["B expresses their admiration more than A, so A is less loving than B"]], "asymmetric_conclusion": ["More( expresses their admiration(A),  expresses their admiration(B)), so Less(loving(B), loving(A))", ["A expresses their admiration more than B, so B is less loving than A"]], "negated_asymmetric_premise": ["More( expresses their admiration(B),  expresses their admiration(A)), so not More(loving(A), loving(B))", ["B expresses their admiration more than A, so A is not more loving than B"]], "negated_asymmetric_conclusion": ["More( expresses their admiration(A),  expresses their admiration(B)), so not More(loving(B), loving(A))", ["A expresses their admiration more than B, so B is not more loving than A"]]}
{"original": ["More( decides to give it a shot(A),  decides to give it a shot(B)), so More(curious(A), curious(B))", ["A decides to give it a shot more than B, so A is more curious than B"]], "negated": ["More( decides to give it a shot(A),  decides to give it a shot(B)), so not Less(curious(A), curious(B))", ["A decides to give it a shot while B does not, so A is not less curious than B"]], "asymmetric_premise": ["More( decides to give it a shot(B),  decides to give it a shot(A)), so Less(curious(A), curious(B))", ["B decides to give it a shot more than A, so A is less curious than B"]], "asymmetric_conclusion": ["More( decides to give it a shot(A),  decides to give it a shot(B)), so Less(curious(B), curious(A))", ["A decides to give it a shot, B does not, so B is less curious than A"]], "negated_asymmetric_premise": ["More( decides to give it a shot(B),  decides to give it a shot(A)), so not More(curious(A), curious(B))", ["B decides to give it a shot more than A, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["More( decides to give it a shot(A),  decides to give it a shot(B)), so not More(curious(B), curious(A))", ["A decides to give it a shot while B does not, so B is not more curious than A"]]}
{"original": ["More( makes another person changes(A),  makes another person changes(B)), so More(authoritative(A), authoritative(B))", ["A makes another person changes more than B, so A is more authoritative than B"]], "negated": ["More( makes another person changes(A),  makes another person changes(B)), so not Less(authoritative(A), authoritative(B))", ["A makes another person changes more than B, so A is not less authoritative than B"]], "asymmetric_premise": ["More( makes another person changes(B),  makes another person changes(A)), so Less(authoritative(A), authoritative(B))", ["B makes another person changes more than A, so A is less authoritative than B"]], "asymmetric_conclusion": ["More( makes another person changes(A),  makes another person changes(B)), so Less(authoritative(B), authoritative(A))", ["A makes another person changes more than B, so B is less authoritative than A"]], "negated_asymmetric_premise": ["More( makes another person changes(B),  makes another person changes(A)), so not More(authoritative(A), authoritative(B))", ["B makes another person changes more than A, so A is not more authoritative than B"]], "negated_asymmetric_conclusion": ["More( makes another person changes(A),  makes another person changes(B)), so not More(authoritative(B), authoritative(A))", ["A makes another person changes more than B, so B is not more authoritative than A"]]}
{"original": ["More( checks under their bed(A),  checks under their bed(B)), so More(thorough(A), thorough(B))", ["A checks under their bed more than B, so A is more thorough than B"]], "negated": ["More( checks under their bed(A),  checks under their bed(B)), so not Less(thorough(A), thorough(B))", ["A checks under their bed more than B, so A is not less thorough than B"]], "asymmetric_premise": ["More( checks under their bed(B),  checks under their bed(A)), so Less(thorough(A), thorough(B))", ["B checks under their bed more than A, so A is less thorough than B"]], "asymmetric_conclusion": ["More( checks under their bed(A),  checks under their bed(B)), so Less(thorough(B), thorough(A))", ["A checks under their bed more than B, so B is less thorough than A"]], "negated_asymmetric_premise": ["More( checks under their bed(B),  checks under their bed(A)), so not More(thorough(A), thorough(B))", ["B checks under their bed more than A, so A is not more thorough than B"]], "negated_asymmetric_conclusion": ["More( checks under their bed(A),  checks under their bed(B)), so not More(thorough(B), thorough(A))", ["A checks under their bed more than B, so B is not more thorough than A"]]}
{"original": ["More( buys their lunch(A),  buys their lunch(B)), so More(charitable(A), charitable(B))", ["A buys their lunch more than B, so A is more charitable than B"]], "negated": ["More( buys their lunch(A),  buys their lunch(B)), so not Less(charitable(A), charitable(B))", ["A buys their lunch more than B, so A is not less charitable than B"]], "asymmetric_premise": ["More( buys their lunch(B),  buys their lunch(A)), so Less(charitable(A), charitable(B))", ["B buys their lunch more than A, so A is less charitable than B"]], "asymmetric_conclusion": ["More( buys their lunch(A),  buys their lunch(B)), so Less(charitable(B), charitable(A))", ["A buys their lunch more than B, so B is less charitable than A"]], "negated_asymmetric_premise": ["More( buys their lunch(B),  buys their lunch(A)), so not More(charitable(A), charitable(B))", ["B buys their lunch more than A, so A is not more charitable than B"]], "negated_asymmetric_conclusion": ["More( buys their lunch(A),  buys their lunch(B)), so not More(charitable(B), charitable(A))", ["A buys their lunch more than B, so B is not more charitable than A"]]}
{"original": ["More( is four years old(A),  is four years old(B)), so More(excited(A), excited(B))", ["A is four years old, B is four years old, so A is more excited than B"]], "negated": ["More( is four years old(A),  is four years old(B)), so not Less(excited(A), excited(B))", ["A is four years old more than B, so A is not less excited than B"]], "asymmetric_premise": ["More( is four years old(B),  is four years old(A)), so Less(excited(A), excited(B))", ["B is four years old more than A, so A is less excited than B"]], "asymmetric_conclusion": ["More( is four years old(A),  is four years old(B)), so Less(excited(B), excited(A))", ["A is four years old, B is four years old, so B is less excited than A"]], "negated_asymmetric_premise": ["More( is four years old(B),  is four years old(A)), so not More(excited(A), excited(B))", ["B is four years old, A is not, so A is not more excited than B"]], "negated_asymmetric_conclusion": ["More( is four years old(A),  is four years old(B)), so not More(excited(B), excited(A))", ["A is four years old, B is not, so B is not more excited than A"]]}
{"original": ["More( settles among another person(A),  settles among another person(B)), so More(towering(A), towering(B))", ["A settles among another person more than B, so A is more towering than B"]], "negated": ["More( settles among another person(A),  settles among another person(B)), so not Less(towering(A), towering(B))", ["A settles among another person more than B, so A is not less towering than B"]], "asymmetric_premise": ["More( settles among another person(B),  settles among another person(A)), so Less(towering(A), towering(B))", ["B settles among another person more than A, so A is less towering than B"]], "asymmetric_conclusion": ["More( settles among another person(A),  settles among another person(B)), so Less(towering(B), towering(A))", ["A settles among another person more than B, so B is less towering than A"]], "negated_asymmetric_premise": ["More( settles among another person(B),  settles among another person(A)), so not More(towering(A), towering(B))", ["B settles among another person more than A, so A is not more towering than B"]], "negated_asymmetric_conclusion": ["More( settles among another person(A),  settles among another person(B)), so not More(towering(B), towering(A))", ["A settles among another person more than B, so B is not more towering than A"]]}
{"original": ["More( tastes the sauce(A),  tastes the sauce(B)), so More(brave(A), brave(B))", ["A tastes the sauce more than B, so A is more brave than B"]], "negated": ["More( tastes the sauce(A),  tastes the sauce(B)), so not Less(brave(A), brave(B))", ["A tastes the sauce more than B, so A is not less brave than B"]], "asymmetric_premise": ["More( tastes the sauce(B),  tastes the sauce(A)), so Less(brave(A), brave(B))", ["B tastes the sauce more than A, so A is less brave than B"]], "asymmetric_conclusion": ["More( tastes the sauce(A),  tastes the sauce(B)), so Less(brave(B), brave(A))", ["A tastes the sauce more than B, so B is less brave than A"]], "negated_asymmetric_premise": ["More( tastes the sauce(B),  tastes the sauce(A)), so not More(brave(A), brave(B))", ["B tastes the sauce more than A, so A is not more brave than B"]], "negated_asymmetric_conclusion": ["More( tastes the sauce(A),  tastes the sauce(B)), so not More(brave(B), brave(A))", ["A tastes the sauce more than B, so B is not more brave than A"]]}
{"original": ["More( takes several hours(A),  takes several hours(B)), so More(patient(A), patient(B))", ["A takes several hours more than B, so A is more patient than B"]], "negated": ["More( takes several hours(A),  takes several hours(B)), so not Less(patient(A), patient(B))", ["A takes several hours more than B, so A is not less patient than B"]], "asymmetric_premise": ["More( takes several hours(B),  takes several hours(A)), so Less(patient(A), patient(B))", ["B takes several hours more than A, so A is less patient than B"]], "asymmetric_conclusion": ["More( takes several hours(A),  takes several hours(B)), so Less(patient(B), patient(A))", ["A takes several hours more than B, so B is less patient than A"]], "negated_asymmetric_premise": ["More( takes several hours(B),  takes several hours(A)), so not More(patient(A), patient(B))", ["B takes several hours more than A, so A is not more patient than B"]], "negated_asymmetric_conclusion": ["More( takes several hours(A),  takes several hours(B)), so not More(patient(B), patient(A))", ["A takes several hours more than B, so B is not more patient than A"]]}
{"original": ["More( lies on the sidewalk(A),  lies on the sidewalk(B)), so More(insolent(A), insolent(B))", ["A lies on the sidewalk more than B, so A is more insolent than B"]], "negated": ["More( lies on the sidewalk(A),  lies on the sidewalk(B)), so not Less(insolent(A), insolent(B))", ["A lies on the sidewalk more than B, so A is not less insolent than B"]], "asymmetric_premise": ["More( lies on the sidewalk(B),  lies on the sidewalk(A)), so Less(insolent(A), insolent(B))", ["B lies on the sidewalk more than A, so A is less insolent than B"]], "asymmetric_conclusion": ["More( lies on the sidewalk(A),  lies on the sidewalk(B)), so Less(insolent(B), insolent(A))", ["A lies on the sidewalk more than B, so B is less insolent than A"]], "negated_asymmetric_premise": ["More( lies on the sidewalk(B),  lies on the sidewalk(A)), so not More(insolent(A), insolent(B))", ["B lies on the sidewalk more than A, so A is not more insolent than B"]], "negated_asymmetric_conclusion": ["More( lies on the sidewalk(A),  lies on the sidewalk(B)), so not More(insolent(B), insolent(A))", ["A lies on the sidewalk more than B, so B is not more insolent than A"]]}
{"original": ["More( keeps it real(A),  keeps it real(B)), so More(careful(A), careful(B))", ["A keeps it real more than B, so A is more careful than B"]], "negated": ["More( keeps it real(A),  keeps it real(B)), so not Less(careful(A), careful(B))", ["A keeps it real more than B, so A is not less careful than B"]], "asymmetric_premise": ["More( keeps it real(B),  keeps it real(A)), so Less(careful(A), careful(B))", ["B keeps it real more than A, so A is less careful than B"]], "asymmetric_conclusion": ["More( keeps it real(A),  keeps it real(B)), so Less(careful(B), careful(A))", ["A keeps it real more than B, so B is less careful than A"]], "negated_asymmetric_premise": ["More( keeps it real(B),  keeps it real(A)), so not More(careful(A), careful(B))", ["B keeps it real more than A, so A is not more careful than B"]], "negated_asymmetric_conclusion": ["More( keeps it real(A),  keeps it real(B)), so not More(careful(B), careful(A))", ["A keeps it real more than B, so B is not more careful than A"]]}
{"original": ["More( uses drugs(A),  uses drugs(B)), so More(dependent(A), dependent(B))", ["A uses drugs more than B, so A is more dependent than B"]], "negated": ["More( uses drugs(A),  uses drugs(B)), so not Less(dependent(A), dependent(B))", ["A uses drugs more than B, so A is not less dependent than B"]], "asymmetric_premise": ["More( uses drugs(B),  uses drugs(A)), so Less(dependent(A), dependent(B))", ["B uses drugs more than A, so A is less dependent than B"]], "asymmetric_conclusion": ["More( uses drugs(A),  uses drugs(B)), so Less(dependent(B), dependent(A))", ["A uses drugs more than B, so B is less dependent than A"]], "negated_asymmetric_premise": ["More( uses drugs(B),  uses drugs(A)), so not More(dependent(A), dependent(B))", ["B uses drugs more than A, so A is not more dependent than B"]], "negated_asymmetric_conclusion": ["More( uses drugs(A),  uses drugs(B)), so not More(dependent(B), dependent(A))", ["A uses drugs more than B, so B is not more dependent than A"]]}
{"original": ["More( doubts their ability(A),  doubts their ability(B)), so More(lethargic(A), lethargic(B))", ["A doubts their ability more than B, so A is more lethargic than B"]], "negated": ["More( doubts their ability(A),  doubts their ability(B)), so not Less(lethargic(A), lethargic(B))", ["A doubts their ability more than B, so A is not less lethargic than B"]], "asymmetric_premise": ["More( doubts their ability(B),  doubts their ability(A)), so Less(lethargic(A), lethargic(B))", ["B doubts their ability more than A, so A is less lethargic than B"]], "asymmetric_conclusion": ["More( doubts their ability(A),  doubts their ability(B)), so Less(lethargic(B), lethargic(A))", ["A doubts their ability more than B, so B is less lethargic than A"]], "negated_asymmetric_premise": ["More( doubts their ability(B),  doubts their ability(A)), so not More(lethargic(A), lethargic(B))", ["B doubts their ability more than A, so A is not more lethargic than B"]], "negated_asymmetric_conclusion": ["More( doubts their ability(A),  doubts their ability(B)), so not More(lethargic(B), lethargic(A))", ["A doubts their ability more than B, so B is not more lethargic than A"]]}
{"original": ["More( chases the dog(A),  chases the dog(B)), so More(rambunctious(A), rambunctious(B))", ["A chases the dog more than B, so A is more rambunctious than B"]], "negated": ["More( chases the dog(A),  chases the dog(B)), so not Less(rambunctious(A), rambunctious(B))", ["A chases the dog more than B, so A is not less rambunctious than B"]], "asymmetric_premise": ["More( chases the dog(B),  chases the dog(A)), so Less(rambunctious(A), rambunctious(B))", ["B chases the dog more than A, so A is less rambunctious than B"]], "asymmetric_conclusion": ["More( chases the dog(A),  chases the dog(B)), so Less(rambunctious(B), rambunctious(A))", ["A chases the dog more than B, so B is less rambunctious than A"]], "negated_asymmetric_premise": ["More( chases the dog(B),  chases the dog(A)), so not More(rambunctious(A), rambunctious(B))", ["B chases the dog more than A, so A is not more rambunctious than B"]], "negated_asymmetric_conclusion": ["More( chases the dog(A),  chases the dog(B)), so not More(rambunctious(B), rambunctious(A))", ["A chases the dog more than B, so B is not more rambunctious than A"]]}
{"original": ["More( meets another person in the street(A),  meets another person in the street(B)), so More(friendly(A), friendly(B))", ["A meets another person in the street more than B, so A is more friendly than B"]], "negated": ["More( meets another person in the street(A),  meets another person in the street(B)), so not Less(friendly(A), friendly(B))", ["A meets another person in the street more than B, so A is not less friendly than B"]], "asymmetric_premise": ["More( meets another person in the street(B),  meets another person in the street(A)), so Less(friendly(A), friendly(B))", ["B meets another person in the street more than A, so A is less friendly than B"]], "asymmetric_conclusion": ["More( meets another person in the street(A),  meets another person in the street(B)), so Less(friendly(B), friendly(A))", ["A meets another person in the street more than B, so B is less friendly than A"]], "negated_asymmetric_premise": ["More( meets another person in the street(B),  meets another person in the street(A)), so not More(friendly(A), friendly(B))", ["B meets another person in the street more than A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["More( meets another person in the street(A),  meets another person in the street(B)), so not More(friendly(B), friendly(A))", ["A meets another person in the street more than B, so B is not more friendly than A"]]}
{"original": ["More( has to write an essay(A),  has to write an essay(B)), so More(motivated(A), motivated(B))", ["A has to write an essay more than B, so A is more motivated than B"]], "negated": ["More( has to write an essay(A),  has to write an essay(B)), so not Less(motivated(A), motivated(B))", ["A has to write an essay more than B, so A is not less motivated than B"]], "asymmetric_premise": ["More( has to write an essay(B),  has to write an essay(A)), so Less(motivated(A), motivated(B))", ["B has to write an essay more than A, so A is less motivated than B"]], "asymmetric_conclusion": ["More( has to write an essay(A),  has to write an essay(B)), so Less(motivated(B), motivated(A))", ["A has to write an essay more than B, so B is less motivated than A"]], "negated_asymmetric_premise": ["More( has to write an essay(B),  has to write an essay(A)), so not More(motivated(A), motivated(B))", ["B has to write an essay more than A, so A is not more motivated than B"]], "negated_asymmetric_conclusion": ["More( has to write an essay(A),  has to write an essay(B)), so not More(motivated(B), motivated(A))", ["A has to write an essay more than B, so B is not more motivated than A"]]}
{"original": ["More( takes care of their needs(A),  takes care of their needs(B)), so More(caring(A), caring(B))", ["A takes care of their needs more than B, so A is more caring than B"]], "negated": ["More( takes care of their needs(A),  takes care of their needs(B)), so not Less(caring(A), caring(B))", ["A takes care of their needs more than B, so A is not less caring than B"]], "asymmetric_premise": ["More( takes care of their needs(B),  takes care of their needs(A)), so Less(caring(A), caring(B))", ["B takes care of their needs more than A, so A is less caring than B"]], "asymmetric_conclusion": ["More( takes care of their needs(A),  takes care of their needs(B)), so Less(caring(B), caring(A))", ["A takes care of their needs more than B, so B is less caring than A"]], "negated_asymmetric_premise": ["More( takes care of their needs(B),  takes care of their needs(A)), so not More(caring(A), caring(B))", ["B takes care of their needs more than A, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["More( takes care of their needs(A),  takes care of their needs(B)), so not More(caring(B), caring(A))", ["A takes care of their needs more than B, so B is not more caring than A"]]}
{"original": ["More( takes a cab(A),  takes a cab(B)), so More(unable to drive(A), unable to drive(B))", ["A takes a cab more than B, so A is unable to drive more than B"]], "negated": ["More( takes a cab(A),  takes a cab(B)), so not Less(unable to drive(A), unable to drive(B))", ["A takes a cab more than B, so A is not less unable to drive than B"]], "asymmetric_premise": ["More( takes a cab(B),  takes a cab(A)), so Less(unable to drive(A), unable to drive(B))", ["B takes a cab more than A, so A is less unable to drive than B"]], "asymmetric_conclusion": ["More( takes a cab(A),  takes a cab(B)), so Less(unable to drive(B), unable to drive(A))", ["A takes a cab more than B, so B is less able to drive than A"]], "negated_asymmetric_premise": ["More( takes a cab(B),  takes a cab(A)), so not More(unable to drive(A), unable to drive(B))", ["B takes a cab more than A, so A is not more unable to drive than B"]], "negated_asymmetric_conclusion": ["More( takes a cab(A),  takes a cab(B)), so not More(unable to drive(B), unable to drive(A))", ["A takes a cab more than B, so B is not more unable to drive than A"]]}
{"original": ["More( would n't stop(A),  would n't stop(B)), so More(annoying(A), annoying(B))", ["A would n't stop stopping for B, so A is more annoying than B"]], "negated": ["More( would n't stop(A),  would n't stop(B)), so not Less(annoying(A), annoying(B))", ["A is more annoying than B, so A is not less annoying than B"]], "asymmetric_premise": ["More( would n't stop(B),  would n't stop(A)), so Less(annoying(A), annoying(B))", ["B would n't stop stopping for A, so A is less annoying than B"]], "asymmetric_conclusion": ["More( would n't stop(A),  would n't stop(B)), so Less(annoying(B), annoying(A))", ["A would n't stop stopping for B, so B is less annoying than A"]], "negated_asymmetric_premise": ["More( would n't stop(B),  would n't stop(A)), so not More(annoying(A), annoying(B))", ["B would not be more annoying than A, so A is not more annoying than B"]], "negated_asymmetric_conclusion": ["More( would n't stop(A),  would n't stop(B)), so not More(annoying(B), annoying(A))", ["A would not be more annoying than B, so B is not more annoying than A"]]}
{"original": ["More( clenches another person's fists(A),  clenches another person's fists(B)), so More(parental(A), parental(B))", ["A clenches another person's fists more than B, so A is more parental than B"]], "negated": ["More( clenches another person's fists(A),  clenches another person's fists(B)), so not Less(parental(A), parental(B))", ["A clenches another person's fists more than B, so A is not less parental than B"]], "asymmetric_premise": ["More( clenches another person's fists(B),  clenches another person's fists(A)), so Less(parental(A), parental(B))", ["B clenches another person's fists more than A, so A is less parental than B"]], "asymmetric_conclusion": ["More( clenches another person's fists(A),  clenches another person's fists(B)), so Less(parental(B), parental(A))", ["A clenches another person's fists more than B, so B is less parental than A"]], "negated_asymmetric_premise": ["More( clenches another person's fists(B),  clenches another person's fists(A)), so not More(parental(A), parental(B))", ["B clenches another person's fists more than A, so A is not more parental than B"]], "negated_asymmetric_conclusion": ["More( clenches another person's fists(A),  clenches another person's fists(B)), so not More(parental(B), parental(A))", ["A clenches another person's fists more than B, so B is not more parental than A"]]}
{"original": ["More( washes their hands(A),  washes their hands(B)), so More(hygenic(A), hygenic(B))", ["A washes their hands more than B, so A is more hygenic than B"]], "negated": ["More( washes their hands(A),  washes their hands(B)), so not Less(hygenic(A), hygenic(B))", ["A washes their hands more than B, so A is not less hygenic than B"]], "asymmetric_premise": ["More( washes their hands(B),  washes their hands(A)), so Less(hygenic(A), hygenic(B))", ["B washes their hands more than A, so A is less hygenic than B"]], "asymmetric_conclusion": ["More( washes their hands(A),  washes their hands(B)), so Less(hygenic(B), hygenic(A))", ["A washes their hands more than B, so B is less hygenic than A"]], "negated_asymmetric_premise": ["More( washes their hands(B),  washes their hands(A)), so not More(hygenic(A), hygenic(B))", ["B washes their hands more than A, so A is not more hygenic than B"]], "negated_asymmetric_conclusion": ["More( washes their hands(A),  washes their hands(B)), so not More(hygenic(B), hygenic(A))", ["A washes their hands more than B, so B is not more hygenic than A"]]}
{"original": ["More( goes to the park to feed the ducks(A),  goes to the park to feed the ducks(B)), so More(thoughtful(A), thoughtful(B))", ["A goes to the park to feed the ducks more than B, so A is more thoughtful than B"]], "negated": ["More( goes to the park to feed the ducks(A),  goes to the park to feed the ducks(B)), so not Less(thoughtful(A), thoughtful(B))", ["A goes to the park to feed the ducks more than B, so A is not less thoughtful than B"]], "asymmetric_premise": ["More( goes to the park to feed the ducks(B),  goes to the park to feed the ducks(A)), so Less(thoughtful(A), thoughtful(B))", ["B goes to the park to feed the ducks more than A, so A is less thoughtful than B"]], "asymmetric_conclusion": ["More( goes to the park to feed the ducks(A),  goes to the park to feed the ducks(B)), so Less(thoughtful(B), thoughtful(A))", ["A goes to the park to feed the ducks more than B, so B is less thoughtful than A"]], "negated_asymmetric_premise": ["More( goes to the park to feed the ducks(B),  goes to the park to feed the ducks(A)), so not More(thoughtful(A), thoughtful(B))", ["B goes to the park to feed the ducks more than A, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": ["More( goes to the park to feed the ducks(A),  goes to the park to feed the ducks(B)), so not More(thoughtful(B), thoughtful(A))", ["A goes to the park to feed the ducks more than B, so B is not more thoughtful than A"]]}
{"original": ["More( searches online(A),  searches online(B)), so More(inquisitive(A), inquisitive(B))", ["A searches online more than B, so A is more inquisitive than B"]], "negated": ["More( searches online(A),  searches online(B)), so not Less(inquisitive(A), inquisitive(B))", ["A searches online more than B, so A is not less inquisitive than B"]], "asymmetric_premise": ["More( searches online(B),  searches online(A)), so Less(inquisitive(A), inquisitive(B))", ["B searches online more than A, so A is less inquisitive than B"]], "asymmetric_conclusion": ["More( searches online(A),  searches online(B)), so Less(inquisitive(B), inquisitive(A))", ["A searches online more than B, so B is less inquisitive than A"]], "negated_asymmetric_premise": ["More( searches online(B),  searches online(A)), so not More(inquisitive(A), inquisitive(B))", ["B searches online more than A, so A is not more inquisitive than B"]], "negated_asymmetric_conclusion": ["More( searches online(A),  searches online(B)), so not More(inquisitive(B), inquisitive(A))", ["A searches online more than B, so B is not more inquisitive than A"]]}
{"original": ["More( gets sick too(A),  gets sick too(B)), so More(weaker(A), weaker(B))", ["A gets sick more than B, so A is more weaker than B"]], "negated": ["More( gets sick too(A),  gets sick too(B)), so not Less(weaker(A), weaker(B))", ["A gets sick more than B, so A is not less weaker than B"]], "asymmetric_premise": ["More( gets sick too(B),  gets sick too(A)), so Less(weaker(A), weaker(B))", ["B gets sick more than A, so A is less weaker than B"]], "asymmetric_conclusion": ["More( gets sick too(A),  gets sick too(B)), so Less(weaker(B), weaker(A))", ["A gets sick more than B, so B is less weaker than A"]], "negated_asymmetric_premise": ["More( gets sick too(B),  gets sick too(A)), so not More(weaker(A), weaker(B))", ["B gets sick more than A, so A is not more weaker than B"]], "negated_asymmetric_conclusion": ["More( gets sick too(A),  gets sick too(B)), so not More(weaker(B), weaker(A))", ["A gets sick too more than B, so B is not more weaker than A"]]}
{"original": ["More( buys to let(A),  buys to let(B)), so More(dutiful(A), dutiful(B))", ["A buys to let more than B, so A is more dutiful than B"]], "negated": ["More( buys to let(A),  buys to let(B)), so not Less(dutiful(A), dutiful(B))", ["A buys to let more than B, so A is not less dutiful than B"]], "asymmetric_premise": ["More( buys to let(B),  buys to let(A)), so Less(dutiful(A), dutiful(B))", ["B buys to let more than A, so A is less dutiful than B"]], "asymmetric_conclusion": ["More( buys to let(A),  buys to let(B)), so Less(dutiful(B), dutiful(A))", ["A buys to let more than B, so B is less dutiful than A"]], "negated_asymmetric_premise": ["More( buys to let(B),  buys to let(A)), so not More(dutiful(A), dutiful(B))", ["B buys to let more than A, so A is not more dutiful than B"]], "negated_asymmetric_conclusion": ["More( buys to let(A),  buys to let(B)), so not More(dutiful(B), dutiful(A))", ["A buys to let more than B, so B is not more dutiful than A"]]}
{"original": ["More( immediately opened(A),  immediately opened(B)), so More(surprised.(A), surprised.(B))", ["A's door was immediately opened, so A was more surprised than B"]], "negated": ["More( immediately opened(A),  immediately opened(B)), so not Less(surprised.(A), surprised.(B))", ["A is more immediately opened than B, so A is not less surprised than B"]], "asymmetric_premise": ["More( immediately opened(B),  immediately opened(A)), so Less(surprised.(A), surprised.(B))", ["B is more immediately opened than A, so A is less surprised than B"]], "asymmetric_conclusion": ["More( immediately opened(A),  immediately opened(B)), so Less(surprised.(B), surprised.(A))", ["A is more likely to be opened than B, so B is less surprised than A"]], "negated_asymmetric_premise": ["More( immediately opened(B),  immediately opened(A)), so not More(surprised.(A), surprised.(B))", ["B's door was immediately opened, so A is not more surprised than B"]], "negated_asymmetric_conclusion": ["More( immediately opened(A),  immediately opened(B)), so not More(surprised.(B), surprised.(A))", ["A is more immediately opened than B, so B is not more surprised than A"]]}
{"original": ["More( lets their friends(A),  lets their friends(B)), so More(kind(A), kind(B))", ["A lets their friends more than B, so A is more kind than B"]], "negated": ["More( lets their friends(A),  lets their friends(B)), so not Less(kind(A), kind(B))", ["A lets their friends more than B, so A is not less kind than B"]], "asymmetric_premise": ["More( lets their friends(B),  lets their friends(A)), so Less(kind(A), kind(B))", ["B lets their friends more than A, so A is less kind than B"]], "asymmetric_conclusion": ["More( lets their friends(A),  lets their friends(B)), so Less(kind(B), kind(A))", ["A lets their friends more than B, so B is less kind than A"]], "negated_asymmetric_premise": ["More( lets their friends(B),  lets their friends(A)), so not More(kind(A), kind(B))", ["B lets their friends more than A, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["More( lets their friends(A),  lets their friends(B)), so not More(kind(B), kind(A))", ["A lets their friends more than B, so B is not more kind than A"]]}
{"original": ["More( becomes stronger(A),  becomes stronger(B)), so More(hardworking(A), hardworking(B))", ["A becomes stronger than B, so A is more hardworking than B"]], "negated": ["More( becomes stronger(A),  becomes stronger(B)), so not Less(hardworking(A), hardworking(B))", ["A becomes stronger than B, so A is not less hardworking than B"]], "asymmetric_premise": ["More( becomes stronger(B),  becomes stronger(A)), so Less(hardworking(A), hardworking(B))", ["B becomes stronger than A, so A is less hardworking than B"]], "asymmetric_conclusion": ["More( becomes stronger(A),  becomes stronger(B)), so Less(hardworking(B), hardworking(A))", ["A becomes stronger than B, so B is less hardworking than A"]], "negated_asymmetric_premise": ["More( becomes stronger(B),  becomes stronger(A)), so not More(hardworking(A), hardworking(B))", ["B becomes stronger than A, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": ["More( becomes stronger(A),  becomes stronger(B)), so not More(hardworking(B), hardworking(A))", ["A becomes stronger than B, so B is not more hardworking than A"]]}
{"original": ["More( decides to run for president(A),  decides to run for president(B)), so More(hard working(A), hard working(B))", ["A decides to run for president more than B, so A is more hard working than B"]], "negated": ["More( decides to run for president(A),  decides to run for president(B)), so not Less(hard working(A), hard working(B))", ["A decides to run for president more than B, so A is not less hard working than B"]], "asymmetric_premise": ["More( decides to run for president(B),  decides to run for president(A)), so Less(hard working(A), hard working(B))", ["B decides to run for president more than A, so A is less hard working than B"]], "asymmetric_conclusion": ["More( decides to run for president(A),  decides to run for president(B)), so Less(hard working(B), hard working(A))", ["A decides to run for president more than B, so B is less hard working than A"]], "negated_asymmetric_premise": ["More( decides to run for president(B),  decides to run for president(A)), so not More(hard working(A), hard working(B))", ["B decides to run for president more than A, so A is not more hard working than B"]], "negated_asymmetric_conclusion": ["More( decides to run for president(A),  decides to run for president(B)), so not More(hard working(B), hard working(A))", ["A decides to run for president more than B, so B is not more hard working than A"]]}
{"original": ["More( moves their furniture(A),  moves their furniture(B)), so More(hardworking(A), hardworking(B))", ["A moves their furniture more than B, so A is more hardworking than B"]], "negated": ["More( moves their furniture(A),  moves their furniture(B)), so not Less(hardworking(A), hardworking(B))", ["A moves their furniture more than B, so A is not less hardworking than B"]], "asymmetric_premise": ["More( moves their furniture(B),  moves their furniture(A)), so Less(hardworking(A), hardworking(B))", ["B moves their furniture more than A, so A is less hardworking than B"]], "asymmetric_conclusion": ["More( moves their furniture(A),  moves their furniture(B)), so Less(hardworking(B), hardworking(A))", ["A moves their furniture more than B, so B is less hardworking than A"]], "negated_asymmetric_premise": ["More( moves their furniture(B),  moves their furniture(A)), so not More(hardworking(A), hardworking(B))", ["B moves their furniture more than A, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": ["More( moves their furniture(A),  moves their furniture(B)), so not More(hardworking(B), hardworking(A))", ["A moves their furniture more than B, so B is not more hardworking than A"]]}
{"original": ["More( puts another person to work(A),  puts another person to work(B)), so More(demanding(A), demanding(B))", ["A puts another person to work more than B, so A is more demanding than B"]], "negated": ["More( puts another person to work(A),  puts another person to work(B)), so not Less(demanding(A), demanding(B))", ["A puts another person to work more than B, so A is not less demanding than B"]], "asymmetric_premise": ["More( puts another person to work(B),  puts another person to work(A)), so Less(demanding(A), demanding(B))", ["B puts another person to work more than A, so A is less demanding than B"]], "asymmetric_conclusion": ["More( puts another person to work(A),  puts another person to work(B)), so Less(demanding(B), demanding(A))", ["A puts another person to work more than B, so B is less demanding than A"]], "negated_asymmetric_premise": ["More( puts another person to work(B),  puts another person to work(A)), so not More(demanding(A), demanding(B))", ["B puts another person to work more than A, so A is not more demanding than B"]], "negated_asymmetric_conclusion": ["More( puts another person to work(A),  puts another person to work(B)), so not More(demanding(B), demanding(A))", ["A puts another person to work more than B, so B is not more demanding than A"]]}
{"original": ["More( has gotten lost(A),  has gotten lost(B)), so More(disoriented(A), disoriented(B))", ["A has gotten lost more than B, so A is more disoriented than B"]], "negated": ["More( has gotten lost(A),  has gotten lost(B)), so not Less(disoriented(A), disoriented(B))", ["A has gotten lost more than B, so A is not less disoriented than B"]], "asymmetric_premise": ["More( has gotten lost(B),  has gotten lost(A)), so Less(disoriented(A), disoriented(B))", ["B has gotten lost more than A, so A is less disoriented than B"]], "asymmetric_conclusion": ["More( has gotten lost(A),  has gotten lost(B)), so Less(disoriented(B), disoriented(A))", ["A has gotten lost more than B, so B is less disoriented than A"]], "negated_asymmetric_premise": ["More( has gotten lost(B),  has gotten lost(A)), so not More(disoriented(A), disoriented(B))", ["B has gotten lost more than A, so A is not more disoriented than B"]], "negated_asymmetric_conclusion": ["More( has gotten lost(A),  has gotten lost(B)), so not More(disoriented(B), disoriented(A))", ["A has gotten lost more than B, so B is not more disoriented than A"]]}
{"original": ["More( makes millions(A),  makes millions(B)), so More(wealthy(A), wealthy(B))", ["A makes millions more than B, so A is more wealthy than B"]], "negated": ["More( makes millions(A),  makes millions(B)), so not Less(wealthy(A), wealthy(B))", ["A makes millions more than B, so A is not less wealthy than B"]], "asymmetric_premise": ["More( makes millions(B),  makes millions(A)), so Less(wealthy(A), wealthy(B))", ["B makes millions more than A, so A is less wealthy than B"]], "asymmetric_conclusion": ["More( makes millions(A),  makes millions(B)), so Less(wealthy(B), wealthy(A))", ["A makes millions more than B, so B is less wealthy than A"]], "negated_asymmetric_premise": ["More( makes millions(B),  makes millions(A)), so not More(wealthy(A), wealthy(B))", ["B makes millions more than A, so A is not more wealthy than B"]], "negated_asymmetric_conclusion": ["More( makes millions(A),  makes millions(B)), so not More(wealthy(B), wealthy(A))", ["A makes millions more than B, so B is not more wealthy than A"]]}
{"original": ["More( stops talking to another person(A),  stops talking to another person(B)), so More(mute(A), mute(B))", ["A stops talking to another person more than B, so A is more mute than B"]], "negated": ["More( stops talking to another person(A),  stops talking to another person(B)), so not Less(mute(A), mute(B))", ["A stops talking to another person more than B, so A is not less mute than B"]], "asymmetric_premise": ["More( stops talking to another person(B),  stops talking to another person(A)), so Less(mute(A), mute(B))", ["B stops talking to another person more than A, so A is less mute than B"]], "asymmetric_conclusion": ["More( stops talking to another person(A),  stops talking to another person(B)), so Less(mute(B), mute(A))", ["A stops talking to another person more than B, so B is less mute than A"]], "negated_asymmetric_premise": ["More( stops talking to another person(B),  stops talking to another person(A)), so not More(mute(A), mute(B))", ["B stops talking to another person more than A, so A is not more mute than B"]], "negated_asymmetric_conclusion": ["More( stops talking to another person(A),  stops talking to another person(B)), so not More(mute(B), mute(A))", ["A stops talking to another person more than B, so B is not more mute than A"]]}
{"original": ["More( kisses another person on both cheeks(A),  kisses another person on both cheeks(B)), so More(loving(A), loving(B))", ["A kisses another person on both cheeks more than B, so A is more loving than B"]], "negated": ["More( kisses another person on both cheeks(A),  kisses another person on both cheeks(B)), so not Less(loving(A), loving(B))", ["A kisses another person on both cheeks more than B, so A is not less loving than B"]], "asymmetric_premise": ["More( kisses another person on both cheeks(B),  kisses another person on both cheeks(A)), so Less(loving(A), loving(B))", ["B kisses another person on both cheeks more than A, so A is less loving than B"]], "asymmetric_conclusion": ["More( kisses another person on both cheeks(A),  kisses another person on both cheeks(B)), so Less(loving(B), loving(A))", ["A kisses another person on both cheeks more than B, so B is less loving than A"]], "negated_asymmetric_premise": ["More( kisses another person on both cheeks(B),  kisses another person on both cheeks(A)), so not More(loving(A), loving(B))", ["B kisses another person on both cheeks more than A, so A is not more loving than B"]], "negated_asymmetric_conclusion": ["More( kisses another person on both cheeks(A),  kisses another person on both cheeks(B)), so not More(loving(B), loving(A))", ["A kisses another person on both cheeks more than B, so B is not more loving than A"]]}
{"original": ["More( brings pressure to bear(A),  brings pressure to bear(B)), so More(hardworking(A), hardworking(B))", ["A brings pressure to bear more than B, so A is more hardworking than B"]], "negated": ["More( brings pressure to bear(A),  brings pressure to bear(B)), so not Less(hardworking(A), hardworking(B))", ["A brings pressure to bear more than B, so A is not less hardworking than B"]], "asymmetric_premise": ["More( brings pressure to bear(B),  brings pressure to bear(A)), so Less(hardworking(A), hardworking(B))", ["B brings pressure to bear more than A, so A is less hardworking than B"]], "asymmetric_conclusion": ["More( brings pressure to bear(A),  brings pressure to bear(B)), so Less(hardworking(B), hardworking(A))", ["A brings pressure to bear more than B, so B is less hardworking than A"]], "negated_asymmetric_premise": ["More( brings pressure to bear(B),  brings pressure to bear(A)), so not More(hardworking(A), hardworking(B))", ["B brings pressure to bear more than A, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": ["More( brings pressure to bear(A),  brings pressure to bear(B)), so not More(hardworking(B), hardworking(A))", ["A brings pressure to bear more than B, so B is not more hardworking than A"]]}
{"original": ["More( performs their function(A),  performs their function(B)), so More(hardworking(A), hardworking(B))", ["A performs their function more than B, so A is more hardworking than B"]], "negated": ["More( performs their function(A),  performs their function(B)), so not Less(hardworking(A), hardworking(B))", ["A performs their function more than B, so A is not less hardworking than B"]], "asymmetric_premise": ["More( performs their function(B),  performs their function(A)), so Less(hardworking(A), hardworking(B))", ["B performs their function more than A, so A is less hardworking than B"]], "asymmetric_conclusion": ["More( performs their function(A),  performs their function(B)), so Less(hardworking(B), hardworking(A))", ["A performs their function more than B, so B is less hardworking than A"]], "negated_asymmetric_premise": ["More( performs their function(B),  performs their function(A)), so not More(hardworking(A), hardworking(B))", ["B performs their function more than A, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": ["More( performs their function(A),  performs their function(B)), so not More(hardworking(B), hardworking(A))", ["A performs their function more than B, so B is not more hardworking than A"]]}
{"original": ["More( catches another person napping(A),  catches another person napping(B)), so More(skilled(A), skilled(B))", ["A catches another person napping more than B, so A is more skilled than B"]], "negated": ["More( catches another person napping(A),  catches another person napping(B)), so not Less(skilled(A), skilled(B))", ["A catches another person napping more than B, so A is not less skilled than B"]], "asymmetric_premise": ["More( catches another person napping(B),  catches another person napping(A)), so Less(skilled(A), skilled(B))", ["B catches another person napping more than A, so A is less skilled than B"]], "asymmetric_conclusion": ["More( catches another person napping(A),  catches another person napping(B)), so Less(skilled(B), skilled(A))", ["A catches another person napping more than B, so B is less skilled than A"]], "negated_asymmetric_premise": ["More( catches another person napping(B),  catches another person napping(A)), so not More(skilled(A), skilled(B))", ["B catches another person napping more than A, so A is not more skilled than B"]], "negated_asymmetric_conclusion": ["More( catches another person napping(A),  catches another person napping(B)), so not More(skilled(B), skilled(A))", ["A catches another person napping more than B, so B is not more skilled than A"]]}
{"original": ["More( makes coffee(A),  makes coffee(B)), so More(drowsy(A), drowsy(B))", ["A makes coffee more than B, so A is more drowsy than B"]], "negated": ["More( makes coffee(A),  makes coffee(B)), so not Less(drowsy(A), drowsy(B))", ["A makes coffee more than B, so A is not less drowsy than B"]], "asymmetric_premise": ["More( makes coffee(B),  makes coffee(A)), so Less(drowsy(A), drowsy(B))", ["B makes coffee more than A, so A is less drowsy than B"]], "asymmetric_conclusion": ["More( makes coffee(A),  makes coffee(B)), so Less(drowsy(B), drowsy(A))", ["A makes coffee more than B, so B is less drowsy than A"]], "negated_asymmetric_premise": ["More( makes coffee(B),  makes coffee(A)), so not More(drowsy(A), drowsy(B))", ["B makes coffee more than A, so A is not more drowsy than B"]], "negated_asymmetric_conclusion": ["More( makes coffee(A),  makes coffee(B)), so not More(drowsy(B), drowsy(A))", ["A makes coffee more than B, so B is not more drowsy than A"]]}
{"original": ["More( has another person by the short hairs(A),  has another person by the short hairs(B)), so More(mean(A), mean(B))", ["A has another person by the short hairs more than B, so A is more mean than B"]], "negated": ["More( has another person by the short hairs(A),  has another person by the short hairs(B)), so not Less(mean(A), mean(B))", ["A has another person by the short hairs more than B, so A is not less mean than B"]], "asymmetric_premise": ["More( has another person by the short hairs(B),  has another person by the short hairs(A)), so Less(mean(A), mean(B))", ["B has another person by the short hairs more than A, so A is less mean than B"]], "asymmetric_conclusion": ["More( has another person by the short hairs(A),  has another person by the short hairs(B)), so Less(mean(B), mean(A))", ["A has another person by the short hairs more than B, so B is less mean than A"]], "negated_asymmetric_premise": ["More( has another person by the short hairs(B),  has another person by the short hairs(A)), so not More(mean(A), mean(B))", ["B has another person by the short hairs more than A, so A is not more mean than B"]], "negated_asymmetric_conclusion": ["More( has another person by the short hairs(A),  has another person by the short hairs(B)), so not More(mean(B), mean(A))", ["A has another person by the short hairs more than B, so B is not more mean than A"]]}
{"original": ["More( is really shy(A),  is really shy(B)), so More(meak(A), meak(B))", ["A is really shy, B is not, so A is more meak than B"]], "negated": ["More( is really shy(A),  is really shy(B)), so not Less(meak(A), meak(B))", ["A is really shy more than B, so A is not less meak than B"]], "asymmetric_premise": ["More( is really shy(B),  is really shy(A)), so Less(meak(A), meak(B))", ["B is really shy, A is less shy than B, so A is less meak than B"]], "asymmetric_conclusion": ["More( is really shy(A),  is really shy(B)), so Less(meak(B), meak(A))", ["A is really shy, B is less shy than A, so B is less meak than A"]], "negated_asymmetric_premise": ["More( is really shy(B),  is really shy(A)), so not More(meak(A), meak(B))", ["B is really shy, A is not more shy than B, so A is not more meak than B"]], "negated_asymmetric_conclusion": ["More( is really shy(A),  is really shy(B)), so not More(meak(B), meak(A))", ["A is really shy, B is not more shy than A, so B is not more meak than A"]]}
{"original": ["More( does a terrible job(A),  does a terrible job(B)), so More(inadequate(A), inadequate(B))", ["A does a terrible job, B does a terrible job, so A is more inadequate than B"]], "negated": ["More( does a terrible job(A),  does a terrible job(B)), so not Less(inadequate(A), inadequate(B))", ["A does a terrible job while B does not, so A is not less inadequate than B"]], "asymmetric_premise": ["More( does a terrible job(B),  does a terrible job(A)), so Less(inadequate(A), inadequate(B))", ["B does a terrible job doing a terrible job, so A is less inadequate than B"]], "asymmetric_conclusion": ["More( does a terrible job(A),  does a terrible job(B)), so Less(inadequate(B), inadequate(A))", ["A does a terrible job while B does a terrible job, so B is less inadequate than A"]], "negated_asymmetric_premise": ["More( does a terrible job(B),  does a terrible job(A)), so not More(inadequate(A), inadequate(B))", ["B does a terrible job while A does not, so A is not more inadequate than B"]], "negated_asymmetric_conclusion": ["More( does a terrible job(A),  does a terrible job(B)), so not More(inadequate(B), inadequate(A))", ["A does a terrible job while B does a terrible job, so B is not more inadequate than A"]]}
{"original": ["More( celebrates halloween(A),  celebrates halloween(B)), so More(careing(A), careing(B))", ["A celebrates halloween more than B, so A is more careing than B"]], "negated": ["More( celebrates halloween(A),  celebrates halloween(B)), so not Less(careing(A), careing(B))", ["A celebrates halloween more than B, so A is not less careing than B"]], "asymmetric_premise": ["More( celebrates halloween(B),  celebrates halloween(A)), so Less(careing(A), careing(B))", ["B celebrates halloween more than A, so A is less careing than B"]], "asymmetric_conclusion": ["More( celebrates halloween(A),  celebrates halloween(B)), so Less(careing(B), careing(A))", ["A celebrates halloween more than B, so B is less careing than A"]], "negated_asymmetric_premise": ["More( celebrates halloween(B),  celebrates halloween(A)), so not More(careing(A), careing(B))", ["B celebrates halloween more than A, so A is not more careing than B"]], "negated_asymmetric_conclusion": ["More( celebrates halloween(A),  celebrates halloween(B)), so not More(careing(B), careing(A))", ["A celebrates halloween more than B, so B is not more careing than A"]]}
{"original": ["More( goes everywhere(A),  goes everywhere(B)), so More(adventurous(A), adventurous(B))", ["A goes everywhere more than B, so A is more adventurous than B"]], "negated": ["More( goes everywhere(A),  goes everywhere(B)), so not Less(adventurous(A), adventurous(B))", ["A goes everywhere more than B, so A is not less adventurous than B"]], "asymmetric_premise": ["More( goes everywhere(B),  goes everywhere(A)), so Less(adventurous(A), adventurous(B))", ["B goes everywhere more than A, so A is less adventurous than B"]], "asymmetric_conclusion": ["More( goes everywhere(A),  goes everywhere(B)), so Less(adventurous(B), adventurous(A))", ["A goes everywhere more than B, so B is less adventurous than A"]], "negated_asymmetric_premise": ["More( goes everywhere(B),  goes everywhere(A)), so not More(adventurous(A), adventurous(B))", ["B goes everywhere more than A, so A is not more adventurous than B"]], "negated_asymmetric_conclusion": ["More( goes everywhere(A),  goes everywhere(B)), so not More(adventurous(B), adventurous(A))", ["A goes everywhere more than B, so B is not more adventurous than A"]]}
{"original": ["More( steps on a rake(A),  steps on a rake(B)), so More(clumsy(A), clumsy(B))", ["A steps on a rake more than B, so A is more clumsy than B"]], "negated": ["More( steps on a rake(A),  steps on a rake(B)), so not Less(clumsy(A), clumsy(B))", ["A steps on a rake more than B, so A is not less clumsy than B"]], "asymmetric_premise": ["More( steps on a rake(B),  steps on a rake(A)), so Less(clumsy(A), clumsy(B))", ["B steps on a rake more than A, so A is less clumsy than B"]], "asymmetric_conclusion": ["More( steps on a rake(A),  steps on a rake(B)), so Less(clumsy(B), clumsy(A))", ["A steps on a rake more than B, so B is less clumsy than A"]], "negated_asymmetric_premise": ["More( steps on a rake(B),  steps on a rake(A)), so not More(clumsy(A), clumsy(B))", ["B steps on a rake more than A, so A is not more clumsy than B"]], "negated_asymmetric_conclusion": ["More( steps on a rake(A),  steps on a rake(B)), so not More(clumsy(B), clumsy(A))", ["A steps on a rake more than B, so B is not more clumsy than A"]]}
{"original": ["More( goes fishing(A),  goes fishing(B)), so More(adventerous(A), adventerous(B))", ["A goes fishing more than B, so A is more adventerous than B"]], "negated": ["More( goes fishing(A),  goes fishing(B)), so not Less(adventerous(A), adventerous(B))", ["A goes fishing more than B, so A is not less adventerous than B"]], "asymmetric_premise": ["More( goes fishing(B),  goes fishing(A)), so Less(adventerous(A), adventerous(B))", ["B goes fishing more than A, so A is less adventerous than B"]], "asymmetric_conclusion": ["More( goes fishing(A),  goes fishing(B)), so Less(adventerous(B), adventerous(A))", ["A goes fishing more than B, so B is less adventerous than A"]], "negated_asymmetric_premise": ["More( goes fishing(B),  goes fishing(A)), so not More(adventerous(A), adventerous(B))", ["B goes fishing more than A, so A is not more adventerous than B"]], "negated_asymmetric_conclusion": ["More( goes fishing(A),  goes fishing(B)), so not More(adventerous(B), adventerous(A))", ["A goes fishing more than B, so B is not more adventerous than A"]]}
{"original": ["More( feels very depressed(A),  feels very depressed(B)), so More(despondent(A), despondent(B))", ["A feels very depressed more than B, so A is more despondent than B"]], "negated": ["More( feels very depressed(A),  feels very depressed(B)), so not Less(despondent(A), despondent(B))", ["A feels very depressed more than B, so A is not less despondent than B"]], "asymmetric_premise": ["More( feels very depressed(B),  feels very depressed(A)), so Less(despondent(A), despondent(B))", ["B feels very depressed more than A, so A is less despondent than B"]], "asymmetric_conclusion": ["More( feels very depressed(A),  feels very depressed(B)), so Less(despondent(B), despondent(A))", ["A feels very depressed more than B, so B is less despondent than A"]], "negated_asymmetric_premise": ["More( feels very depressed(B),  feels very depressed(A)), so not More(despondent(A), despondent(B))", ["B feels very depressed more than A, so A is not more despondent than B"]], "negated_asymmetric_conclusion": ["More( feels very depressed(A),  feels very depressed(B)), so not More(despondent(B), despondent(A))", ["A feels very depressed more than B, so B is not more despondent than A"]]}
{"original": ["More( dates another person's girlfriend(A),  dates another person's girlfriend(B)), so More(cruel(A), cruel(B))", ["A dates another person's girlfriend more than B, so A is more cruel than B"]], "negated": ["More( dates another person's girlfriend(A),  dates another person's girlfriend(B)), so not Less(cruel(A), cruel(B))", ["A dates another person's girlfriend more than B, so A is not less cruel than B"]], "asymmetric_premise": ["More( dates another person's girlfriend(B),  dates another person's girlfriend(A)), so Less(cruel(A), cruel(B))", ["B dates another person's girlfriend more than A, so A is less cruel than B"]], "asymmetric_conclusion": ["More( dates another person's girlfriend(A),  dates another person's girlfriend(B)), so Less(cruel(B), cruel(A))", ["A dates another person's girlfriend more than B, so B is less cruel than A"]], "negated_asymmetric_premise": ["More( dates another person's girlfriend(B),  dates another person's girlfriend(A)), so not More(cruel(A), cruel(B))", ["B dates another person's girlfriend more than A, so A is not more cruel than B"]], "negated_asymmetric_conclusion": ["More( dates another person's girlfriend(A),  dates another person's girlfriend(B)), so not More(cruel(B), cruel(A))", ["A dates another person's girlfriend more than B, so B is not more cruel than A"]]}
{"original": ["More( espouses another person's cause(A),  espouses another person's cause(B)), so More(charitable(A), charitable(B))", ["A espouses another person's cause more than B, so A is more charitable than B"]], "negated": ["More( espouses another person's cause(A),  espouses another person's cause(B)), so not Less(charitable(A), charitable(B))", ["A espouses another person's cause more than B, so A is not less charitable than B"]], "asymmetric_premise": ["More( espouses another person's cause(B),  espouses another person's cause(A)), so Less(charitable(A), charitable(B))", ["B espouses another person's cause more than A, so A is less charitable than B"]], "asymmetric_conclusion": ["More( espouses another person's cause(A),  espouses another person's cause(B)), so Less(charitable(B), charitable(A))", ["A espouses another person's cause more than B, so B is less charitable than A"]], "negated_asymmetric_premise": ["More( espouses another person's cause(B),  espouses another person's cause(A)), so not More(charitable(A), charitable(B))", ["B espouses another person's cause more than A, so A is not more charitable than B"]], "negated_asymmetric_conclusion": ["More( espouses another person's cause(A),  espouses another person's cause(B)), so not More(charitable(B), charitable(A))", ["A espouses another person's cause more than B, so B is not more charitable than A"]]}
{"original": ["More( starts school(A),  starts school(B)), so More(anxious(A), anxious(B))", ["A starts school more than B, so A is more anxious than B"]], "negated": ["More( starts school(A),  starts school(B)), so not Less(anxious(A), anxious(B))", ["A starts school more than B, so A is not less anxious than B"]], "asymmetric_premise": ["More( starts school(B),  starts school(A)), so Less(anxious(A), anxious(B))", ["B starts school more than A, so A is less anxious than B"]], "asymmetric_conclusion": ["More( starts school(A),  starts school(B)), so Less(anxious(B), anxious(A))", ["A starts school more than B, so B is less anxious than A"]], "negated_asymmetric_premise": ["More( starts school(B),  starts school(A)), so not More(anxious(A), anxious(B))", ["B starts school more than A, so A is not more anxious than B"]], "negated_asymmetric_conclusion": ["More( starts school(A),  starts school(B)), so not More(anxious(B), anxious(A))", ["A starts school more than B, so B is not more anxious than A"]]}
{"original": ["More( is ready to eat(A),  is ready to eat(B)), so More(deprived(A), deprived(B))", ["A is ready to eat more than B, so A is more deprived than B"]], "negated": ["More( is ready to eat(A),  is ready to eat(B)), so not Less(deprived(A), deprived(B))", ["A is ready to eat more than B, so A is not less deprived than B"]], "asymmetric_premise": ["More( is ready to eat(B),  is ready to eat(A)), so Less(deprived(A), deprived(B))", ["B is ready to eat more than A, so A is less deprived than B"]], "asymmetric_conclusion": ["More( is ready to eat(A),  is ready to eat(B)), so Less(deprived(B), deprived(A))", ["A is ready to eat more than B, so B is less deprived than A"]], "negated_asymmetric_premise": ["More( is ready to eat(B),  is ready to eat(A)), so not More(deprived(A), deprived(B))", ["B is ready to eat more than A, so A is not more deprived than B"]], "negated_asymmetric_conclusion": ["More( is ready to eat(A),  is ready to eat(B)), so not More(deprived(B), deprived(A))", ["A is ready to eat more than B, so B is not more deprived than A"]]}
{"original": ["More( exits stage left(A),  exits stage left(B)), so More(dramatic(A), dramatic(B))", ["A exits stage left more than B, so A is more dramatic than B"]], "negated": ["More( exits stage left(A),  exits stage left(B)), so not Less(dramatic(A), dramatic(B))", ["A exits stage left more than B, so A is not less dramatic than B"]], "asymmetric_premise": ["More( exits stage left(B),  exits stage left(A)), so Less(dramatic(A), dramatic(B))", ["B exits stage left more than A, so A is less dramatic than B"]], "asymmetric_conclusion": ["More( exits stage left(A),  exits stage left(B)), so Less(dramatic(B), dramatic(A))", ["A exits stage left more than B, so B is less dramatic than A"]], "negated_asymmetric_premise": ["More( exits stage left(B),  exits stage left(A)), so not More(dramatic(A), dramatic(B))", ["B exits stage left more than A, so A is not more dramatic than B"]], "negated_asymmetric_conclusion": ["More( exits stage left(A),  exits stage left(B)), so not More(dramatic(B), dramatic(A))", ["A exits stage left more than B, so B is not more dramatic than A"]]}
{"original": ["More( pays attention to details(A),  pays attention to details(B)), so More(fastidious(A), fastidious(B))", ["A pays attention to details more than B, so A is more fastidious than B"]], "negated": ["More( pays attention to details(A),  pays attention to details(B)), so not Less(fastidious(A), fastidious(B))", ["A pays attention to details more than B, so A is not less fastidious than B"]], "asymmetric_premise": ["More( pays attention to details(B),  pays attention to details(A)), so Less(fastidious(A), fastidious(B))", ["B pays attention to details more than A, so A is less fastidious than B"]], "asymmetric_conclusion": ["More( pays attention to details(A),  pays attention to details(B)), so Less(fastidious(B), fastidious(A))", ["A pays attention to details more than B, so B is less fastidious than A"]], "negated_asymmetric_premise": ["More( pays attention to details(B),  pays attention to details(A)), so not More(fastidious(A), fastidious(B))", ["B pays attention to details more than A, so A is not more fastidious than B"]], "negated_asymmetric_conclusion": ["More( pays attention to details(A),  pays attention to details(B)), so not More(fastidious(B), fastidious(A))", ["A pays attention to details more than B, so B is not more fastidious than A"]]}
{"original": ["More( wants a boyfriend(A),  wants a boyfriend(B)), so More(lonely(A), lonely(B))", ["A wants a boyfriend more than B, so A is more lonely than B"]], "negated": ["More( wants a boyfriend(A),  wants a boyfriend(B)), so not Less(lonely(A), lonely(B))", ["A wants a boyfriend more than B, so A is not less lonely than B"]], "asymmetric_premise": ["More( wants a boyfriend(B),  wants a boyfriend(A)), so Less(lonely(A), lonely(B))", ["B wants a boyfriend more than A, so A is less lonely than B"]], "asymmetric_conclusion": ["More( wants a boyfriend(A),  wants a boyfriend(B)), so Less(lonely(B), lonely(A))", ["A wants a boyfriend more than B, so B is less lonely than A"]], "negated_asymmetric_premise": ["More( wants a boyfriend(B),  wants a boyfriend(A)), so not More(lonely(A), lonely(B))", ["B wants a boyfriend more than A, so A is not more lonely than B"]], "negated_asymmetric_conclusion": ["More( wants a boyfriend(A),  wants a boyfriend(B)), so not More(lonely(B), lonely(A))", ["A wants a boyfriend more than B, so B is not more lonely than A"]]}
{"original": ["More( takes three hours(A),  takes three hours(B)), so More(patient(A), patient(B))", ["A takes three hours more than B, so A is more patient than B"]], "negated": ["More( takes three hours(A),  takes three hours(B)), so not Less(patient(A), patient(B))", ["A takes three hours more than B, so A is not less patient than B"]], "asymmetric_premise": ["More( takes three hours(B),  takes three hours(A)), so Less(patient(A), patient(B))", ["B takes three hours more than A, so A is less patient than B"]], "asymmetric_conclusion": ["More( takes three hours(A),  takes three hours(B)), so Less(patient(B), patient(A))", ["A takes three hours more than B, so B is less patient than A"]], "negated_asymmetric_premise": ["More( takes three hours(B),  takes three hours(A)), so not More(patient(A), patient(B))", ["B takes three hours more than A, so A is not more patient than B"]], "negated_asymmetric_conclusion": ["More( takes three hours(A),  takes three hours(B)), so not More(patient(B), patient(A))", ["A takes three hours more than B, so B is not more patient than A"]]}
{"original": ["More( is n't paying much attention(A),  is n't paying much attention(B)), so More(disinterested(A), disinterested(B))", ["A is n't paying much attention while B is, so A is more disinterested than B"]], "negated": ["More( is n't paying much attention(A),  is n't paying much attention(B)), so not Less(disinterested(A), disinterested(B))", ["A is n't paying much attention while B is, so A is not less disinterested than B"]], "asymmetric_premise": ["More( is n't paying much attention(B),  is n't paying much attention(A)), so Less(disinterested(A), disinterested(B))", ["B is n't paying much attention while A is, so A is less disinterested than B"]], "asymmetric_conclusion": ["More( is n't paying much attention(A),  is n't paying much attention(B)), so Less(disinterested(B), disinterested(A))", ["A is n't paying much attention to B, so B is less disinterested than A"]], "negated_asymmetric_premise": ["More( is n't paying much attention(B),  is n't paying much attention(A)), so not More(disinterested(A), disinterested(B))", ["B is n't paying much attention while A is, so A is not more disinterested than B"]], "negated_asymmetric_conclusion": ["More( is n't paying much attention(A),  is n't paying much attention(B)), so not More(disinterested(B), disinterested(A))", ["A is n't paying much attention while B is, so B is not more disinterested than A"]]}
{"original": ["More( is on vacation in florida(A),  is on vacation in florida(B)), so More(adventurous(A), adventurous(B))", ["A is on vacation in florida more than B, so A is more adventurous than B"]], "negated": ["More( is on vacation in florida(A),  is on vacation in florida(B)), so not Less(adventurous(A), adventurous(B))", ["A is on vacation in florida more than B, so A is not less adventurous than B"]], "asymmetric_premise": ["More( is on vacation in florida(B),  is on vacation in florida(A)), so Less(adventurous(A), adventurous(B))", ["B is on vacation in florida more than A, so A is less adventurous than B"]], "asymmetric_conclusion": ["More( is on vacation in florida(A),  is on vacation in florida(B)), so Less(adventurous(B), adventurous(A))", ["A is on vacation in florida more than B, so B is less adventurous than A"]], "negated_asymmetric_premise": ["More( is on vacation in florida(B),  is on vacation in florida(A)), so not More(adventurous(A), adventurous(B))", ["B is on vacation in florida more than A, so A is not more adventurous than B"]], "negated_asymmetric_conclusion": ["More( is on vacation in florida(A),  is on vacation in florida(B)), so not More(adventurous(B), adventurous(A))", ["A is on vacation in florida more than B, so B is not more adventurous than A"]]}
{"original": ["More( tells the teacher(A),  tells the teacher(B)), so More(dork(A), dork(B))", ["A tells the teacher more than B, so A is more dork than B"]], "negated": ["More( tells the teacher(A),  tells the teacher(B)), so not Less(dork(A), dork(B))", ["A tells the teacher more than B, so A is not less dork than B"]], "asymmetric_premise": ["More( tells the teacher(B),  tells the teacher(A)), so Less(dork(A), dork(B))", ["B tells the teacher more than A, so A is less dork than B"]], "asymmetric_conclusion": ["More( tells the teacher(A),  tells the teacher(B)), so Less(dork(B), dork(A))", ["A tells the teacher more than B, so B is less dork than A"]], "negated_asymmetric_premise": ["More( tells the teacher(B),  tells the teacher(A)), so not More(dork(A), dork(B))", ["B tells the teacher more than A, so A is not more dork than B"]], "negated_asymmetric_conclusion": ["More( tells the teacher(A),  tells the teacher(B)), so not More(dork(B), dork(A))", ["A tells the teacher more than B, so B is not more dork than A"]]}
{"original": ["More( makes a doctor 's appointment(A),  makes a doctor 's appointment(B)), so More(responsible(A), responsible(B))", ["A makes a doctor 's appointment more than B, so A is more responsible than B"]], "negated": ["More( makes a doctor 's appointment(A),  makes a doctor 's appointment(B)), so not Less(responsible(A), responsible(B))", ["A makes a doctor 's appointment more than B, so A is not less responsible than B"]], "asymmetric_premise": ["More( makes a doctor 's appointment(B),  makes a doctor 's appointment(A)), so Less(responsible(A), responsible(B))", ["B makes a doctor 's appointment more than A, so A is less responsible than B"]], "asymmetric_conclusion": ["More( makes a doctor 's appointment(A),  makes a doctor 's appointment(B)), so Less(responsible(B), responsible(A))", ["A makes a doctor 's appointment more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["More( makes a doctor 's appointment(B),  makes a doctor 's appointment(A)), so not More(responsible(A), responsible(B))", ["B makes a doctor 's appointment more than A, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["More( makes a doctor 's appointment(A),  makes a doctor 's appointment(B)), so not More(responsible(B), responsible(A))", ["A makes a doctor 's appointment more than B, so B is not more responsible than A"]]}
{"original": ["More( writes another person letter(A),  writes another person letter(B)), so More(friendly(A), friendly(B))", ["A writes another person letter more than B, so A is more friendly than B"]], "negated": ["More( writes another person letter(A),  writes another person letter(B)), so not Less(friendly(A), friendly(B))", ["A writes another person letter more than B, so A is not less friendly than B"]], "asymmetric_premise": ["More( writes another person letter(B),  writes another person letter(A)), so Less(friendly(A), friendly(B))", ["B writes another person letter more than A, so A is less friendly than B"]], "asymmetric_conclusion": ["More( writes another person letter(A),  writes another person letter(B)), so Less(friendly(B), friendly(A))", ["A writes another person letter more than B, so B is less friendly than A"]], "negated_asymmetric_premise": ["More( writes another person letter(B),  writes another person letter(A)), so not More(friendly(A), friendly(B))", ["B writes another person letter more than A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["More( writes another person letter(A),  writes another person letter(B)), so not More(friendly(B), friendly(A))", ["A writes another person letter more than B, so B is not more friendly than A"]]}
{"original": ["More( wears their helmet(A),  wears their helmet(B)), so More(safe(A), safe(B))", ["A wears their helmet more than B, so A is more safe than B"]], "negated": ["More( wears their helmet(A),  wears their helmet(B)), so not Less(safe(A), safe(B))", ["A wears their helmet more than B, so A is not less safe than B"]], "asymmetric_premise": ["More( wears their helmet(B),  wears their helmet(A)), so Less(safe(A), safe(B))", ["B wears their helmet more than A, so A is less safe than B"]], "asymmetric_conclusion": ["More( wears their helmet(A),  wears their helmet(B)), so Less(safe(B), safe(A))", ["A wears their helmet more than B, so B is less safe than A"]], "negated_asymmetric_premise": ["More( wears their helmet(B),  wears their helmet(A)), so not More(safe(A), safe(B))", ["B wears their helmet more than A, so A is not more safe than B"]], "negated_asymmetric_conclusion": ["More( wears their helmet(A),  wears their helmet(B)), so not More(safe(B), safe(A))", ["A wears their helmet more than B, so B is not more safe than A"]]}
{"original": ["More( takes the train(A),  takes the train(B)), so More(lazy(A), lazy(B))", ["A takes the train more than B, so A is more lazy than B"]], "negated": ["More( takes the train(A),  takes the train(B)), so not Less(lazy(A), lazy(B))", ["A takes the train more than B, so A is not less lazy than B"]], "asymmetric_premise": ["More( takes the train(B),  takes the train(A)), so Less(lazy(A), lazy(B))", ["B takes the train more than A, so A is less lazy than B"]], "asymmetric_conclusion": ["More( takes the train(A),  takes the train(B)), so Less(lazy(B), lazy(A))", ["A takes the train more than B, so B is less lazy than A"]], "negated_asymmetric_premise": ["More( takes the train(B),  takes the train(A)), so not More(lazy(A), lazy(B))", ["B takes the train more than A, so A is not more lazy than B"]], "negated_asymmetric_conclusion": ["More( takes the train(A),  takes the train(B)), so not More(lazy(B), lazy(A))", ["A takes the train more than B, so B is not more lazy than A"]]}
{"original": ["More( takes the dog to the vet(A),  takes the dog to the vet(B)), so More(concerned(A), concerned(B))", ["A takes the dog to the vet more than B, so A is more concerned than B"]], "negated": ["More( takes the dog to the vet(A),  takes the dog to the vet(B)), so not Less(concerned(A), concerned(B))", ["A takes the dog to the vet more than B, so A is not less concerned than B"]], "asymmetric_premise": ["More( takes the dog to the vet(B),  takes the dog to the vet(A)), so Less(concerned(A), concerned(B))", ["B takes the dog to the vet more than A, so A is less concerned than B"]], "asymmetric_conclusion": ["More( takes the dog to the vet(A),  takes the dog to the vet(B)), so Less(concerned(B), concerned(A))", ["A takes the dog to the vet more than B, so B is less concerned than A"]], "negated_asymmetric_premise": ["More( takes the dog to the vet(B),  takes the dog to the vet(A)), so not More(concerned(A), concerned(B))", ["B takes the dog to the vet more than A, so A is not more concerned than B"]], "negated_asymmetric_conclusion": ["More( takes the dog to the vet(A),  takes the dog to the vet(B)), so not More(concerned(B), concerned(A))", ["A takes the dog to the vet more than B, so B is not more concerned than A"]]}
{"original": ["More( feels like forever(A),  feels like forever(B)), so More(determined(A), determined(B))", ["A feels like forever more than B, so A is more determined than B"]], "negated": ["More( feels like forever(A),  feels like forever(B)), so not Less(determined(A), determined(B))", ["A has been alive for more feels like forever than B, so A is not less determined than B"]], "asymmetric_premise": ["More( feels like forever(B),  feels like forever(A)), so Less(determined(A), determined(B))", ["B feels like forever more than A, so A is less determined than B"]], "asymmetric_conclusion": ["More( feels like forever(A),  feels like forever(B)), so Less(determined(B), determined(A))", ["A has been alive for more than B, so B is less determined than A"]], "negated_asymmetric_premise": ["More( feels like forever(B),  feels like forever(A)), so not More(determined(A), determined(B))", ["B feels like forever more than A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["More( feels like forever(A),  feels like forever(B)), so not More(determined(B), determined(A))", ["A feels like forever more than B, so B is not more determined than A"]]}
{"original": ["More( has a seat(A),  has a seat(B)), so More(glad(A), glad(B))", ["A has a seat more than B, so A is more glad than B"]], "negated": ["More( has a seat(A),  has a seat(B)), so not Less(glad(A), glad(B))", ["A has a seat more than B, so A is not less glad than B"]], "asymmetric_premise": ["More( has a seat(B),  has a seat(A)), so Less(glad(A), glad(B))", ["B has a seat more than A, so A is less glad than B"]], "asymmetric_conclusion": ["More( has a seat(A),  has a seat(B)), so Less(glad(B), glad(A))", ["A has a seat more than B, so B is less glad than A"]], "negated_asymmetric_premise": ["More( has a seat(B),  has a seat(A)), so not More(glad(A), glad(B))", ["B has a seat more than A, so A is not more glad than B"]], "negated_asymmetric_conclusion": ["More( has a seat(A),  has a seat(B)), so not More(glad(B), glad(A))", ["A has a seat more than B, so B is not more glad than A"]]}
{"original": ["More( loses money(A),  loses money(B)), so More(a gambler(A), a gambler(B))", ["A loses money more than B, so A is more a gambler than B"]], "negated": ["More( loses money(A),  loses money(B)), so not Less(a gambler(A), a gambler(B))", ["A loses money more than B, so A is not less a gambler than B"]], "asymmetric_premise": ["More( loses money(B),  loses money(A)), so Less(a gambler(A), a gambler(B))", ["B loses money more than A, so A is less a gambler than B"]], "asymmetric_conclusion": ["More( loses money(A),  loses money(B)), so Less(a gambler(B), a gambler(A))", ["A loses money more than B, so B is less a gambler than A"]], "negated_asymmetric_premise": ["More( loses money(B),  loses money(A)), so not More(a gambler(A), a gambler(B))", ["B loses money more than A, so A is not more of a gambler than B"]], "negated_asymmetric_conclusion": ["More( loses money(A),  loses money(B)), so not More(a gambler(B), a gambler(A))", ["A loses money more than B, so B is not more a gambler than A"]]}
{"original": ["More( talks to another person's boss(A),  talks to another person's boss(B)), so More(considerate(A), considerate(B))", ["A talks to another person's boss more than B, so A is more considerate than B"]], "negated": ["More( talks to another person's boss(A),  talks to another person's boss(B)), so not Less(considerate(A), considerate(B))", ["A talks to another person's boss more than B, so A is not less considerate than B"]], "asymmetric_premise": ["More( talks to another person's boss(B),  talks to another person's boss(A)), so Less(considerate(A), considerate(B))", ["B talks to another person's boss more than A, so A is less considerate than B"]], "asymmetric_conclusion": ["More( talks to another person's boss(A),  talks to another person's boss(B)), so Less(considerate(B), considerate(A))", ["A talks to another person's boss more than B, so B is less considerate than A"]], "negated_asymmetric_premise": ["More( talks to another person's boss(B),  talks to another person's boss(A)), so not More(considerate(A), considerate(B))", ["B talks to another person's boss more than A, so A is not more considerate than B"]], "negated_asymmetric_conclusion": ["More( talks to another person's boss(A),  talks to another person's boss(B)), so not More(considerate(B), considerate(A))", ["A talks to another person's boss more than B, so B is not more considerate than A"]]}
{"original": ["More( eats another person out of house and home(A),  eats another person out of house and home(B)), so More(social(A), social(B))", ["A eats another person out of house and home more than B, so A is more social than B"]], "negated": ["More( eats another person out of house and home(A),  eats another person out of house and home(B)), so not Less(social(A), social(B))", ["A eats another person out of house and home more than B, so A is not less social than B"]], "asymmetric_premise": ["More( eats another person out of house and home(B),  eats another person out of house and home(A)), so Less(social(A), social(B))", ["B eats another person out of house and home more than A, so A is less social than B"]], "asymmetric_conclusion": ["More( eats another person out of house and home(A),  eats another person out of house and home(B)), so Less(social(B), social(A))", ["A eats another person out of house and home more than B, so B is less social than A"]], "negated_asymmetric_premise": ["More( eats another person out of house and home(B),  eats another person out of house and home(A)), so not More(social(A), social(B))", ["B eats another person out of house and home more than A, so A is not more social than B"]], "negated_asymmetric_conclusion": ["More( eats another person out of house and home(A),  eats another person out of house and home(B)), so not More(social(B), social(A))", ["A eats another person out of house and home more than B, so B is not more social than A"]]}
{"original": ["More( swims at the local pool(A),  swims at the local pool(B)), so More(community spirited(A), community spirited(B))", ["A swims at the local pool more than B, so A is more community spirited than B"]], "negated": ["More( swims at the local pool(A),  swims at the local pool(B)), so not Less(community spirited(A), community spirited(B))", ["A swims at the local pool more than B, so A is not less community spirited than B"]], "asymmetric_premise": ["More( swims at the local pool(B),  swims at the local pool(A)), so Less(community spirited(A), community spirited(B))", ["B swims at the local pool more than A, so A is less community spirited than B"]], "asymmetric_conclusion": ["More( swims at the local pool(A),  swims at the local pool(B)), so Less(community spirited(B), community spirited(A))", ["A swims at the local pool more than B, so B is less community spirited than A"]], "negated_asymmetric_premise": ["More( swims at the local pool(B),  swims at the local pool(A)), so not More(community spirited(A), community spirited(B))", ["B swims at the local pool more than A, so A is not more community spirited than B"]], "negated_asymmetric_conclusion": ["More( swims at the local pool(A),  swims at the local pool(B)), so not More(community spirited(B), community spirited(A))", ["A swims at the local pool more than B, so B is not more community spirited than A"]]}
{"original": ["More( is sick and tired(A),  is sick and tired(B)), so More(cold(A), cold(B))", ["A is sick and tired more than B, so A is more cold than B"]], "negated": ["More( is sick and tired(A),  is sick and tired(B)), so not Less(cold(A), cold(B))", ["A is sick and tired more than B, so A is not less cold than B"]], "asymmetric_premise": ["More( is sick and tired(B),  is sick and tired(A)), so Less(cold(A), cold(B))", ["B is sick and tired more than A, so A is less cold than B"]], "asymmetric_conclusion": ["More( is sick and tired(A),  is sick and tired(B)), so Less(cold(B), cold(A))", ["A is sick and tired more than B, so B is less cold than A"]], "negated_asymmetric_premise": ["More( is sick and tired(B),  is sick and tired(A)), so not More(cold(A), cold(B))", ["B is sick and tired more than A, so A is not more cold than B"]], "negated_asymmetric_conclusion": ["More( is sick and tired(A),  is sick and tired(B)), so not More(cold(B), cold(A))", ["A is sick and tired more than B, so B is not more cold than A"]]}
{"original": ["More( asks to leave(A),  asks to leave(B)), so More(upset(A), upset(B))", ["A asks to leave while B does not, so A is more upset than B"]], "negated": ["More( asks to leave(A),  asks to leave(B)), so not Less(upset(A), upset(B))", ["A asks to leave more than B, so A is not less upset than B"]], "asymmetric_premise": ["More( asks to leave(B),  asks to leave(A)), so Less(upset(A), upset(B))", ["B asks to leave, A does not, so A is less upset than B"]], "asymmetric_conclusion": ["More( asks to leave(A),  asks to leave(B)), so Less(upset(B), upset(A))", ["A asks to leave more than B, so B is less upset than A"]], "negated_asymmetric_premise": ["More( asks to leave(B),  asks to leave(A)), so not More(upset(A), upset(B))", ["B asks to leave more than A, so A is not more upset than B"]], "negated_asymmetric_conclusion": ["More( asks to leave(A),  asks to leave(B)), so not More(upset(B), upset(A))", ["A asks to leave more than B, so B is not more upset than A"]]}
{"original": ["More( loves another person's motorcycle(A),  loves another person's motorcycle(B)), so More(jealous(A), jealous(B))", ["A loves another person's motorcycle more than B, so A is more jealous than B"]], "negated": ["More( loves another person's motorcycle(A),  loves another person's motorcycle(B)), so not Less(jealous(A), jealous(B))", ["A loves another person's motorcycle more than B, so A is not less jealous than B"]], "asymmetric_premise": ["More( loves another person's motorcycle(B),  loves another person's motorcycle(A)), so Less(jealous(A), jealous(B))", ["B loves another person's motorcycle more than A, so A is less jealous than B"]], "asymmetric_conclusion": ["More( loves another person's motorcycle(A),  loves another person's motorcycle(B)), so Less(jealous(B), jealous(A))", ["A loves another person's motorcycle more than B, so B is less jealous than A"]], "negated_asymmetric_premise": ["More( loves another person's motorcycle(B),  loves another person's motorcycle(A)), so not More(jealous(A), jealous(B))", ["B loves another person's motorcycle more than A, so A is not more jealous than B"]], "negated_asymmetric_conclusion": ["More( loves another person's motorcycle(A),  loves another person's motorcycle(B)), so not More(jealous(B), jealous(A))", ["A loves another person's motorcycle more than B, so B is not more jealous than A"]]}
{"original": ["More( buys a new bike(A),  buys a new bike(B)), so More(acquisitive(A), acquisitive(B))", ["A buys a new bike more than B, so A is more acquisitive than B"]], "negated": ["More( buys a new bike(A),  buys a new bike(B)), so not Less(acquisitive(A), acquisitive(B))", ["A buys a new bike more than B, so A is not less acquisitive than B"]], "asymmetric_premise": ["More( buys a new bike(B),  buys a new bike(A)), so Less(acquisitive(A), acquisitive(B))", ["B buys a new bike more than A, so A is less acquisitive than B"]], "asymmetric_conclusion": ["More( buys a new bike(A),  buys a new bike(B)), so Less(acquisitive(B), acquisitive(A))", ["A buys a new bike more than B, so B is less acquisitive than A"]], "negated_asymmetric_premise": ["More( buys a new bike(B),  buys a new bike(A)), so not More(acquisitive(A), acquisitive(B))", ["B buys a new bike more than A, so A is not more acquisitive than B"]], "negated_asymmetric_conclusion": ["More( buys a new bike(A),  buys a new bike(B)), so not More(acquisitive(B), acquisitive(A))", ["A buys a new bike more than B, so B is not more acquisitive than A"]]}
{"original": ["More( calls the cops(A),  calls the cops(B)), so More(frightened(A), frightened(B))", ["A calls the cops more than B, so A is more frightened than B"]], "negated": ["More( calls the cops(A),  calls the cops(B)), so not Less(frightened(A), frightened(B))", ["A calls the cops more than B, so A is not less frightened than B"]], "asymmetric_premise": ["More( calls the cops(B),  calls the cops(A)), so Less(frightened(A), frightened(B))", ["B calls the cops more than A, so A is less frightened than B"]], "asymmetric_conclusion": ["More( calls the cops(A),  calls the cops(B)), so Less(frightened(B), frightened(A))", ["A calls the cops more than B, so B is less frightened than A"]], "negated_asymmetric_premise": ["More( calls the cops(B),  calls the cops(A)), so not More(frightened(A), frightened(B))", ["B calls the cops more than A, so A is not more frightened than B"]], "negated_asymmetric_conclusion": ["More( calls the cops(A),  calls the cops(B)), so not More(frightened(B), frightened(A))", ["A calls the cops more than B, so B is not more frightened than A"]]}
{"original": ["More( performs their functions(A),  performs their functions(B)), so More(excitable(A), excitable(B))", ["A performs their functions more than B, so A is more excitable than B"]], "negated": ["More( performs their functions(A),  performs their functions(B)), so not Less(excitable(A), excitable(B))", ["A performs their functions more than B, so A is not less excitable than B"]], "asymmetric_premise": ["More( performs their functions(B),  performs their functions(A)), so Less(excitable(A), excitable(B))", ["B performs their functions more than A, so A is less excitable than B"]], "asymmetric_conclusion": ["More( performs their functions(A),  performs their functions(B)), so Less(excitable(B), excitable(A))", ["A performs their functions more than B, so B is less excitable than A"]], "negated_asymmetric_premise": ["More( performs their functions(B),  performs their functions(A)), so not More(excitable(A), excitable(B))", ["B performs their functions more than A, so A is not more excitable than B"]], "negated_asymmetric_conclusion": ["More( performs their functions(A),  performs their functions(B)), so not More(excitable(B), excitable(A))", ["A performs their functions more than B, so B is not more excitable than A"]]}
{"original": ["More( risks another person's life(A),  risks another person's life(B)), so More(dangerous(A), dangerous(B))", ["A risks another person's life more than B, so A is more dangerous than B"]], "negated": ["More( risks another person's life(A),  risks another person's life(B)), so not Less(dangerous(A), dangerous(B))", ["A risks another person's life more than B, so A is not less dangerous than B"]], "asymmetric_premise": ["More( risks another person's life(B),  risks another person's life(A)), so Less(dangerous(A), dangerous(B))", ["B risks another person's life more than A, so A is less dangerous than B"]], "asymmetric_conclusion": ["More( risks another person's life(A),  risks another person's life(B)), so Less(dangerous(B), dangerous(A))", ["A risks another person's life more than B, so B is less dangerous than A"]], "negated_asymmetric_premise": ["More( risks another person's life(B),  risks another person's life(A)), so not More(dangerous(A), dangerous(B))", ["B risks another person's life more than A, so A is not more dangerous than B"]], "negated_asymmetric_conclusion": ["More( risks another person's life(A),  risks another person's life(B)), so not More(dangerous(B), dangerous(A))", ["A risks another person's life more than B, so B is not more dangerous than A"]]}
{"original": ["More( arrives back home(A),  arrives back home(B)), so More(restless(A), restless(B))", ["A arrives back home more than B, so A is more restless than B"]], "negated": ["More( arrives back home(A),  arrives back home(B)), so not Less(restless(A), restless(B))", ["A arrives back home more than B, so A is not less restless than B"]], "asymmetric_premise": ["More( arrives back home(B),  arrives back home(A)), so Less(restless(A), restless(B))", ["B arrives back home more than A, so A is less restless than B"]], "asymmetric_conclusion": ["More( arrives back home(A),  arrives back home(B)), so Less(restless(B), restless(A))", ["A arrives back home more than B, so B is less restless than A"]], "negated_asymmetric_premise": ["More( arrives back home(B),  arrives back home(A)), so not More(restless(A), restless(B))", ["B arrives back home more than A, so A is not more restless than B"]], "negated_asymmetric_conclusion": ["More( arrives back home(A),  arrives back home(B)), so not More(restless(B), restless(A))", ["A arrives back home more than B, so B is not more restless than A"]]}
{"original": ["More( tells another person would go(A),  tells another person would go(B)), so More(controlling(A), controlling(B))", ["A tells another person would go more than B, so A is more controlling than B"]], "negated": ["More( tells another person would go(A),  tells another person would go(B)), so not Less(controlling(A), controlling(B))", ["A tells another person would go more than B, so A is not less controlling than B"]], "asymmetric_premise": ["More( tells another person would go(B),  tells another person would go(A)), so Less(controlling(A), controlling(B))", ["B tells another person would go more than A, so A is less controlling than B"]], "asymmetric_conclusion": ["More( tells another person would go(A),  tells another person would go(B)), so Less(controlling(B), controlling(A))", ["A tells another person would go more than B, so B is less controlling than A"]], "negated_asymmetric_premise": ["More( tells another person would go(B),  tells another person would go(A)), so not More(controlling(A), controlling(B))", ["B tells another person would go more than A, so A is not more controlling than B"]], "negated_asymmetric_conclusion": ["More( tells another person would go(A),  tells another person would go(B)), so not More(controlling(B), controlling(A))", ["A tells another person would go more than B, so B is not more controlling than A"]]}
{"original": ["More( starts looking for a new job(A),  starts looking for a new job(B)), so More(hardworking(A), hardworking(B))", ["A starts looking for a new job more than B, so A is more hardworking than B"]], "negated": ["More( starts looking for a new job(A),  starts looking for a new job(B)), so not Less(hardworking(A), hardworking(B))", ["A starts looking for a new job more than B, so A is not less hardworking than B"]], "asymmetric_premise": ["More( starts looking for a new job(B),  starts looking for a new job(A)), so Less(hardworking(A), hardworking(B))", ["B starts looking for a new job more than A, so A is less hardworking than B"]], "asymmetric_conclusion": ["More( starts looking for a new job(A),  starts looking for a new job(B)), so Less(hardworking(B), hardworking(A))", ["A starts looking for a new job more than B, so B is less hardworking than A"]], "negated_asymmetric_premise": ["More( starts looking for a new job(B),  starts looking for a new job(A)), so not More(hardworking(A), hardworking(B))", ["B starts looking for a new job more than A, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": ["More( starts looking for a new job(A),  starts looking for a new job(B)), so not More(hardworking(B), hardworking(A))", ["A starts looking for a new job more than B, so B is not more hardworking than A"]]}
{"original": ["More( stays put(A),  stays put(B)), so More(lazy(A), lazy(B))", ["A stays put more than B, so A is more lazy than B"]], "negated": ["More( stays put(A),  stays put(B)), so not Less(lazy(A), lazy(B))", ["A stays put more than B, so A is not less lazy than B"]], "asymmetric_premise": ["More( stays put(B),  stays put(A)), so Less(lazy(A), lazy(B))", ["B stays put more than A, so A is less lazy than B"]], "asymmetric_conclusion": ["More( stays put(A),  stays put(B)), so Less(lazy(B), lazy(A))", ["A stays put more than B, so B is less lazy than A"]], "negated_asymmetric_premise": ["More( stays put(B),  stays put(A)), so not More(lazy(A), lazy(B))", ["B stays put more than A, so A is not more lazy than B"]], "negated_asymmetric_conclusion": ["More( stays put(A),  stays put(B)), so not More(lazy(B), lazy(A))", ["A stays put more than B, so B is not more lazy than A"]]}
{"original": ["More( turns another person's back on another person(A),  turns another person's back on another person(B)), so More(betraying(A), betraying(B))", ["A turns another person's back on another person more than B, so A is more betraying than B"]], "negated": ["More( turns another person's back on another person(A),  turns another person's back on another person(B)), so not Less(betraying(A), betraying(B))", ["A turns another person's back on another person more than B, so A is not less betraying than B"]], "asymmetric_premise": ["More( turns another person's back on another person(B),  turns another person's back on another person(A)), so Less(betraying(A), betraying(B))", ["B turns another person's back on another person more than A, so A is less betraying than B"]], "asymmetric_conclusion": ["More( turns another person's back on another person(A),  turns another person's back on another person(B)), so Less(betraying(B), betraying(A))", ["A turns another person's back on another person more than B, so B is less betraying than A"]], "negated_asymmetric_premise": ["More( turns another person's back on another person(B),  turns another person's back on another person(A)), so not More(betraying(A), betraying(B))", ["B turns another person's back on another person more than A, so A is not more betraying than B"]], "negated_asymmetric_conclusion": ["More( turns another person's back on another person(A),  turns another person's back on another person(B)), so not More(betraying(B), betraying(A))", ["A turns another person's back on another person's back on another person more than B, so B is not more betraying than A"]]}
{"original": ["More( gets another person's number(A),  gets another person's number(B)), so More(smooth(A), smooth(B))", ["A gets another person's number more than B, so A is more smooth than B"]], "negated": ["More( gets another person's number(A),  gets another person's number(B)), so not Less(smooth(A), smooth(B))", ["A gets another person's number more than B, so A is not less smooth than B"]], "asymmetric_premise": ["More( gets another person's number(B),  gets another person's number(A)), so Less(smooth(A), smooth(B))", ["B gets another person's number more than A, so A is less smooth than B"]], "asymmetric_conclusion": ["More( gets another person's number(A),  gets another person's number(B)), so Less(smooth(B), smooth(A))", ["A gets another person's number more than B, so B is less smooth than A"]], "negated_asymmetric_premise": ["More( gets another person's number(B),  gets another person's number(A)), so not More(smooth(A), smooth(B))", ["B gets another person's number more than A, so A is not more smooth than B"]], "negated_asymmetric_conclusion": ["More( gets another person's number(A),  gets another person's number(B)), so not More(smooth(B), smooth(A))", ["A gets another person's number more than B, so B is not more smooth than A"]]}
{"original": ["More( is n't paying much attention(A),  is n't paying much attention(B)), so More(lazy(A), lazy(B))", ["A is n't paying much attention while B is, so A is more lazy than B"]], "negated": ["More( is n't paying much attention(A),  is n't paying much attention(B)), so not Less(lazy(A), lazy(B))", ["A is n't paying much attention while B is, so A is not less lazy than B"]], "asymmetric_premise": ["More( is n't paying much attention(B),  is n't paying much attention(A)), so Less(lazy(A), lazy(B))", ["B is n't paying much attention while A is, so A is less lazy than B"]], "asymmetric_conclusion": ["More( is n't paying much attention(A),  is n't paying much attention(B)), so Less(lazy(B), lazy(A))", ["A is n't paying much attention while B is, so B is less lazy than A"]], "negated_asymmetric_premise": ["More( is n't paying much attention(B),  is n't paying much attention(A)), so not More(lazy(A), lazy(B))", ["B is n't paying much attention while A is, so A is not more lazy than B"]], "negated_asymmetric_conclusion": ["More( is n't paying much attention(A),  is n't paying much attention(B)), so not More(lazy(B), lazy(A))", ["A is n't paying much attention more than B, so B is not more lazy than A"]]}
{"original": ["More( buys their lunch(A),  buys their lunch(B)), so More(kind(A), kind(B))", ["A buys their lunch more than B, so A is more kind than B"]], "negated": ["More( buys their lunch(A),  buys their lunch(B)), so not Less(kind(A), kind(B))", ["A buys their lunch more than B, so A is not less kind than B"]], "asymmetric_premise": ["More( buys their lunch(B),  buys their lunch(A)), so Less(kind(A), kind(B))", ["B buys their lunch more than A, so A is less kind than B"]], "asymmetric_conclusion": ["More( buys their lunch(A),  buys their lunch(B)), so Less(kind(B), kind(A))", ["A buys their lunch more than B, so B is less kind than A"]], "negated_asymmetric_premise": ["More( buys their lunch(B),  buys their lunch(A)), so not More(kind(A), kind(B))", ["B buys their lunch more than A, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["More( buys their lunch(A),  buys their lunch(B)), so not More(kind(B), kind(A))", ["A buys their lunch more than B, so B is not more kind than A"]]}
{"original": ["More( gives another person expression(A),  gives another person expression(B)), so More(honest(A), honest(B))", ["A gives another person expression more than B, so A is more honest than B"]], "negated": ["More( gives another person expression(A),  gives another person expression(B)), so not Less(honest(A), honest(B))", ["A gives another person expression more than B, so A is not less honest than B"]], "asymmetric_premise": ["More( gives another person expression(B),  gives another person expression(A)), so Less(honest(A), honest(B))", ["B gives another person expression more than A, so A is less honest than B"]], "asymmetric_conclusion": ["More( gives another person expression(A),  gives another person expression(B)), so Less(honest(B), honest(A))", ["A gives another person expression more than B, so B is less honest than A"]], "negated_asymmetric_premise": ["More( gives another person expression(B),  gives another person expression(A)), so not More(honest(A), honest(B))", ["B gives another person expression more than A, so A is not more honest than B"]], "negated_asymmetric_conclusion": ["More( gives another person expression(A),  gives another person expression(B)), so not More(honest(B), honest(A))", ["A gives another person expression more than B, so B is not more honest than A"]]}
{"original": ["More( poops their pants(A),  poops their pants(B)), so More(passive(A), passive(B))", ["A poops their pants more than B, so A is more passive than B"]], "negated": ["More( poops their pants(A),  poops their pants(B)), so not Less(passive(A), passive(B))", ["A poops their pants more than B, so A is not less passive than B"]], "asymmetric_premise": ["More( poops their pants(B),  poops their pants(A)), so Less(passive(A), passive(B))", ["B poops their pants more than A, so A is less passive than B"]], "asymmetric_conclusion": ["More( poops their pants(A),  poops their pants(B)), so Less(passive(B), passive(A))", ["A poops their pants more than B, so B is less passive than A"]], "negated_asymmetric_premise": ["More( poops their pants(B),  poops their pants(A)), so not More(passive(A), passive(B))", ["B poops their pants more than A, so A is not more passive than B"]], "negated_asymmetric_conclusion": ["More( poops their pants(A),  poops their pants(B)), so not More(passive(B), passive(A))", ["A poops their pants more than B, so B is not more passive than A"]]}
{"original": ["More( delivers pizzas(A),  delivers pizzas(B)), so More(determined(A), determined(B))", ["A delivers pizzas more than B, so A is more determined than B"]], "negated": ["More( delivers pizzas(A),  delivers pizzas(B)), so not Less(determined(A), determined(B))", ["A delivers pizzas more than B, so A is not less determined than B"]], "asymmetric_premise": ["More( delivers pizzas(B),  delivers pizzas(A)), so Less(determined(A), determined(B))", ["B delivers pizzas more than A, so A is less determined than B"]], "asymmetric_conclusion": ["More( delivers pizzas(A),  delivers pizzas(B)), so Less(determined(B), determined(A))", ["A delivers pizzas more than B, so B is less determined than A"]], "negated_asymmetric_premise": ["More( delivers pizzas(B),  delivers pizzas(A)), so not More(determined(A), determined(B))", ["B delivers pizzas more than A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["More( delivers pizzas(A),  delivers pizzas(B)), so not More(determined(B), determined(A))", ["A delivers pizzas more than B, so B is not more determined than A"]]}
{"original": ["More( weighs their options(A),  weighs their options(B)), so More(contemplative(A), contemplative(B))", ["A weighs their options more than B, so A is more contemplative than B"]], "negated": ["More( weighs their options(A),  weighs their options(B)), so not Less(contemplative(A), contemplative(B))", ["A weighs their options more than B, so A is not less contemplative than B"]], "asymmetric_premise": ["More( weighs their options(B),  weighs their options(A)), so Less(contemplative(A), contemplative(B))", ["B weighs their options more than A, so A is less contemplative than B"]], "asymmetric_conclusion": ["More( weighs their options(A),  weighs their options(B)), so Less(contemplative(B), contemplative(A))", ["A weighs their options more than B, so B is less contemplative than A"]], "negated_asymmetric_premise": ["More( weighs their options(B),  weighs their options(A)), so not More(contemplative(A), contemplative(B))", ["B weighs their options more than A, so A is not more contemplative than B"]], "negated_asymmetric_conclusion": ["More( weighs their options(A),  weighs their options(B)), so not More(contemplative(B), contemplative(A))", ["A weighs their options more than B, so B is not more contemplative than A"]]}
{"original": ["More( puts another person's arms(A),  puts another person's arms(B)), so More(friendly(A), friendly(B))", ["A puts another person's arms more than B, so A is more friendly than B"]], "negated": ["More( puts another person's arms(A),  puts another person's arms(B)), so not Less(friendly(A), friendly(B))", ["A puts another person's arms more than B, so A is not less friendly than B"]], "asymmetric_premise": ["More( puts another person's arms(B),  puts another person's arms(A)), so Less(friendly(A), friendly(B))", ["B puts another person's arms more than A, so A is less friendly than B"]], "asymmetric_conclusion": ["More( puts another person's arms(A),  puts another person's arms(B)), so Less(friendly(B), friendly(A))", ["A puts another person's arms more than B, so B is less friendly than A"]], "negated_asymmetric_premise": ["More( puts another person's arms(B),  puts another person's arms(A)), so not More(friendly(A), friendly(B))", ["B puts another person's arms more than A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["More( puts another person's arms(A),  puts another person's arms(B)), so not More(friendly(B), friendly(A))", ["A puts another person's arms more than B, so B is not more friendly than A"]]}
{"original": ["More( learns how to play the guitar(A),  learns how to play the guitar(B)), so More(skillful(A), skillful(B))", ["A learns how to play the guitar more than B, so A is more skillful than B"]], "negated": ["More( learns how to play the guitar(A),  learns how to play the guitar(B)), so not Less(skillful(A), skillful(B))", ["A learns how to play the guitar more than B, so A is not less skillful than B"]], "asymmetric_premise": ["More( learns how to play the guitar(B),  learns how to play the guitar(A)), so Less(skillful(A), skillful(B))", ["B learns how to play the guitar more than A, so A is less skillful than B"]], "asymmetric_conclusion": ["More( learns how to play the guitar(A),  learns how to play the guitar(B)), so Less(skillful(B), skillful(A))", ["A learns how to play the guitar more than B, so B is less skillful than A"]], "negated_asymmetric_premise": ["More( learns how to play the guitar(B),  learns how to play the guitar(A)), so not More(skillful(A), skillful(B))", ["B learns how to play the guitar more than A, so A is not more skillful than B"]], "negated_asymmetric_conclusion": ["More( learns how to play the guitar(A),  learns how to play the guitar(B)), so not More(skillful(B), skillful(A))", ["A learns how to play the guitar more than B, so B is not more skillful than A"]]}
{"original": ["More( hops in another person's car(A),  hops in another person's car(B)), so More(daring(A), daring(B))", ["A hops in another person's car more than B, so A is more daring than B"]], "negated": ["More( hops in another person's car(A),  hops in another person's car(B)), so not Less(daring(A), daring(B))", ["A hops in another person's car more than B, so A is not less daring than B"]], "asymmetric_premise": ["More( hops in another person's car(B),  hops in another person's car(A)), so Less(daring(A), daring(B))", ["B hops in another person's car more than A, so A is less daring than B"]], "asymmetric_conclusion": ["More( hops in another person's car(A),  hops in another person's car(B)), so Less(daring(B), daring(A))", ["A hops in another person's car more than B, so B is less daring than A"]], "negated_asymmetric_premise": ["More( hops in another person's car(B),  hops in another person's car(A)), so not More(daring(A), daring(B))", ["B hops in another person's car more than A, so A is not more daring than B"]], "negated_asymmetric_conclusion": ["More( hops in another person's car(A),  hops in another person's car(B)), so not More(daring(B), daring(A))", ["A hops in another person's car more than B, so B is not more daring than A"]]}
{"original": ["More( stands in another person's shoes(A),  stands in another person's shoes(B)), so More(curious(A), curious(B))", ["A stands in another person's shoes more than B, so A is more curious than B"]], "negated": ["More( stands in another person's shoes(A),  stands in another person's shoes(B)), so not Less(curious(A), curious(B))", ["A stands in another person's shoes more than B, so A is not less curious than B"]], "asymmetric_premise": ["More( stands in another person's shoes(B),  stands in another person's shoes(A)), so Less(curious(A), curious(B))", ["B stands in another person's shoes more than A, so A is less curious than B"]], "asymmetric_conclusion": ["More( stands in another person's shoes(A),  stands in another person's shoes(B)), so Less(curious(B), curious(A))", ["A stands in another person's shoes more than B, so B is less curious than A"]], "negated_asymmetric_premise": ["More( stands in another person's shoes(B),  stands in another person's shoes(A)), so not More(curious(A), curious(B))", ["B stands in another person's shoes more than A, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["More( stands in another person's shoes(A),  stands in another person's shoes(B)), so not More(curious(B), curious(A))", ["A stands in another person's shoes more than B, so B is not more curious than A"]]}
{"original": ["More( adds to their collection(A),  adds to their collection(B)), so More(a curator(A), a curator(B))", ["A adds to their collection more than B, so A is more a curator than B"]], "negated": ["More( adds to their collection(A),  adds to their collection(B)), so not Less(a curator(A), a curator(B))", ["A adds to their collection more than B, so A is not less a curator than B"]], "asymmetric_premise": ["More( adds to their collection(B),  adds to their collection(A)), so Less(a curator(A), a curator(B))", ["B adds to their collection more than A, so A is less a curator than B"]], "asymmetric_conclusion": ["More( adds to their collection(A),  adds to their collection(B)), so Less(a curator(B), a curator(A))", ["A adds to their collection more than B, so B is less a curator than A"]], "negated_asymmetric_premise": ["More( adds to their collection(B),  adds to their collection(A)), so not More(a curator(A), a curator(B))", ["B adds to their collection more than A, so A is not more a curator than B"]], "negated_asymmetric_conclusion": ["More( adds to their collection(A),  adds to their collection(B)), so not More(a curator(B), a curator(A))", ["A adds to their collection more than B, so B is not more a curator than A"]]}
{"original": ["More( walks to their house(A),  walks to their house(B)), so More(committed(A), committed(B))", ["A walks to their house more than B, so A is more committed than B"]], "negated": ["More( walks to their house(A),  walks to their house(B)), so not Less(committed(A), committed(B))", ["A walks to their house more than B, so A is not less committed than B"]], "asymmetric_premise": ["More( walks to their house(B),  walks to their house(A)), so Less(committed(A), committed(B))", ["B walks to their house more than A, so A is less committed than B"]], "asymmetric_conclusion": ["More( walks to their house(A),  walks to their house(B)), so Less(committed(B), committed(A))", ["A walks to their house more than B, so B is less committed than A"]], "negated_asymmetric_premise": ["More( walks to their house(B),  walks to their house(A)), so not More(committed(A), committed(B))", ["B walks to their house more than A, so A is not more committed than B"]], "negated_asymmetric_conclusion": ["More( walks to their house(A),  walks to their house(B)), so not More(committed(B), committed(A))", ["A walks to their house more than B, so B is not more committed than A"]]}
{"original": ["More( sees a show(A),  sees a show(B)), so More(curious(A), curious(B))", ["A sees a show more than B, so A is more curious than B"]], "negated": ["More( sees a show(A),  sees a show(B)), so not Less(curious(A), curious(B))", ["A sees a show more than B, so A is not less curious than B"]], "asymmetric_premise": ["More( sees a show(B),  sees a show(A)), so Less(curious(A), curious(B))", ["B sees a show more than A, so A is less curious than B"]], "asymmetric_conclusion": ["More( sees a show(A),  sees a show(B)), so Less(curious(B), curious(A))", ["A sees a show more than B, so B is less curious than A"]], "negated_asymmetric_premise": ["More( sees a show(B),  sees a show(A)), so not More(curious(A), curious(B))", ["B sees a show more than A, so A is not more curious than B"]], "negated_asymmetric_conclusion": ["More( sees a show(A),  sees a show(B)), so not More(curious(B), curious(A))", ["A sees a show more than B, so B is not more curious than A"]]}
{"original": ["More( feels overwhelmed(A),  feels overwhelmed(B)), so More(tired(A), tired(B))", ["A feels overwhelmed more than B, so A is more tired than B"]], "negated": ["More( feels overwhelmed(A),  feels overwhelmed(B)), so not Less(tired(A), tired(B))", ["A feels overwhelmed more than B, so A is not less tired than B"]], "asymmetric_premise": ["More( feels overwhelmed(B),  feels overwhelmed(A)), so Less(tired(A), tired(B))", ["B feels overwhelmed more than A, so A is less tired than B"]], "asymmetric_conclusion": ["More( feels overwhelmed(A),  feels overwhelmed(B)), so Less(tired(B), tired(A))", ["A feels overwhelmed more than B, so B is less tired than A"]], "negated_asymmetric_premise": ["More( feels overwhelmed(B),  feels overwhelmed(A)), so not More(tired(A), tired(B))", ["B feels overwhelmed more than A, so A is not more tired than B"]], "negated_asymmetric_conclusion": ["More( feels overwhelmed(A),  feels overwhelmed(B)), so not More(tired(B), tired(A))", ["A feels overwhelmed more than B, so B is not more tired than A"]]}
{"original": ["More( welcomes another person back(A),  welcomes another person back(B)), so More(happy(A), happy(B))", ["A welcomes another person back more than B, so A is more happy than B"]], "negated": ["More( welcomes another person back(A),  welcomes another person back(B)), so not Less(happy(A), happy(B))", ["A welcomes another person back more than B, so A is not less happy than B"]], "asymmetric_premise": ["More( welcomes another person back(B),  welcomes another person back(A)), so Less(happy(A), happy(B))", ["B welcomes another person back more than A, so A is less happy than B"]], "asymmetric_conclusion": ["More( welcomes another person back(A),  welcomes another person back(B)), so Less(happy(B), happy(A))", ["A welcomes another person back more than B, so B is less happy than A"]], "negated_asymmetric_premise": ["More( welcomes another person back(B),  welcomes another person back(A)), so not More(happy(A), happy(B))", ["B welcomes another person back more than A, so A is not more happy than B"]], "negated_asymmetric_conclusion": ["More( welcomes another person back(A),  welcomes another person back(B)), so not More(happy(B), happy(A))", ["A welcomes another person back more than B, so B is not more happy than A"]]}
{"original": ["More( flies a plane(A),  flies a plane(B)), so More(successful(A), successful(B))", ["A flies a plane more than B, so A is more successful than B"]], "negated": ["More( flies a plane(A),  flies a plane(B)), so not Less(successful(A), successful(B))", ["A flies a plane more than B, so A is not less successful than B"]], "asymmetric_premise": ["More( flies a plane(B),  flies a plane(A)), so Less(successful(A), successful(B))", ["B flies a plane more than A, so A is less successful than B"]], "asymmetric_conclusion": ["More( flies a plane(A),  flies a plane(B)), so Less(successful(B), successful(A))", ["A flies a plane more than B, so B is less successful than A"]], "negated_asymmetric_premise": ["More( flies a plane(B),  flies a plane(A)), so not More(successful(A), successful(B))", ["B flies a plane more than A, so A is not more successful than B"]], "negated_asymmetric_conclusion": ["More( flies a plane(A),  flies a plane(B)), so not More(successful(B), successful(A))", ["A flies a plane more than B, so B is not more successful than A"]]}
{"original": ["More( holds onto nothing(A),  holds onto nothing(B)), so More(independent(A), independent(B))", ["A holds onto nothing more than B, so A is more independent than B"]], "negated": ["More( holds onto nothing(A),  holds onto nothing(B)), so not Less(independent(A), independent(B))", ["A holds onto nothing more than B, so A is not less independent than B"]], "asymmetric_premise": ["More( holds onto nothing(B),  holds onto nothing(A)), so Less(independent(A), independent(B))", ["B holds onto nothing more than A, so A is less independent than B"]], "asymmetric_conclusion": ["More( holds onto nothing(A),  holds onto nothing(B)), so Less(independent(B), independent(A))", ["A holds onto nothing more than B, so B is less independent than A"]], "negated_asymmetric_premise": ["More( holds onto nothing(B),  holds onto nothing(A)), so not More(independent(A), independent(B))", ["B holds onto nothing more than A, so A is not more independent than B"]], "negated_asymmetric_conclusion": ["More( holds onto nothing(A),  holds onto nothing(B)), so not More(independent(B), independent(A))", ["A holds onto nothing more than B, so B is not more independent than A"]]}
{"original": ["More( writes another person a ticket(A),  writes another person a ticket(B)), so More(observant(A), observant(B))", ["A writes another person a ticket more than B, so A is more observant than B"]], "negated": ["More( writes another person a ticket(A),  writes another person a ticket(B)), so not Less(observant(A), observant(B))", ["A writes another person a ticket more than B, so A is not less observant than B"]], "asymmetric_premise": ["More( writes another person a ticket(B),  writes another person a ticket(A)), so Less(observant(A), observant(B))", ["B writes another person a ticket more than A, so A is less observant than B"]], "asymmetric_conclusion": ["More( writes another person a ticket(A),  writes another person a ticket(B)), so Less(observant(B), observant(A))", ["A writes another person a ticket more than B, so B is less observant than A"]], "negated_asymmetric_premise": ["More( writes another person a ticket(B),  writes another person a ticket(A)), so not More(observant(A), observant(B))", ["B writes another person a ticket more than A, so A is not more observant than B"]], "negated_asymmetric_conclusion": ["More( writes another person a ticket(A),  writes another person a ticket(B)), so not More(observant(B), observant(A))", ["A writes another person a ticket more than B, so B is not more observant than A"]]}
{"original": ["More( returns to their classroom(A),  returns to their classroom(B)), so More(industrious(A), industrious(B))", ["A returns to their classroom more than B, so A is more industrious than B"]], "negated": ["More( returns to their classroom(A),  returns to their classroom(B)), so not Less(industrious(A), industrious(B))", ["A returns to their classroom more than B, so A is not less industrious than B"]], "asymmetric_premise": ["More( returns to their classroom(B),  returns to their classroom(A)), so Less(industrious(A), industrious(B))", ["B returns to their classroom more than A, so A is less industrious than B"]], "asymmetric_conclusion": ["More( returns to their classroom(A),  returns to their classroom(B)), so Less(industrious(B), industrious(A))", ["A returns to their classroom more than B, so B is less industrious than A"]], "negated_asymmetric_premise": ["More( returns to their classroom(B),  returns to their classroom(A)), so not More(industrious(A), industrious(B))", ["B returns to their classroom more than A, so A is not more industrious than B"]], "negated_asymmetric_conclusion": ["More( returns to their classroom(A),  returns to their classroom(B)), so not More(industrious(B), industrious(A))", ["A returns to their classroom more than B, so B is not more industrious than A"]]}
{"original": ["More( becomes concerned(A),  becomes concerned(B)), so More(worrysome(A), worrysome(B))", ["A becomes concerned more than B, so A is more worrysome than B"]], "negated": ["More( becomes concerned(A),  becomes concerned(B)), so not Less(worrysome(A), worrysome(B))", ["A becomes concerned more than B, so A is not less worrysome than B"]], "asymmetric_premise": ["More( becomes concerned(B),  becomes concerned(A)), so Less(worrysome(A), worrysome(B))", ["B becomes concerned more than A, so A is less worrysome than B"]], "asymmetric_conclusion": ["More( becomes concerned(A),  becomes concerned(B)), so Less(worrysome(B), worrysome(A))", ["A becomes concerned more than B, so B is less worrysome than A"]], "negated_asymmetric_premise": ["More( becomes concerned(B),  becomes concerned(A)), so not More(worrysome(A), worrysome(B))", ["B becomes concerned more than A, so A is not more worrysome than B"]], "negated_asymmetric_conclusion": ["More( becomes concerned(A),  becomes concerned(B)), so not More(worrysome(B), worrysome(A))", ["A becomes concerned more than B, so B is not more worrysome than A"]]}
{"original": ["More( believes would lead(A),  believes would lead(B)), so More(strong(A), strong(B))", ["A believes would lead more than B, so A is more strong than B"]], "negated": ["More( believes would lead(A),  believes would lead(B)), so not Less(strong(A), strong(B))", ["A believes would lead more than B, so A is not less strong than B"]], "asymmetric_premise": ["More( believes would lead(B),  believes would lead(A)), so Less(strong(A), strong(B))", ["B believes would lead more than A, so A is less strong than B"]], "asymmetric_conclusion": ["More( believes would lead(A),  believes would lead(B)), so Less(strong(B), strong(A))", ["A believes would lead more than B, so B is less strong than A"]], "negated_asymmetric_premise": ["More( believes would lead(B),  believes would lead(A)), so not More(strong(A), strong(B))", ["B believes would lead more than A, so A is not more strong than B"]], "negated_asymmetric_conclusion": ["More( believes would lead(A),  believes would lead(B)), so not More(strong(B), strong(A))", ["A believes would lead more than B, so B is not more strong than A"]]}
{"original": ["More( leaves another person's mom(A),  leaves another person's mom(B)), so More(confident(A), confident(B))", ["A leaves another person's mom more than B, so A is more confident than B"]], "negated": ["More( leaves another person's mom(A),  leaves another person's mom(B)), so not Less(confident(A), confident(B))", ["A leaves another person's mom more than B, so A is not less confident than B"]], "asymmetric_premise": ["More( leaves another person's mom(B),  leaves another person's mom(A)), so Less(confident(A), confident(B))", ["B leaves another person's mom more than A, so A is less confident than B"]], "asymmetric_conclusion": ["More( leaves another person's mom(A),  leaves another person's mom(B)), so Less(confident(B), confident(A))", ["A leaves another person's mom more than B, so B is less confident than A"]], "negated_asymmetric_premise": ["More( leaves another person's mom(B),  leaves another person's mom(A)), so not More(confident(A), confident(B))", ["B leaves another person's mom more than A, so A is not more confident than B"]], "negated_asymmetric_conclusion": ["More( leaves another person's mom(A),  leaves another person's mom(B)), so not More(confident(B), confident(A))", ["A leaves another person's mom more than B, so B is not more confident than A"]]}
{"original": ["More( gets the better of another person(A),  gets the better of another person(B)), so More(spiteful(A), spiteful(B))", ["A gets the better of another person more than B, so A is more spiteful than B"]], "negated": ["More( gets the better of another person(A),  gets the better of another person(B)), so not Less(spiteful(A), spiteful(B))", ["A gets the better of another person more than B, so A is not less spiteful than B"]], "asymmetric_premise": ["More( gets the better of another person(B),  gets the better of another person(A)), so Less(spiteful(A), spiteful(B))", ["B gets the better of another person more than A, so A is less spiteful than B"]], "asymmetric_conclusion": ["More( gets the better of another person(A),  gets the better of another person(B)), so Less(spiteful(B), spiteful(A))", ["A gets the better of another person more than B, so B is less spiteful than A"]], "negated_asymmetric_premise": ["More( gets the better of another person(B),  gets the better of another person(A)), so not More(spiteful(A), spiteful(B))", ["B gets the better of another person more than A, so A is not more spiteful than B"]], "negated_asymmetric_conclusion": ["More( gets the better of another person(A),  gets the better of another person(B)), so not More(spiteful(B), spiteful(A))", ["A gets the better of another person more than B, so B is not more spiteful than A"]]}
{"original": ["More( gets bored(A),  gets bored(B)), so More(lazy(A), lazy(B))", ["A gets bored more than B, so A is more lazy than B"]], "negated": ["More( gets bored(A),  gets bored(B)), so not Less(lazy(A), lazy(B))", ["A gets bored more than B, so A is not less lazy than B"]], "asymmetric_premise": ["More( gets bored(B),  gets bored(A)), so Less(lazy(A), lazy(B))", ["B gets bored more than A, so A is less lazy than B"]], "asymmetric_conclusion": ["More( gets bored(A),  gets bored(B)), so Less(lazy(B), lazy(A))", ["A gets bored more than B, so B is less lazy than A"]], "negated_asymmetric_premise": ["More( gets bored(B),  gets bored(A)), so not More(lazy(A), lazy(B))", ["B gets bored more than A, so A is not more lazy than B"]], "negated_asymmetric_conclusion": ["More( gets bored(A),  gets bored(B)), so not More(lazy(B), lazy(A))", ["A gets bored more than B, so B is not more lazy than A"]]}
{"original": ["More( sees my dog(A),  sees my dog(B)), so More(appreciative(A), appreciative(B))", ["A sees my dog more than B, so A is more appreciative than B"]], "negated": ["More( sees my dog(A),  sees my dog(B)), so not Less(appreciative(A), appreciative(B))", ["A sees my dog more than B, so A is not less appreciative than B"]], "asymmetric_premise": ["More( sees my dog(B),  sees my dog(A)), so Less(appreciative(A), appreciative(B))", ["B sees my dog more than A, so A is less appreciative than B"]], "asymmetric_conclusion": ["More( sees my dog(A),  sees my dog(B)), so Less(appreciative(B), appreciative(A))", ["A sees my dog more than B, so B is less appreciative than A"]], "negated_asymmetric_premise": ["More( sees my dog(B),  sees my dog(A)), so not More(appreciative(A), appreciative(B))", ["B sees my dog more than A, so A is not more appreciative than B"]], "negated_asymmetric_conclusion": ["More( sees my dog(A),  sees my dog(B)), so not More(appreciative(B), appreciative(A))", ["A sees my dog more than B, so B is not more appreciative than A"]]}
{"original": ["More( wants to visit(A),  wants to visit(B)), so More(eager(A), eager(B))", ["A wants to visit more than B, so A is more eager than B"]], "negated": ["More( wants to visit(A),  wants to visit(B)), so not Less(eager(A), eager(B))", ["A wants to visit more than B, so A is not less eager than B"]], "asymmetric_premise": ["More( wants to visit(B),  wants to visit(A)), so Less(eager(A), eager(B))", ["B wants to visit more than A, so A is less eager than B"]], "asymmetric_conclusion": ["More( wants to visit(A),  wants to visit(B)), so Less(eager(B), eager(A))", ["A wants to visit more than B, so B is less eager than A"]], "negated_asymmetric_premise": ["More( wants to visit(B),  wants to visit(A)), so not More(eager(A), eager(B))", ["B wants to visit A, so A is not more eager than B"]], "negated_asymmetric_conclusion": ["More( wants to visit(A),  wants to visit(B)), so not More(eager(B), eager(A))", ["A wants to visit more than B, so B is not more eager than A"]]}
{"original": ["More( gains their ends(A),  gains their ends(B)), so More(determined(A), determined(B))", ["A gains their ends more than B, so A is more determined than B"]], "negated": ["More( gains their ends(A),  gains their ends(B)), so not Less(determined(A), determined(B))", ["A gains their ends more than B, so A is not less determined than B"]], "asymmetric_premise": ["More( gains their ends(B),  gains their ends(A)), so Less(determined(A), determined(B))", ["B gains their ends more than A, so A is less determined than B"]], "asymmetric_conclusion": ["More( gains their ends(A),  gains their ends(B)), so Less(determined(B), determined(A))", ["A gains their ends more than B, so B is less determined than A"]], "negated_asymmetric_premise": ["More( gains their ends(B),  gains their ends(A)), so not More(determined(A), determined(B))", ["B gains their ends more than A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["More( gains their ends(A),  gains their ends(B)), so not More(determined(B), determined(A))", ["A gains their ends more than B, so B is not more determined than A"]]}
{"original": ["More( gets the results(A),  gets the results(B)), so More(hard working(A), hard working(B))", ["A gets the results more than B, so A is more hard working than B"]], "negated": ["More( gets the results(A),  gets the results(B)), so not Less(hard working(A), hard working(B))", ["A gets the results more than B, so A is not less hard working than B"]], "asymmetric_premise": ["More( gets the results(B),  gets the results(A)), so Less(hard working(A), hard working(B))", ["B gets the results more than A, so A is less hard working than B"]], "asymmetric_conclusion": ["More( gets the results(A),  gets the results(B)), so Less(hard working(B), hard working(A))", ["A gets the results more than B, so B is less hard working than A"]], "negated_asymmetric_premise": ["More( gets the results(B),  gets the results(A)), so not More(hard working(A), hard working(B))", ["B gets the results more than A, so A is not more hard working than B"]], "negated_asymmetric_conclusion": ["More( gets the results(A),  gets the results(B)), so not More(hard working(B), hard working(A))", ["A gets the results more than B, so B is not more hard working than A"]]}
{"original": ["More( wants to make a good impression(A),  wants to make a good impression(B)), so More(self conscious(A), self conscious(B))", ["A wants to make a good impression more than B, so A is more self conscious than B"]], "negated": ["More( wants to make a good impression(A),  wants to make a good impression(B)), so not Less(self conscious(A), self conscious(B))", ["A wants to make a good impression more than B, so A is not less self conscious than B"]], "asymmetric_premise": ["More( wants to make a good impression(B),  wants to make a good impression(A)), so Less(self conscious(A), self conscious(B))", ["B wants to make a good impression more than A, so A is less self conscious than B"]], "asymmetric_conclusion": ["More( wants to make a good impression(A),  wants to make a good impression(B)), so Less(self conscious(B), self conscious(A))", ["A wants to make a good impression more than B, so B is less self conscious than A"]], "negated_asymmetric_premise": ["More( wants to make a good impression(B),  wants to make a good impression(A)), so not More(self conscious(A), self conscious(B))", ["B wants to make a good impression more than A, so A is not more self conscious than B"]], "negated_asymmetric_conclusion": ["More( wants to make a good impression(A),  wants to make a good impression(B)), so not More(self conscious(B), self conscious(A))", ["A wants to make a good impression more than B, so B is not more self conscious than A"]]}
{"original": ["More( finds another person's mother(A),  finds another person's mother(B)), so More(surprised(A), surprised(B))", ["A finds another person's mother more than B, so A is more surprised than B"]], "negated": ["More( finds another person's mother(A),  finds another person's mother(B)), so not Less(surprised(A), surprised(B))", ["A finds another person's mother more than B, so A is not less surprised than B"]], "asymmetric_premise": ["More( finds another person's mother(B),  finds another person's mother(A)), so Less(surprised(A), surprised(B))", ["B finds another person's mother more than A, so A is less surprised than B"]], "asymmetric_conclusion": ["More( finds another person's mother(A),  finds another person's mother(B)), so Less(surprised(B), surprised(A))", ["A finds another person's mother more than B, so B is less surprised than A"]], "negated_asymmetric_premise": ["More( finds another person's mother(B),  finds another person's mother(A)), so not More(surprised(A), surprised(B))", ["B finds another person's mother more than A, so A is not more surprised than B"]], "negated_asymmetric_conclusion": ["More( finds another person's mother(A),  finds another person's mother(B)), so not More(surprised(B), surprised(A))", ["A finds another person's mother more than B, so B is not more surprised than A"]]}
{"original": ["More( gives another person look(A),  gives another person look(B)), so More(unhappy(A), unhappy(B))", ["A gives another person look more than B, so A is more unhappy than B"]], "negated": ["More( gives another person look(A),  gives another person look(B)), so not Less(unhappy(A), unhappy(B))", ["A gives another person look more than B, so A is not less unhappy than B"]], "asymmetric_premise": ["More( gives another person look(B),  gives another person look(A)), so Less(unhappy(A), unhappy(B))", ["B gives another person look more than A, so A is less unhappy than B"]], "asymmetric_conclusion": ["More( gives another person look(A),  gives another person look(B)), so Less(unhappy(B), unhappy(A))", ["A gives another person look more than B, so B is less unhappy than A"]], "negated_asymmetric_premise": ["More( gives another person look(B),  gives another person look(A)), so not More(unhappy(A), unhappy(B))", ["B gives another person look more than A, so A is not more unhappy than B"]], "negated_asymmetric_conclusion": ["More( gives another person look(A),  gives another person look(B)), so not More(unhappy(B), unhappy(A))", ["A gives another person look more than B, so B is not more unhappy than A"]]}
{"original": ["More( invites friends(A),  invites friends(B)), so More(cordial(A), cordial(B))", ["A invites friends more than B, so A is more cordial than B"]], "negated": ["More( invites friends(A),  invites friends(B)), so not Less(cordial(A), cordial(B))", ["A invites friends more than B, so A is not less cordial than B"]], "asymmetric_premise": ["More( invites friends(B),  invites friends(A)), so Less(cordial(A), cordial(B))", ["B invites friends more than A, so A is less cordial than B"]], "asymmetric_conclusion": ["More( invites friends(A),  invites friends(B)), so Less(cordial(B), cordial(A))", ["A invites friends more than B, so B is less cordial than A"]], "negated_asymmetric_premise": ["More( invites friends(B),  invites friends(A)), so not More(cordial(A), cordial(B))", ["B invites friends more than A, so A is not more cordial than B"]], "negated_asymmetric_conclusion": ["More( invites friends(A),  invites friends(B)), so not More(cordial(B), cordial(A))", ["A invites friends more than B, so B is not more cordial than A"]]}
{"original": ["More( carries another person around(A),  carries another person around(B)), so More(helpful(A), helpful(B))", ["A carries another person around more than B, so A is more helpful than B"]], "negated": ["More( carries another person around(A),  carries another person around(B)), so not Less(helpful(A), helpful(B))", ["A carries another person around more than B, so A is not less helpful than B"]], "asymmetric_premise": ["More( carries another person around(B),  carries another person around(A)), so Less(helpful(A), helpful(B))", ["B carries another person around more than A, so A is less helpful than B"]], "asymmetric_conclusion": ["More( carries another person around(A),  carries another person around(B)), so Less(helpful(B), helpful(A))", ["A carries another person around more than B, so B is less helpful than A"]], "negated_asymmetric_premise": ["More( carries another person around(B),  carries another person around(A)), so not More(helpful(A), helpful(B))", ["B carries another person around more than A, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["More( carries another person around(A),  carries another person around(B)), so not More(helpful(B), helpful(A))", ["A carries another person around more than B, so B is not more helpful than A"]]}
{"original": ["More( feels proud of himself(A),  feels proud of himself(B)), so More(proud(A), proud(B))", ["A feels proud of himself more than B, so A is more proud than B"]], "negated": ["More( feels proud of himself(A),  feels proud of himself(B)), so not Less(proud(A), proud(B))", ["A feels proud of himself more than B, so A is not less proud than B"]], "asymmetric_premise": ["More( feels proud of himself(B),  feels proud of himself(A)), so Less(proud(A), proud(B))", ["B feels proud of himself more than A, so A is less proud than B"]], "asymmetric_conclusion": ["More( feels proud of himself(A),  feels proud of himself(B)), so Less(proud(B), proud(A))", ["A feels proud of himself more than B, so B is less proud than A"]], "negated_asymmetric_premise": ["More( feels proud of himself(B),  feels proud of himself(A)), so not More(proud(A), proud(B))", ["B feels proud of himself more than A, so A is not more proud than B"]], "negated_asymmetric_conclusion": ["More( feels proud of himself(A),  feels proud of himself(B)), so not More(proud(B), proud(A))", ["A feels proud of himself more than B, so B is not more proud than A"]]}
{"original": ["More( takes another person part(A),  takes another person part(B)), so More(greedy(A), greedy(B))", ["A takes another person part more than B, so A is more greedy than B"]], "negated": ["More( takes another person part(A),  takes another person part(B)), so not Less(greedy(A), greedy(B))", ["A takes another person part more than B, so A is not less greedy than B"]], "asymmetric_premise": ["More( takes another person part(B),  takes another person part(A)), so Less(greedy(A), greedy(B))", ["B takes another person part more than A, so A is less greedy than B"]], "asymmetric_conclusion": ["More( takes another person part(A),  takes another person part(B)), so Less(greedy(B), greedy(A))", ["A takes another person part more than B, so B is less greedy than A"]], "negated_asymmetric_premise": ["More( takes another person part(B),  takes another person part(A)), so not More(greedy(A), greedy(B))", ["B takes another person part more than A, so A is not more greedy than B"]], "negated_asymmetric_conclusion": ["More( takes another person part(A),  takes another person part(B)), so not More(greedy(B), greedy(A))", ["A takes another person part more than B, so B is not more greedy than A"]]}
{"original": ["More( waves back(A),  waves back(B)), so More(friendly(A), friendly(B))", ["A waves back more than B, so A is more friendly than B"]], "negated": ["More( waves back(A),  waves back(B)), so not Less(friendly(A), friendly(B))", ["A waves back more than B, so A is not less friendly than B"]], "asymmetric_premise": ["More( waves back(B),  waves back(A)), so Less(friendly(A), friendly(B))", ["B waves back more than A, so A is less friendly than B"]], "asymmetric_conclusion": ["More( waves back(A),  waves back(B)), so Less(friendly(B), friendly(A))", ["A waves back more than B, so B is less friendly than A"]], "negated_asymmetric_premise": ["More( waves back(B),  waves back(A)), so not More(friendly(A), friendly(B))", ["B waves back more than A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["More( waves back(A),  waves back(B)), so not More(friendly(B), friendly(A))", ["A waves back more than B, so B is not more friendly than A"]]}
{"original": ["More( tests their skills(A),  tests their skills(B)), so More(clever(A), clever(B))", ["A tests their skills more than B, so A is more clever than B"]], "negated": ["More( tests their skills(A),  tests their skills(B)), so not Less(clever(A), clever(B))", ["A tests their skills more than B, so A is not less clever than B"]], "asymmetric_premise": ["More( tests their skills(B),  tests their skills(A)), so Less(clever(A), clever(B))", ["B tests their skills more than A, so A is less clever than B"]], "asymmetric_conclusion": ["More( tests their skills(A),  tests their skills(B)), so Less(clever(B), clever(A))", ["A tests their skills more than B, so B is less clever than A"]], "negated_asymmetric_premise": ["More( tests their skills(B),  tests their skills(A)), so not More(clever(A), clever(B))", ["B tests their skills more than A, so A is not more clever than B"]], "negated_asymmetric_conclusion": ["More( tests their skills(A),  tests their skills(B)), so not More(clever(B), clever(A))", ["A tests their skills more than B, so B is not more clever than A"]]}
{"original": ["More( meets a new girl(A),  meets a new girl(B)), so More(hopeful(A), hopeful(B))", ["A meets a new girl more than B, so A is more hopeful than B"]], "negated": ["More( meets a new girl(A),  meets a new girl(B)), so not Less(hopeful(A), hopeful(B))", ["A meets a new girl more than B, so A is not less hopeful than B"]], "asymmetric_premise": ["More( meets a new girl(B),  meets a new girl(A)), so Less(hopeful(A), hopeful(B))", ["B meets a new girl while A does not, so A is less hopeful than B"]], "asymmetric_conclusion": ["More( meets a new girl(A),  meets a new girl(B)), so Less(hopeful(B), hopeful(A))", ["A meets a new girl more than B, so B is less hopeful than A"]], "negated_asymmetric_premise": ["More( meets a new girl(B),  meets a new girl(A)), so not More(hopeful(A), hopeful(B))", ["B meets a new girl while A does not, so A is not more hopeful than B"]], "negated_asymmetric_conclusion": ["More( meets a new girl(A),  meets a new girl(B)), so not More(hopeful(B), hopeful(A))", ["A meets a new girl more than B, so B is not more hopeful than A"]]}
{"original": ["More( also gave(A),  also gave(B)), so More(generous(A), generous(B))", ["A also gave more than B, so A is more generous than B"]], "negated": ["More( also gave(A),  also gave(B)), so not Less(generous(A), generous(B))", ["A also gave more than B, so A is not less generous than B"]], "asymmetric_premise": ["More( also gave(B),  also gave(A)), so Less(generous(A), generous(B))", ["B also gave more than A, so A is less generous than B"]], "asymmetric_conclusion": ["More( also gave(A),  also gave(B)), so Less(generous(B), generous(A))", ["A also gave more than B, so B is less generous than A"]], "negated_asymmetric_premise": ["More( also gave(B),  also gave(A)), so not More(generous(A), generous(B))", ["B also gave more than A, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["More( also gave(A),  also gave(B)), so not More(generous(B), generous(A))", ["A also gave more than B, so B is not more generous than A"]]}
{"original": ["More( takes it to a veterinarian(A),  takes it to a veterinarian(B)), so More(worried(A), worried(B))", ["A takes it to a veterinarian more than B, so A is more worried than B"]], "negated": ["More( takes it to a veterinarian(A),  takes it to a veterinarian(B)), so not Less(worried(A), worried(B))", ["A takes it to a veterinarian more than B, so A is not less worried than B"]], "asymmetric_premise": ["More( takes it to a veterinarian(B),  takes it to a veterinarian(A)), so Less(worried(A), worried(B))", ["B takes it to a veterinarian more than A, so A is less worried than B"]], "asymmetric_conclusion": ["More( takes it to a veterinarian(A),  takes it to a veterinarian(B)), so Less(worried(B), worried(A))", ["A takes it to a veterinarian more than B, so B is less worried than A"]], "negated_asymmetric_premise": ["More( takes it to a veterinarian(B),  takes it to a veterinarian(A)), so not More(worried(A), worried(B))", ["B takes it to a veterinarian more than A, so A is not more worried than B"]], "negated_asymmetric_conclusion": ["More( takes it to a veterinarian(A),  takes it to a veterinarian(B)), so not More(worried(B), worried(A))", ["A takes it to a veterinarian while B does not, so B is not more worried than A"]]}
{"original": ["More( touches another person's cheek(A),  touches another person's cheek(B)), so More(gentle(A), gentle(B))", ["A touches another person's cheek more than B, so A is more gentle than B"]], "negated": ["More( touches another person's cheek(A),  touches another person's cheek(B)), so not Less(gentle(A), gentle(B))", ["A touches another person's cheek more than B, so A is not less gentle than B"]], "asymmetric_premise": ["More( touches another person's cheek(B),  touches another person's cheek(A)), so Less(gentle(A), gentle(B))", ["B touches another person's cheek more than A, so A is less gentle than B"]], "asymmetric_conclusion": ["More( touches another person's cheek(A),  touches another person's cheek(B)), so Less(gentle(B), gentle(A))", ["A touches another person's cheek more than B, so B is less gentle than A"]], "negated_asymmetric_premise": ["More( touches another person's cheek(B),  touches another person's cheek(A)), so not More(gentle(A), gentle(B))", ["B touches another person's cheek more than A, so A is not more gentle than B"]], "negated_asymmetric_conclusion": ["More( touches another person's cheek(A),  touches another person's cheek(B)), so not More(gentle(B), gentle(A))", ["A touches another person's cheek more than B, so B is not more gentle than A"]]}
{"original": ["More( follows another person into the room(A),  follows another person into the room(B)), so More(sneaky(A), sneaky(B))", ["A follows another person into the room more than B, so A is more sneaky than B"]], "negated": ["More( follows another person into the room(A),  follows another person into the room(B)), so not Less(sneaky(A), sneaky(B))", ["A follows another person into the room more than B, so A is not less sneaky than B"]], "asymmetric_premise": ["More( follows another person into the room(B),  follows another person into the room(A)), so Less(sneaky(A), sneaky(B))", ["B follows another person into the room more than A, so A is less sneaky than B"]], "asymmetric_conclusion": ["More( follows another person into the room(A),  follows another person into the room(B)), so Less(sneaky(B), sneaky(A))", ["A follows another person into the room more than B, so B is less sneaky than A"]], "negated_asymmetric_premise": ["More( follows another person into the room(B),  follows another person into the room(A)), so not More(sneaky(A), sneaky(B))", ["B follows another person into the room more than A, so A is not more sneaky than B"]], "negated_asymmetric_conclusion": ["More( follows another person into the room(A),  follows another person into the room(B)), so not More(sneaky(B), sneaky(A))", ["A follows another person into the room more than B, so B is not more sneaky than A"]]}
{"original": ["More( tells another person otherwise(A),  tells another person otherwise(B)), so More(outspoken(A), outspoken(B))", ["A tells another person otherwise more than B, so A is more outspoken than B"]], "negated": ["More( tells another person otherwise(A),  tells another person otherwise(B)), so not Less(outspoken(A), outspoken(B))", ["A tells another person otherwise more than B, so A is not less outspoken than B"]], "asymmetric_premise": ["More( tells another person otherwise(B),  tells another person otherwise(A)), so Less(outspoken(A), outspoken(B))", ["B tells another person otherwise more than A, so A is less outspoken than B"]], "asymmetric_conclusion": ["More( tells another person otherwise(A),  tells another person otherwise(B)), so Less(outspoken(B), outspoken(A))", ["A tells another person otherwise more than B, so B is less outspoken than A"]], "negated_asymmetric_premise": ["More( tells another person otherwise(B),  tells another person otherwise(A)), so not More(outspoken(A), outspoken(B))", ["B tells another person otherwise more than A, so A is not more outspoken than B"]], "negated_asymmetric_conclusion": ["More( tells another person otherwise(A),  tells another person otherwise(B)), so not More(outspoken(B), outspoken(A))", ["A tells another person otherwise more than B, so B is not more outspoken than A"]]}
{"original": ["More( kicks against the pricks(A),  kicks against the pricks(B)), so More(brave(A), brave(B))", ["A kicks against the pricks more than B, so A is more brave than B"]], "negated": ["More( kicks against the pricks(A),  kicks against the pricks(B)), so not Less(brave(A), brave(B))", ["A kicks against the pricks more than B, so A is not less brave than B"]], "asymmetric_premise": ["More( kicks against the pricks(B),  kicks against the pricks(A)), so Less(brave(A), brave(B))", ["B kicks against the pricks more than A, so A is less brave than B"]], "asymmetric_conclusion": ["More( kicks against the pricks(A),  kicks against the pricks(B)), so Less(brave(B), brave(A))", ["A kicks against the pricks more than B, so B is less brave than A"]], "negated_asymmetric_premise": ["More( kicks against the pricks(B),  kicks against the pricks(A)), so not More(brave(A), brave(B))", ["B kicks against the pricks more than A, so A is not more brave than B"]], "negated_asymmetric_conclusion": ["More( kicks against the pricks(A),  kicks against the pricks(B)), so not More(brave(B), brave(A))", ["A kicks against the pricks more than B, so B is not more brave than A"]]}
{"original": ["More( calls a repairman(A),  calls a repairman(B)), so More(cold(A), cold(B))", ["A calls a repairman more than B, so A is more cold than B"]], "negated": ["More( calls a repairman(A),  calls a repairman(B)), so not Less(cold(A), cold(B))", ["A calls a repairman more than B, so A is not less cold than B"]], "asymmetric_premise": ["More( calls a repairman(B),  calls a repairman(A)), so Less(cold(A), cold(B))", ["B calls a repairman more than A, so A is less cold than B"]], "asymmetric_conclusion": ["More( calls a repairman(A),  calls a repairman(B)), so Less(cold(B), cold(A))", ["A calls a repairman more than B, so B is less cold than A"]], "negated_asymmetric_premise": ["More( calls a repairman(B),  calls a repairman(A)), so not More(cold(A), cold(B))", ["B calls a repairman more than A, so A is not more cold than B"]], "negated_asymmetric_conclusion": ["More( calls a repairman(A),  calls a repairman(B)), so not More(cold(B), cold(A))", ["A calls a repairman more than B, so B is not more cold than A"]]}
{"original": ["More( gets the lead role(A),  gets the lead role(B)), so More(excited(A), excited(B))", ["A gets the lead role more than B, so A is more excited than B"]], "negated": ["More( gets the lead role(A),  gets the lead role(B)), so not Less(excited(A), excited(B))", ["A gets the lead role more than B, so A is not less excited than B"]], "asymmetric_premise": ["More( gets the lead role(B),  gets the lead role(A)), so Less(excited(A), excited(B))", ["B gets the lead role more than A, so A is less excited than B"]], "asymmetric_conclusion": ["More( gets the lead role(A),  gets the lead role(B)), so Less(excited(B), excited(A))", ["A gets the lead role more than B, so B is less excited than A"]], "negated_asymmetric_premise": ["More( gets the lead role(B),  gets the lead role(A)), so not More(excited(A), excited(B))", ["B gets the lead role more than A, so A is not more excited than B"]], "negated_asymmetric_conclusion": ["More( gets the lead role(A),  gets the lead role(B)), so not More(excited(B), excited(A))", ["A gets the lead role more than B, so B is not more excited than A"]]}
{"original": ["More( has too much stuff(A),  has too much stuff(B)), so More(overwhelmed(A), overwhelmed(B))", ["A has too much stuff more than B, so A is more overwhelmed than B"]], "negated": ["More( has too much stuff(A),  has too much stuff(B)), so not Less(overwhelmed(A), overwhelmed(B))", ["A has too much stuff more than B, so A is not less overwhelmed than B"]], "asymmetric_premise": ["More( has too much stuff(B),  has too much stuff(A)), so Less(overwhelmed(A), overwhelmed(B))", ["B has too much stuff, A does not, so A is less overwhelmed than B"]], "asymmetric_conclusion": ["More( has too much stuff(A),  has too much stuff(B)), so Less(overwhelmed(B), overwhelmed(A))", ["A has too much stuff, B does not, so B is less overwhelmed than A"]], "negated_asymmetric_premise": ["More( has too much stuff(B),  has too much stuff(A)), so not More(overwhelmed(A), overwhelmed(B))", ["B has too much stuff more than A, so A is not more overwhelmed than B"]], "negated_asymmetric_conclusion": ["More( has too much stuff(A),  has too much stuff(B)), so not More(overwhelmed(B), overwhelmed(A))", ["A has too much stuff, B does not, so B is not more overwhelmed than A"]]}
{"original": ["More( makes the decision(A),  makes the decision(B)), so More(decisive(A), decisive(B))", ["A makes the decision more than B, so A is more decisive than B"]], "negated": ["More( makes the decision(A),  makes the decision(B)), so not Less(decisive(A), decisive(B))", ["A makes the decision more than B, so A is not less decisive than B"]], "asymmetric_premise": ["More( makes the decision(B),  makes the decision(A)), so Less(decisive(A), decisive(B))", ["B makes the decision more than A, so A is less decisive than B"]], "asymmetric_conclusion": ["More( makes the decision(A),  makes the decision(B)), so Less(decisive(B), decisive(A))", ["A makes the decision more than B, so B is less decisive than A"]], "negated_asymmetric_premise": ["More( makes the decision(B),  makes the decision(A)), so not More(decisive(A), decisive(B))", ["B makes the decision more than A, so A is not more decisive than B"]], "negated_asymmetric_conclusion": ["More( makes the decision(A),  makes the decision(B)), so not More(decisive(B), decisive(A))", ["A makes the decision more than B, so B is not more decisive than A"]]}
{"original": ["More( drives to the park(A),  drives to the park(B)), so More(excited(A), excited(B))", ["A drives to the park more than B, so A is more excited than B"]], "negated": ["More( drives to the park(A),  drives to the park(B)), so not Less(excited(A), excited(B))", ["A drives to the park more than B, so A is not less excited than B"]], "asymmetric_premise": ["More( drives to the park(B),  drives to the park(A)), so Less(excited(A), excited(B))", ["B drives to the park more than A, so A is less excited than B"]], "asymmetric_conclusion": ["More( drives to the park(A),  drives to the park(B)), so Less(excited(B), excited(A))", ["A drives to the park more than B, so B is less excited than A"]], "negated_asymmetric_premise": ["More( drives to the park(B),  drives to the park(A)), so not More(excited(A), excited(B))", ["B drives to the park more than A, so A is not more excited than B"]], "negated_asymmetric_conclusion": ["More( drives to the park(A),  drives to the park(B)), so not More(excited(B), excited(A))", ["A drives to the park more than B, so B is not more excited than A"]]}
{"original": ["More( thinks another person wad imagining what another person was seeing(A),  thinks another person wad imagining what another person was seeing(B)), so More(thoughtful(A), thoughtful(B))", ["A thinks another person was seeing what another person was seeing more than B, so A is more thoughtful than B"]], "negated": ["More( thinks another person wad imagining what another person was seeing(A),  thinks another person wad imagining what another person was seeing(B)), so not Less(thoughtful(A), thoughtful(B))", ["A thinks another person wad imagining what another person was seeing more than B, so A is not less thoughtful than B"]], "asymmetric_premise": ["More( thinks another person wad imagining what another person was seeing(B),  thinks another person wad imagining what another person was seeing(A)), so Less(thoughtful(A), thoughtful(B))", ["A thinks another person was seeing what another person was seeing more than B, so A is less thoughtful than B"]], "asymmetric_conclusion": ["More( thinks another person wad imagining what another person was seeing(A),  thinks another person wad imagining what another person was seeing(B)), so Less(thoughtful(B), thoughtful(A))", ["A thinks another person was seeing what another person was seeing more than B, so B is less thoughtful than A"]], "negated_asymmetric_premise": ["More( thinks another person wad imagining what another person was seeing(B),  thinks another person wad imagining what another person was seeing(A)), so not More(thoughtful(A), thoughtful(B))", ["A thinks another person was seeing what another person was seeing more than B, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": ["More( thinks another person wad imagining what another person was seeing(A),  thinks another person wad imagining what another person was seeing(B)), so not More(thoughtful(B), thoughtful(A))", ["A thinks another person wad imagining what another person was seeing more than B, so B is not more thoughtful than A"]]}
{"original": ["More( doubles check(A),  doubles check(B)), so More(ensuring(A), ensuring(B))", ["A is able to doubles check more than B, so A is more ensuring than B"]], "negated": ["More( doubles check(A),  doubles check(B)), so not Less(ensuring(A), ensuring(B))", ["A is able to doubles check more than B, so A is not less ensuring than B"]], "asymmetric_premise": ["More( doubles check(B),  doubles check(A)), so Less(ensuring(A), ensuring(B))", ["B is able to doubles check more than A, so A is less ensuring than B"]], "asymmetric_conclusion": ["More( doubles check(A),  doubles check(B)), so Less(ensuring(B), ensuring(A))", ["A is able to doubles check more than B, so B is less ensuring than A"]], "negated_asymmetric_premise": ["More( doubles check(B),  doubles check(A)), so not More(ensuring(A), ensuring(B))", ["B is not more likely to doubles check than A, so A is not more ensuring than B"]], "negated_asymmetric_conclusion": ["More( doubles check(A),  doubles check(B)), so not More(ensuring(B), ensuring(A))", ["A is more likely to doubles check than B, so B is not more ensuring than A"]]}
{"original": ["More( calls another person's insurance company(A),  calls another person's insurance company(B)), so More(pushy(A), pushy(B))", ["A calls another person's insurance company more than B, so A is more pushy than B"]], "negated": ["More( calls another person's insurance company(A),  calls another person's insurance company(B)), so not Less(pushy(A), pushy(B))", ["A calls another person's insurance company more than B, so A is not less pushy than B"]], "asymmetric_premise": ["More( calls another person's insurance company(B),  calls another person's insurance company(A)), so Less(pushy(A), pushy(B))", ["B calls another person's insurance company more than A, so A is less pushy than B"]], "asymmetric_conclusion": ["More( calls another person's insurance company(A),  calls another person's insurance company(B)), so Less(pushy(B), pushy(A))", ["A calls another person's insurance company more than B, so B is less pushy than A"]], "negated_asymmetric_premise": ["More( calls another person's insurance company(B),  calls another person's insurance company(A)), so not More(pushy(A), pushy(B))", ["B calls another person's insurance company more than A, so A is not more pushy than B"]], "negated_asymmetric_conclusion": ["More( calls another person's insurance company(A),  calls another person's insurance company(B)), so not More(pushy(B), pushy(A))", ["A calls another person's insurance company more than B, so B is not more pushy than A"]]}
{"original": ["More( revolves around another person(A),  revolves around another person(B)), so More(loving(A), loving(B))", ["A revolves around another person more than B, so A is more loving than B"]], "negated": ["More( revolves around another person(A),  revolves around another person(B)), so not Less(loving(A), loving(B))", ["A revolves around another person more than B, so A is not less loving than B"]], "asymmetric_premise": ["More( revolves around another person(B),  revolves around another person(A)), so Less(loving(A), loving(B))", ["B revolves around another person more than A, so A is less loving than B"]], "asymmetric_conclusion": ["More( revolves around another person(A),  revolves around another person(B)), so Less(loving(B), loving(A))", ["A revolves around another person more than B, so B is less loving than A"]], "negated_asymmetric_premise": ["More( revolves around another person(B),  revolves around another person(A)), so not More(loving(A), loving(B))", ["B revolves around another person more than A, so A is not more loving than B"]], "negated_asymmetric_conclusion": ["More( revolves around another person(A),  revolves around another person(B)), so not More(loving(B), loving(A))", ["A revolves around another person more than B, so B is not more loving than A"]]}
{"original": ["More( meets the baby(A),  meets the baby(B)), so More(lover(A), lover(B))", ["A meets the baby more than B, so A is a more lover than B"]], "negated": ["More( meets the baby(A),  meets the baby(B)), so not Less(lover(A), lover(B))", ["A meets the baby more than B, so A is not less lover than B"]], "asymmetric_premise": ["More( meets the baby(B),  meets the baby(A)), so Less(lover(A), lover(B))", ["B meets the baby more than A, so A is a less lover than B"]], "asymmetric_conclusion": ["More( meets the baby(A),  meets the baby(B)), so Less(lover(B), lover(A))", ["A meets the baby more than B, so B is a less lover than A"]], "negated_asymmetric_premise": ["More( meets the baby(B),  meets the baby(A)), so not More(lover(A), lover(B))", ["B meets the baby more than A, so A is not more lover than B"]], "negated_asymmetric_conclusion": ["More( meets the baby(A),  meets the baby(B)), so not More(lover(B), lover(A))", ["A meets the baby more than B, so B is not more lover than A"]]}
{"original": ["More( drops another person's laptop(A),  drops another person's laptop(B)), so More(impatient(A), impatient(B))", ["A drops another person's laptop more than B, so A is more impatient than B"]], "negated": ["More( drops another person's laptop(A),  drops another person's laptop(B)), so not Less(impatient(A), impatient(B))", ["A drops another person's laptop more than B, so A is not less impatient than B"]], "asymmetric_premise": ["More( drops another person's laptop(B),  drops another person's laptop(A)), so Less(impatient(A), impatient(B))", ["B drops another person's laptop more than A, so A is less impatient than B"]], "asymmetric_conclusion": ["More( drops another person's laptop(A),  drops another person's laptop(B)), so Less(impatient(B), impatient(A))", ["A drops another person's laptop more than B, so B is less impatient than A"]], "negated_asymmetric_premise": ["More( drops another person's laptop(B),  drops another person's laptop(A)), so not More(impatient(A), impatient(B))", ["B drops another person's laptop more than A, so A is not more impatient than B"]], "negated_asymmetric_conclusion": ["More( drops another person's laptop(A),  drops another person's laptop(B)), so not More(impatient(B), impatient(A))", ["A drops another person's laptop more than B, so B is not more impatient than A"]]}
{"original": ["More( walks in their house(A),  walks in their house(B)), so More(socialable(A), socialable(B))", ["A walks in their house more than B, so A is more socialable than B"]], "negated": ["More( walks in their house(A),  walks in their house(B)), so not Less(socialable(A), socialable(B))", ["A walks in their house more than B, so A is not less socialable than B"]], "asymmetric_premise": ["More( walks in their house(B),  walks in their house(A)), so Less(socialable(A), socialable(B))", ["B walks in their house more than A, so A is less socialable than B"]], "asymmetric_conclusion": ["More( walks in their house(A),  walks in their house(B)), so Less(socialable(B), socialable(A))", ["A walks in their house more than B, so B is less socialable than A"]], "negated_asymmetric_premise": ["More( walks in their house(B),  walks in their house(A)), so not More(socialable(A), socialable(B))", ["B walks in their house more than A, so A is not more socialable than B"]], "negated_asymmetric_conclusion": ["More( walks in their house(A),  walks in their house(B)), so not More(socialable(B), socialable(A))", ["A walks in their house more than B, so B is not more socialable than A"]]}
{"original": ["More( gets a new bike(A),  gets a new bike(B)), so More(elated(A), elated(B))", ["A gets a new bike, so A is more elated than B"]], "negated": ["More( gets a new bike(A),  gets a new bike(B)), so not Less(elated(A), elated(B))", ["A gets a new bike more than B, so A is not less elated than B"]], "asymmetric_premise": ["More( gets a new bike(B),  gets a new bike(A)), so Less(elated(A), elated(B))", ["B gets a new bike more than A, so A is less elated than B"]], "asymmetric_conclusion": ["More( gets a new bike(A),  gets a new bike(B)), so Less(elated(B), elated(A))", ["A gets a new bike, B does not, so B is less elated than A"]], "negated_asymmetric_premise": ["More( gets a new bike(B),  gets a new bike(A)), so not More(elated(A), elated(B))", ["B gets a new bike more than A, so A is not more elated than B"]], "negated_asymmetric_conclusion": ["More( gets a new bike(A),  gets a new bike(B)), so not More(elated(B), elated(A))", ["A gets a new bike, B does not, so B is not more elated than A"]]}
{"original": ["More( gets a bike(A),  gets a bike(B)), so More(ambitious(A), ambitious(B))", ["A gets a bike, B does not, so A is more ambitious than B"]], "negated": ["More( gets a bike(A),  gets a bike(B)), so not Less(ambitious(A), ambitious(B))", ["A gets a bike more than B, so A is not less ambitious than B"]], "asymmetric_premise": ["More( gets a bike(B),  gets a bike(A)), so Less(ambitious(A), ambitious(B))", ["B gets a bike, A does not, so A is less ambitious than B"]], "asymmetric_conclusion": ["More( gets a bike(A),  gets a bike(B)), so Less(ambitious(B), ambitious(A))", ["A gets a bike, B does not, so B is less ambitious than A"]], "negated_asymmetric_premise": ["More( gets a bike(B),  gets a bike(A)), so not More(ambitious(A), ambitious(B))", ["B gets a bike more than A, so A is not more ambitious than B"]], "negated_asymmetric_conclusion": ["More( gets a bike(A),  gets a bike(B)), so not More(ambitious(B), ambitious(A))", ["A gets a bike more than B, so B is not more ambitious than A"]]}
{"original": ["More( does n't fit anymore(A),  does n't fit anymore(B)), so More(aged(A), aged(B))", ["A does n't fit anymore than B, so A is more aged than B"]], "negated": ["More( does n't fit anymore(A),  does n't fit anymore(B)), so not Less(aged(A), aged(B))", ["A does n't fit anymore than B, so A is not less aged than B"]], "asymmetric_premise": ["More( does n't fit anymore(B),  does n't fit anymore(A)), so Less(aged(A), aged(B))", ["B does n't fit anymore than A, so A is less aged than B"]], "asymmetric_conclusion": ["More( does n't fit anymore(A),  does n't fit anymore(B)), so Less(aged(B), aged(A))", ["A does n't fit anymore than B, so B is less aged than A"]], "negated_asymmetric_premise": ["More( does n't fit anymore(B),  does n't fit anymore(A)), so not More(aged(A), aged(B))", ["B does n't fit anymore than A, so A is not more aged than B"]], "negated_asymmetric_conclusion": ["More( does n't fit anymore(A),  does n't fit anymore(B)), so not More(aged(B), aged(A))", ["A does n't fit anymore than B, so B is not more aged than A"]]}
{"original": ["More( takes the kite(A),  takes the kite(B)), so More(childlike(A), childlike(B))", ["A takes the kite more than B, so A is more childlike than B"]], "negated": ["More( takes the kite(A),  takes the kite(B)), so not Less(childlike(A), childlike(B))", ["A takes the kite more than B, so A is not less childlike than B"]], "asymmetric_premise": ["More( takes the kite(B),  takes the kite(A)), so Less(childlike(A), childlike(B))", ["B takes the kite more than A, so A is less childlike than B"]], "asymmetric_conclusion": ["More( takes the kite(A),  takes the kite(B)), so Less(childlike(B), childlike(A))", ["A takes the kite more than B, so B is less childlike than A"]], "negated_asymmetric_premise": ["More( takes the kite(B),  takes the kite(A)), so not More(childlike(A), childlike(B))", ["B takes the kite more than A, so A is not more childlike than B"]], "negated_asymmetric_conclusion": ["More( takes the kite(A),  takes the kite(B)), so not More(childlike(B), childlike(A))", ["A takes the kite more than B, so B is not more childlike than A"]]}
{"original": ["More( hides their face in their hands(A),  hides their face in their hands(B)), so More(ashamed(A), ashamed(B))", ["A hides their face in their hands more than B, so A is more ashamed than B"]], "negated": ["More( hides their face in their hands(A),  hides their face in their hands(B)), so not Less(ashamed(A), ashamed(B))", ["A hides their face in their hands more than B, so A is not less ashamed than B"]], "asymmetric_premise": ["More( hides their face in their hands(B),  hides their face in their hands(A)), so Less(ashamed(A), ashamed(B))", ["B hides their face in their hands more than A, so A is less ashamed than B"]], "asymmetric_conclusion": ["More( hides their face in their hands(A),  hides their face in their hands(B)), so Less(ashamed(B), ashamed(A))", ["A hides their face in their hands more than B, so B is less ashamed than A"]], "negated_asymmetric_premise": ["More( hides their face in their hands(B),  hides their face in their hands(A)), so not More(ashamed(A), ashamed(B))", ["B hides their face in their hands more than A, so A is not more ashamed than B"]], "negated_asymmetric_conclusion": ["More( hides their face in their hands(A),  hides their face in their hands(B)), so not More(ashamed(B), ashamed(A))", ["A hides their face in their hands while B does not, so B is not more ashamed than A"]]}
{"original": ["More( makes decisions on the basis(A),  makes decisions on the basis(B)), so More(logical(A), logical(B))", ["A makes decisions on the basis more than B, so A is more logical than B"]], "negated": ["More( makes decisions on the basis(A),  makes decisions on the basis(B)), so not Less(logical(A), logical(B))", ["A makes decisions on the basis more than B, so A is not less logical than B"]], "asymmetric_premise": ["More( makes decisions on the basis(B),  makes decisions on the basis(A)), so Less(logical(A), logical(B))", ["B makes decisions on the basis more than A, so A is less logical than B"]], "asymmetric_conclusion": ["More( makes decisions on the basis(A),  makes decisions on the basis(B)), so Less(logical(B), logical(A))", ["A makes decisions on the basis more than B, so B is less logical than A"]], "negated_asymmetric_premise": ["More( makes decisions on the basis(B),  makes decisions on the basis(A)), so not More(logical(A), logical(B))", ["B makes decisions on the basis more than A, so A is not more logical than B"]], "negated_asymmetric_conclusion": ["More( makes decisions on the basis(A),  makes decisions on the basis(B)), so not More(logical(B), logical(A))", ["A makes decisions on the basis more than B, so B is not more logical than A"]]}
{"original": ["More( goes to the dogs(A),  goes to the dogs(B)), so More(pet lover(A), pet lover(B))", ["A goes to the dogs more than B, so A is a more pet lover than B"]], "negated": ["More( goes to the dogs(A),  goes to the dogs(B)), so not Less(pet lover(A), pet lover(B))", ["A goes to the dogs more than B, so A is not less pet lover than B"]], "asymmetric_premise": ["More( goes to the dogs(B),  goes to the dogs(A)), so Less(pet lover(A), pet lover(B))", ["B goes to the dogs more than A, so A is a less pet lover than B"]], "asymmetric_conclusion": ["More( goes to the dogs(A),  goes to the dogs(B)), so Less(pet lover(B), pet lover(A))", ["A goes to the dogs more than B, so B is a less pet lover than A"]], "negated_asymmetric_premise": ["More( goes to the dogs(B),  goes to the dogs(A)), so not More(pet lover(A), pet lover(B))", ["B goes to the dogs more than A, so A is not more pet lover than B"]], "negated_asymmetric_conclusion": ["More( goes to the dogs(A),  goes to the dogs(B)), so not More(pet lover(B), pet lover(A))", ["A goes to the dogs more than B, so B is not more pet lover than A"]]}
{"original": ["More( would fail(A),  would fail(B)), so More(inadequate(A), inadequate(B))", ["A would fail more than B, so A is more inadequate than B"]], "negated": ["More( would fail(A),  would fail(B)), so not Less(inadequate(A), inadequate(B))", ["A would fail more than B, so A is not less inadequate than B"]], "asymmetric_premise": ["More( would fail(B),  would fail(A)), so Less(inadequate(A), inadequate(B))", ["B would fail more than A, so A is less inadequate than B"]], "asymmetric_conclusion": ["More( would fail(A),  would fail(B)), so Less(inadequate(B), inadequate(A))", ["A would fail more than B, so B is less inadequate than A"]], "negated_asymmetric_premise": ["More( would fail(B),  would fail(A)), so not More(inadequate(A), inadequate(B))", ["B would fail more than A, so A is not more inadequate than B"]], "negated_asymmetric_conclusion": ["More( would fail(A),  would fail(B)), so not More(inadequate(B), inadequate(A))", ["A would fail more than B, so B is not more inadequate than A"]]}
{"original": ["More( sees another person better(A),  sees another person better(B)), so More(loving(A), loving(B))", ["A sees another person better than B, so A is more loving than B"]], "negated": ["More( sees another person better(A),  sees another person better(B)), so not Less(loving(A), loving(B))", ["A sees another person better than B, so A is not less loving than B"]], "asymmetric_premise": ["More( sees another person better(B),  sees another person better(A)), so Less(loving(A), loving(B))", ["B sees another person better than A, so A is less loving than B"]], "asymmetric_conclusion": ["More( sees another person better(A),  sees another person better(B)), so Less(loving(B), loving(A))", ["A sees another person better than B, so B is less loving than A"]], "negated_asymmetric_premise": ["More( sees another person better(B),  sees another person better(A)), so not More(loving(A), loving(B))", ["B sees another person better than A, so A is not more loving than B"]], "negated_asymmetric_conclusion": ["More( sees another person better(A),  sees another person better(B)), so not More(loving(B), loving(A))", ["A sees another person better than B, so B is not more loving than A"]]}
{"original": ["More( manages their affairs(A),  manages their affairs(B)), so More(bright(A), bright(B))", ["A manages their affairs more than B, so A is more bright than B"]], "negated": ["More( manages their affairs(A),  manages their affairs(B)), so not Less(bright(A), bright(B))", ["A manages their affairs more than B, so A is not less bright than B"]], "asymmetric_premise": ["More( manages their affairs(B),  manages their affairs(A)), so Less(bright(A), bright(B))", ["B manages their affairs more than A, so A is less bright than B"]], "asymmetric_conclusion": ["More( manages their affairs(A),  manages their affairs(B)), so Less(bright(B), bright(A))", ["A manages their affairs more than B, so B is less bright than A"]], "negated_asymmetric_premise": ["More( manages their affairs(B),  manages their affairs(A)), so not More(bright(A), bright(B))", ["B manages their affairs more than A, so A is not more bright than B"]], "negated_asymmetric_conclusion": ["More( manages their affairs(A),  manages their affairs(B)), so not More(bright(B), bright(A))", ["A manages their affairs more than B, so B is not more bright than A"]]}
{"original": ["More( never noticed(A),  never noticed(B)), so More(oblivious(A), oblivious(B))", ["A has never noticed B, so A is more oblivious than B"]], "negated": ["More( never noticed(A),  never noticed(B)), so not Less(oblivious(A), oblivious(B))", ["A has been noticed more than B, so A is not less oblivious than B"]], "asymmetric_premise": ["More( never noticed(B),  never noticed(A)), so Less(oblivious(A), oblivious(B))", ["B has never noticed A, so A is less oblivious than B"]], "asymmetric_conclusion": ["More( never noticed(A),  never noticed(B)), so Less(oblivious(B), oblivious(A))", ["A has been noticed more than B, so B is less oblivious than A"]], "negated_asymmetric_premise": ["More( never noticed(B),  never noticed(A)), so not More(oblivious(A), oblivious(B))", ["B has never noticed A, so A is not more oblivious than B"]], "negated_asymmetric_conclusion": ["More( never noticed(A),  never noticed(B)), so not More(oblivious(B), oblivious(A))", ["A has never noticed B, so B is not more oblivious than A"]]}
{"original": ["More( watches the olympics(A),  watches the olympics(B)), so More(observant(A), observant(B))", ["A watches the olympics more than B, so A is more observant than B"]], "negated": ["More( watches the olympics(A),  watches the olympics(B)), so not Less(observant(A), observant(B))", ["A watches the olympics more than B, so A is not less observant than B"]], "asymmetric_premise": ["More( watches the olympics(B),  watches the olympics(A)), so Less(observant(A), observant(B))", ["B watches the olympics more than A, so A is less observant than B"]], "asymmetric_conclusion": ["More( watches the olympics(A),  watches the olympics(B)), so Less(observant(B), observant(A))", ["A watches the olympics more than B, so B is less observant than A"]], "negated_asymmetric_premise": ["More( watches the olympics(B),  watches the olympics(A)), so not More(observant(A), observant(B))", ["B watches the olympics more than A, so A is not more observant than B"]], "negated_asymmetric_conclusion": ["More( watches the olympics(A),  watches the olympics(B)), so not More(observant(B), observant(A))", ["A watches the olympics more than B, so B is not more observant than A"]]}
{"original": ["More( learns a lesson(A),  learns a lesson(B)), so More(enlightened(A), enlightened(B))", ["A learns a lesson more than B, so A is more enlightened than B"]], "negated": ["More( learns a lesson(A),  learns a lesson(B)), so not Less(enlightened(A), enlightened(B))", ["A learns a lesson more than B, so A is not less enlightened than B"]], "asymmetric_premise": ["More( learns a lesson(B),  learns a lesson(A)), so Less(enlightened(A), enlightened(B))", ["B learns a lesson more than A, so A is less enlightened than B"]], "asymmetric_conclusion": ["More( learns a lesson(A),  learns a lesson(B)), so Less(enlightened(B), enlightened(A))", ["A learns a lesson more than B, so B is less enlightened than A"]], "negated_asymmetric_premise": ["More( learns a lesson(B),  learns a lesson(A)), so not More(enlightened(A), enlightened(B))", ["B learns a lesson more than A, so A is not more enlightened than B"]], "negated_asymmetric_conclusion": ["More( learns a lesson(A),  learns a lesson(B)), so not More(enlightened(B), enlightened(A))", ["A learns a lesson more than B, so B is not more enlightened than A"]]}
{"original": ["More( brings tears to my eyes(A),  brings tears to my eyes(B)), so More(happy(A), happy(B))", ["A brings tears to my eyes more than B, so A is more happy than B"]], "negated": ["More( brings tears to my eyes(A),  brings tears to my eyes(B)), so not Less(happy(A), happy(B))", ["A brings tears to my eyes more than B, so A is not less happy than B"]], "asymmetric_premise": ["More( brings tears to my eyes(B),  brings tears to my eyes(A)), so Less(happy(A), happy(B))", ["B brings tears to my eyes more than A, so A is less happy than B"]], "asymmetric_conclusion": ["More( brings tears to my eyes(A),  brings tears to my eyes(B)), so Less(happy(B), happy(A))", ["A brings tears to my eyes more than B, so B is less happy than A"]], "negated_asymmetric_premise": ["More( brings tears to my eyes(B),  brings tears to my eyes(A)), so not More(happy(A), happy(B))", ["B brings tears to my eyes more than A, so A is not more happy than B"]], "negated_asymmetric_conclusion": ["More( brings tears to my eyes(A),  brings tears to my eyes(B)), so not More(happy(B), happy(A))", ["A brings tears to my eyes more than B, so B is not more happy than A"]]}
{"original": ["More( is so excited another person could n't sleep(A),  is so excited another person could n't sleep(B)), so More(entusiatic(A), entusiatic(B))", ["A is so excited another person could n't sleep more than B, so A is more entusiatic than B"]], "negated": ["More( is so excited another person could n't sleep(A),  is so excited another person could n't sleep(B)), so not Less(entusiatic(A), entusiatic(B))", ["A is so excited another person could n't sleep more than B, so A is not less entusiatic than B"]], "asymmetric_premise": ["More( is so excited another person could n't sleep(B),  is so excited another person could n't sleep(A)), so Less(entusiatic(A), entusiatic(B))", ["B is so excited another person could n't sleep, so A is less entusiatic than B"]], "asymmetric_conclusion": ["More( is so excited another person could n't sleep(A),  is so excited another person could n't sleep(B)), so Less(entusiatic(B), entusiatic(A))", ["A is so excited another person could n't sleep, so B is less entusiatic than A"]], "negated_asymmetric_premise": ["More( is so excited another person could n't sleep(B),  is so excited another person could n't sleep(A)), so not More(entusiatic(A), entusiatic(B))", ["B is so excited another person could n't sleep, so A is not more entusiatic than B"]], "negated_asymmetric_conclusion": ["More( is so excited another person could n't sleep(A),  is so excited another person could n't sleep(B)), so not More(entusiatic(B), entusiatic(A))", ["A is so excited another person could n't sleep, so B is not more entusiatic than A"]]}
{"original": ["More( leaves in a huff(A),  leaves in a huff(B)), so More(flustered(A), flustered(B))", ["A leaves in a huff more than B, so A is more flustered than B"]], "negated": ["More( leaves in a huff(A),  leaves in a huff(B)), so not Less(flustered(A), flustered(B))", ["A leaves in a huff more than B, so A is not less flustered than B"]], "asymmetric_premise": ["More( leaves in a huff(B),  leaves in a huff(A)), so Less(flustered(A), flustered(B))", ["B leaves in a huff more than A, so A is less flustered than B"]], "asymmetric_conclusion": ["More( leaves in a huff(A),  leaves in a huff(B)), so Less(flustered(B), flustered(A))", ["A leaves in a huff while B does not, so B is less flustered than A"]], "negated_asymmetric_premise": ["More( leaves in a huff(B),  leaves in a huff(A)), so not More(flustered(A), flustered(B))", ["B leaves in a huff, so A is not more flustered than B"]], "negated_asymmetric_conclusion": ["More( leaves in a huff(A),  leaves in a huff(B)), so not More(flustered(B), flustered(A))", ["A leaves in a huff more than B, so B is not more flustered than A"]]}
{"original": ["More( knocks at another person's door(A),  knocks at another person's door(B)), so More(anticipatory(A), anticipatory(B))", ["A knocks at another person's door more than B, so A is more anticipatory than B"]], "negated": ["More( knocks at another person's door(A),  knocks at another person's door(B)), so not Less(anticipatory(A), anticipatory(B))", ["A knocks at another person's door more than B, so A is not less anticipatory than B"]], "asymmetric_premise": ["More( knocks at another person's door(B),  knocks at another person's door(A)), so Less(anticipatory(A), anticipatory(B))", ["B knocks at another person's door more than A, so A is less anticipatory than B"]], "asymmetric_conclusion": ["More( knocks at another person's door(A),  knocks at another person's door(B)), so Less(anticipatory(B), anticipatory(A))", ["A knocks at another person's door more than B, so B is less anticipatory than A"]], "negated_asymmetric_premise": ["More( knocks at another person's door(B),  knocks at another person's door(A)), so not More(anticipatory(A), anticipatory(B))", ["B knocks at another person's door more than A, so A is not more anticipatory than B"]], "negated_asymmetric_conclusion": ["More( knocks at another person's door(A),  knocks at another person's door(B)), so not More(anticipatory(B), anticipatory(A))", ["A knocks at another person's door more than B, so B is not more anticipatory than A"]]}
{"original": ["More( wants a drink(A),  wants a drink(B)), so More(thirsty(A), thirsty(B))", ["A wants a drink more than B, so A is more thirsty than B"]], "negated": ["More( wants a drink(A),  wants a drink(B)), so not Less(thirsty(A), thirsty(B))", ["A wants a drink more than B, so A is not less thirsty than B"]], "asymmetric_premise": ["More( wants a drink(B),  wants a drink(A)), so Less(thirsty(A), thirsty(B))", ["B wants a drink more than A, so A is less thirsty than B"]], "asymmetric_conclusion": ["More( wants a drink(A),  wants a drink(B)), so Less(thirsty(B), thirsty(A))", ["A wants a drink more than B, so B is less thirsty than A"]], "negated_asymmetric_premise": ["More( wants a drink(B),  wants a drink(A)), so not More(thirsty(A), thirsty(B))", ["B wants a drink more than A, so A is not more thirsty than B"]], "negated_asymmetric_conclusion": ["More( wants a drink(A),  wants a drink(B)), so not More(thirsty(B), thirsty(A))", ["A wants a drink more than B, so B is not more thirsty than A"]]}
{"original": ["More( maintains their position(A),  maintains their position(B)), so More(resolved(A), resolved(B))", ["A maintains their position more than B, so A is more resolved than B"]], "negated": ["More( maintains their position(A),  maintains their position(B)), so not Less(resolved(A), resolved(B))", ["A maintains their position more than B, so A is not less resolved than B"]], "asymmetric_premise": ["More( maintains their position(B),  maintains their position(A)), so Less(resolved(A), resolved(B))", ["B maintains their position more than A, so A is less resolved than B"]], "asymmetric_conclusion": ["More( maintains their position(A),  maintains their position(B)), so Less(resolved(B), resolved(A))", ["A maintains their position more than B, so B is less resolved than A"]], "negated_asymmetric_premise": ["More( maintains their position(B),  maintains their position(A)), so not More(resolved(A), resolved(B))", ["B maintains their position more than A, so A is not more resolved than B"]], "negated_asymmetric_conclusion": ["More( maintains their position(A),  maintains their position(B)), so not More(resolved(B), resolved(A))", ["A maintains their position more than B, so B is not more resolved than A"]]}
{"original": ["More( gets an invitation(A),  gets an invitation(B)), so More(liked(A), liked(B))", ["A gets an invitation more than B, so A is more liked than B"]], "negated": ["More( gets an invitation(A),  gets an invitation(B)), so not Less(liked(A), liked(B))", ["A gets an invitation more than B, so A is not less liked than B"]], "asymmetric_premise": ["More( gets an invitation(B),  gets an invitation(A)), so Less(liked(A), liked(B))", ["B gets an invitation more than A, so A is less liked than B"]], "asymmetric_conclusion": ["More( gets an invitation(A),  gets an invitation(B)), so Less(liked(B), liked(A))", ["A gets an invitation more than B, so B is less liked than A"]], "negated_asymmetric_premise": ["More( gets an invitation(B),  gets an invitation(A)), so not More(liked(A), liked(B))", ["B gets an invitation more than A, so A is not more liked than B"]], "negated_asymmetric_conclusion": ["More( gets an invitation(A),  gets an invitation(B)), so not More(liked(B), liked(A))", ["A gets an invitation more than B, so B is not more liked than A"]]}
{"original": ["More( uses it all the time(A),  uses it all the time(B)), so More(consistent(A), consistent(B))", ["A uses it all the time more than B, so A is more consistent than B"]], "negated": ["More( uses it all the time(A),  uses it all the time(B)), so not Less(consistent(A), consistent(B))", ["A uses it all the time more than B, so A is not less consistent than B"]], "asymmetric_premise": ["More( uses it all the time(B),  uses it all the time(A)), so Less(consistent(A), consistent(B))", ["B uses it all the time more than A, so A is less consistent than B"]], "asymmetric_conclusion": ["More( uses it all the time(A),  uses it all the time(B)), so Less(consistent(B), consistent(A))", ["A uses it all the time more than B, so B is less consistent than A"]], "negated_asymmetric_premise": ["More( uses it all the time(B),  uses it all the time(A)), so not More(consistent(A), consistent(B))", ["B uses it all the time more than A, so A is not more consistent than B"]], "negated_asymmetric_conclusion": ["More( uses it all the time(A),  uses it all the time(B)), so not More(consistent(B), consistent(A))", ["A uses it all the time more than B, so B is not more consistent than A"]]}
{"original": ["More( makes war upon another person(A),  makes war upon another person(B)), so More(commanding(A), commanding(B))", ["A makes war upon another person more than B, so A is more commanding than B"]], "negated": ["More( makes war upon another person(A),  makes war upon another person(B)), so not Less(commanding(A), commanding(B))", ["A makes war upon another person more than B, so A is not less commanding than B"]], "asymmetric_premise": ["More( makes war upon another person(B),  makes war upon another person(A)), so Less(commanding(A), commanding(B))", ["B makes war upon another person more than A, so A is less commanding than B"]], "asymmetric_conclusion": ["More( makes war upon another person(A),  makes war upon another person(B)), so Less(commanding(B), commanding(A))", ["A makes war upon another person more than B, so B is less commanding than A"]], "negated_asymmetric_premise": ["More( makes war upon another person(B),  makes war upon another person(A)), so not More(commanding(A), commanding(B))", ["B makes war upon another person more than A, so A is not more commanding than B"]], "negated_asymmetric_conclusion": ["More( makes war upon another person(A),  makes war upon another person(B)), so not More(commanding(B), commanding(A))", ["A makes war upon another person more than B, so B is not more commanding than A"]]}
{"original": ["More( beats their friend(A),  beats their friend(B)), so More(talented(A), talented(B))", ["A beats their friend more than B, so A is more talented than B"]], "negated": ["More( beats their friend(A),  beats their friend(B)), so not Less(talented(A), talented(B))", ["A beats their friend more than B, so A is not less talented than B"]], "asymmetric_premise": ["More( beats their friend(B),  beats their friend(A)), so Less(talented(A), talented(B))", ["B beats their friend more than A, so A is less talented than B"]], "asymmetric_conclusion": ["More( beats their friend(A),  beats their friend(B)), so Less(talented(B), talented(A))", ["A beats their friend more than B, so B is less talented than A"]], "negated_asymmetric_premise": ["More( beats their friend(B),  beats their friend(A)), so not More(talented(A), talented(B))", ["B beats their friend more than A, so A is not more talented than B"]], "negated_asymmetric_conclusion": ["More( beats their friend(A),  beats their friend(B)), so not More(talented(B), talented(A))", ["A beats their friend more than B, so B is not more talented than A"]]}
{"original": ["More( heads towards another person(A),  heads towards another person(B)), so More(social(A), social(B))", ["A heads towards another person more than B, so A is more social than B"]], "negated": ["More( heads towards another person(A),  heads towards another person(B)), so not Less(social(A), social(B))", ["A heads towards another person more than B, so A is not less social than B"]], "asymmetric_premise": ["More( heads towards another person(B),  heads towards another person(A)), so Less(social(A), social(B))", ["B heads towards another person more than A, so A is less social than B"]], "asymmetric_conclusion": ["More( heads towards another person(A),  heads towards another person(B)), so Less(social(B), social(A))", ["A heads towards another person more than B, so B is less social than A"]], "negated_asymmetric_premise": ["More( heads towards another person(B),  heads towards another person(A)), so not More(social(A), social(B))", ["B heads towards another person more than A, so A is not more social than B"]], "negated_asymmetric_conclusion": ["More( heads towards another person(A),  heads towards another person(B)), so not More(social(B), social(A))", ["A heads towards another person more than B, so B is not more social than A"]]}
{"original": ["More( continues their course(A),  continues their course(B)), so More(dedicated(A), dedicated(B))", ["A continues their course more than B, so A is more dedicated than B"]], "negated": ["More( continues their course(A),  continues their course(B)), so not Less(dedicated(A), dedicated(B))", ["A continues their course more than B, so A is not less dedicated than B"]], "asymmetric_premise": ["More( continues their course(B),  continues their course(A)), so Less(dedicated(A), dedicated(B))", ["B continues their course more than A, so A is less dedicated than B"]], "asymmetric_conclusion": ["More( continues their course(A),  continues their course(B)), so Less(dedicated(B), dedicated(A))", ["A continues their course more than B, so B is less dedicated than A"]], "negated_asymmetric_premise": ["More( continues their course(B),  continues their course(A)), so not More(dedicated(A), dedicated(B))", ["B continues their course more than A, so A is not more dedicated than B"]], "negated_asymmetric_conclusion": ["More( continues their course(A),  continues their course(B)), so not More(dedicated(B), dedicated(A))", ["A continues their course more than B, so B is not more dedicated than A"]]}
{"original": ["More( takes pictures of it(A),  takes pictures of it(B)), so More(interested(A), interested(B))", ["A takes pictures of it while B does not, so A is more interested than B"]], "negated": ["More( takes pictures of it(A),  takes pictures of it(B)), so not Less(interested(A), interested(B))", ["A takes pictures of it while B does not, so A is not less interested than B"]], "asymmetric_premise": ["More( takes pictures of it(B),  takes pictures of it(A)), so Less(interested(A), interested(B))", ["B takes pictures of it while A does not, so A is less interested than B"]], "asymmetric_conclusion": ["More( takes pictures of it(A),  takes pictures of it(B)), so Less(interested(B), interested(A))", ["A takes pictures of it while B does not, so B is less interested than A"]], "negated_asymmetric_premise": ["More( takes pictures of it(B),  takes pictures of it(A)), so not More(interested(A), interested(B))", ["B takes pictures of it while A does not, so A is not more interested than B"]], "negated_asymmetric_conclusion": ["More( takes pictures of it(A),  takes pictures of it(B)), so not More(interested(B), interested(A))", ["A takes pictures of it while B does not, so B is not more interested than A"]]}
{"original": ["More( preserves their life(A),  preserves their life(B)), so More(lucky(A), lucky(B))", ["A preserves their life more than B, so A is more lucky than B"]], "negated": ["More( preserves their life(A),  preserves their life(B)), so not Less(lucky(A), lucky(B))", ["A preserves their life more than B, so A is not less lucky than B"]], "asymmetric_premise": ["More( preserves their life(B),  preserves their life(A)), so Less(lucky(A), lucky(B))", ["B preserves their life more than A, so A is less lucky than B"]], "asymmetric_conclusion": ["More( preserves their life(A),  preserves their life(B)), so Less(lucky(B), lucky(A))", ["A preserves their life more than B, so B is less lucky than A"]], "negated_asymmetric_premise": ["More( preserves their life(B),  preserves their life(A)), so not More(lucky(A), lucky(B))", ["B preserves their life more than A, so A is not more lucky than B"]], "negated_asymmetric_conclusion": ["More( preserves their life(A),  preserves their life(B)), so not More(lucky(B), lucky(A))", ["A preserves their life more than B, so B is not more lucky than A"]]}
{"original": ["More( is worth thousands of dollars(A),  is worth thousands of dollars(B)), so More(valuable(A), valuable(B))", ["A is worth thousands of dollars more than B, so A is more valuable than B"]], "negated": ["More( is worth thousands of dollars(A),  is worth thousands of dollars(B)), so not Less(valuable(A), valuable(B))", ["A is worth thousands of dollars more than B, so A is not less valuable than B"]], "asymmetric_premise": ["More( is worth thousands of dollars(B),  is worth thousands of dollars(A)), so Less(valuable(A), valuable(B))", ["B is worth thousands of dollars more than A, so A is less valuable than B"]], "asymmetric_conclusion": ["More( is worth thousands of dollars(A),  is worth thousands of dollars(B)), so Less(valuable(B), valuable(A))", ["A is worth thousands of dollars more than B, so B is less valuable than A"]], "negated_asymmetric_premise": ["More( is worth thousands of dollars(B),  is worth thousands of dollars(A)), so not More(valuable(A), valuable(B))", ["B is worth thousands of dollars more than A, so A is not more valuable than B"]], "negated_asymmetric_conclusion": ["More( is worth thousands of dollars(A),  is worth thousands of dollars(B)), so not More(valuable(B), valuable(A))", ["A is worth thousands of dollars more than B, so B is not more valuable than A"]]}
{"original": ["More( is a homeless man(A),  is a homeless man(B)), so More(unlucky(A), unlucky(B))", ["A is a homeless man, B is a homeless man, so A is more unlucky than B"]], "negated": ["More( is a homeless man(A),  is a homeless man(B)), so not Less(unlucky(A), unlucky(B))", ["A is a homeless man, so A is not less unlucky than B"]], "asymmetric_premise": ["More( is a homeless man(B),  is a homeless man(A)), so Less(unlucky(A), unlucky(B))", ["B is a homeless man, A is not, so A is less unlucky than B"]], "asymmetric_conclusion": ["More( is a homeless man(A),  is a homeless man(B)), so Less(unlucky(B), unlucky(A))", ["A is a homeless man, B is not, so B is less unlucky than A"]], "negated_asymmetric_premise": ["More( is a homeless man(B),  is a homeless man(A)), so not More(unlucky(A), unlucky(B))", ["B is a homeless man more than A, so A is not more unlucky than B"]], "negated_asymmetric_conclusion": ["More( is a homeless man(A),  is a homeless man(B)), so not More(unlucky(B), unlucky(A))", ["A is a homeless man more than B, so B is not more unlucky than A"]]}
{"original": ["More( eats for lunch(A),  eats for lunch(B)), so More(healthy(A), healthy(B))", ["A eats for lunch more than B, so A is more healthy than B"]], "negated": ["More( eats for lunch(A),  eats for lunch(B)), so not Less(healthy(A), healthy(B))", ["A eats for lunch more than B, so A is not less healthy than B"]], "asymmetric_premise": ["More( eats for lunch(B),  eats for lunch(A)), so Less(healthy(A), healthy(B))", ["B eats for lunch more than A, so A is less healthy than B"]], "asymmetric_conclusion": ["More( eats for lunch(A),  eats for lunch(B)), so Less(healthy(B), healthy(A))", ["A eats for lunch more than B, so B is less healthy than A"]], "negated_asymmetric_premise": ["More( eats for lunch(B),  eats for lunch(A)), so not More(healthy(A), healthy(B))", ["B eats for lunch more than A, so A is not more healthy than B"]], "negated_asymmetric_conclusion": ["More( eats for lunch(A),  eats for lunch(B)), so not More(healthy(B), healthy(A))", ["A eats for lunch more than B, so B is not more healthy than A"]]}
{"original": ["More( rises from another person's chair(A),  rises from another person's chair(B)), so More(restless(A), restless(B))", ["A rises from another person's chair more than B, so A is more restless than B"]], "negated": ["More( rises from another person's chair(A),  rises from another person's chair(B)), so not Less(restless(A), restless(B))", ["A rises from another person's chair more than B, so A is not less restless than B"]], "asymmetric_premise": ["More( rises from another person's chair(B),  rises from another person's chair(A)), so Less(restless(A), restless(B))", ["B rises from another person's chair more than A, so A is less restless than B"]], "asymmetric_conclusion": ["More( rises from another person's chair(A),  rises from another person's chair(B)), so Less(restless(B), restless(A))", ["A rises from another person's chair more than B, so B is less restless than A"]], "negated_asymmetric_premise": ["More( rises from another person's chair(B),  rises from another person's chair(A)), so not More(restless(A), restless(B))", ["B rises from another person's chair more than A, so A is not more restless than B"]], "negated_asymmetric_conclusion": ["More( rises from another person's chair(A),  rises from another person's chair(B)), so not More(restless(B), restless(A))", ["A rises from another person's chair more than B, so B is not more restless than A"]]}
{"original": ["More( plays poker(A),  plays poker(B)), so More(sneaky(A), sneaky(B))", ["A plays poker more than B, so A is more sneaky than B"]], "negated": ["More( plays poker(A),  plays poker(B)), so not Less(sneaky(A), sneaky(B))", ["A plays poker more than B, so A is not less sneaky than B"]], "asymmetric_premise": ["More( plays poker(B),  plays poker(A)), so Less(sneaky(A), sneaky(B))", ["B plays poker more than A, so A is less sneaky than B"]], "asymmetric_conclusion": ["More( plays poker(A),  plays poker(B)), so Less(sneaky(B), sneaky(A))", ["A plays poker more than B, so B is less sneaky than A"]], "negated_asymmetric_premise": ["More( plays poker(B),  plays poker(A)), so not More(sneaky(A), sneaky(B))", ["B plays poker more than A, so A is not more sneaky than B"]], "negated_asymmetric_conclusion": ["More( plays poker(A),  plays poker(B)), so not More(sneaky(B), sneaky(A))", ["A plays poker more than B, so B is not more sneaky than A"]]}
{"original": ["More( gives under another person hand(A),  gives under another person hand(B)), so More(sneaky(A), sneaky(B))", ["A gives under another person hand more than B, so A is more sneaky than B"]], "negated": ["More( gives under another person hand(A),  gives under another person hand(B)), so not Less(sneaky(A), sneaky(B))", ["A gives under another person hand more than B, so A is not less sneaky than B"]], "asymmetric_premise": ["More( gives under another person hand(B),  gives under another person hand(A)), so Less(sneaky(A), sneaky(B))", ["B gives under another person hand more than A, so A is less sneaky than B"]], "asymmetric_conclusion": ["More( gives under another person hand(A),  gives under another person hand(B)), so Less(sneaky(B), sneaky(A))", ["A gives under another person hand more than B, so B is less sneaky than A"]], "negated_asymmetric_premise": ["More( gives under another person hand(B),  gives under another person hand(A)), so not More(sneaky(A), sneaky(B))", ["B gives under another person hand more than A, so A is not more sneaky than B"]], "negated_asymmetric_conclusion": ["More( gives under another person hand(A),  gives under another person hand(B)), so not More(sneaky(B), sneaky(A))", ["A gives under another person hand more than B, so B is not more sneaky than A"]]}
{"original": ["More( wins a prize(A),  wins a prize(B)), so More(happy(A), happy(B))", ["A wins a prize more than B, so A is more happy than B"]], "negated": ["More( wins a prize(A),  wins a prize(B)), so not Less(happy(A), happy(B))", ["A wins a prize more than B, so A is not less happy than B"]], "asymmetric_premise": ["More( wins a prize(B),  wins a prize(A)), so Less(happy(A), happy(B))", ["B wins a prize more than A, so A is less happy than B"]], "asymmetric_conclusion": ["More( wins a prize(A),  wins a prize(B)), so Less(happy(B), happy(A))", ["A wins a prize more than B, so B is less happy than A"]], "negated_asymmetric_premise": ["More( wins a prize(B),  wins a prize(A)), so not More(happy(A), happy(B))", ["B wins a prize more than A, so A is not more happy than B"]], "negated_asymmetric_conclusion": ["More( wins a prize(A),  wins a prize(B)), so not More(happy(B), happy(A))", ["A wins a prize more than B, so B is not more happy than A"]]}
{"original": ["More( keeps their promises(A),  keeps their promises(B)), so More(honest(A), honest(B))", ["A keeps their promises more than B, so A is more honest than B"]], "negated": ["More( keeps their promises(A),  keeps their promises(B)), so not Less(honest(A), honest(B))", ["A keeps their promises more than B, so A is not less honest than B"]], "asymmetric_premise": ["More( keeps their promises(B),  keeps their promises(A)), so Less(honest(A), honest(B))", ["B keeps their promises more than A, so A is less honest than B"]], "asymmetric_conclusion": ["More( keeps their promises(A),  keeps their promises(B)), so Less(honest(B), honest(A))", ["A keeps their promises more than B, so B is less honest than A"]], "negated_asymmetric_premise": ["More( keeps their promises(B),  keeps their promises(A)), so not More(honest(A), honest(B))", ["B keeps their promises more than A, so A is not more honest than B"]], "negated_asymmetric_conclusion": ["More( keeps their promises(A),  keeps their promises(B)), so not More(honest(B), honest(A))", ["A keeps their promises more than B, so B is not more honest than A"]]}
{"original": ["More( cuts a hole(A),  cuts a hole(B)), so More(designing(A), designing(B))", ["A cuts a hole more than B, so A is more designing than B"]], "negated": ["More( cuts a hole(A),  cuts a hole(B)), so not Less(designing(A), designing(B))", ["A cuts a hole more than B, so A is not less designing than B"]], "asymmetric_premise": ["More( cuts a hole(B),  cuts a hole(A)), so Less(designing(A), designing(B))", ["B cuts a hole more than A, so A is less designing than B"]], "asymmetric_conclusion": ["More( cuts a hole(A),  cuts a hole(B)), so Less(designing(B), designing(A))", ["A cuts a hole more than B, so B is less designing than A"]], "negated_asymmetric_premise": ["More( cuts a hole(B),  cuts a hole(A)), so not More(designing(A), designing(B))", ["B cuts a hole more than A, so A is not more designing than B"]], "negated_asymmetric_conclusion": ["More( cuts a hole(A),  cuts a hole(B)), so not More(designing(B), designing(A))", ["A cuts a hole more than B, so B is not more designing than A"]]}
{"original": ["More( says something(A),  says something(B)), so More(talkative(A), talkative(B))", ["A says something more than B, so A is more talkative than B"]], "negated": ["More( says something(A),  says something(B)), so not Less(talkative(A), talkative(B))", ["A says something more than B, so A is not less talkative than B"]], "asymmetric_premise": ["More( says something(B),  says something(A)), so Less(talkative(A), talkative(B))", ["B says something more than A, so A is less talkative than B"]], "asymmetric_conclusion": ["More( says something(A),  says something(B)), so Less(talkative(B), talkative(A))", ["A says something more than B, so B is less talkative than A"]], "negated_asymmetric_premise": ["More( says something(B),  says something(A)), so not More(talkative(A), talkative(B))", ["B says something more than A, so A is not more talkative than B"]], "negated_asymmetric_conclusion": ["More( says something(A),  says something(B)), so not More(talkative(B), talkative(A))", ["A says something more than B, so B is not more talkative than A"]]}
{"original": ["More( plays video games with another person's friends(A),  plays video games with another person's friends(B)), so More(friendly(A), friendly(B))", ["A plays video games with another person's friends more than B, so A is more friendly than B"]], "negated": ["More( plays video games with another person's friends(A),  plays video games with another person's friends(B)), so not Less(friendly(A), friendly(B))", ["A plays video games with another person's friends more than B, so A is not less friendly than B"]], "asymmetric_premise": ["More( plays video games with another person's friends(B),  plays video games with another person's friends(A)), so Less(friendly(A), friendly(B))", ["B plays video games with another person's friends more than A, so A is less friendly than B"]], "asymmetric_conclusion": ["More( plays video games with another person's friends(A),  plays video games with another person's friends(B)), so Less(friendly(B), friendly(A))", ["A plays video games with another person's friends more than B, so B is less friendly than A"]], "negated_asymmetric_premise": ["More( plays video games with another person's friends(B),  plays video games with another person's friends(A)), so not More(friendly(A), friendly(B))", ["B plays video games with another person's friends more than A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["More( plays video games with another person's friends(A),  plays video games with another person's friends(B)), so not More(friendly(B), friendly(A))", ["A plays video games with another person's friends more than B, so B is not more friendly than A"]]}
{"original": ["More( passes another person act(A),  passes another person act(B)), so More(commanding(A), commanding(B))", ["A passes another person act more than B, so A is more commanding than B"]], "negated": ["More( passes another person act(A),  passes another person act(B)), so not Less(commanding(A), commanding(B))", ["A passes another person act more than B, so A is not less commanding than B"]], "asymmetric_premise": ["More( passes another person act(B),  passes another person act(A)), so Less(commanding(A), commanding(B))", ["B passes another person act more than A, so A is less commanding than B"]], "asymmetric_conclusion": ["More( passes another person act(A),  passes another person act(B)), so Less(commanding(B), commanding(A))", ["A passes another person act more than B, so B is less commanding than A"]], "negated_asymmetric_premise": ["More( passes another person act(B),  passes another person act(A)), so not More(commanding(A), commanding(B))", ["B passes another person act more than A, so A is not more commanding than B"]], "negated_asymmetric_conclusion": ["More( passes another person act(A),  passes another person act(B)), so not More(commanding(B), commanding(A))", ["A passes another person act more than B, so B is not more commanding than A"]]}
{"original": ["More( is working all day(A),  is working all day(B)), so More(persistent(A), persistent(B))", ["A is working all day more than B, so A is more persistent than B"]], "negated": ["More( is working all day(A),  is working all day(B)), so not Less(persistent(A), persistent(B))", ["A is working all day more than B, so A is not less persistent than B"]], "asymmetric_premise": ["More( is working all day(B),  is working all day(A)), so Less(persistent(A), persistent(B))", ["B is working all day more than A, so A is less persistent than B"]], "asymmetric_conclusion": ["More( is working all day(A),  is working all day(B)), so Less(persistent(B), persistent(A))", ["A is working all day more than B, so B is less persistent than A"]], "negated_asymmetric_premise": ["More( is working all day(B),  is working all day(A)), so not More(persistent(A), persistent(B))", ["B is working all day more than A, so A is not more persistent than B"]], "negated_asymmetric_conclusion": ["More( is working all day(A),  is working all day(B)), so not More(persistent(B), persistent(A))", ["A is working all day more than B, so B is not more persistent than A"]]}
{"original": ["More( looks cute(A),  looks cute(B)), so More(attractive(A), attractive(B))", ["A looks cute more than B, so A is more attractive than B"]], "negated": ["More( looks cute(A),  looks cute(B)), so not Less(attractive(A), attractive(B))", ["A looks cute more than B, so A is not less attractive than B"]], "asymmetric_premise": ["More( looks cute(B),  looks cute(A)), so Less(attractive(A), attractive(B))", ["B looks cute while A does not, so A is less attractive than B"]], "asymmetric_conclusion": ["More( looks cute(A),  looks cute(B)), so Less(attractive(B), attractive(A))", ["A looks cute more than B, so B is less attractive than A"]], "negated_asymmetric_premise": ["More( looks cute(B),  looks cute(A)), so not More(attractive(A), attractive(B))", ["B looks cute while A does not, so A is not more attractive than B"]], "negated_asymmetric_conclusion": ["More( looks cute(A),  looks cute(B)), so not More(attractive(B), attractive(A))", ["A looks cute while B does not, so B is not more attractive than A"]]}
{"original": ["More( asks tom(A),  asks tom(B)), so More(uncertain(A), uncertain(B))", ["A asks tom questions more than B, so A is more uncertain than B"]], "negated": ["More( asks tom(A),  asks tom(B)), so not Less(uncertain(A), uncertain(B))", ["A asks tom questions more than B, so A is not less uncertain than B"]], "asymmetric_premise": ["More( asks tom(B),  asks tom(A)), so Less(uncertain(A), uncertain(B))", ["B asks tom more than A, so A is less uncertain than B"]], "asymmetric_conclusion": ["More( asks tom(A),  asks tom(B)), so Less(uncertain(B), uncertain(A))", ["A asks tom questions more than B, so B is less uncertain than A"]], "negated_asymmetric_premise": ["More( asks tom(B),  asks tom(A)), so not More(uncertain(A), uncertain(B))", ["B asks tom more than A, so A is not more uncertain than B"]], "negated_asymmetric_conclusion": ["More( asks tom(A),  asks tom(B)), so not More(uncertain(B), uncertain(A))", ["A asks tom questions more than B, so B is not more uncertain than A"]]}
{"original": ["More( comes back home(A),  comes back home(B)), so More(loyal(A), loyal(B))", ["A comes back home more than B, so A is more loyal than B"]], "negated": ["More( comes back home(A),  comes back home(B)), so not Less(loyal(A), loyal(B))", ["A comes back home more than B, so A is not less loyal than B"]], "asymmetric_premise": ["More( comes back home(B),  comes back home(A)), so Less(loyal(A), loyal(B))", ["B comes back home more than A, so A is less loyal than B"]], "asymmetric_conclusion": ["More( comes back home(A),  comes back home(B)), so Less(loyal(B), loyal(A))", ["A always comes back home more than B, so B is less loyal than A"]], "negated_asymmetric_premise": ["More( comes back home(B),  comes back home(A)), so not More(loyal(A), loyal(B))", ["B comes back home more than A, so A is not more loyal than B"]], "negated_asymmetric_conclusion": ["More( comes back home(A),  comes back home(B)), so not More(loyal(B), loyal(A))", ["A comes back home more than B, so B is not more loyal than A"]]}
{"original": ["More( joins another person for dinner(A),  joins another person for dinner(B)), so More(popular(A), popular(B))", ["A joins another person for dinner more than B, so A is more popular than B"]], "negated": ["More( joins another person for dinner(A),  joins another person for dinner(B)), so not Less(popular(A), popular(B))", ["A joins another person for dinner more than B, so A is not less popular than B"]], "asymmetric_premise": ["More( joins another person for dinner(B),  joins another person for dinner(A)), so Less(popular(A), popular(B))", ["B joins another person for dinner more than A, so A is less popular than B"]], "asymmetric_conclusion": ["More( joins another person for dinner(A),  joins another person for dinner(B)), so Less(popular(B), popular(A))", ["A joins another person for dinner more than B, so B is less popular than A"]], "negated_asymmetric_premise": ["More( joins another person for dinner(B),  joins another person for dinner(A)), so not More(popular(A), popular(B))", ["B joins another person for dinner more than A, so A is not more popular than B"]], "negated_asymmetric_conclusion": ["More( joins another person for dinner(A),  joins another person for dinner(B)), so not More(popular(B), popular(A))", ["A joins another person for dinner more than B, so B is not more popular than A"]]}
{"original": ["More( buys a new pair of pants(A),  buys a new pair of pants(B)), so More(excited(A), excited(B))", ["A buys a new pair of pants, so A is more excited than B"]], "negated": ["More( buys a new pair of pants(A),  buys a new pair of pants(B)), so not Less(excited(A), excited(B))", ["A buys a new pair of pants more than B, so A is not less excited than B"]], "asymmetric_premise": ["More( buys a new pair of pants(B),  buys a new pair of pants(A)), so Less(excited(A), excited(B))", ["B buys a new pair of pants more than A, so A is less excited than B"]], "asymmetric_conclusion": ["More( buys a new pair of pants(A),  buys a new pair of pants(B)), so Less(excited(B), excited(A))", ["A buys a new pair of pants, B does not, so B is less excited than A"]], "negated_asymmetric_premise": ["More( buys a new pair of pants(B),  buys a new pair of pants(A)), so not More(excited(A), excited(B))", ["B buys a new pair of pants, so A is not more excited than B"]], "negated_asymmetric_conclusion": ["More( buys a new pair of pants(A),  buys a new pair of pants(B)), so not More(excited(B), excited(A))", ["A buys a new pair of pants while B does not, so B is not more excited than A"]]}
{"original": ["More( perfects their craft(A),  perfects their craft(B)), so More(crafty(A), crafty(B))", ["A perfects their craft more than B, so A is more crafty than B"]], "negated": ["More( perfects their craft(A),  perfects their craft(B)), so not Less(crafty(A), crafty(B))", ["A perfects their craft more than B, so A is not less crafty than B"]], "asymmetric_premise": ["More( perfects their craft(B),  perfects their craft(A)), so Less(crafty(A), crafty(B))", ["B perfects their craft more than A, so A is less crafty than B"]], "asymmetric_conclusion": ["More( perfects their craft(A),  perfects their craft(B)), so Less(crafty(B), crafty(A))", ["A perfects their craft more than B, so B is less crafty than A"]], "negated_asymmetric_premise": ["More( perfects their craft(B),  perfects their craft(A)), so not More(crafty(A), crafty(B))", ["B perfects their craft more than A, so A is not more crafty than B"]], "negated_asymmetric_conclusion": ["More( perfects their craft(A),  perfects their craft(B)), so not More(crafty(B), crafty(A))", ["A perfects their craft more than B, so B is not more crafty than A"]]}
{"original": ["More( boards the plane(A),  boards the plane(B)), so More(nomadic(A), nomadic(B))", ["A boards the plane more than B, so A is more nomadic than B"]], "negated": ["More( boards the plane(A),  boards the plane(B)), so not Less(nomadic(A), nomadic(B))", ["A boards the plane more than B, so A is not less nomadic than B"]], "asymmetric_premise": ["More( boards the plane(B),  boards the plane(A)), so Less(nomadic(A), nomadic(B))", ["B boards the plane more than A, so A is less nomadic than B"]], "asymmetric_conclusion": ["More( boards the plane(A),  boards the plane(B)), so Less(nomadic(B), nomadic(A))", ["A boards the plane more than B, so B is less nomadic than A"]], "negated_asymmetric_premise": ["More( boards the plane(B),  boards the plane(A)), so not More(nomadic(A), nomadic(B))", ["B boards the plane more than A, so A is not more nomadic than B"]], "negated_asymmetric_conclusion": ["More( boards the plane(A),  boards the plane(B)), so not More(nomadic(B), nomadic(A))", ["A boards the plane more than B, so B is not more nomadic than A"]]}
{"original": ["More( scratches the ticket(A),  scratches the ticket(B)), so More(hopeful(A), hopeful(B))", ["A scratches the ticket more than B, so A is more hopeful than B"]], "negated": ["More( scratches the ticket(A),  scratches the ticket(B)), so not Less(hopeful(A), hopeful(B))", ["A scratches the ticket more than B, so A is not less hopeful than B"]], "asymmetric_premise": ["More( scratches the ticket(B),  scratches the ticket(A)), so Less(hopeful(A), hopeful(B))", ["B scratches the ticket more than A, so A is less hopeful than B"]], "asymmetric_conclusion": ["More( scratches the ticket(A),  scratches the ticket(B)), so Less(hopeful(B), hopeful(A))", ["A scratches the ticket more than B, so B is less hopeful than A"]], "negated_asymmetric_premise": ["More( scratches the ticket(B),  scratches the ticket(A)), so not More(hopeful(A), hopeful(B))", ["B scratches the ticket more than A, so A is not more hopeful than B"]], "negated_asymmetric_conclusion": ["More( scratches the ticket(A),  scratches the ticket(B)), so not More(hopeful(B), hopeful(A))", ["A scratches the ticket more than B, so B is not more hopeful than A"]]}
{"original": ["More( goes check(A),  goes check(B)), so More(a worrier(A), a worrier(B))", ["A goes check more than B, so A is more a worrier than B"]], "negated": ["More( goes check(A),  goes check(B)), so not Less(a worrier(A), a worrier(B))", ["A goes check more than B, so A is not less a worrier than B"]], "asymmetric_premise": ["More( goes check(B),  goes check(A)), so Less(a worrier(A), a worrier(B))", ["B goes check more than A, so A is less a worrier than B"]], "asymmetric_conclusion": ["More( goes check(A),  goes check(B)), so Less(a worrier(B), a worrier(A))", ["A goes check more than B, so B is less a worrier than A"]], "negated_asymmetric_premise": ["More( goes check(B),  goes check(A)), so not More(a worrier(A), a worrier(B))", ["B goes check more than A, so A is not more of a worrier than B"]], "negated_asymmetric_conclusion": ["More( goes check(A),  goes check(B)), so not More(a worrier(B), a worrier(A))", ["A goes check more than B, so B is not more of a worrier than A"]]}
{"original": ["More( loves flowers(A),  loves flowers(B)), so More(sweet(A), sweet(B))", ["A loves flowers more than B, so A is more sweet than B"]], "negated": ["More( loves flowers(A),  loves flowers(B)), so not Less(sweet(A), sweet(B))", ["A loves flowers more than B, so A is not less sweet than B"]], "asymmetric_premise": ["More( loves flowers(B),  loves flowers(A)), so Less(sweet(A), sweet(B))", ["B loves flowers more than A, so A is less sweet than B"]], "asymmetric_conclusion": ["More( loves flowers(A),  loves flowers(B)), so Less(sweet(B), sweet(A))", ["A loves flowers more than B, so B is less sweet than A"]], "negated_asymmetric_premise": ["More( loves flowers(B),  loves flowers(A)), so not More(sweet(A), sweet(B))", ["B loves flowers more than A, so A is not more sweet than B"]], "negated_asymmetric_conclusion": ["More( loves flowers(A),  loves flowers(B)), so not More(sweet(B), sweet(A))", ["A loves flowers more than B, so B is not more sweet than A"]]}
{"original": ["More( makes hamburgers(A),  makes hamburgers(B)), so More(determined(A), determined(B))", ["A makes hamburgers more than B, so A is more determined than B"]], "negated": ["More( makes hamburgers(A),  makes hamburgers(B)), so not Less(determined(A), determined(B))", ["A makes hamburgers more than B, so A is not less determined than B"]], "asymmetric_premise": ["More( makes hamburgers(B),  makes hamburgers(A)), so Less(determined(A), determined(B))", ["B makes hamburgers more than A, so A is less determined than B"]], "asymmetric_conclusion": ["More( makes hamburgers(A),  makes hamburgers(B)), so Less(determined(B), determined(A))", ["A makes hamburgers more than B, so B is less determined than A"]], "negated_asymmetric_premise": ["More( makes hamburgers(B),  makes hamburgers(A)), so not More(determined(A), determined(B))", ["B makes hamburgers more than A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["More( makes hamburgers(A),  makes hamburgers(B)), so not More(determined(B), determined(A))", ["A makes hamburgers more than B, so B is not more determined than A"]]}
{"original": ["More( gilds the lily(A),  gilds the lily(B)), so More(high maintenance(A), high maintenance(B))", ["A gilds the lily more than B, so A is more high maintenance than B"]], "negated": ["More( gilds the lily(A),  gilds the lily(B)), so not Less(high maintenance(A), high maintenance(B))", ["A gilds the lily more than B, so A is not less high maintenance than B"]], "asymmetric_premise": ["More( gilds the lily(B),  gilds the lily(A)), so Less(high maintenance(A), high maintenance(B))", ["B gilds the lily more than A, so A is less high maintenance than B"]], "asymmetric_conclusion": ["More( gilds the lily(A),  gilds the lily(B)), so Less(high maintenance(B), high maintenance(A))", ["A gilds the lily more than B, so B is less high maintenance than A"]], "negated_asymmetric_premise": ["More( gilds the lily(B),  gilds the lily(A)), so not More(high maintenance(A), high maintenance(B))", ["B gilds the lily more than A, so A is not more high maintenance than B"]], "negated_asymmetric_conclusion": ["More( gilds the lily(A),  gilds the lily(B)), so not More(high maintenance(B), high maintenance(A))", ["A gilds the lily more than B, so B is not more high maintenance than A"]]}
{"original": ["More( spends some quality time(A),  spends some quality time(B)), so More(friendly(A), friendly(B))", ["A spends some quality time with B, so A is more friendly than B"]], "negated": ["More( spends some quality time(A),  spends some quality time(B)), so not Less(friendly(A), friendly(B))", ["A spends some quality time with B, so A is not less friendly than B"]], "asymmetric_premise": ["More( spends some quality time(B),  spends some quality time(A)), so Less(friendly(A), friendly(B))", ["B spends some quality time with A, so A is less friendly than B"]], "asymmetric_conclusion": ["More( spends some quality time(A),  spends some quality time(B)), so Less(friendly(B), friendly(A))", ["A spends some quality time more than B, so B is less friendly than A"]], "negated_asymmetric_premise": ["More( spends some quality time(B),  spends some quality time(A)), so not More(friendly(A), friendly(B))", ["B spends some quality time with A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["More( spends some quality time(A),  spends some quality time(B)), so not More(friendly(B), friendly(A))", ["A spends some quality time more than B, so B is not more friendly than A"]]}
{"original": ["More( gives another person advantage(A),  gives another person advantage(B)), so More(generous(A), generous(B))", ["A gives another person advantage more than B, so A is more generous than B"]], "negated": ["More( gives another person advantage(A),  gives another person advantage(B)), so not Less(generous(A), generous(B))", ["A gives another person advantage more than B, so A is not less generous than B"]], "asymmetric_premise": ["More( gives another person advantage(B),  gives another person advantage(A)), so Less(generous(A), generous(B))", ["B gives another person advantage more than A, so A is less generous than B"]], "asymmetric_conclusion": ["More( gives another person advantage(A),  gives another person advantage(B)), so Less(generous(B), generous(A))", ["A gives another person advantage more than B, so B is less generous than A"]], "negated_asymmetric_premise": ["More( gives another person advantage(B),  gives another person advantage(A)), so not More(generous(A), generous(B))", ["B gives another person advantage more than A, so A is not more generous than B"]], "negated_asymmetric_conclusion": ["More( gives another person advantage(A),  gives another person advantage(B)), so not More(generous(B), generous(A))", ["A gives another person advantage more than B, so B is not more generous than A"]]}
{"original": ["More( earns their keep(A),  earns their keep(B)), so More(hardworking(A), hardworking(B))", ["A earns their keep more than B, so A is more hardworking than B"]], "negated": ["More( earns their keep(A),  earns their keep(B)), so not Less(hardworking(A), hardworking(B))", ["A earns their keep more than B, so A is not less hardworking than B"]], "asymmetric_premise": ["More( earns their keep(B),  earns their keep(A)), so Less(hardworking(A), hardworking(B))", ["B earns their keep more than A, so A is less hardworking than B"]], "asymmetric_conclusion": ["More( earns their keep(A),  earns their keep(B)), so Less(hardworking(B), hardworking(A))", ["A earns their keep more than B, so B is less hardworking than A"]], "negated_asymmetric_premise": ["More( earns their keep(B),  earns their keep(A)), so not More(hardworking(A), hardworking(B))", ["B earns their keep more than A, so A is not more hardworking than B"]], "negated_asymmetric_conclusion": ["More( earns their keep(A),  earns their keep(B)), so not More(hardworking(B), hardworking(A))", ["A earns their keep more than B, so B is not more hardworking than A"]]}
{"original": ["More( inherits as another person trait(A),  inherits as another person trait(B)), so More(affectionate(A), affectionate(B))", ["A inherits as another person trait more than B, so A is more affectionate than B"]], "negated": ["More( inherits as another person trait(A),  inherits as another person trait(B)), so not Less(affectionate(A), affectionate(B))", ["A inherits as another person trait more than B, so A is not less affectionate than B"]], "asymmetric_premise": ["More( inherits as another person trait(B),  inherits as another person trait(A)), so Less(affectionate(A), affectionate(B))", ["B inherits as another person trait more than A, so A is less affectionate than B"]], "asymmetric_conclusion": ["More( inherits as another person trait(A),  inherits as another person trait(B)), so Less(affectionate(B), affectionate(A))", ["A inherits as another person trait more than B, so B is less affectionate than A"]], "negated_asymmetric_premise": ["More( inherits as another person trait(B),  inherits as another person trait(A)), so not More(affectionate(A), affectionate(B))", ["B inherits as another person trait more than A, so A is not more affectionate than B"]], "negated_asymmetric_conclusion": ["More( inherits as another person trait(A),  inherits as another person trait(B)), so not More(affectionate(B), affectionate(A))", ["A inherits as another person trait more than B, so B is not more affectionate than A"]]}
{"original": ["More( works well in business(A),  works well in business(B)), so More(skilled(A), skilled(B))", ["A works well in business more than B, so A is more skilled than B"]], "negated": ["More( works well in business(A),  works well in business(B)), so not Less(skilled(A), skilled(B))", ["A works well in business more than B, so A is not less skilled than B"]], "asymmetric_premise": ["More( works well in business(B),  works well in business(A)), so Less(skilled(A), skilled(B))", ["B works well in business more than A, so A is less skilled than B"]], "asymmetric_conclusion": ["More( works well in business(A),  works well in business(B)), so Less(skilled(B), skilled(A))", ["A works well in business more than B, so B is less skilled than A"]], "negated_asymmetric_premise": ["More( works well in business(B),  works well in business(A)), so not More(skilled(A), skilled(B))", ["B works well in business more than A, so A is not more skilled than B"]], "negated_asymmetric_conclusion": ["More( works well in business(A),  works well in business(B)), so not More(skilled(B), skilled(A))", ["A works well in business more than B, so B is not more skilled than A"]]}
{"original": ["More( cuts their grass(A),  cuts their grass(B)), so More(friendly(A), friendly(B))", ["A cuts their grass more than B, so A is more friendly than B"]], "negated": ["More( cuts their grass(A),  cuts their grass(B)), so not Less(friendly(A), friendly(B))", ["A cuts their grass more than B, so A is not less friendly than B"]], "asymmetric_premise": ["More( cuts their grass(B),  cuts their grass(A)), so Less(friendly(A), friendly(B))", ["B cuts their grass more than A, so A is less friendly than B"]], "asymmetric_conclusion": ["More( cuts their grass(A),  cuts their grass(B)), so Less(friendly(B), friendly(A))", ["A cuts their grass more than B, so B is less friendly than A"]], "negated_asymmetric_premise": ["More( cuts their grass(B),  cuts their grass(A)), so not More(friendly(A), friendly(B))", ["B cuts their grass more than A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["More( cuts their grass(A),  cuts their grass(B)), so not More(friendly(B), friendly(A))", ["A cuts their grass more than B, so B is not more friendly than A"]]}
{"original": ["More( shovels another person's driveway(A),  shovels another person's driveway(B)), so More(kind(A), kind(B))", ["A shovels another person's driveway more than B, so A is more kind than B"]], "negated": ["More( shovels another person's driveway(A),  shovels another person's driveway(B)), so not Less(kind(A), kind(B))", ["A shovels another person's driveway more than B, so A is not less kind than B"]], "asymmetric_premise": ["More( shovels another person's driveway(B),  shovels another person's driveway(A)), so Less(kind(A), kind(B))", ["B shovels another person's driveway more than A, so A is less kind than B"]], "asymmetric_conclusion": ["More( shovels another person's driveway(A),  shovels another person's driveway(B)), so Less(kind(B), kind(A))", ["A shovels another person's driveway more than B, so B is less kind than A"]], "negated_asymmetric_premise": ["More( shovels another person's driveway(B),  shovels another person's driveway(A)), so not More(kind(A), kind(B))", ["B shovels another person's driveway more than A, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["More( shovels another person's driveway(A),  shovels another person's driveway(B)), so not More(kind(B), kind(A))", ["A shovels another person's driveway more than B, so B is not more kind than A"]]}
{"original": ["More( is much stronger(A),  is much stronger(B)), so More(athletic(A), athletic(B))", ["A is much stronger than B, so A is more athletic than B"]], "negated": ["More( is much stronger(A),  is much stronger(B)), so not Less(athletic(A), athletic(B))", ["A is much stronger than B, so A is not less athletic than B"]], "asymmetric_premise": ["More( is much stronger(B),  is much stronger(A)), so Less(athletic(A), athletic(B))", ["B is much stronger than A, so A is less athletic than B"]], "asymmetric_conclusion": ["More( is much stronger(A),  is much stronger(B)), so Less(athletic(B), athletic(A))", ["A is much stronger than B, so B is less athletic than A"]], "negated_asymmetric_premise": ["More( is much stronger(B),  is much stronger(A)), so not More(athletic(A), athletic(B))", ["B is much stronger than A, so A is not more athletic than B"]], "negated_asymmetric_conclusion": ["More( is much stronger(A),  is much stronger(B)), so not More(athletic(B), athletic(A))", ["A is much stronger than B, so B is not more athletic than A"]]}
{"original": ["More( eats leftovers(A),  eats leftovers(B)), so More(hungry(A), hungry(B))", ["A eats leftovers more than B, so A is more hungry than B"]], "negated": ["More( eats leftovers(A),  eats leftovers(B)), so not Less(hungry(A), hungry(B))", ["A eats leftovers more than B, so A is not less hungry than B"]], "asymmetric_premise": ["More( eats leftovers(B),  eats leftovers(A)), so Less(hungry(A), hungry(B))", ["B eats leftovers more than A, so A is less hungry than B"]], "asymmetric_conclusion": ["More( eats leftovers(A),  eats leftovers(B)), so Less(hungry(B), hungry(A))", ["A eats leftovers more than B, so B is less hungry than A"]], "negated_asymmetric_premise": ["More( eats leftovers(B),  eats leftovers(A)), so not More(hungry(A), hungry(B))", ["B eats leftovers more than A, so A is not more hungry than B"]], "negated_asymmetric_conclusion": ["More( eats leftovers(A),  eats leftovers(B)), so not More(hungry(B), hungry(A))", ["A eats leftovers more than B, so B is not more hungry than A"]]}
{"original": ["More( is low on money(A),  is low on money(B)), so More(poor(A), poor(B))", ["A is low on money, B is low on money, so A is more poor than B"]], "negated": ["More( is low on money(A),  is low on money(B)), so not Less(poor(A), poor(B))", ["A is low on money more than B, so A is not less poor than B"]], "asymmetric_premise": ["More( is low on money(B),  is low on money(A)), so Less(poor(A), poor(B))", ["B is low on money more than A, so A is less poor than B"]], "asymmetric_conclusion": ["More( is low on money(A),  is low on money(B)), so Less(poor(B), poor(A))", ["A is low on money more than B, so B is less poor than A"]], "negated_asymmetric_premise": ["More( is low on money(B),  is low on money(A)), so not More(poor(A), poor(B))", ["B is low on money more than A, so A is not more poor than B"]], "negated_asymmetric_conclusion": ["More( is low on money(A),  is low on money(B)), so not More(poor(B), poor(A))", ["A is low on money more than B, so B is not more poor than A"]]}
{"original": ["More( is better than nothing(A),  is better than nothing(B)), so More(okay(A), okay(B))", ["A is better than nothing than B, so A is more okay than B"]], "negated": ["More( is better than nothing(A),  is better than nothing(B)), so not Less(okay(A), okay(B))", ["A is better than nothing than B, so A is not less okay than B"]], "asymmetric_premise": ["More( is better than nothing(B),  is better than nothing(A)), so Less(okay(A), okay(B))", ["B is better than A, so A is less okay than B"]], "asymmetric_conclusion": ["More( is better than nothing(A),  is better than nothing(B)), so Less(okay(B), okay(A))", ["A is better than nothing than B, so B is less okay than A"]], "negated_asymmetric_premise": ["More( is better than nothing(B),  is better than nothing(A)), so not More(okay(A), okay(B))", ["B is better than A, so A is not more okay than B"]], "negated_asymmetric_conclusion": ["More( is better than nothing(A),  is better than nothing(B)), so not More(okay(B), okay(A))", ["A is better than nothing more than B, so B is not more okay than A"]]}
{"original": ["More( throws a wobbly(A),  throws a wobbly(B)), so More(talented(A), talented(B))", ["A throws a wobbly ball more than B, so A is more talented than B"]], "negated": ["More( throws a wobbly(A),  throws a wobbly(B)), so not Less(talented(A), talented(B))", ["A throws a wobbly ball more than B, so A is not less talented than B"]], "asymmetric_premise": ["More( throws a wobbly(B),  throws a wobbly(A)), so Less(talented(A), talented(B))", ["B throws a wobbly ball more than A, so A is less talented than B"]], "asymmetric_conclusion": ["More( throws a wobbly(A),  throws a wobbly(B)), so Less(talented(B), talented(A))", ["A throws a wobbly ball more than B, so B is less talented than A"]], "negated_asymmetric_premise": ["More( throws a wobbly(B),  throws a wobbly(A)), so not More(talented(A), talented(B))", ["B is not more talented than A, so A is not more talented than B"]], "negated_asymmetric_conclusion": ["More( throws a wobbly(A),  throws a wobbly(B)), so not More(talented(B), talented(A))", ["A throws a wobbly ball more than B, so B is not more talented than A"]]}
{"original": ["More( is going to the movies(A),  is going to the movies(B)), so More(eager(A), eager(B))", ["A is going to the movies more than B, so A is more eager than B"]], "negated": ["More( is going to the movies(A),  is going to the movies(B)), so not Less(eager(A), eager(B))", ["A is going to the movies more than B, so A is not less eager than B"]], "asymmetric_premise": ["More( is going to the movies(B),  is going to the movies(A)), so Less(eager(A), eager(B))", ["B is going to the movies more than A, so A is less eager than B"]], "asymmetric_conclusion": ["More( is going to the movies(A),  is going to the movies(B)), so Less(eager(B), eager(A))", ["A is going to the moviesMore is going to the movies than B, so B is less eager than A"]], "negated_asymmetric_premise": ["More( is going to the movies(B),  is going to the movies(A)), so not More(eager(A), eager(B))", ["B is going to the movies more than A, so A is not more eager than B"]], "negated_asymmetric_conclusion": ["More( is going to the movies(A),  is going to the movies(B)), so not More(eager(B), eager(A))", ["A is going to the movies more than B, so B is not more eager than A"]]}
{"original": ["More( lets it cool(A),  lets it cool(B)), so More(smart(A), smart(B))", ["A lets it cool more than B, so A is more smart than B"]], "negated": ["More( lets it cool(A),  lets it cool(B)), so not Less(smart(A), smart(B))", ["A lets it cool more than B, so A is not less smart than B"]], "asymmetric_premise": ["More( lets it cool(B),  lets it cool(A)), so Less(smart(A), smart(B))", ["B lets it cool more than A, so A is less smart than B"]], "asymmetric_conclusion": ["More( lets it cool(A),  lets it cool(B)), so Less(smart(B), smart(A))", ["A lets it cool more than B, so B is less smart than A"]], "negated_asymmetric_premise": ["More( lets it cool(B),  lets it cool(A)), so not More(smart(A), smart(B))", ["B lets it cool more than A, so A is not more smart than B"]], "negated_asymmetric_conclusion": ["More( lets it cool(A),  lets it cool(B)), so not More(smart(B), smart(A))", ["A lets it cool more than B, so B is not more smart than A"]]}
{"original": ["More( becomes frightened(A),  becomes frightened(B)), so More(afraid(A), afraid(B))", ["A becomes frightened more than B, so A is more afraid than B"]], "negated": ["More( becomes frightened(A),  becomes frightened(B)), so not Less(afraid(A), afraid(B))", ["A becomes frightened more than B, so A is not less afraid than B"]], "asymmetric_premise": ["More( becomes frightened(B),  becomes frightened(A)), so Less(afraid(A), afraid(B))", ["B becomes frightened more than A, so A is less afraid than B"]], "asymmetric_conclusion": ["More( becomes frightened(A),  becomes frightened(B)), so Less(afraid(B), afraid(A))", ["A becomes frightened more than B, so B is less afraid than A"]], "negated_asymmetric_premise": ["More( becomes frightened(B),  becomes frightened(A)), so not More(afraid(A), afraid(B))", ["B becomes frightened more than A, so A is not more afraid than B"]], "negated_asymmetric_conclusion": ["More( becomes frightened(A),  becomes frightened(B)), so not More(afraid(B), afraid(A))", ["A becomes frightened more than B, so B is not more afraid than A"]]}
{"original": ["More( gets very sick(A),  gets very sick(B)), so More(weak(A), weak(B))", ["A gets very sick more than B, so A is more weak than B"]], "negated": ["More( gets very sick(A),  gets very sick(B)), so not Less(weak(A), weak(B))", ["A gets very sick more than B, so A is not less weak than B"]], "asymmetric_premise": ["More( gets very sick(B),  gets very sick(A)), so Less(weak(A), weak(B))", ["B gets very sick more than A, so A is less weak than B"]], "asymmetric_conclusion": ["More( gets very sick(A),  gets very sick(B)), so Less(weak(B), weak(A))", ["A gets very sick more than B, so B is less weak than A"]], "negated_asymmetric_premise": ["More( gets very sick(B),  gets very sick(A)), so not More(weak(A), weak(B))", ["B gets very sick more than A, so A is not more weak than B"]], "negated_asymmetric_conclusion": ["More( gets very sick(A),  gets very sick(B)), so not More(weak(B), weak(A))", ["A gets very sick more than B, so B is not more weak than A"]]}
{"original": ["More( catches another person's breath(A),  catches another person's breath(B)), so More(hppy(A), hppy(B))", ["A catches another person's breath more than B, so A is more hppy than B"]], "negated": ["More( catches another person's breath(A),  catches another person's breath(B)), so not Less(hppy(A), hppy(B))", ["A catches another person's breath more than B, so A is not less hppy than B"]], "asymmetric_premise": ["More( catches another person's breath(B),  catches another person's breath(A)), so Less(hppy(A), hppy(B))", ["B catches another person's breath more than A, so A is less hppy than B"]], "asymmetric_conclusion": ["More( catches another person's breath(A),  catches another person's breath(B)), so Less(hppy(B), hppy(A))", ["A catches another person's breath more than B, so B is less hppy than A"]], "negated_asymmetric_premise": ["More( catches another person's breath(B),  catches another person's breath(A)), so not More(hppy(A), hppy(B))", ["B catches another person's breath more than A, so A is not more hppy than B"]], "negated_asymmetric_conclusion": ["More( catches another person's breath(A),  catches another person's breath(B)), so not More(hppy(B), hppy(A))", ["A catches another person's breath more than B, so B is not more hppy than A"]]}
{"original": ["More( goes to the beach with their family(A),  goes to the beach with their family(B)), so More(loving(A), loving(B))", ["A goes to the beach with their family more than B, so A is more loving than B"]], "negated": ["More( goes to the beach with their family(A),  goes to the beach with their family(B)), so not Less(loving(A), loving(B))", ["A goes to the beach with their family more than B, so A is not less loving than B"]], "asymmetric_premise": ["More( goes to the beach with their family(B),  goes to the beach with their family(A)), so Less(loving(A), loving(B))", ["B goes to the beach with their family more than A, so A is less loving than B"]], "asymmetric_conclusion": ["More( goes to the beach with their family(A),  goes to the beach with their family(B)), so Less(loving(B), loving(A))", ["A goes to the beach with their family more than B, so B is less loving than A"]], "negated_asymmetric_premise": ["More( goes to the beach with their family(B),  goes to the beach with their family(A)), so not More(loving(A), loving(B))", ["B goes to the beach with their family more than A, so A is not more loving than B"]], "negated_asymmetric_conclusion": ["More( goes to the beach with their family(A),  goes to the beach with their family(B)), so not More(loving(B), loving(A))", ["A goes to the beach with their family more than B, so B is not more loving than A"]]}
{"original": ["More( spends the day(A),  spends the day(B)), so More(adventurous(A), adventurous(B))", ["A spends the day more than B, so A is more adventurous than B"]], "negated": ["More( spends the day(A),  spends the day(B)), so not Less(adventurous(A), adventurous(B))", ["A spends the day more than B, so A is not less adventurous than B"]], "asymmetric_premise": ["More( spends the day(B),  spends the day(A)), so Less(adventurous(A), adventurous(B))", ["B spends the day more than A, so A is less adventurous than B"]], "asymmetric_conclusion": ["More( spends the day(A),  spends the day(B)), so Less(adventurous(B), adventurous(A))", ["A spends the day more than B, so B is less adventurous than A"]], "negated_asymmetric_premise": ["More( spends the day(B),  spends the day(A)), so not More(adventurous(A), adventurous(B))", ["B spends the day more than A, so A is not more adventurous than B"]], "negated_asymmetric_conclusion": ["More( spends the day(A),  spends the day(B)), so not More(adventurous(B), adventurous(A))", ["A spends the day more than B, so B is not more adventurous than A"]]}
{"original": ["More( finally tried(A),  finally tried(B)), so More(inexperienced(A), inexperienced(B))", ["A has finally tried harder than B, so A is more inexperienced than B"]], "negated": ["More( finally tried(A),  finally tried(B)), so not Less(inexperienced(A), inexperienced(B))", ["A has finally tried more than B, so A is not less inexperienced than B"]], "asymmetric_premise": ["More( finally tried(B),  finally tried(A)), so Less(inexperienced(A), inexperienced(B))", ["B has finally tried more than A, so A is less inexperienced than B"]], "asymmetric_conclusion": ["More( finally tried(A),  finally tried(B)), so Less(inexperienced(B), inexperienced(A))", ["A has finally tried more than B, so B is less inexperienced than A"]], "negated_asymmetric_premise": ["More( finally tried(B),  finally tried(A)), so not More(inexperienced(A), inexperienced(B))", ["B has finally tried more than A, so A is not more inexperienced than B"]], "negated_asymmetric_conclusion": ["More( finally tried(A),  finally tried(B)), so not More(inexperienced(B), inexperienced(A))", ["A has finally tried more than B, so B is not more inexperienced than A"]]}
{"original": ["More( wants their parents(A),  wants their parents(B)), so More(needy(A), needy(B))", ["A wants their parents more than B, so A is more needy than B"]], "negated": ["More( wants their parents(A),  wants their parents(B)), so not Less(needy(A), needy(B))", ["A wants their parents more than B, so A is not less needy than B"]], "asymmetric_premise": ["More( wants their parents(B),  wants their parents(A)), so Less(needy(A), needy(B))", ["B wants their parents more than A, so A is less needy than B"]], "asymmetric_conclusion": ["More( wants their parents(A),  wants their parents(B)), so Less(needy(B), needy(A))", ["A wants their parents more than B, so B is less needy than A"]], "negated_asymmetric_premise": ["More( wants their parents(B),  wants their parents(A)), so not More(needy(A), needy(B))", ["B wants their parents more than A, so A is not more needy than B"]], "negated_asymmetric_conclusion": ["More( wants their parents(A),  wants their parents(B)), so not More(needy(B), needy(A))", ["A wants their parents more than B, so B is not more needy than A"]]}
{"original": ["More( wants another person to stay(A),  wants another person to stay(B)), so More(sociable(A), sociable(B))", ["A wants another person to stay more than B, so A is more sociable than B"]], "negated": ["More( wants another person to stay(A),  wants another person to stay(B)), so not Less(sociable(A), sociable(B))", ["A wants another person to stay more than B, so A is not less sociable than B"]], "asymmetric_premise": ["More( wants another person to stay(B),  wants another person to stay(A)), so Less(sociable(A), sociable(B))", ["B wants another person to stay more than A, so A is less sociable than B"]], "asymmetric_conclusion": ["More( wants another person to stay(A),  wants another person to stay(B)), so Less(sociable(B), sociable(A))", ["A wants another person to stay more than B, so B is less sociable than A"]], "negated_asymmetric_premise": ["More( wants another person to stay(B),  wants another person to stay(A)), so not More(sociable(A), sociable(B))", ["B wants another person to stay more than A, so A is not more sociable than B"]], "negated_asymmetric_conclusion": ["More( wants another person to stay(A),  wants another person to stay(B)), so not More(sociable(B), sociable(A))", ["A wants another person to stay more than B, so B is not more sociable than A"]]}
{"original": ["More( is sent home(A),  is sent home(B)), so More(unwanted(A), unwanted(B))", ["A is sent home more than B, so A is more unwanted than B"]], "negated": ["More( is sent home(A),  is sent home(B)), so not Less(unwanted(A), unwanted(B))", ["A is sent home more than B, so A is not less unwanted than B"]], "asymmetric_premise": ["More( is sent home(B),  is sent home(A)), so Less(unwanted(A), unwanted(B))", ["B is sent home more than A, so A is less unwanted than B"]], "asymmetric_conclusion": ["More( is sent home(A),  is sent home(B)), so Less(unwanted(B), unwanted(A))", ["A is sent home more than B, so B is less unwanted than A"]], "negated_asymmetric_premise": ["More( is sent home(B),  is sent home(A)), so not More(unwanted(A), unwanted(B))", ["B is sent home more than A, so A is not more unwanted than B"]], "negated_asymmetric_conclusion": ["More( is sent home(A),  is sent home(B)), so not More(unwanted(B), unwanted(A))", ["A is sent home more than B, so B is not more unwanted than A"]]}
{"original": ["More( gets their skates on(A),  gets their skates on(B)), so More(ready(A), ready(B))", ["A gets their skates on more than B, so A is more ready than B"]], "negated": ["More( gets their skates on(A),  gets their skates on(B)), so not Less(ready(A), ready(B))", ["A gets their skates on more than B, so A is not less ready than B"]], "asymmetric_premise": ["More( gets their skates on(B),  gets their skates on(A)), so Less(ready(A), ready(B))", ["B gets their skates on while A does not, so A is less ready than B"]], "asymmetric_conclusion": ["More( gets their skates on(A),  gets their skates on(B)), so Less(ready(B), ready(A))", ["A gets their skates on more than B, so B is less ready than A"]], "negated_asymmetric_premise": ["More( gets their skates on(B),  gets their skates on(A)), so not More(ready(A), ready(B))", ["B gets their skates on more than A, so A is not more ready than B"]], "negated_asymmetric_conclusion": ["More( gets their skates on(A),  gets their skates on(B)), so not More(ready(B), ready(A))", ["A gets their skates on while B does not, so B is not more ready than A"]]}
{"original": ["More( plans their next trip(A),  plans their next trip(B)), so More(thoughtful(A), thoughtful(B))", ["A plans their next trip more than B, so A is more thoughtful than B"]], "negated": ["More( plans their next trip(A),  plans their next trip(B)), so not Less(thoughtful(A), thoughtful(B))", ["A plans their next trip more than B, so A is not less thoughtful than B"]], "asymmetric_premise": ["More( plans their next trip(B),  plans their next trip(A)), so Less(thoughtful(A), thoughtful(B))", ["B plans their next trip more than A, so A is less thoughtful than B"]], "asymmetric_conclusion": ["More( plans their next trip(A),  plans their next trip(B)), so Less(thoughtful(B), thoughtful(A))", ["A plans their next trip more than B, so B is less thoughtful than A"]], "negated_asymmetric_premise": ["More( plans their next trip(B),  plans their next trip(A)), so not More(thoughtful(A), thoughtful(B))", ["B plans their next trip more than A, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": ["More( plans their next trip(A),  plans their next trip(B)), so not More(thoughtful(B), thoughtful(A))", ["A plans their next trip more than B, so B is not more thoughtful than A"]]}
{"original": ["More( eats at a fancy restaurant(A),  eats at a fancy restaurant(B)), so More(happy(A), happy(B))", ["A eats at a fancy restaurant more than B, so A is more happy than B"]], "negated": ["More( eats at a fancy restaurant(A),  eats at a fancy restaurant(B)), so not Less(happy(A), happy(B))", ["A eats at a fancy restaurant more than B, so A is not less happy than B"]], "asymmetric_premise": ["More( eats at a fancy restaurant(B),  eats at a fancy restaurant(A)), so Less(happy(A), happy(B))", ["B eats at a fancy restaurant more than A, so A is less happy than B"]], "asymmetric_conclusion": ["More( eats at a fancy restaurant(A),  eats at a fancy restaurant(B)), so Less(happy(B), happy(A))", ["A eats at a fancy restaurant more than B, so B is less happy than A"]], "negated_asymmetric_premise": ["More( eats at a fancy restaurant(B),  eats at a fancy restaurant(A)), so not More(happy(A), happy(B))", ["B eats at a fancy restaurant more than A, so A is not more happy than B"]], "negated_asymmetric_conclusion": ["More( eats at a fancy restaurant(A),  eats at a fancy restaurant(B)), so not More(happy(B), happy(A))", ["A eats at a fancy restaurant more than B, so B is not more happy than A"]]}
{"original": ["More( loves music(A),  loves music(B)), so More(creative(A), creative(B))", ["A loves music more than B, so A is more creative than B"]], "negated": ["More( loves music(A),  loves music(B)), so not Less(creative(A), creative(B))", ["A loves music more than B, so A is not less creative than B"]], "asymmetric_premise": ["More( loves music(B),  loves music(A)), so Less(creative(A), creative(B))", ["B loves music more than A, so A is less creative than B"]], "asymmetric_conclusion": ["More( loves music(A),  loves music(B)), so Less(creative(B), creative(A))", ["A loves music more than B, so B is less creative than A"]], "negated_asymmetric_premise": ["More( loves music(B),  loves music(A)), so not More(creative(A), creative(B))", ["B loves music more than A, so A is not more creative than B"]], "negated_asymmetric_conclusion": ["More( loves music(A),  loves music(B)), so not More(creative(B), creative(A))", ["A loves music more than B, so B is not more creative than A"]]}
{"original": ["More( notices a man(A),  notices a man(B)), so More(aware(A), aware(B))", ["A notices a man more than B, so A is more aware than B"]], "negated": ["More( notices a man(A),  notices a man(B)), so not Less(aware(A), aware(B))", ["A notices a man more than B, so A is not less aware than B"]], "asymmetric_premise": ["More( notices a man(B),  notices a man(A)), so Less(aware(A), aware(B))", ["B notices a man more than A, so A is less aware than B"]], "asymmetric_conclusion": ["More( notices a man(A),  notices a man(B)), so Less(aware(B), aware(A))", ["A notices a man more than B, so B is less aware than A"]], "negated_asymmetric_premise": ["More( notices a man(B),  notices a man(A)), so not More(aware(A), aware(B))", ["B notices a man more than A, so A is not more aware than B"]], "negated_asymmetric_conclusion": ["More( notices a man(A),  notices a man(B)), so not More(aware(B), aware(A))", ["A notices a man more than B, so B is not more aware than A"]]}
{"original": ["More( is too drunk to drive(A),  is too drunk to drive(B)), so More(stupid(A), stupid(B))", ["A is too drunk to drive more than B, so A is more stupid than B"]], "negated": ["More( is too drunk to drive(A),  is too drunk to drive(B)), so not Less(stupid(A), stupid(B))", ["A is too drunk to drive while B is not, so A is not less stupid than B"]], "asymmetric_premise": ["More( is too drunk to drive(B),  is too drunk to drive(A)), so Less(stupid(A), stupid(B))", ["B is too drunk to drive more than A, so A is less stupid than B"]], "asymmetric_conclusion": ["More( is too drunk to drive(A),  is too drunk to drive(B)), so Less(stupid(B), stupid(A))", ["A is too drunk to drive more than B, so B is less stupid than A"]], "negated_asymmetric_premise": ["More( is too drunk to drive(B),  is too drunk to drive(A)), so not More(stupid(A), stupid(B))", ["B is too drunk to drive to drive, so A is not more stupid than B"]], "negated_asymmetric_conclusion": ["More( is too drunk to drive(A),  is too drunk to drive(B)), so not More(stupid(B), stupid(A))", ["A is too drunk to drive while B is not, so B is not more stupid than A"]]}
{"original": ["More( fights another person's way(A),  fights another person's way(B)), so More(unfriendly(A), unfriendly(B))", ["A fights another person's way more than B, so A is more unfriendly than B"]], "negated": ["More( fights another person's way(A),  fights another person's way(B)), so not Less(unfriendly(A), unfriendly(B))", ["A fights another person's way more than B, so A is not less unfriendly than B"]], "asymmetric_premise": ["More( fights another person's way(B),  fights another person's way(A)), so Less(unfriendly(A), unfriendly(B))", ["B fights another person's way more than A, so A is less unfriendly than B"]], "asymmetric_conclusion": ["More( fights another person's way(A),  fights another person's way(B)), so Less(unfriendly(B), unfriendly(A))", ["A fights another person's way more than B, so B is less unfriendly than A"]], "negated_asymmetric_premise": ["More( fights another person's way(B),  fights another person's way(A)), so not More(unfriendly(A), unfriendly(B))", ["B fights another person's way more than A, so A is not more unfriendly than B"]], "negated_asymmetric_conclusion": ["More( fights another person's way(A),  fights another person's way(B)), so not More(unfriendly(B), unfriendly(A))", ["A fights another person's way more than B, so B is not more unfriendly than A"]]}
{"original": ["More( makes it extra special(A),  makes it extra special(B)), so More(dramatic(A), dramatic(B))", ["A makes it extra special than B, so A is more dramatic than B"]], "negated": ["More( makes it extra special(A),  makes it extra special(B)), so not Less(dramatic(A), dramatic(B))", ["A makes it extra special than B, so A is not less dramatic than B"]], "asymmetric_premise": ["More( makes it extra special(B),  makes it extra special(A)), so Less(dramatic(A), dramatic(B))", ["B makes it extra special than A, so A is less dramatic than B"]], "asymmetric_conclusion": ["More( makes it extra special(A),  makes it extra special(B)), so Less(dramatic(B), dramatic(A))", ["A makes it extra special than B, so B is less dramatic than A"]], "negated_asymmetric_premise": ["More( makes it extra special(B),  makes it extra special(A)), so not More(dramatic(A), dramatic(B))", ["B makes it extra special than A, so A is not more dramatic than B"]], "negated_asymmetric_conclusion": ["More( makes it extra special(A),  makes it extra special(B)), so not More(dramatic(B), dramatic(A))", ["A makes it extra special than B, so B is not more dramatic than A"]]}
{"original": ["More( learns fast(A),  learns fast(B)), so More(smart(A), smart(B))", ["A learns fast more than B, so A is more smart than B"]], "negated": ["More( learns fast(A),  learns fast(B)), so not Less(smart(A), smart(B))", ["A learns fast more than B, so A is not less smart than B"]], "asymmetric_premise": ["More( learns fast(B),  learns fast(A)), so Less(smart(A), smart(B))", ["B learns fast more than A, so A is less smart than B"]], "asymmetric_conclusion": ["More( learns fast(A),  learns fast(B)), so Less(smart(B), smart(A))", ["A learns fast more than B, so B is less smart than A"]], "negated_asymmetric_premise": ["More( learns fast(B),  learns fast(A)), so not More(smart(A), smart(B))", ["B learns fast more than A, so A is not more smart than B"]], "negated_asymmetric_conclusion": ["More( learns fast(A),  learns fast(B)), so not More(smart(B), smart(A))", ["A learns fast more than B, so B is not more smart than A"]]}
{"original": ["More( tells another person had done(A),  tells another person had done(B)), so More(honest(A), honest(B))", ["A tells another person had done more than B, so A is more honest than B"]], "negated": ["More( tells another person had done(A),  tells another person had done(B)), so not Less(honest(A), honest(B))", ["A tells another person had done more than B, so A is not less honest than B"]], "asymmetric_premise": ["More( tells another person had done(B),  tells another person had done(A)), so Less(honest(A), honest(B))", ["B tells another person had done more than A, so A is less honest than B"]], "asymmetric_conclusion": ["More( tells another person had done(A),  tells another person had done(B)), so Less(honest(B), honest(A))", ["A tells another person had done more than B, so B is less honest than A"]], "negated_asymmetric_premise": ["More( tells another person had done(B),  tells another person had done(A)), so not More(honest(A), honest(B))", ["B tells another person had done more than A, so A is not more honest than B"]], "negated_asymmetric_conclusion": ["More( tells another person had done(A),  tells another person had done(B)), so not More(honest(B), honest(A))", ["A tells another person had done more than B, so B is not more honest than A"]]}
{"original": ["More( persuades another person to come(A),  persuades another person to come(B)), so More(influential(A), influential(B))", ["A persuades another person to come more than B, so A is more influential than B"]], "negated": ["More( persuades another person to come(A),  persuades another person to come(B)), so not Less(influential(A), influential(B))", ["A persuades another person to come more than B, so A is not less influential than B"]], "asymmetric_premise": ["More( persuades another person to come(B),  persuades another person to come(A)), so Less(influential(A), influential(B))", ["B persuades another person to come more than A, so A is less influential than B"]], "asymmetric_conclusion": ["More( persuades another person to come(A),  persuades another person to come(B)), so Less(influential(B), influential(A))", ["A persuades another person to come more than B, so B is less influential than A"]], "negated_asymmetric_premise": ["More( persuades another person to come(B),  persuades another person to come(A)), so not More(influential(A), influential(B))", ["B persuades another person to come more than A, so A is not more influential than B"]], "negated_asymmetric_conclusion": ["More( persuades another person to come(A),  persuades another person to come(B)), so not More(influential(B), influential(A))", ["A persuades another person to come more than B, so B is not more influential than A"]]}
{"original": ["More( goes horseback riding(A),  goes horseback riding(B)), so More(athletic(A), athletic(B))", ["A goes horseback riding more than B, so A is more athletic than B"]], "negated": ["More( goes horseback riding(A),  goes horseback riding(B)), so not Less(athletic(A), athletic(B))", ["A goes horseback riding more than B, so A is not less athletic than B"]], "asymmetric_premise": ["More( goes horseback riding(B),  goes horseback riding(A)), so Less(athletic(A), athletic(B))", ["B goes horseback riding more than A, so A is less athletic than B"]], "asymmetric_conclusion": ["More( goes horseback riding(A),  goes horseback riding(B)), so Less(athletic(B), athletic(A))", ["A goes horseback riding more than B, so B is less athletic than A"]], "negated_asymmetric_premise": ["More( goes horseback riding(B),  goes horseback riding(A)), so not More(athletic(A), athletic(B))", ["B goes horseback riding more than A, so A is not more athletic than B"]], "negated_asymmetric_conclusion": ["More( goes horseback riding(A),  goes horseback riding(B)), so not More(athletic(B), athletic(A))", ["A goes horseback riding more than B, so B is not more athletic than A"]]}
{"original": ["More( sets a trap(A),  sets a trap(B)), so More(aggressive(A), aggressive(B))", ["A sets a trap more than B, so A is more aggressive than B"]], "negated": ["More( sets a trap(A),  sets a trap(B)), so not Less(aggressive(A), aggressive(B))", ["A sets a trap more than B, so A is not less aggressive than B"]], "asymmetric_premise": ["More( sets a trap(B),  sets a trap(A)), so Less(aggressive(A), aggressive(B))", ["B sets a trap more than A, so A is less aggressive than B"]], "asymmetric_conclusion": ["More( sets a trap(A),  sets a trap(B)), so Less(aggressive(B), aggressive(A))", ["A sets a trap more than B, so B is less aggressive than A"]], "negated_asymmetric_premise": ["More( sets a trap(B),  sets a trap(A)), so not More(aggressive(A), aggressive(B))", ["B sets a trap more than A, so A is not more aggressive than B"]], "negated_asymmetric_conclusion": ["More( sets a trap(A),  sets a trap(B)), so not More(aggressive(B), aggressive(A))", ["A sets a trap more than B, so B is not more aggressive than A"]]}
{"original": ["More( dont like another person(A),  dont like another person(B)), so More(leery(A), leery(B))", ["A does not like another person more than B, so A is more leery than B"]], "negated": ["More( dont like another person(A),  dont like another person(B)), so not Less(leery(A), leery(B))", ["A is more leery than B, so A is not less leery than B"]], "asymmetric_premise": ["More( dont like another person(B),  dont like another person(A)), so Less(leery(A), leery(B))", ["B does not like another person more than A, so A is less leery than B"]], "asymmetric_conclusion": ["More( dont like another person(A),  dont like another person(B)), so Less(leery(B), leery(A))", ["A does not like another person more than B, so B is less leery than A"]], "negated_asymmetric_premise": ["More( dont like another person(B),  dont like another person(A)), so not More(leery(A), leery(B))", ["B does not like another person more than A, so A is not more leery than B"]], "negated_asymmetric_conclusion": ["More( dont like another person(A),  dont like another person(B)), so not More(leery(B), leery(A))", ["A is not more leery than B, so B is not more leery than A"]]}
{"original": ["More( quickly left(A),  quickly left(B)), so More(worried(A), worried(B))", ["A more quickly left than B, so A is more worried than B"]], "negated": ["More( quickly left(A),  quickly left(B)), so not Less(worried(A), worried(B))", ["A more quickly left than B, so A is not less worried than B"]], "asymmetric_premise": ["More( quickly left(B),  quickly left(A)), so Less(worried(A), worried(B))", ["B more quickly left than A, so A is less worried than B"]], "asymmetric_conclusion": ["More( quickly left(A),  quickly left(B)), so Less(worried(B), worried(A))", ["A has more quickly left than B, so B is less worried than A"]], "negated_asymmetric_premise": ["More( quickly left(B),  quickly left(A)), so not More(worried(A), worried(B))", ["B quickly left, so A is not more worried than B"]], "negated_asymmetric_conclusion": ["More( quickly left(A),  quickly left(B)), so not More(worried(B), worried(A))", ["A quickly left, so B is not more worried than A"]]}
{"original": ["More( moves their furniture(A),  moves their furniture(B)), so More(responsible(A), responsible(B))", ["A moves their furniture more than B, so A is more responsible than B"]], "negated": ["More( moves their furniture(A),  moves their furniture(B)), so not Less(responsible(A), responsible(B))", ["A moves their furniture more than B, so A is not less responsible than B"]], "asymmetric_premise": ["More( moves their furniture(B),  moves their furniture(A)), so Less(responsible(A), responsible(B))", ["B moves their furniture more than A, so A is less responsible than B"]], "asymmetric_conclusion": ["More( moves their furniture(A),  moves their furniture(B)), so Less(responsible(B), responsible(A))", ["A moves their furniture more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["More( moves their furniture(B),  moves their furniture(A)), so not More(responsible(A), responsible(B))", ["B moves their furniture more than A, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["More( moves their furniture(A),  moves their furniture(B)), so not More(responsible(B), responsible(A))", ["A moves their furniture more than B, so B is not more responsible than A"]]}
{"original": ["More( drives to their house(A),  drives to their house(B)), so More(purposeful(A), purposeful(B))", ["A drives to their house more than B, so A is more purposeful than B"]], "negated": ["More( drives to their house(A),  drives to their house(B)), so not Less(purposeful(A), purposeful(B))", ["A drives to their house more than B, so A is not less purposeful than B"]], "asymmetric_premise": ["More( drives to their house(B),  drives to their house(A)), so Less(purposeful(A), purposeful(B))", ["B drives to their house more than A, so A is less purposeful than B"]], "asymmetric_conclusion": ["More( drives to their house(A),  drives to their house(B)), so Less(purposeful(B), purposeful(A))", ["A drives to their house more than B, so B is less purposeful than A"]], "negated_asymmetric_premise": ["More( drives to their house(B),  drives to their house(A)), so not More(purposeful(A), purposeful(B))", ["B drives to their house more than A, so A is not more purposeful than B"]], "negated_asymmetric_conclusion": ["More( drives to their house(A),  drives to their house(B)), so not More(purposeful(B), purposeful(A))", ["A drives to their house more than B, so B is not more purposeful than A"]]}
{"original": ["More( wants anyone to know(A),  wants anyone to know(B)), so More(vain(A), vain(B))", ["A wants to know more than B, so A is more vain than B"]], "negated": ["More( wants anyone to know(A),  wants anyone to know(B)), so not Less(vain(A), vain(B))", ["A wants to know more than B, so A is not less vain than B"]], "asymmetric_premise": ["More( wants anyone to know(B),  wants anyone to know(A)), so Less(vain(A), vain(B))", ["B wants to know more than A, so A is less vain than B"]], "asymmetric_conclusion": ["More( wants anyone to know(A),  wants anyone to know(B)), so Less(vain(B), vain(A))", ["A wants to know more than B, so B is less vain than A"]], "negated_asymmetric_premise": ["More( wants anyone to know(B),  wants anyone to know(A)), so not More(vain(A), vain(B))", ["B wants to know more than A, so A is not more vain than B"]], "negated_asymmetric_conclusion": ["More( wants anyone to know(A),  wants anyone to know(B)), so not More(vain(B), vain(A))", ["A wants to know more than B, so B is not more vain than A"]]}
{"original": ["More( gets married in another person(A),  gets married in another person(B)), so More(beautifully(A), beautifully(B))", ["A gets married in another person more than B, so A is more beautiful than B"]], "negated": ["More( gets married in another person(A),  gets married in another person(B)), so not Less(beautifully(A), beautifully(B))", ["A gets married in another person more than B, so A is not less beautiful than B"]], "asymmetric_premise": ["More( gets married in another person(B),  gets married in another person(A)), so Less(beautifully(A), beautifully(B))", ["B gets married in another person more than A, so A is less beautiful than B"]], "asymmetric_conclusion": ["More( gets married in another person(A),  gets married in another person(B)), so Less(beautifully(B), beautifully(A))", ["A gets married in another person more than B, so B is less beautiful than A"]], "negated_asymmetric_premise": ["More( gets married in another person(B),  gets married in another person(A)), so not More(beautifully(A), beautifully(B))", ["B gets married in another person more than A, so A is not more beautiful than B"]], "negated_asymmetric_conclusion": ["More( gets married in another person(A),  gets married in another person(B)), so not More(beautifully(B), beautifully(A))", ["A gets married in another person more than B, so B is not more beautiful than A"]]}
{"original": ["More( knows their business(A),  knows their business(B)), so More(nosey(A), nosey(B))", ["A knows their business more than B, so A is more nosey than B"]], "negated": ["More( knows their business(A),  knows their business(B)), so not Less(nosey(A), nosey(B))", ["A knows their business more than B, so A is not less nosey than B"]], "asymmetric_premise": ["More( knows their business(B),  knows their business(A)), so Less(nosey(A), nosey(B))", ["B knows their business more than A, so A is less nosey than B"]], "asymmetric_conclusion": ["More( knows their business(A),  knows their business(B)), so Less(nosey(B), nosey(A))", ["A knows their business more than B, so B is less nosey than A"]], "negated_asymmetric_premise": ["More( knows their business(B),  knows their business(A)), so not More(nosey(A), nosey(B))", ["B knows their business more than A, so A is not more nosey than B"]], "negated_asymmetric_conclusion": ["More( knows their business(A),  knows their business(B)), so not More(nosey(B), nosey(A))", ["A knows their business more than B, so B is not more nosey than A"]]}
{"original": ["More( develops another person model(A),  develops another person model(B)), so More(responsible(A), responsible(B))", ["A develops another person model more than B, so A is more responsible than B"]], "negated": ["More( develops another person model(A),  develops another person model(B)), so not Less(responsible(A), responsible(B))", ["A develops another person model more than B, so A is not less responsible than B"]], "asymmetric_premise": ["More( develops another person model(B),  develops another person model(A)), so Less(responsible(A), responsible(B))", ["B develops another person model more than A, so A is less responsible than B"]], "asymmetric_conclusion": ["More( develops another person model(A),  develops another person model(B)), so Less(responsible(B), responsible(A))", ["A develops another person model more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["More( develops another person model(B),  develops another person model(A)), so not More(responsible(A), responsible(B))", ["B develops another person model more than A, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["More( develops another person model(A),  develops another person model(B)), so not More(responsible(B), responsible(A))", ["A develops another person model more than B, so B is not more responsible than A"]]}
{"original": ["More( finds someone else(A),  finds someone else(B)), so More(outgoing(A), outgoing(B))", ["A finds someone else more than B, so A is more outgoing than B"]], "negated": ["More( finds someone else(A),  finds someone else(B)), so not Less(outgoing(A), outgoing(B))", ["A finds someone else more than B, so A is not less outgoing than B"]], "asymmetric_premise": ["More( finds someone else(B),  finds someone else(A)), so Less(outgoing(A), outgoing(B))", ["B finds someone else more than A, so A is less outgoing than B"]], "asymmetric_conclusion": ["More( finds someone else(A),  finds someone else(B)), so Less(outgoing(B), outgoing(A))", ["A finds someone else more than B, so B is less outgoing than A"]], "negated_asymmetric_premise": ["More( finds someone else(B),  finds someone else(A)), so not More(outgoing(A), outgoing(B))", ["B finds someone else more than A, so A is not more outgoing than B"]], "negated_asymmetric_conclusion": ["More( finds someone else(A),  finds someone else(B)), so not More(outgoing(B), outgoing(A))", ["A finds someone else more than B, so B is not more outgoing than A"]]}
{"original": ["More( prevents another person attempt(A),  prevents another person attempt(B)), so More(wise(A), wise(B))", ["A prevents another person attempt more than B, so A is more wise than B"]], "negated": ["More( prevents another person attempt(A),  prevents another person attempt(B)), so not Less(wise(A), wise(B))", ["A prevents another person attempt more than B, so A is not less wise than B"]], "asymmetric_premise": ["More( prevents another person attempt(B),  prevents another person attempt(A)), so Less(wise(A), wise(B))", ["B prevents another person attempt more than A, so A is less wise than B"]], "asymmetric_conclusion": ["More( prevents another person attempt(A),  prevents another person attempt(B)), so Less(wise(B), wise(A))", ["A prevents another person attempt more than B, so B is less wise than A"]], "negated_asymmetric_premise": ["More( prevents another person attempt(B),  prevents another person attempt(A)), so not More(wise(A), wise(B))", ["B prevents another person attempt more than A, so A is not more wise than B"]], "negated_asymmetric_conclusion": ["More( prevents another person attempt(A),  prevents another person attempt(B)), so not More(wise(B), wise(A))", ["A prevents another person attempt more than B, so B is not more wise than A"]]}
{"original": ["More( gets a raise(A),  gets a raise(B)), so More(sociable(A), sociable(B))", ["A gets a raise more than B, so A is more sociable than B"]], "negated": ["More( gets a raise(A),  gets a raise(B)), so not Less(sociable(A), sociable(B))", ["A gets a raise more than B, so A is not less sociable than B"]], "asymmetric_premise": ["More( gets a raise(B),  gets a raise(A)), so Less(sociable(A), sociable(B))", ["B gets a raise more than A, so A is less sociable than B"]], "asymmetric_conclusion": ["More( gets a raise(A),  gets a raise(B)), so Less(sociable(B), sociable(A))", ["A gets a raise more than B, so B is less sociable than A"]], "negated_asymmetric_premise": ["More( gets a raise(B),  gets a raise(A)), so not More(sociable(A), sociable(B))", ["B gets a raise more than A, so A is not more sociable than B"]], "negated_asymmetric_conclusion": ["More( gets a raise(A),  gets a raise(B)), so not More(sociable(B), sociable(A))", ["A gets a raise more than B, so B is not more sociable than A"]]}
{"original": ["More( brings it back(A),  brings it back(B)), so More(nostalgic(A), nostalgic(B))", ["A brings it back more than B, so A is more nostalgic than B"]], "negated": ["More( brings it back(A),  brings it back(B)), so not Less(nostalgic(A), nostalgic(B))", ["A brings it back more than B, so A is not less nostalgic than B"]], "asymmetric_premise": ["More( brings it back(B),  brings it back(A)), so Less(nostalgic(A), nostalgic(B))", ["B brings it back more than A, so A is less nostalgic than B"]], "asymmetric_conclusion": ["More( brings it back(A),  brings it back(B)), so Less(nostalgic(B), nostalgic(A))", ["A brings it back more than B, so B is less nostalgic than A"]], "negated_asymmetric_premise": ["More( brings it back(B),  brings it back(A)), so not More(nostalgic(A), nostalgic(B))", ["B brings it back more than A, so A is not more nostalgic than B"]], "negated_asymmetric_conclusion": ["More( brings it back(A),  brings it back(B)), so not More(nostalgic(B), nostalgic(A))", ["A brings it back more than B, so B is not more nostalgic than A"]]}
{"original": ["More( makes the trip(A),  makes the trip(B)), so More(worldly(A), worldly(B))", ["A makes the trip more than B, so A is more worldly than B"]], "negated": ["More( makes the trip(A),  makes the trip(B)), so not Less(worldly(A), worldly(B))", ["A makes the trip more than B, so A is not less worldly than B"]], "asymmetric_premise": ["More( makes the trip(B),  makes the trip(A)), so Less(worldly(A), worldly(B))", ["B makes the trip more than A, so A is less worldly than B"]], "asymmetric_conclusion": ["More( makes the trip(A),  makes the trip(B)), so Less(worldly(B), worldly(A))", ["A makes the trip more than B, so B is less worldly than A"]], "negated_asymmetric_premise": ["More( makes the trip(B),  makes the trip(A)), so not More(worldly(A), worldly(B))", ["B makes the trip more than A, so A is not more worldly than B"]], "negated_asymmetric_conclusion": ["More( makes the trip(A),  makes the trip(B)), so not More(worldly(B), worldly(A))", ["A makes the trip more than B, so B is not more worldly than A"]]}
{"original": ["More( decides to cheat(A),  decides to cheat(B)), so More(bad(A), bad(B))", ["A decides to cheat more than B, so A is more bad than B"]], "negated": ["More( decides to cheat(A),  decides to cheat(B)), so not Less(bad(A), bad(B))", ["A decides to cheat more than B, so A is not less bad than B"]], "asymmetric_premise": ["More( decides to cheat(B),  decides to cheat(A)), so Less(bad(A), bad(B))", ["B decides to cheat more than A, so A is less bad than B"]], "asymmetric_conclusion": ["More( decides to cheat(A),  decides to cheat(B)), so Less(bad(B), bad(A))", ["A decides to cheat more than B, so B is less bad than A"]], "negated_asymmetric_premise": ["More( decides to cheat(B),  decides to cheat(A)), so not More(bad(A), bad(B))", ["B decides to cheat more than A, so A is not more bad than B"]], "negated_asymmetric_conclusion": ["More( decides to cheat(A),  decides to cheat(B)), so not More(bad(B), bad(A))", ["A decides to cheat more than B, so B is not more bad than A"]]}
{"original": ["More( gets scared(A),  gets scared(B)), so More(observant(A), observant(B))", ["A gets scared more than B, so A is more observant than B"]], "negated": ["More( gets scared(A),  gets scared(B)), so not Less(observant(A), observant(B))", ["A gets scared more than B, so A is not less observant than B"]], "asymmetric_premise": ["More( gets scared(B),  gets scared(A)), so Less(observant(A), observant(B))", ["B gets scared more than A, so A is less observant than B"]], "asymmetric_conclusion": ["More( gets scared(A),  gets scared(B)), so Less(observant(B), observant(A))", ["A gets scared more than B, so B is less observant than A"]], "negated_asymmetric_premise": ["More( gets scared(B),  gets scared(A)), so not More(observant(A), observant(B))", ["B gets scared more than A, so A is not more observant than B"]], "negated_asymmetric_conclusion": ["More( gets scared(A),  gets scared(B)), so not More(observant(B), observant(A))", ["A gets scared more than B, so B is not more observant than A"]]}
{"original": ["More( learns to play the violin(A),  learns to play the violin(B)), so More(musical(A), musical(B))", ["A learns to play the violin more than B, so A is more musical than B"]], "negated": ["More( learns to play the violin(A),  learns to play the violin(B)), so not Less(musical(A), musical(B))", ["A learns to play the violin more than B, so A is not less musical than B"]], "asymmetric_premise": ["More( learns to play the violin(B),  learns to play the violin(A)), so Less(musical(A), musical(B))", ["B learns to play the violin more than A, so A is less musical than B"]], "asymmetric_conclusion": ["More( learns to play the violin(A),  learns to play the violin(B)), so Less(musical(B), musical(A))", ["A learns to play the violin more than B, so B is less musical than A"]], "negated_asymmetric_premise": ["More( learns to play the violin(B),  learns to play the violin(A)), so not More(musical(A), musical(B))", ["B learns to play the violin more than A, so A is not more musical than B"]], "negated_asymmetric_conclusion": ["More( learns to play the violin(A),  learns to play the violin(B)), so not More(musical(B), musical(A))", ["A learns to play the violin more than B, so B is not more musical than A"]]}
{"original": ["More( tells another person ought(A),  tells another person ought(B)), so More(overbearing(A), overbearing(B))", ["A tells another person ought more than B, so A is more overbearing than B"]], "negated": ["More( tells another person ought(A),  tells another person ought(B)), so not Less(overbearing(A), overbearing(B))", ["A tells another person ought more than B, so A is not less overbearing than B"]], "asymmetric_premise": ["More( tells another person ought(B),  tells another person ought(A)), so Less(overbearing(A), overbearing(B))", ["B tells another person ought more than A, so A is less overbearing than B"]], "asymmetric_conclusion": ["More( tells another person ought(A),  tells another person ought(B)), so Less(overbearing(B), overbearing(A))", ["A tells another person ought more than B, so B is less overbearing than A"]], "negated_asymmetric_premise": ["More( tells another person ought(B),  tells another person ought(A)), so not More(overbearing(A), overbearing(B))", ["B tells another person ought more than A, so A is not more overbearing than B"]], "negated_asymmetric_conclusion": ["More( tells another person ought(A),  tells another person ought(B)), so not More(overbearing(B), overbearing(A))", ["A tells another person ought more than B, so B is not more overbearing than A"]]}
{"original": ["More( is let go(A),  is let go(B)), so More(sad(A), sad(B))", ["A is let go more than B, so A is more sad than B"]], "negated": ["More( is let go(A),  is let go(B)), so not Less(sad(A), sad(B))", ["A is let go more than B, so A is not less sad than B"]], "asymmetric_premise": ["More( is let go(B),  is let go(A)), so Less(sad(A), sad(B))", ["B is let go more than A, so A is less sad than B"]], "asymmetric_conclusion": ["More( is let go(A),  is let go(B)), so Less(sad(B), sad(A))", ["A is let go more than B, so B is less sad than A"]], "negated_asymmetric_premise": ["More( is let go(B),  is let go(A)), so not More(sad(A), sad(B))", ["B is let go more than A, so A is not more sad than B"]], "negated_asymmetric_conclusion": ["More( is let go(A),  is let go(B)), so not More(sad(B), sad(A))", ["A is let go more than B, so B is not more sad than A"]]}
{"original": ["More( passes their exams(A),  passes their exams(B)), so More(intelligent(A), intelligent(B))", ["A passes their exams more than B, so A is more intelligent than B"]], "negated": ["More( passes their exams(A),  passes their exams(B)), so not Less(intelligent(A), intelligent(B))", ["A passes their exams more than B, so A is not less intelligent than B"]], "asymmetric_premise": ["More( passes their exams(B),  passes their exams(A)), so Less(intelligent(A), intelligent(B))", ["B passes their exams more than A, so A is less intelligent than B"]], "asymmetric_conclusion": ["More( passes their exams(A),  passes their exams(B)), so Less(intelligent(B), intelligent(A))", ["A passes their exams more than B, so B is less intelligent than A"]], "negated_asymmetric_premise": ["More( passes their exams(B),  passes their exams(A)), so not More(intelligent(A), intelligent(B))", ["B passes their exams more than A, so A is not more intelligent than B"]], "negated_asymmetric_conclusion": ["More( passes their exams(A),  passes their exams(B)), so not More(intelligent(B), intelligent(A))", ["A passes their exams more than B, so B is not more intelligent than A"]]}
{"original": ["More( keeps it as a pet(A),  keeps it as a pet(B)), so More(kind(A), kind(B))", ["A keeps it as a pet more than B, so A is more kind than B"]], "negated": ["More( keeps it as a pet(A),  keeps it as a pet(B)), so not Less(kind(A), kind(B))", ["A keeps it as a pet more than B, so A is not less kind than B"]], "asymmetric_premise": ["More( keeps it as a pet(B),  keeps it as a pet(A)), so Less(kind(A), kind(B))", ["B keeps it as a pet more than A, so A is less kind than B"]], "asymmetric_conclusion": ["More( keeps it as a pet(A),  keeps it as a pet(B)), so Less(kind(B), kind(A))", ["A keeps it as a pet more than B, so B is less kind than A"]], "negated_asymmetric_premise": ["More( keeps it as a pet(B),  keeps it as a pet(A)), so not More(kind(A), kind(B))", ["B keeps it as a pet more than A, so A is not more kind than B"]], "negated_asymmetric_conclusion": ["More( keeps it as a pet(A),  keeps it as a pet(B)), so not More(kind(B), kind(A))", ["A keeps it as a pet more than B, so B is not more kind than A"]]}
{"original": ["More( invites another person's friends over(A),  invites another person's friends over(B)), so More(welcoming(A), welcoming(B))", ["A invites another person's friends over more than B, so A is more welcoming than B"]], "negated": ["More( invites another person's friends over(A),  invites another person's friends over(B)), so not Less(welcoming(A), welcoming(B))", ["A invites another person's friends over more than B, so A is not less welcoming than B"]], "asymmetric_premise": ["More( invites another person's friends over(B),  invites another person's friends over(A)), so Less(welcoming(A), welcoming(B))", ["B invites another person's friends over more than A, so A is less welcoming than B"]], "asymmetric_conclusion": ["More( invites another person's friends over(A),  invites another person's friends over(B)), so Less(welcoming(B), welcoming(A))", ["A invites another person's friends over more than B, so B is less welcoming than A"]], "negated_asymmetric_premise": ["More( invites another person's friends over(B),  invites another person's friends over(A)), so not More(welcoming(A), welcoming(B))", ["B invites another person's friends over more than A, so A is not more welcoming than B"]], "negated_asymmetric_conclusion": ["More( invites another person's friends over(A),  invites another person's friends over(B)), so not More(welcoming(B), welcoming(A))", ["A invites another person's friends over more than B, so B is not more welcoming than A"]]}
{"original": ["More( walks to school every day(A),  walks to school every day(B)), so More(brave(A), brave(B))", ["A walks to school every day more than B, so A is more brave than B"]], "negated": ["More( walks to school every day(A),  walks to school every day(B)), so not Less(brave(A), brave(B))", ["A walks to school every day more than B, so A is not less brave than B"]], "asymmetric_premise": ["More( walks to school every day(B),  walks to school every day(A)), so Less(brave(A), brave(B))", ["B walks to school every day more than A, so A is less brave than B"]], "asymmetric_conclusion": ["More( walks to school every day(A),  walks to school every day(B)), so Less(brave(B), brave(A))", ["A walks to school every day more than B, so B is less brave than A"]], "negated_asymmetric_premise": ["More( walks to school every day(B),  walks to school every day(A)), so not More(brave(A), brave(B))", ["B walks to school every day more than A, so A is not more brave than B"]], "negated_asymmetric_conclusion": ["More( walks to school every day(A),  walks to school every day(B)), so not More(brave(B), brave(A))", ["A walks to school every day more than B, so B is not more brave than A"]]}
{"original": ["More( loses their senses(A),  loses their senses(B)), so More(absentminded(A), absentminded(B))", ["A loses their senses more than B, so A is more absentminded than B"]], "negated": ["More( loses their senses(A),  loses their senses(B)), so not Less(absentminded(A), absentminded(B))", ["A loses their senses more than B, so A is not less absentminded than B"]], "asymmetric_premise": ["More( loses their senses(B),  loses their senses(A)), so Less(absentminded(A), absentminded(B))", ["B loses their senses more than A, so A is less absentminded than B"]], "asymmetric_conclusion": ["More( loses their senses(A),  loses their senses(B)), so Less(absentminded(B), absentminded(A))", ["A loses their senses more than B, so B is less absentminded than A"]], "negated_asymmetric_premise": ["More( loses their senses(B),  loses their senses(A)), so not More(absentminded(A), absentminded(B))", ["B loses their senses more than A, so A is not more absentminded than B"]], "negated_asymmetric_conclusion": ["More( loses their senses(A),  loses their senses(B)), so not More(absentminded(B), absentminded(A))", ["A loses their senses more than B, so B is not more absentminded than A"]]}
{"original": ["More( lives in their house(A),  lives in their house(B)), so More(homeowner(A), homeowner(B))", ["A lives in their house more than B, so A is more homeowner than B"]], "negated": ["More( lives in their house(A),  lives in their house(B)), so not Less(homeowner(A), homeowner(B))", ["A lives in their house more than B, so A is not less homeowner than B"]], "asymmetric_premise": ["More( lives in their house(B),  lives in their house(A)), so Less(homeowner(A), homeowner(B))", ["B lives in their house more than A, so A is less homeowner than B"]], "asymmetric_conclusion": ["More( lives in their house(A),  lives in their house(B)), so Less(homeowner(B), homeowner(A))", ["A lives in their house more than B, so B is less homeowner than A"]], "negated_asymmetric_premise": ["More( lives in their house(B),  lives in their house(A)), so not More(homeowner(A), homeowner(B))", ["B lives in their house more than A, so A is not more homeowner than B"]], "negated_asymmetric_conclusion": ["More( lives in their house(A),  lives in their house(B)), so not More(homeowner(B), homeowner(A))", ["A lives in their house more than B, so B is not more homeowner than A"]]}
{"original": ["More( walks all the way back(A),  walks all the way back(B)), so More(patient(A), patient(B))", ["A walks all the way back more than B, so A is more patient than B"]], "negated": ["More( walks all the way back(A),  walks all the way back(B)), so not Less(patient(A), patient(B))", ["A walks all the way back more than B, so A is not less patient than B"]], "asymmetric_premise": ["More( walks all the way back(B),  walks all the way back(A)), so Less(patient(A), patient(B))", ["B walks all the way back more than A, so A is less patient than B"]], "asymmetric_conclusion": ["More( walks all the way back(A),  walks all the way back(B)), so Less(patient(B), patient(A))", ["A walks all the way back more than B, so B is less patient than A"]], "negated_asymmetric_premise": ["More( walks all the way back(B),  walks all the way back(A)), so not More(patient(A), patient(B))", ["B walks all the way back more than A, so A is not more patient than B"]], "negated_asymmetric_conclusion": ["More( walks all the way back(A),  walks all the way back(B)), so not More(patient(B), patient(A))", ["A walks all the way back more than B, so B is not more patient than A"]]}
{"original": ["More( calls a locksmith(A),  calls a locksmith(B)), so More(smart(A), smart(B))", ["A calls a locksmith more than B, so A is more smart than B"]], "negated": ["More( calls a locksmith(A),  calls a locksmith(B)), so not Less(smart(A), smart(B))", ["A calls a locksmith more than B, so A is not less smart than B"]], "asymmetric_premise": ["More( calls a locksmith(B),  calls a locksmith(A)), so Less(smart(A), smart(B))", ["B calls a locksmith more than A, so A is less smart than B"]], "asymmetric_conclusion": ["More( calls a locksmith(A),  calls a locksmith(B)), so Less(smart(B), smart(A))", ["A calls a locksmith more than B, so B is less smart than A"]], "negated_asymmetric_premise": ["More( calls a locksmith(B),  calls a locksmith(A)), so not More(smart(A), smart(B))", ["B calls a locksmith more than A, so A is not more smart than B"]], "negated_asymmetric_conclusion": ["More( calls a locksmith(A),  calls a locksmith(B)), so not More(smart(B), smart(A))", ["A calls a locksmith more than B, so B is not more smart than A"]]}
{"original": ["More( runs for office(A),  runs for office(B)), so More(king(A), king(B))", ["A runs for office more than B, so A is more king than B"]], "negated": ["More( runs for office(A),  runs for office(B)), so not Less(king(A), king(B))", ["A runs for office more than B, so A is not less king than B"]], "asymmetric_premise": ["More( runs for office(B),  runs for office(A)), so Less(king(A), king(B))", ["B runs for office more than A, so A is less king than B"]], "asymmetric_conclusion": ["More( runs for office(A),  runs for office(B)), so Less(king(B), king(A))", ["A runs for office more than B, so B is less king than A"]], "negated_asymmetric_premise": ["More( runs for office(B),  runs for office(A)), so not More(king(A), king(B))", ["B runs for office more than A, so A is not more king than B"]], "negated_asymmetric_conclusion": ["More( runs for office(A),  runs for office(B)), so not More(king(B), king(A))", ["A runs for office more than B, so B is not more king than A"]]}
{"original": ["More( gets high(A),  gets high(B)), so More(exhausted(A), exhausted(B))", ["A gets high more than B, so A is more exhausted than B"]], "negated": ["More( gets high(A),  gets high(B)), so not Less(exhausted(A), exhausted(B))", ["A gets high more than B, so A is not less exhausted than B"]], "asymmetric_premise": ["More( gets high(B),  gets high(A)), so Less(exhausted(A), exhausted(B))", ["B gets high more than A, so A is less exhausted than B"]], "asymmetric_conclusion": ["More( gets high(A),  gets high(B)), so Less(exhausted(B), exhausted(A))", ["A gets high more than B, so B is less exhausted than A"]], "negated_asymmetric_premise": ["More( gets high(B),  gets high(A)), so not More(exhausted(A), exhausted(B))", ["B gets high more than A, so A is not more exhausted than B"]], "negated_asymmetric_conclusion": ["More( gets high(A),  gets high(B)), so not More(exhausted(B), exhausted(A))", ["A gets high more than B, so B is not more exhausted than A"]]}
{"original": ["More( finishes another person's work(A),  finishes another person's work(B)), so More(determined(A), determined(B))", ["A helps finishes another person's work more than B, so A is more determined than B"]], "negated": ["More( finishes another person's work(A),  finishes another person's work(B)), so not Less(determined(A), determined(B))", ["A helps finishes another person's work more than B, so A is not less determined than B"]], "asymmetric_premise": ["More( finishes another person's work(B),  finishes another person's work(A)), so Less(determined(A), determined(B))", ["B helps finishes another person's work more than A, so A is less determined than B"]], "asymmetric_conclusion": ["More( finishes another person's work(A),  finishes another person's work(B)), so Less(determined(B), determined(A))", ["A helps finishes another person's work more than B, so B is less determined than A"]], "negated_asymmetric_premise": ["More( finishes another person's work(B),  finishes another person's work(A)), so not More(determined(A), determined(B))", ["B helps finishes another person's work more than A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["More( finishes another person's work(A),  finishes another person's work(B)), so not More(determined(B), determined(A))", ["A helps finishes another person's work more than B, so B is not more determined than A"]]}
{"original": ["More( rings true(A),  rings true(B)), so More(honest(A), honest(B))", ["A rings true more than B, so A is more honest than B"]], "negated": ["More( rings true(A),  rings true(B)), so not Less(honest(A), honest(B))", ["A is more honest than B, so A is not less honest than B"]], "asymmetric_premise": ["More( rings true(B),  rings true(A)), so Less(honest(A), honest(B))", ["B is more honest than A, so A is less honest than B"]], "asymmetric_conclusion": ["More( rings true(A),  rings true(B)), so Less(honest(B), honest(A))", ["A rings true more than B, so B is less honest than A"]], "negated_asymmetric_premise": ["More( rings true(B),  rings true(A)), so not More(honest(A), honest(B))", ["B is not more honest than A, so A is not more honest than B"]], "negated_asymmetric_conclusion": ["More( rings true(A),  rings true(B)), so not More(honest(B), honest(A))", ["A is more honest than B, so B is not more honest than A"]]}
{"original": ["More( stands next(A),  stands next(B)), so More(patient(A), patient(B))", ["A stands next to B, so A is more patient than B"]], "negated": ["More( stands next(A),  stands next(B)), so not Less(patient(A), patient(B))", ["A stands next to B, so A is not less patient than B"]], "asymmetric_premise": ["More( stands next(B),  stands next(A)), so Less(patient(A), patient(B))", ["B stands next to A, so A is less patient than B"]], "asymmetric_conclusion": ["More( stands next(A),  stands next(B)), so Less(patient(B), patient(A))", ["A stands next to B, so B is less patient than A"]], "negated_asymmetric_premise": ["More( stands next(B),  stands next(A)), so not More(patient(A), patient(B))", ["B stands next to A, so A is not more patient than B"]], "negated_asymmetric_conclusion": ["More( stands next(A),  stands next(B)), so not More(patient(B), patient(A))", ["A stands next to B, so B is not more patient than A"]]}
{"original": ["More( has to wait for another day(A),  has to wait for another day(B)), so More(patient(A), patient(B))", ["A has to wait for another day more than B, so A is more patient than B"]], "negated": ["More( has to wait for another day(A),  has to wait for another day(B)), so not Less(patient(A), patient(B))", ["A has to wait for another day more than B, so A is not less patient than B"]], "asymmetric_premise": ["More( has to wait for another day(B),  has to wait for another day(A)), so Less(patient(A), patient(B))", ["B has to wait for another day more than A, so A is less patient than B"]], "asymmetric_conclusion": ["More( has to wait for another day(A),  has to wait for another day(B)), so Less(patient(B), patient(A))", ["A has to wait for another day more than B, so B is less patient than A"]], "negated_asymmetric_premise": ["More( has to wait for another day(B),  has to wait for another day(A)), so not More(patient(A), patient(B))", ["B has to wait for another day more than A, so A is not more patient than B"]], "negated_asymmetric_conclusion": ["More( has to wait for another day(A),  has to wait for another day(B)), so not More(patient(B), patient(A))", ["A has to wait for another day more than B, so B is not more patient than A"]]}
{"original": ["More( gets a wiggle on(A),  gets a wiggle on(B)), so More(jazzed(A), jazzed(B))", ["A gets a wiggle on more than B, so A is more jazzed than B"]], "negated": ["More( gets a wiggle on(A),  gets a wiggle on(B)), so not Less(jazzed(A), jazzed(B))", ["A gets a wiggle on more than B, so A is not less jazzed than B"]], "asymmetric_premise": ["More( gets a wiggle on(B),  gets a wiggle on(A)), so Less(jazzed(A), jazzed(B))", ["B gets a wiggle on more than A, so A is less jazzed than B"]], "asymmetric_conclusion": ["More( gets a wiggle on(A),  gets a wiggle on(B)), so Less(jazzed(B), jazzed(A))", ["A gets a wiggle on more than B, so B is less jazzed than A"]], "negated_asymmetric_premise": ["More( gets a wiggle on(B),  gets a wiggle on(A)), so not More(jazzed(A), jazzed(B))", ["B gets a wiggle on more than A, so A is not more jazzed than B"]], "negated_asymmetric_conclusion": ["More( gets a wiggle on(A),  gets a wiggle on(B)), so not More(jazzed(B), jazzed(A))", ["A gets a wiggle on more than B, so B is not more jazzed than A"]]}
{"original": ["More( ignores another person's advice(A),  ignores another person's advice(B)), so More(placid(A), placid(B))", ["A ignores another person's advice more than B, so A is more placid than B"]], "negated": ["More( ignores another person's advice(A),  ignores another person's advice(B)), so not Less(placid(A), placid(B))", ["A ignores another person's advice more than B, so A is not less placid than B"]], "asymmetric_premise": ["More( ignores another person's advice(B),  ignores another person's advice(A)), so Less(placid(A), placid(B))", ["B ignores another person's advice more than A, so A is less placid than B"]], "asymmetric_conclusion": ["More( ignores another person's advice(A),  ignores another person's advice(B)), so Less(placid(B), placid(A))", ["A ignores another person's advice more than B, so B is less placid than A"]], "negated_asymmetric_premise": ["More( ignores another person's advice(B),  ignores another person's advice(A)), so not More(placid(A), placid(B))", ["B ignores another person's advice more than A, so A is not more placid than B"]], "negated_asymmetric_conclusion": ["More( ignores another person's advice(A),  ignores another person's advice(B)), so not More(placid(B), placid(A))", ["A ignores another person's advice more than B, so B is not more placid than A"]]}
{"original": ["More( works during the day(A),  works during the day(B)), so More(responsible(A), responsible(B))", ["A works during the day more than B, so A is more responsible than B"]], "negated": ["More( works during the day(A),  works during the day(B)), so not Less(responsible(A), responsible(B))", ["A works during the day more than B, so A is not less responsible than B"]], "asymmetric_premise": ["More( works during the day(B),  works during the day(A)), so Less(responsible(A), responsible(B))", ["B works during the day more than A, so A is less responsible than B"]], "asymmetric_conclusion": ["More( works during the day(A),  works during the day(B)), so Less(responsible(B), responsible(A))", ["A works during the day more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["More( works during the day(B),  works during the day(A)), so not More(responsible(A), responsible(B))", ["B works during the day more than A, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["More( works during the day(A),  works during the day(B)), so not More(responsible(B), responsible(A))", ["A works during the day more than B, so B is not more responsible than A"]]}
{"original": ["More( paints something(A),  paints something(B)), so More(expressive(A), expressive(B))", ["A paints something more than B, so A is more expressive than B"]], "negated": ["More( paints something(A),  paints something(B)), so not Less(expressive(A), expressive(B))", ["A paints something more than B, so A is not less expressive than B"]], "asymmetric_premise": ["More( paints something(B),  paints something(A)), so Less(expressive(A), expressive(B))", ["B paints something more than A, so A is less expressive than B"]], "asymmetric_conclusion": ["More( paints something(A),  paints something(B)), so Less(expressive(B), expressive(A))", ["A paints something more than B, so B is less expressive than A"]], "negated_asymmetric_premise": ["More( paints something(B),  paints something(A)), so not More(expressive(A), expressive(B))", ["B paints something more than A, so A is not more expressive than B"]], "negated_asymmetric_conclusion": ["More( paints something(A),  paints something(B)), so not More(expressive(B), expressive(A))", ["A paints something more than B, so B is not more expressive than A"]]}
{"original": ["More( runs the race(A),  runs the race(B)), so More(bossy(A), bossy(B))", ["A runs the race more than B, so A is more bossy than B"]], "negated": ["More( runs the race(A),  runs the race(B)), so not Less(bossy(A), bossy(B))", ["A runs the race more than B, so A is not less bossy than B"]], "asymmetric_premise": ["More( runs the race(B),  runs the race(A)), so Less(bossy(A), bossy(B))", ["B runs the race more than A, so A is less bossy than B"]], "asymmetric_conclusion": ["More( runs the race(A),  runs the race(B)), so Less(bossy(B), bossy(A))", ["A runs the race more than B, so B is less bossy than A"]], "negated_asymmetric_premise": ["More( runs the race(B),  runs the race(A)), so not More(bossy(A), bossy(B))", ["B runs the race more than A, so A is not more bossy than B"]], "negated_asymmetric_conclusion": ["More( runs the race(A),  runs the race(B)), so not More(bossy(B), bossy(A))", ["A runs the race more than B, so B is not more bossy than A"]]}
{"original": ["More( shares another person's thoughts(A),  shares another person's thoughts(B)), so More(articulate(A), articulate(B))", ["A shares another person's thoughts more than B, so A is more articulate than B"]], "negated": ["More( shares another person's thoughts(A),  shares another person's thoughts(B)), so not Less(articulate(A), articulate(B))", ["A shares another person's thoughts more than B, so A is not less articulate than B"]], "asymmetric_premise": ["More( shares another person's thoughts(B),  shares another person's thoughts(A)), so Less(articulate(A), articulate(B))", ["B shares another person's thoughts more than A, so A is less articulate than B"]], "asymmetric_conclusion": ["More( shares another person's thoughts(A),  shares another person's thoughts(B)), so Less(articulate(B), articulate(A))", ["A shares another person's thoughts more than B, so B is less articulate than A"]], "negated_asymmetric_premise": ["More( shares another person's thoughts(B),  shares another person's thoughts(A)), so not More(articulate(A), articulate(B))", ["B shares another person's thoughts more than A, so A is not more articulate than B"]], "negated_asymmetric_conclusion": ["More( shares another person's thoughts(A),  shares another person's thoughts(B)), so not More(articulate(B), articulate(A))", ["A shares another person's thoughts more than B, so B is not more articulate than A"]]}
{"original": ["More( gets an oil change(A),  gets an oil change(B)), so More(dutiful(A), dutiful(B))", ["A gets an oil change more than B, so A is more dutiful than B"]], "negated": ["More( gets an oil change(A),  gets an oil change(B)), so not Less(dutiful(A), dutiful(B))", ["A gets an oil change more than B, so A is not less dutiful than B"]], "asymmetric_premise": ["More( gets an oil change(B),  gets an oil change(A)), so Less(dutiful(A), dutiful(B))", ["B gets an oil change more than A, so A is less dutiful than B"]], "asymmetric_conclusion": ["More( gets an oil change(A),  gets an oil change(B)), so Less(dutiful(B), dutiful(A))", ["A gets an oil change more than B, so B is less dutiful than A"]], "negated_asymmetric_premise": ["More( gets an oil change(B),  gets an oil change(A)), so not More(dutiful(A), dutiful(B))", ["B gets an oil change more than A, so A is not more dutiful than B"]], "negated_asymmetric_conclusion": ["More( gets an oil change(A),  gets an oil change(B)), so not More(dutiful(B), dutiful(A))", ["A gets an oil change more than B, so B is not more dutiful than A"]]}
{"original": ["More( helps another person much(A),  helps another person much(B)), so More(charming(A), charming(B))", ["A helps another person much more than B, so A is more charming than B"]], "negated": ["More( helps another person much(A),  helps another person much(B)), so not Less(charming(A), charming(B))", ["A helps another person much more than B, so A is not less charming than B"]], "asymmetric_premise": ["More( helps another person much(B),  helps another person much(A)), so Less(charming(A), charming(B))", ["B helps another person much more than A, so A is less charming than B"]], "asymmetric_conclusion": ["More( helps another person much(A),  helps another person much(B)), so Less(charming(B), charming(A))", ["A helps another person much more than B, so B is less charming than A"]], "negated_asymmetric_premise": ["More( helps another person much(B),  helps another person much(A)), so not More(charming(A), charming(B))", ["B helps another person much more than A, so A is not more charming than B"]], "negated_asymmetric_conclusion": ["More( helps another person much(A),  helps another person much(B)), so not More(charming(B), charming(A))", ["A helps another person much more than B, so B is not more charming than A"]]}
{"original": ["More( shapes their lives(A),  shapes their lives(B)), so More(thoughtful(A), thoughtful(B))", ["A shapes their lives more than B, so A is more thoughtful than B"]], "negated": ["More( shapes their lives(A),  shapes their lives(B)), so not Less(thoughtful(A), thoughtful(B))", ["A shapes their lives more than B, so A is not less thoughtful than B"]], "asymmetric_premise": ["More( shapes their lives(B),  shapes their lives(A)), so Less(thoughtful(A), thoughtful(B))", ["B shapes their lives more than A, so A is less thoughtful than B"]], "asymmetric_conclusion": ["More( shapes their lives(A),  shapes their lives(B)), so Less(thoughtful(B), thoughtful(A))", ["A shapes their lives more than B, so B is less thoughtful than A"]], "negated_asymmetric_premise": ["More( shapes their lives(B),  shapes their lives(A)), so not More(thoughtful(A), thoughtful(B))", ["B shapes their lives more than A, so A is not more thoughtful than B"]], "negated_asymmetric_conclusion": ["More( shapes their lives(A),  shapes their lives(B)), so not More(thoughtful(B), thoughtful(A))", ["A shapes their lives more than B, so B is not more thoughtful than A"]]}
{"original": ["More( finally sat down(A),  finally sat down(B)), so More(tired(A), tired(B))", ["A finally sat down more than B, so A is more tired than B"]], "negated": ["More( finally sat down(A),  finally sat down(B)), so not Less(tired(A), tired(B))", ["A finally sat down more than B, so A is not less tired than B"]], "asymmetric_premise": ["More( finally sat down(B),  finally sat down(A)), so Less(tired(A), tired(B))", ["B has finally sat down, so A is less tired than B"]], "asymmetric_conclusion": ["More( finally sat down(A),  finally sat down(B)), so Less(tired(B), tired(A))", ["A has finally sat down, so B is less tired than A"]], "negated_asymmetric_premise": ["More( finally sat down(B),  finally sat down(A)), so not More(tired(A), tired(B))", ["B finally sat down, so A is not more tired than B"]], "negated_asymmetric_conclusion": ["More( finally sat down(A),  finally sat down(B)), so not More(tired(B), tired(A))", ["A finally sat down more than B, so B is not more tired than A"]]}
{"original": ["More( finds one on ebay(A),  finds one on ebay(B)), so More(searching(A), searching(B))", ["A finds one on ebay more than B, so A is more searching than B"]], "negated": ["More( finds one on ebay(A),  finds one on ebay(B)), so not Less(searching(A), searching(B))", ["A finds one on ebay more than B, so A is not less searching than B"]], "asymmetric_premise": ["More( finds one on ebay(B),  finds one on ebay(A)), so Less(searching(A), searching(B))", ["B finds one on ebay more than A, so A is less likely to be searching than B"]], "asymmetric_conclusion": ["More( finds one on ebay(A),  finds one on ebay(B)), so Less(searching(B), searching(A))", ["A finds one on ebay more than B, so B is less likely to be searching than A"]], "negated_asymmetric_premise": ["More( finds one on ebay(B),  finds one on ebay(A)), so not More(searching(A), searching(B))", ["B finds one on ebay more than A, so A is not more searching than B"]], "negated_asymmetric_conclusion": ["More( finds one on ebay(A),  finds one on ebay(B)), so not More(searching(B), searching(A))", ["A finds one on ebay more than B, so B is not more searching than A"]]}
{"original": ["More( eats together(A),  eats together(B)), so More(friendly(A), friendly(B))", ["A eats together more than B, so A is more friendly than B"]], "negated": ["More( eats together(A),  eats together(B)), so not Less(friendly(A), friendly(B))", ["A eats together more than B, so A is not less friendly than B"]], "asymmetric_premise": ["More( eats together(B),  eats together(A)), so Less(friendly(A), friendly(B))", ["B eats together more than A, so A is less friendly than B"]], "asymmetric_conclusion": ["More( eats together(A),  eats together(B)), so Less(friendly(B), friendly(A))", ["A eats together more than B, so B is less friendly than A"]], "negated_asymmetric_premise": ["More( eats together(B),  eats together(A)), so not More(friendly(A), friendly(B))", ["B eats together more than A, so A is not more friendly than B"]], "negated_asymmetric_conclusion": ["More( eats together(A),  eats together(B)), so not More(friendly(B), friendly(A))", ["A eats together more than B, so B is not more friendly than A"]]}
{"original": ["More( seems like another person(A),  seems like another person(B)), so More(similar(A), similar(B))", ["A seems like another person more than B, so A is more similar than B"]], "negated": ["More( seems like another person(A),  seems like another person(B)), so not Less(similar(A), similar(B))", ["A seems like another person more than B, so A is not less similar than B"]], "asymmetric_premise": ["More( seems like another person(B),  seems like another person(A)), so Less(similar(A), similar(B))", ["B seems like another person more than A, so A is less similar than B"]], "asymmetric_conclusion": ["More( seems like another person(A),  seems like another person(B)), so Less(similar(B), similar(A))", ["A seems like another person more than B, so B is less similar than A"]], "negated_asymmetric_premise": ["More( seems like another person(B),  seems like another person(A)), so not More(similar(A), similar(B))", ["B seems like another person more than A, so A is not more similar than B"]], "negated_asymmetric_conclusion": ["More( seems like another person(A),  seems like another person(B)), so not More(similar(B), similar(A))", ["A seems like another person more than B, so B is not more similar than A"]]}
{"original": ["More( gives another person control(A),  gives another person control(B)), so More(accomodating(A), accomodating(B))", ["A gives another person control more than B, so A is more accomodating than B"]], "negated": ["More( gives another person control(A),  gives another person control(B)), so not Less(accomodating(A), accomodating(B))", ["A gives another person control more than B, so A is not less accomodating than B"]], "asymmetric_premise": ["More( gives another person control(B),  gives another person control(A)), so Less(accomodating(A), accomodating(B))", ["B gives another person control more than A, so A is less accomodating than B"]], "asymmetric_conclusion": ["More( gives another person control(A),  gives another person control(B)), so Less(accomodating(B), accomodating(A))", ["A gives another person control more than B, so B is less accomodating than A"]], "negated_asymmetric_premise": ["More( gives another person control(B),  gives another person control(A)), so not More(accomodating(A), accomodating(B))", ["B gives another person control more than A, so A is not more accomodating than B"]], "negated_asymmetric_conclusion": ["More( gives another person control(A),  gives another person control(B)), so not More(accomodating(B), accomodating(A))", ["A gives another person control more than B, so B is not more accomodating than A"]]}
{"original": ["More( starts toward another person(A),  starts toward another person(B)), so More(bold(A), bold(B))", ["A starts toward another person more than B, so A is more bold than B"]], "negated": ["More( starts toward another person(A),  starts toward another person(B)), so not Less(bold(A), bold(B))", ["A starts toward another person more than B, so A is not less bold than B"]], "asymmetric_premise": ["More( starts toward another person(B),  starts toward another person(A)), so Less(bold(A), bold(B))", ["B starts toward another person more than A, so A is less bold than B"]], "asymmetric_conclusion": ["More( starts toward another person(A),  starts toward another person(B)), so Less(bold(B), bold(A))", ["A starts toward another person more than B, so B is less bold than A"]], "negated_asymmetric_premise": ["More( starts toward another person(B),  starts toward another person(A)), so not More(bold(A), bold(B))", ["B starts toward another person more than A, so A is not more bold than B"]], "negated_asymmetric_conclusion": ["More( starts toward another person(A),  starts toward another person(B)), so not More(bold(B), bold(A))", ["A starts toward another person more than B, so B is not more bold than A"]]}
{"original": ["More( arrives on time(A),  arrives on time(B)), so More(smart(A), smart(B))", ["A arrives on time more than B, so A is more smart than B"]], "negated": ["More( arrives on time(A),  arrives on time(B)), so not Less(smart(A), smart(B))", ["A arrives on time more than B, so A is not less smart than B"]], "asymmetric_premise": ["More( arrives on time(B),  arrives on time(A)), so Less(smart(A), smart(B))", ["B arrives on time more than A, so A is less smart than B"]], "asymmetric_conclusion": ["More( arrives on time(A),  arrives on time(B)), so Less(smart(B), smart(A))", ["A arrives on time more than B, so B is less smart than A"]], "negated_asymmetric_premise": ["More( arrives on time(B),  arrives on time(A)), so not More(smart(A), smart(B))", ["B arrives on time more than A, so A is not more smart than B"]], "negated_asymmetric_conclusion": ["More( arrives on time(A),  arrives on time(B)), so not More(smart(B), smart(A))", ["A arrives on time more than B, so B is not more smart than A"]]}
{"original": ["More( reaches another person agreement(A),  reaches another person agreement(B)), so More(helpful(A), helpful(B))", ["A reaches another person agreement more than B, so A is more helpful than B"]], "negated": ["More( reaches another person agreement(A),  reaches another person agreement(B)), so not Less(helpful(A), helpful(B))", ["A reaches another person agreement more than B, so A is not less helpful than B"]], "asymmetric_premise": ["More( reaches another person agreement(B),  reaches another person agreement(A)), so Less(helpful(A), helpful(B))", ["B reaches another person agreement more than A, so A is less helpful than B"]], "asymmetric_conclusion": ["More( reaches another person agreement(A),  reaches another person agreement(B)), so Less(helpful(B), helpful(A))", ["A reaches another person agreement more than B, so B is less helpful than A"]], "negated_asymmetric_premise": ["More( reaches another person agreement(B),  reaches another person agreement(A)), so not More(helpful(A), helpful(B))", ["B reaches another person agreement more than A, so A is not more helpful than B"]], "negated_asymmetric_conclusion": ["More( reaches another person agreement(A),  reaches another person agreement(B)), so not More(helpful(B), helpful(A))", ["A reaches another person agreement more than B, so B is not more helpful than A"]]}
{"original": ["More( makes waffles(A),  makes waffles(B)), so More(hungry(A), hungry(B))", ["A makes waffles more than B, so A is more hungry than B"]], "negated": ["More( makes waffles(A),  makes waffles(B)), so not Less(hungry(A), hungry(B))", ["A makes waffles more than B, so A is not less hungry than B"]], "asymmetric_premise": ["More( makes waffles(B),  makes waffles(A)), so Less(hungry(A), hungry(B))", ["B makes waffles more than A, so A is less hungry than B"]], "asymmetric_conclusion": ["More( makes waffles(A),  makes waffles(B)), so Less(hungry(B), hungry(A))", ["A makes waffles more than B, so B is less hungry than A"]], "negated_asymmetric_premise": ["More( makes waffles(B),  makes waffles(A)), so not More(hungry(A), hungry(B))", ["B makes waffles more than A, so A is not more hungry than B"]], "negated_asymmetric_conclusion": ["More( makes waffles(A),  makes waffles(B)), so not More(hungry(B), hungry(A))", ["A makes waffles more than B, so B is not more hungry than A"]]}
{"original": ["More( makes popcorn on the stove(A),  makes popcorn on the stove(B)), so More(supportive(A), supportive(B))", ["A makes popcorn on the stove more than B, so A is more supportive than B"]], "negated": ["More( makes popcorn on the stove(A),  makes popcorn on the stove(B)), so not Less(supportive(A), supportive(B))", ["A makes popcorn on the stove more than B, so A is not less supportive than B"]], "asymmetric_premise": ["More( makes popcorn on the stove(B),  makes popcorn on the stove(A)), so Less(supportive(A), supportive(B))", ["B makes popcorn on the stove more than A, so A is less supportive than B"]], "asymmetric_conclusion": ["More( makes popcorn on the stove(A),  makes popcorn on the stove(B)), so Less(supportive(B), supportive(A))", ["A makes popcorn on the stove more than B, so B is less supportive than A"]], "negated_asymmetric_premise": ["More( makes popcorn on the stove(B),  makes popcorn on the stove(A)), so not More(supportive(A), supportive(B))", ["B makes popcorn on the stove more than A, so A is not more supportive than B"]], "negated_asymmetric_conclusion": ["More( makes popcorn on the stove(A),  makes popcorn on the stove(B)), so not More(supportive(B), supportive(A))", ["A makes popcorn on the stove more than B, so B is not more supportive than A"]]}
{"original": ["More( invites their boyfriend(A),  invites their boyfriend(B)), so More(social(A), social(B))", ["A invites their boyfriend more than B, so A is more social than B"]], "negated": ["More( invites their boyfriend(A),  invites their boyfriend(B)), so not Less(social(A), social(B))", ["A invites their boyfriend more than B, so A is not less social than B"]], "asymmetric_premise": ["More( invites their boyfriend(B),  invites their boyfriend(A)), so Less(social(A), social(B))", ["B invites their boyfriend more than A, so A is less social than B"]], "asymmetric_conclusion": ["More( invites their boyfriend(A),  invites their boyfriend(B)), so Less(social(B), social(A))", ["A invites their boyfriend more than B, so B is less social than A"]], "negated_asymmetric_premise": ["More( invites their boyfriend(B),  invites their boyfriend(A)), so not More(social(A), social(B))", ["B invites their boyfriend more than A, so A is not more social than B"]], "negated_asymmetric_conclusion": ["More( invites their boyfriend(A),  invites their boyfriend(B)), so not More(social(B), social(A))", ["A invites their boyfriend more than B, so B is not more social than A"]]}
{"original": ["More( takes another person's wallet(A),  takes another person's wallet(B)), so More(mean(A), mean(B))", ["A takes another person's wallet more than B, so A is more mean than B"]], "negated": ["More( takes another person's wallet(A),  takes another person's wallet(B)), so not Less(mean(A), mean(B))", ["A takes another person's wallet more than B, so A is not less mean than B"]], "asymmetric_premise": ["More( takes another person's wallet(B),  takes another person's wallet(A)), so Less(mean(A), mean(B))", ["B takes another person's wallet more than A, so A is less mean than B"]], "asymmetric_conclusion": ["More( takes another person's wallet(A),  takes another person's wallet(B)), so Less(mean(B), mean(A))", ["A takes another person's wallet more than B, so B is less mean than A"]], "negated_asymmetric_premise": ["More( takes another person's wallet(B),  takes another person's wallet(A)), so not More(mean(A), mean(B))", ["B takes another person's wallet more than A, so A is not more mean than B"]], "negated_asymmetric_conclusion": ["More( takes another person's wallet(A),  takes another person's wallet(B)), so not More(mean(B), mean(A))", ["A takes another person's wallet more than B, so B is not more mean than A"]]}
{"original": ["More( has to go back to work(A),  has to go back to work(B)), so More(responsible(A), responsible(B))", ["A has to go back to work more than B, so A is more responsible than B"]], "negated": ["More( has to go back to work(A),  has to go back to work(B)), so not Less(responsible(A), responsible(B))", ["A has to go back to work more than B, so A is not less responsible than B"]], "asymmetric_premise": ["More( has to go back to work(B),  has to go back to work(A)), so Less(responsible(A), responsible(B))", ["B has to go back to work more than A, so A is less responsible than B"]], "asymmetric_conclusion": ["More( has to go back to work(A),  has to go back to work(B)), so Less(responsible(B), responsible(A))", ["A has to go back to work more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["More( has to go back to work(B),  has to go back to work(A)), so not More(responsible(A), responsible(B))", ["B has to go back to work more than A, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["More( has to go back to work(A),  has to go back to work(B)), so not More(responsible(B), responsible(A))", ["A has to go back to work more than B, so B is not more responsible than A"]]}
{"original": ["More( rolls another person's eyes at another person(A),  rolls another person's eyes at another person(B)), so More(obnoxious(A), obnoxious(B))", ["A rolls another person's eyes more than B, so A is more obnoxious than B"]], "negated": ["More( rolls another person's eyes at another person(A),  rolls another person's eyes at another person(B)), so not Less(obnoxious(A), obnoxious(B))", ["A rolls another person's eyes at another person more than B, so A is not less obnoxious than B"]], "asymmetric_premise": ["More( rolls another person's eyes at another person(B),  rolls another person's eyes at another person(A)), so Less(obnoxious(A), obnoxious(B))", ["B rolls another person's eyes at another person more than A, so A is less obnoxious than B"]], "asymmetric_conclusion": ["More( rolls another person's eyes at another person(A),  rolls another person's eyes at another person(B)), so Less(obnoxious(B), obnoxious(A))", ["A rolls another person's eyes at another person more than B, so B is less obnoxious than A"]], "negated_asymmetric_premise": ["More( rolls another person's eyes at another person(B),  rolls another person's eyes at another person(A)), so not More(obnoxious(A), obnoxious(B))", ["B rolls another person's eyes at another person more than A, so A is not more obnoxious than B"]], "negated_asymmetric_conclusion": ["More( rolls another person's eyes at another person(A),  rolls another person's eyes at another person(B)), so not More(obnoxious(B), obnoxious(A))", ["A rolls another person's eyes at another person more than B, so B is not more obnoxious than A"]]}
{"original": ["More( breaks both of their legs(A),  breaks both of their legs(B)), so More(painfull(A), painfull(B))", ["A breaks both of their legs more than B, so A is more painfull than B"]], "negated": ["More( breaks both of their legs(A),  breaks both of their legs(B)), so not Less(painfull(A), painfull(B))", ["A breaks both of their legs more than B, so A is not less painfull than B"]], "asymmetric_premise": ["More( breaks both of their legs(B),  breaks both of their legs(A)), so Less(painfull(A), painfull(B))", ["B breaks both of their legs more than A, so A is less painfull than B"]], "asymmetric_conclusion": ["More( breaks both of their legs(A),  breaks both of their legs(B)), so Less(painfull(B), painfull(A))", ["A breaks both of their legs more than B, so B is less painfull than A"]], "negated_asymmetric_premise": ["More( breaks both of their legs(B),  breaks both of their legs(A)), so not More(painfull(A), painfull(B))", ["B breaks both of their legs more than A, so A is not more painfull than B"]], "negated_asymmetric_conclusion": ["More( breaks both of their legs(A),  breaks both of their legs(B)), so not More(painfull(B), painfull(A))", ["A breaks both of their legs more than B, so B is not more painfull than A"]]}
{"original": ["More( looks really good(A),  looks really good(B)), so More(charming(A), charming(B))", ["A looks really good while B does not, so A is more charming than B"]], "negated": ["More( looks really good(A),  looks really good(B)), so not Less(charming(A), charming(B))", ["A looks really good while B does not, so A is not less charming than B"]], "asymmetric_premise": ["More( looks really good(B),  looks really good(A)), so Less(charming(A), charming(B))", ["B looks really good while A does not, so A is less charming than B"]], "asymmetric_conclusion": ["More( looks really good(A),  looks really good(B)), so Less(charming(B), charming(A))", ["A looks really good while B does not, so B is less charming than A"]], "negated_asymmetric_premise": ["More( looks really good(B),  looks really good(A)), so not More(charming(A), charming(B))", ["B looks really good while A does not, so A is not more charming than B"]], "negated_asymmetric_conclusion": ["More( looks really good(A),  looks really good(B)), so not More(charming(B), charming(A))", ["A looks really good while B does not, so B is not more charming than A"]]}
{"original": ["More( invites another person to a movie(A),  invites another person to a movie(B)), so More(entertaining(A), entertaining(B))", ["A invites another person to a movie more than B, so A is more entertaining than B"]], "negated": ["More( invites another person to a movie(A),  invites another person to a movie(B)), so not Less(entertaining(A), entertaining(B))", ["A invites another person to a movie more than B, so A is not less entertaining than B"]], "asymmetric_premise": ["More( invites another person to a movie(B),  invites another person to a movie(A)), so Less(entertaining(A), entertaining(B))", ["B invites another person to a movie more than A, so A is less entertaining than B"]], "asymmetric_conclusion": ["More( invites another person to a movie(A),  invites another person to a movie(B)), so Less(entertaining(B), entertaining(A))", ["A invites another person to a movie more than B, so B is less entertaining than A"]], "negated_asymmetric_premise": ["More( invites another person to a movie(B),  invites another person to a movie(A)), so not More(entertaining(A), entertaining(B))", ["B invites another person to a movie more than A, so A is not more entertaining than B"]], "negated_asymmetric_conclusion": ["More( invites another person to a movie(A),  invites another person to a movie(B)), so not More(entertaining(B), entertaining(A))", ["A invites another person to a movie more than B, so B is not more entertaining than A"]]}
{"original": ["More( puts the shirt(A),  puts the shirt(B)), so More(clean(A), clean(B))", ["A puts the shirt on more than B, so A is more clean than B"]], "negated": ["More( puts the shirt(A),  puts the shirt(B)), so not Less(clean(A), clean(B))", ["A puts the shirt on more than B, so A is not less clean than B"]], "asymmetric_premise": ["More( puts the shirt(B),  puts the shirt(A)), so Less(clean(A), clean(B))", ["B puts the shirt more than A, so A is less clean than B"]], "asymmetric_conclusion": ["More( puts the shirt(A),  puts the shirt(B)), so Less(clean(B), clean(A))", ["A puts the shirt on more than B, so B is less clean than A"]], "negated_asymmetric_premise": ["More( puts the shirt(B),  puts the shirt(A)), so not More(clean(A), clean(B))", ["B puts the shirt more than A, so A is not more clean than B"]], "negated_asymmetric_conclusion": ["More( puts the shirt(A),  puts the shirt(B)), so not More(clean(B), clean(A))", ["A puts the shirt on more than B, so B is not more clean than A"]]}
{"original": ["More( has to be taken to the hospital(A),  has to be taken to the hospital(B)), so More(injured(A), injured(B))", ["A has to be taken to the hospital more than B, so A is more injured than B"]], "negated": ["More( has to be taken to the hospital(A),  has to be taken to the hospital(B)), so not Less(injured(A), injured(B))", ["A has to be taken to the hospital more than B, so A is not less injured than B"]], "asymmetric_premise": ["More( has to be taken to the hospital(B),  has to be taken to the hospital(A)), so Less(injured(A), injured(B))", ["B has to be taken to the hospital more than A, so A is less injured than B"]], "asymmetric_conclusion": ["More( has to be taken to the hospital(A),  has to be taken to the hospital(B)), so Less(injured(B), injured(A))", ["A has to be taken to the hospital more than B, so B is less injured than A"]], "negated_asymmetric_premise": ["More( has to be taken to the hospital(B),  has to be taken to the hospital(A)), so not More(injured(A), injured(B))", ["B has to be taken to the hospital more than A, so A is not more injured than B"]], "negated_asymmetric_conclusion": ["More( has to be taken to the hospital(A),  has to be taken to the hospital(B)), so not More(injured(B), injured(A))", ["A has to be taken to the hospital more than B, so B is not more injured than A"]]}
{"original": ["More( tries to hold back(A),  tries to hold back(B)), so More(strong(A), strong(B))", ["A tries to hold back more than B, so A is more strong than B"]], "negated": ["More( tries to hold back(A),  tries to hold back(B)), so not Less(strong(A), strong(B))", ["A tries to hold back more than B, so A is not less strong than B"]], "asymmetric_premise": ["More( tries to hold back(B),  tries to hold back(A)), so Less(strong(A), strong(B))", ["B tries to hold back more than A, so A is less strong than B"]], "asymmetric_conclusion": ["More( tries to hold back(A),  tries to hold back(B)), so Less(strong(B), strong(A))", ["A tries to hold back more than B, so B is less strong than A"]], "negated_asymmetric_premise": ["More( tries to hold back(B),  tries to hold back(A)), so not More(strong(A), strong(B))", ["B tries to hold back more than A, so A is not more strong than B"]], "negated_asymmetric_conclusion": ["More( tries to hold back(A),  tries to hold back(B)), so not More(strong(B), strong(A))", ["A tries to hold back more than B, so B is not more strong than A"]]}
{"original": ["More( sees a doctor(A),  sees a doctor(B)), so More(curios(A), curios(B))", ["A sees a doctor more than B, so A is more curios than B"]], "negated": ["More( sees a doctor(A),  sees a doctor(B)), so not Less(curios(A), curios(B))", ["A sees a doctor more than B, so A is not less curios than B"]], "asymmetric_premise": ["More( sees a doctor(B),  sees a doctor(A)), so Less(curios(A), curios(B))", ["B sees a doctor more than A, so A is less curios than B"]], "asymmetric_conclusion": ["More( sees a doctor(A),  sees a doctor(B)), so Less(curios(B), curios(A))", ["A sees a doctor more than B, so B is less curios than A"]], "negated_asymmetric_premise": ["More( sees a doctor(B),  sees a doctor(A)), so not More(curios(A), curios(B))", ["B sees a doctor more than A, so A is not more curios than B"]], "negated_asymmetric_conclusion": ["More( sees a doctor(A),  sees a doctor(B)), so not More(curios(B), curios(A))", ["A sees a doctor more than B, so B is not more curios than A"]]}
{"original": ["More( finds a snake(A),  finds a snake(B)), so More(adventurous(A), adventurous(B))", ["A finds a snake more than B, so A is more adventurous than B"]], "negated": ["More( finds a snake(A),  finds a snake(B)), so not Less(adventurous(A), adventurous(B))", ["A finds a snake more than B, so A is not less adventurous than B"]], "asymmetric_premise": ["More( finds a snake(B),  finds a snake(A)), so Less(adventurous(A), adventurous(B))", ["B finds a snake more than A, so A is less adventurous than B"]], "asymmetric_conclusion": ["More( finds a snake(A),  finds a snake(B)), so Less(adventurous(B), adventurous(A))", ["A finds a snake more than B, so B is less adventurous than A"]], "negated_asymmetric_premise": ["More( finds a snake(B),  finds a snake(A)), so not More(adventurous(A), adventurous(B))", ["B finds a snake more than A, so A is not more adventurous than B"]], "negated_asymmetric_conclusion": ["More( finds a snake(A),  finds a snake(B)), so not More(adventurous(B), adventurous(A))", ["A finds a snake more than B, so B is not more adventurous than A"]]}
{"original": ["More( puts the cat among the pigeons(A),  puts the cat among the pigeons(B)), so More(a risk taker(A), a risk taker(B))", ["A puts the cat among the pigeons more than B, so A is more a risk taker than B"]], "negated": ["More( puts the cat among the pigeons(A),  puts the cat among the pigeons(B)), so not Less(a risk taker(A), a risk taker(B))", ["A puts the cat among the pigeons more than B, so A is not less a risk taker than B"]], "asymmetric_premise": ["More( puts the cat among the pigeons(B),  puts the cat among the pigeons(A)), so Less(a risk taker(A), a risk taker(B))", ["B puts the cat among the pigeons more than A, so A is less a risk taker than B"]], "asymmetric_conclusion": ["More( puts the cat among the pigeons(A),  puts the cat among the pigeons(B)), so Less(a risk taker(B), a risk taker(A))", ["A puts the cat among the pigeons more than B, so B is less a risk taker than A"]], "negated_asymmetric_premise": ["More( puts the cat among the pigeons(B),  puts the cat among the pigeons(A)), so not More(a risk taker(A), a risk taker(B))", ["B puts the cat among the pigeons more than A, so A is not more a risk taker than B"]], "negated_asymmetric_conclusion": ["More( puts the cat among the pigeons(A),  puts the cat among the pigeons(B)), so not More(a risk taker(B), a risk taker(A))", ["A puts the cat among the pigeons more than B, so B is not more a risk taker than A"]]}
{"original": ["More( likes to cook(A),  likes to cook(B)), so More(a foodie(A), a foodie(B))", ["A likes to cook more than B, so A is more a foodie than B"]], "negated": ["More( likes to cook(A),  likes to cook(B)), so not Less(a foodie(A), a foodie(B))", ["A likes to cook more than B, so A is not less a foodie than B"]], "asymmetric_premise": ["More( likes to cook(B),  likes to cook(A)), so Less(a foodie(A), a foodie(B))", ["B likes to cook more than A, so A is less a foodie than B"]], "asymmetric_conclusion": ["More( likes to cook(A),  likes to cook(B)), so Less(a foodie(B), a foodie(A))", ["A likes to cook more than B, so B is less a foodie than A"]], "negated_asymmetric_premise": ["More( likes to cook(B),  likes to cook(A)), so not More(a foodie(A), a foodie(B))", ["B likes to cook more than A, so A is not more a foodie than B"]], "negated_asymmetric_conclusion": ["More( likes to cook(A),  likes to cook(B)), so not More(a foodie(B), a foodie(A))", ["A likes to cook more than B, so B is not more a foodie than A"]]}
{"original": ["More( maintains another person's authority(A),  maintains another person's authority(B)), so More(respectful(A), respectful(B))", ["A maintains another person's authority more than B, so A is more respectful than B"]], "negated": ["More( maintains another person's authority(A),  maintains another person's authority(B)), so not Less(respectful(A), respectful(B))", ["A maintains another person's authority more than B, so A is not less respectful than B"]], "asymmetric_premise": ["More( maintains another person's authority(B),  maintains another person's authority(A)), so Less(respectful(A), respectful(B))", ["B maintains another person's authority more than A, so A is less respectful than B"]], "asymmetric_conclusion": ["More( maintains another person's authority(A),  maintains another person's authority(B)), so Less(respectful(B), respectful(A))", ["A maintains another person's authority more than B, so B is less respectful than A"]], "negated_asymmetric_premise": ["More( maintains another person's authority(B),  maintains another person's authority(A)), so not More(respectful(A), respectful(B))", ["B maintains another person's authority more than A, so A is not more respectful than B"]], "negated_asymmetric_conclusion": ["More( maintains another person's authority(A),  maintains another person's authority(B)), so not More(respectful(B), respectful(A))", ["A maintains another person's authority more than B, so B is not more respectful than A"]]}
{"original": ["More( tries something else(A),  tries something else(B)), so More(undeterred(A), undeterred(B))", ["A tries something else more than B, so A is more undeterred than B"]], "negated": ["More( tries something else(A),  tries something else(B)), so not Less(undeterred(A), undeterred(B))", ["A tries something else more than B, so A is not less undeterred than B"]], "asymmetric_premise": ["More( tries something else(B),  tries something else(A)), so Less(undeterred(A), undeterred(B))", ["B tries something else more than A, so A is less undeterred than B"]], "asymmetric_conclusion": ["More( tries something else(A),  tries something else(B)), so Less(undeterred(B), undeterred(A))", ["A tries something else more than B, so B is less undeterred than A"]], "negated_asymmetric_premise": ["More( tries something else(B),  tries something else(A)), so not More(undeterred(A), undeterred(B))", ["B tries something else more than A, so A is not more undeterred than B"]], "negated_asymmetric_conclusion": ["More( tries something else(A),  tries something else(B)), so not More(undeterred(B), undeterred(A))", ["A tries something else more than B, so B is not more undeterred than A"]]}
{"original": ["More( builds their house(A),  builds their house(B)), so More(handy(A), handy(B))", ["A builds their house more than B, so A is more handy than B"]], "negated": ["More( builds their house(A),  builds their house(B)), so not Less(handy(A), handy(B))", ["A builds their house more than B, so A is not less handy than B"]], "asymmetric_premise": ["More( builds their house(B),  builds their house(A)), so Less(handy(A), handy(B))", ["B builds their house more than A, so A is less handy than B"]], "asymmetric_conclusion": ["More( builds their house(A),  builds their house(B)), so Less(handy(B), handy(A))", ["A builds their house more than B, so B is less handy than A"]], "negated_asymmetric_premise": ["More( builds their house(B),  builds their house(A)), so not More(handy(A), handy(B))", ["B builds their house more than A, so A is not more handy than B"]], "negated_asymmetric_conclusion": ["More( builds their house(A),  builds their house(B)), so not More(handy(B), handy(A))", ["A builds their house more than B, so B is not more handy than A"]]}
{"original": ["More( would get better(A),  would get better(B)), so More(determined(A), determined(B))", ["A would get better than B, so A is more determined than B"]], "negated": ["More( would get better(A),  would get better(B)), so not Less(determined(A), determined(B))", ["A would get better more than B, so A is not less determined than B"]], "asymmetric_premise": ["More( would get better(B),  would get better(A)), so Less(determined(A), determined(B))", ["B would get better more than A, so A is less determined than B"]], "asymmetric_conclusion": ["More( would get better(A),  would get better(B)), so Less(determined(B), determined(A))", ["A would get better than B, so B is less determined than A"]], "negated_asymmetric_premise": ["More( would get better(B),  would get better(A)), so not More(determined(A), determined(B))", ["B would get better more than A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["More( would get better(A),  would get better(B)), so not More(determined(B), determined(A))", ["A would get better than B, so B is not more determined than A"]]}
{"original": ["More( visits another person's uncle(A),  visits another person's uncle(B)), so More(affectionate(A), affectionate(B))", ["A visits another person's uncle more than B, so A is more affectionate than B"]], "negated": ["More( visits another person's uncle(A),  visits another person's uncle(B)), so not Less(affectionate(A), affectionate(B))", ["A visits another person's uncle more than B, so A is not less affectionate than B"]], "asymmetric_premise": ["More( visits another person's uncle(B),  visits another person's uncle(A)), so Less(affectionate(A), affectionate(B))", ["B visits another person's uncle more than A, so A is less affectionate than B"]], "asymmetric_conclusion": ["More( visits another person's uncle(A),  visits another person's uncle(B)), so Less(affectionate(B), affectionate(A))", ["A visits another person's uncle more than B, so B is less affectionate than A"]], "negated_asymmetric_premise": ["More( visits another person's uncle(B),  visits another person's uncle(A)), so not More(affectionate(A), affectionate(B))", ["B visits another person's uncle more than A, so A is not more affectionate than B"]], "negated_asymmetric_conclusion": ["More( visits another person's uncle(A),  visits another person's uncle(B)), so not More(affectionate(B), affectionate(A))", ["A visits another person's uncle more than B, so B is not more affectionate than A"]]}
{"original": ["More( finds a new place(A),  finds a new place(B)), so More(persistent(A), persistent(B))", ["A finds a new place more than B, so A is more persistent than B"]], "negated": ["More( finds a new place(A),  finds a new place(B)), so not Less(persistent(A), persistent(B))", ["A finds a new place more than B, so A is not less persistent than B"]], "asymmetric_premise": ["More( finds a new place(B),  finds a new place(A)), so Less(persistent(A), persistent(B))", ["B finds a new place more than A, so A is less persistent than B"]], "asymmetric_conclusion": ["More( finds a new place(A),  finds a new place(B)), so Less(persistent(B), persistent(A))", ["A finds a new place more than B, so B is less persistent than A"]], "negated_asymmetric_premise": ["More( finds a new place(B),  finds a new place(A)), so not More(persistent(A), persistent(B))", ["B finds a new place more than A, so A is not more persistent than B"]], "negated_asymmetric_conclusion": ["More( finds a new place(A),  finds a new place(B)), so not More(persistent(B), persistent(A))", ["A finds a new place more than B, so B is not more persistent than A"]]}
{"original": ["More( goes to a party with their friends(A),  goes to a party with their friends(B)), so More(social(A), social(B))", ["A goes to a party with their friends more than B, so A is more social than B"]], "negated": ["More( goes to a party with their friends(A),  goes to a party with their friends(B)), so not Less(social(A), social(B))", ["A goes to a party with their friends more than B, so A is not less social than B"]], "asymmetric_premise": ["More( goes to a party with their friends(B),  goes to a party with their friends(A)), so Less(social(A), social(B))", ["B goes to a party with their friends more than A, so A is less social than B"]], "asymmetric_conclusion": ["More( goes to a party with their friends(A),  goes to a party with their friends(B)), so Less(social(B), social(A))", ["A goes to a party with their friends more than B, so B is less social than A"]], "negated_asymmetric_premise": ["More( goes to a party with their friends(B),  goes to a party with their friends(A)), so not More(social(A), social(B))", ["B goes to a party with their friends more than A, so A is not more social than B"]], "negated_asymmetric_conclusion": ["More( goes to a party with their friends(A),  goes to a party with their friends(B)), so not More(social(B), social(A))", ["A goes to a party with their friends more than B, so B is not more social than A"]]}
{"original": ["More( takes out the trash(A),  takes out the trash(B)), so More(responsible(A), responsible(B))", ["A takes out the trash more than B, so A is more responsible than B"]], "negated": ["More( takes out the trash(A),  takes out the trash(B)), so not Less(responsible(A), responsible(B))", ["A takes out the trash more than B, so A is not less responsible than B"]], "asymmetric_premise": ["More( takes out the trash(B),  takes out the trash(A)), so Less(responsible(A), responsible(B))", ["B takes out the trash more than A, so A is less responsible than B"]], "asymmetric_conclusion": ["More( takes out the trash(A),  takes out the trash(B)), so Less(responsible(B), responsible(A))", ["A takes out the trash more than B, so B is less responsible than A"]], "negated_asymmetric_premise": ["More( takes out the trash(B),  takes out the trash(A)), so not More(responsible(A), responsible(B))", ["B takes out the trash more than A, so A is not more responsible than B"]], "negated_asymmetric_conclusion": ["More( takes out the trash(A),  takes out the trash(B)), so not More(responsible(B), responsible(A))", ["A takes out the trash more than B, so B is not more responsible than A"]]}
{"original": ["More( turns another person's gaze(A),  turns another person's gaze(B)), so More(eyecatching(A), eyecatching(B))", ["A turns another person's gaze more than B, so A is more eyecatching than B"]], "negated": ["More( turns another person's gaze(A),  turns another person's gaze(B)), so not Less(eyecatching(A), eyecatching(B))", ["A turns another person's gaze more than B, so A is not less eyecatching than B"]], "asymmetric_premise": ["More( turns another person's gaze(B),  turns another person's gaze(A)), so Less(eyecatching(A), eyecatching(B))", ["B turns another person's gaze more than A, so A is less eyecatching than B"]], "asymmetric_conclusion": ["More( turns another person's gaze(A),  turns another person's gaze(B)), so Less(eyecatching(B), eyecatching(A))", ["A turns another person's gaze more than B, so B is less eyecatching than A"]], "negated_asymmetric_premise": ["More( turns another person's gaze(B),  turns another person's gaze(A)), so not More(eyecatching(A), eyecatching(B))", ["B turns another person's gaze more than A, so A is not more eyecatching than B"]], "negated_asymmetric_conclusion": ["More( turns another person's gaze(A),  turns another person's gaze(B)), so not More(eyecatching(B), eyecatching(A))", ["A turns another person's gaze more than B, so B is not more eyecatching than A"]]}
{"original": ["More( makes enough money(A),  makes enough money(B)), so More(well off(A), well off(B))", ["A makes enough money while B does not, so A is more well off than B"]], "negated": ["More( makes enough money(A),  makes enough money(B)), so not Less(well off(A), well off(B))", ["A makes enough money more than B, so A is not less well off than B"]], "asymmetric_premise": ["More( makes enough money(B),  makes enough money(A)), so Less(well off(A), well off(B))", ["B makes more money than A, so A is less well off than B"]], "asymmetric_conclusion": ["More( makes enough money(A),  makes enough money(B)), so Less(well off(B), well off(A))", ["A makes enough money while B does not, so B is less well off than A"]], "negated_asymmetric_premise": ["More( makes enough money(B),  makes enough money(A)), so not More(well off(A), well off(B))", ["B makes more money than A, so A is not more well off than B"]], "negated_asymmetric_conclusion": ["More( makes enough money(A),  makes enough money(B)), so not More(well off(B), well off(A))", ["A makes enough money more than B, so B is not more well off than A"]]}
{"original": ["More( calls the police for help(A),  calls the police for help(B)), so More(scared(A), scared(B))", ["A calls the police for help while B does not, so A is more scared than B"]], "negated": ["More( calls the police for help(A),  calls the police for help(B)), so not Less(scared(A), scared(B))", ["A calls the police for help while B does not, so A is not less scared than B"]], "asymmetric_premise": ["More( calls the police for help(B),  calls the police for help(A)), so Less(scared(A), scared(B))", ["B calls the police for help more than A, so A is less scared than B"]], "asymmetric_conclusion": ["More( calls the police for help(A),  calls the police for help(B)), so Less(scared(B), scared(A))", ["A calls the police for help more than B, so B is less scared than A"]], "negated_asymmetric_premise": ["More( calls the police for help(B),  calls the police for help(A)), so not More(scared(A), scared(B))", ["B calls the police for help while A does not, so A is not more scared than B"]], "negated_asymmetric_conclusion": ["More( calls the police for help(A),  calls the police for help(B)), so not More(scared(B), scared(A))", ["A calls the police for help while B does not, so B is not more scared than A"]]}
{"original": ["More( drags another person away(A),  drags another person away(B)), so More(determined(A), determined(B))", ["A drags another person away more than B, so A is more determined than B"]], "negated": ["More( drags another person away(A),  drags another person away(B)), so not Less(determined(A), determined(B))", ["A drags another person away more than B, so A is not less determined than B"]], "asymmetric_premise": ["More( drags another person away(B),  drags another person away(A)), so Less(determined(A), determined(B))", ["B drags another person away more than A, so A is less determined than B"]], "asymmetric_conclusion": ["More( drags another person away(A),  drags another person away(B)), so Less(determined(B), determined(A))", ["A drags another person away more than B, so B is less determined than A"]], "negated_asymmetric_premise": ["More( drags another person away(B),  drags another person away(A)), so not More(determined(A), determined(B))", ["B drags another person away more than A, so A is not more determined than B"]], "negated_asymmetric_conclusion": ["More( drags another person away(A),  drags another person away(B)), so not More(determined(B), determined(A))", ["A drags another person away more than B, so B is not more determined than A"]]}
{"original": ["More( wanders away(A),  wanders away(B)), so More(careless(A), careless(B))", ["A wanders away more than B, so A is more careless than B"]], "negated": ["More( wanders away(A),  wanders away(B)), so not Less(careless(A), careless(B))", ["A wanders away more than B, so A is not less careless than B"]], "asymmetric_premise": ["More( wanders away(B),  wanders away(A)), so Less(careless(A), careless(B))", ["B wanders away more than A, so A is less careless than B"]], "asymmetric_conclusion": ["More( wanders away(A),  wanders away(B)), so Less(careless(B), careless(A))", ["A wanders away more than B, so B is less careless than A"]], "negated_asymmetric_premise": ["More( wanders away(B),  wanders away(A)), so not More(careless(A), careless(B))", ["B wanders away more than A, so A is not more careless than B"]], "negated_asymmetric_conclusion": ["More( wanders away(A),  wanders away(B)), so not More(careless(B), careless(A))", ["A wanders away more than B, so B is not more careless than A"]]}
{"original": ["More( comes home today(A),  comes home today(B)), so More(content(A), content(B))", ["A comes home today more than B, so A is more content than B"]], "negated": ["More( comes home today(A),  comes home today(B)), so not Less(content(A), content(B))", ["A comes home today more than B, so A is not less content than B"]], "asymmetric_premise": ["More( comes home today(B),  comes home today(A)), so Less(content(A), content(B))", ["B comes home today more than A, so A is less content than B"]], "asymmetric_conclusion": ["More( comes home today(A),  comes home today(B)), so Less(content(B), content(A))", ["A comes home today more than B, so B is less content than A"]], "negated_asymmetric_premise": ["More( comes home today(B),  comes home today(A)), so not More(content(A), content(B))", ["B comes home today more than A, so A is not more content than B"]], "negated_asymmetric_conclusion": ["More( comes home today(A),  comes home today(B)), so not More(content(B), content(A))", ["A comes home today more than B, so B is not more content than A"]]}
{"original": ["More( steals the money(A),  steals the money(B)), so More(sinister(A), sinister(B))", ["A steals the money more than B, so A is more sinister than B"]], "negated": ["More( steals the money(A),  steals the money(B)), so not Less(sinister(A), sinister(B))", ["A steals the money more than B, so A is not less sinister than B"]], "asymmetric_premise": ["More( steals the money(B),  steals the money(A)), so Less(sinister(A), sinister(B))", ["B steals the money more than A, so A is less sinister than B"]], "asymmetric_conclusion": ["More( steals the money(A),  steals the money(B)), so Less(sinister(B), sinister(A))", ["A steals the money more than B, so B is less sinister than A"]], "negated_asymmetric_premise": ["More( steals the money(B),  steals the money(A)), so not More(sinister(A), sinister(B))", ["B steals the money more than A, so A is not more sinister than B"]], "negated_asymmetric_conclusion": ["More( steals the money(A),  steals the money(B)), so not More(sinister(B), sinister(A))", ["A steals the money more than B, so B is not more sinister than A"]]}
{"original": ["More( loves to play baseball(A),  loves to play baseball(B)), so More(energetic(A), energetic(B))", ["A loves to play baseball more than B, so A is more energetic than B"]], "negated": ["More( loves to play baseball(A),  loves to play baseball(B)), so not Less(energetic(A), energetic(B))", ["A loves to play baseball more than B, so A is not less energetic than B"]], "asymmetric_premise": ["More( loves to play baseball(B),  loves to play baseball(A)), so Less(energetic(A), energetic(B))", ["B loves to play baseball more than A, so A is less energetic than B"]], "asymmetric_conclusion": ["More( loves to play baseball(A),  loves to play baseball(B)), so Less(energetic(B), energetic(A))", ["A loves to play baseball more than B, so B is less energetic than A"]], "negated_asymmetric_premise": ["More( loves to play baseball(B),  loves to play baseball(A)), so not More(energetic(A), energetic(B))", ["B loves to play baseball more than A, so A is not more energetic than B"]], "negated_asymmetric_conclusion": ["More( loves to play baseball(A),  loves to play baseball(B)), so not More(energetic(B), energetic(A))", ["A loves to play baseball more than B, so B is not more energetic than A"]]}
{"original": ["More( raises chickens(A),  raises chickens(B)), so More(caring(A), caring(B))", ["A raises chickens more than B, so A is more caring than B"]], "negated": ["More( raises chickens(A),  raises chickens(B)), so not Less(caring(A), caring(B))", ["A raises chickens more than B, so A is not less caring than B"]], "asymmetric_premise": ["More( raises chickens(B),  raises chickens(A)), so Less(caring(A), caring(B))", ["B raises chickens more than A, so A is less caring than B"]], "asymmetric_conclusion": ["More( raises chickens(A),  raises chickens(B)), so Less(caring(B), caring(A))", ["A raises chickens more than B, so B is less caring than A"]], "negated_asymmetric_premise": ["More( raises chickens(B),  raises chickens(A)), so not More(caring(A), caring(B))", ["B raises chickens more than A, so A is not more caring than B"]], "negated_asymmetric_conclusion": ["More( raises chickens(A),  raises chickens(B)), so not More(caring(B), caring(A))", ["A raises chickens more than B, so B is not more caring than A"]]}
{"original": ["More( decides to break up with another person(A),  decides to break up with another person(B)), so More(cruel(A), cruel(B))", ["A decides to break up with another person more than B, so A is more cruel than B"]], "negated": ["More( decides to break up with another person(A),  decides to break up with another person(B)), so not Less(cruel(A), cruel(B))", ["A decides to break up with another person more than B, so A is not less cruel than B"]], "asymmetric_premise": ["More( decides to break up with another person(B),  decides to break up with another person(A)), so Less(cruel(A), cruel(B))", ["B decides to break up with another person more than A, so A is less cruel than B"]], "asymmetric_conclusion": ["More( decides to break up with another person(A),  decides to break up with another person(B)), so Less(cruel(B), cruel(A))", ["A decides to break up with another person more than B, so B is less cruel than A"]], "negated_asymmetric_premise": ["More( decides to break up with another person(B),  decides to break up with another person(A)), so not More(cruel(A), cruel(B))", ["B decides to break up with another person more than A, so A is not more cruel than B"]], "negated_asymmetric_conclusion": ["More( decides to break up with another person(A),  decides to break up with another person(B)), so not More(cruel(B), cruel(A))", ["A decides to break up with another person more than B, so B is not more cruel than A"]]}
{"original": ["More(straight(A), straight(B)), so Better(catch football(A), catch football(B))", ["A is more straight than B, so A can catch football better than B."]], "negated": ["More(straight(A), straight(B)), so not Worse(catch football(A), catch football(B))", ["A is more straight than B, so A is not worse at catching football than B"]], "asymmetric_premise": ["More(straight(B), straight(A)), so Worse(catch football(A), catch football(B))", ["B is more straight than A, so A is worse at catching football than B"]], "asymmetric_conclusion": ["More(straight(A), straight(B)), so Aetter(catch football(B), catch football(B))", ["A is more straight than B, so A can catch football more than B"]], "negated_asymmetric_premise": ["More(straight(B), straight(A)), so not Better(catch football(A), catch football(B))", ["B is more straight than A, so A is not better at catching football than B"]], "negated_asymmetric_conclusion": ["More(straight(A), straight(B)), so not Better(catch football(B), catch football(A))", ["A is more straight than B, so B is not better at catching football than A"]]}
{"original": ["More(round(A), round(B)), so Better(store thing(A), store thing(B))", ["A is more round than B, so A is better to store thing than B"]], "negated": ["More(round(A), round(B)), so not Worse(store thing(A), store thing(B))", ["A is more round than B, so A is not worse to store thing than B"]], "asymmetric_premise": ["More(round(B), round(A)), so Worse(store thing(A), store thing(B))", ["B is more round than A, so A is worse to store thing than B"]], "asymmetric_conclusion": ["More(round(A), round(B)), so Aetter(store thing(B), store thing(B))", ["A is round, B is round, so A is more likely to store thing than B"]], "negated_asymmetric_premise": ["More(round(B), round(A)), so not Better(store thing(A), store thing(B))", ["B is more round than A, so A is not better to store thing than B"]], "negated_asymmetric_conclusion": ["More(round(A), round(B)), so not Better(store thing(B), store thing(A))", ["A is more round than B, so B is not better to store thing than A"]]}
{"original": ["More(curved(A), curved(B)), so Better(play game(A), play game(B))", ["A is more curved than B, so A is better to play game than B"]], "negated": ["More(curved(A), curved(B)), so not Worse(play game(A), play game(B))", ["A is more curved than B, so A is not worse to play game than B"]], "asymmetric_premise": ["More(curved(B), curved(A)), so Worse(play game(A), play game(B))", ["B is more curved than A, so A is worse to play game than B"]], "asymmetric_conclusion": ["More(curved(A), curved(B)), so Aetter(play game(B), play game(B))", ["A is more curved than B, so A is more likely to play game than B"]], "negated_asymmetric_premise": ["More(curved(B), curved(A)), so not Better(play game(A), play game(B))", ["B is more curved than A, so A is not better at playing game than B"]], "negated_asymmetric_conclusion": ["More(curved(A), curved(B)), so not Better(play game(B), play game(A))", ["A is more curved than B, so B is not better at playing game than A"]]}
{"original": ["More(curved(A), curved(B)), so Better(cook(A), cook(B))", ["A is more curved than B, so A is better to cook than B"]], "negated": ["More(curved(A), curved(B)), so not Worse(cook(A), cook(B))", ["A is more curved than B, so A is not worse to cook than B"]], "asymmetric_premise": ["More(curved(B), curved(A)), so Worse(cook(A), cook(B))", ["B is more curved than A, so A is worse to cook than B"]], "asymmetric_conclusion": ["More(curved(A), curved(B)), so Aetter(cook(B), cook(B))", ["A is more curved than B, so A is more likely to cook than B"]], "negated_asymmetric_premise": ["More(curved(B), curved(A)), so not Better(cook(A), cook(B))", ["B is more curved than A, so A is not better to cook than B"]], "negated_asymmetric_conclusion": ["More(curved(A), curved(B)), so not Better(cook(B), cook(A))", ["A is more curved than B, so B is not better to cook than A"]]}
